<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>福</title>
  
  <subtitle>业精于勤荒于嬉</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="/"/>
  <updated>2020-02-07T14:12:34.000Z</updated>
  <id>/</id>
  
  <author>
    <name>福</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Activity</title>
    <link href="/2020/02/07/Android/Activity/"/>
    <id>/2020/02/07/Android/Activity/</id>
    <published>2020-02-07T14:12:34.000Z</published>
    <updated>2020-02-07T14:12:34.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关联"><a href="#关联" class="headerlink" title="关联"></a>关联</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// MainActivity.java</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        <span class="comment">// 绑定：res/layout/activity_main.xml</span></span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="手动创建控件"><a href="#手动创建控件" class="headerlink" title="手动创建控件"></a>手动创建控件</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// xml中指定id，最外层Layout也可以指定id</span></span><br><span class="line">LinearLayout linearLayout = <span class="keyword">this</span>.findViewById(R.id.layoutNFC);</span><br><span class="line"><span class="comment">// 创建TextView，并指定控件参数</span></span><br><span class="line">TextView tv = <span class="keyword">new</span> TextView(<span class="keyword">this</span>);</span><br><span class="line">LinearLayout.LayoutParams layoutParams =   <span class="keyword">new</span> LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT, LinearLayout.LayoutParams.WRAP_CONTENT);</span><br><span class="line">tv.setLayoutParams(<span class="keyword">new</span> LinearLayout.LayoutParams(layoutParams));</span><br><span class="line">tv.setText(<span class="string">"asdf"</span>);</span><br><span class="line"><span class="comment">// TextView添加到linearLayout</span></span><br><span class="line">linearLayout.addView(tv);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Activity
    
    </summary>
    
      <category term="Android" scheme="/categories/Android/"/>
    
    
      <category term="Activity" scheme="/tags/Activity/"/>
    
  </entry>
  
  <entry>
    <title>WebView</title>
    <link href="/2020/02/07/Android/%E6%8E%A7%E4%BB%B6/WebView/"/>
    <id>/2020/02/07/Android/控件/WebView/</id>
    <published>2020-02-07T14:12:34.000Z</published>
    <updated>2020-02-07T14:12:34.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--联网权限--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.INTERNET"</span>/&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Activity.java</span></span><br><span class="line">mWebView.setWebViewClient(<span class="keyword">new</span> WebViewClient() &#123;</span><br><span class="line">    <span class="comment">// 设置在webView点击打开的新网页在当前界面显示,而不跳转到新的浏览器中</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldOverrideUrlLoading</span><span class="params">(WebView view, String url)</span> </span>&#123;</span><br><span class="line">        view.loadUrl(url);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 页面加载完成事件</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageFinished</span><span class="params">(WebView view, String url)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置WebView属性,运行执行js脚本</span></span><br><span class="line">mWebView.getSettings().setJavaScriptEnabled(<span class="keyword">true</span>);</span><br><span class="line"><span class="comment">// 调用loadUrl方法为WebView加入链接</span></span><br><span class="line">mWebView.loadUrl(<span class="string">"https://www.baidu.com/"</span>);</span><br></pre></td></tr></table></figure><h2 id="常用API"><a href="#常用API" class="headerlink" title="常用API"></a>常用API</h2><ul><li><code>WebViewClient</code> 常用方法</li><li><code>WebChromeClient</code> 常用方法</li></ul><h3 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h3><ul><li><code>setAllowFileAccess</code> 启用或禁止WebView访问文件数据</li><li><code>setBlockNetworkImage</code> 是否显示网络图像</li><li><code>setBuiltInZoomControls</code> 设置是否支持缩放</li><li><code>setCacheMode</code> 设置缓冲的模式</li><li><code>setDefaultFontSize</code> 设置默认的字体大小</li><li><code>setDefaultTextEncodingName</code> 设置在解码时使用的默认编码</li><li><code>setFixedFontFamily</code> 设置固定使用的字体</li><li><code>setJavaSciptEnabled</code> 设置是否支持Javascript</li><li><code>setLayoutAlgorithm</code> 设置布局方式</li><li><code>setLightTouchEnabled</code> 设置用鼠标激活被选项</li><li><code>setSupportZoom</code> 设置是否支持缩放</li><li><a href="https://www.jianshu.com/p/0d7d429bd216" target="_blank" rel="noopener">WebView控件之WebSettings详解</a></li></ul><h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><ul><li><code>doUpdate</code> VisitedHistory 更新历史记录</li><li><code>onFormResubmission</code> 应用程序重新请求网页数据</li><li><code>onLoadResource</code> 加载指定地址提供的资源</li><li><code>onPageFinished</code> 网页加载完毕</li><li><code>onPageStarted</code> 网页开始加载</li><li><code>onReceivedError</code> 报告错误信息</li><li><code>onScaleChanged</code> WebView发生改变</li><li><code>shouldOverrideUrlLoading</code> 控制新的连接在当前WebView中打开</li><li><code>onCloseWindow</code> 关闭WebView</li><li><code>onCreateWindow</code> 创建WebView</li><li><code>onJsAlert</code> 处理Javascript中的Alert对话框</li><li><code>onJsConfirm</code> 处理Javascript中的Confirm对话框</li><li><code>onJsPrompt</code> 处理Javascript中的Prompt对话框</li><li><code>onProgressChanged</code> 加载进度条改变</li><li><code>onReceivedlcon</code> 网页图标更改</li><li><code>onReceivedTitle</code> 网页Title更改</li><li><code>onRequestFocus</code> WebView显示焦点</li></ul><h2 id="交互"><a href="#交互" class="headerlink" title="交互"></a>交互</h2><p><a href="https://blog.csdn.net/carson_ho/article/details/64904691/" target="_blank" rel="noopener">WebView与JS交互</a></p><h3 id="Android调用JS"><a href="#Android调用JS" class="headerlink" title="Android调用JS"></a>Android调用JS</h3><ul><li>通过WebView的loadUrl（）</li><li>通过WebView的evaluateJavascript（）</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="comment">// 使用安卓注入对象，发送消息到安卓，并接收返回值</span></span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">sendToAndroid</span>(<span class="params">msg</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">"text"</span>).innerHTML = androidObject.send(msg);</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="javascript">  <span class="comment">// 安卓可直接调用JS函数，并反馈</span></span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">androidCall</span>(<span class="params">msg</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">"text"</span>).innerHTML = msg;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> <span class="string">'ok'</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"InWebView!"</span> <span class="attr">onclick</span>=<span class="string">"sendToAndroid('In Android land')"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"text"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 安卓调用JS androidCall函数，并接收返回值</span></span><br><span class="line">mWebView.evaluateJavascript(<span class="string">"javascript:androidCall('androidCall')"</span>, <span class="keyword">new</span> ValueCallback&lt;String&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceiveValue</span><span class="params">(String value)</span> </span>&#123;</span><br><span class="line">        Log.e(<span class="string">"test"</span>, <span class="string">"onReceiveValue: "</span> + value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 注入JS对象，提供JS调用接口</span></span><br><span class="line">mWebView.addJavascriptInterface(<span class="keyword">new</span> Object() &#123;</span><br><span class="line">    <span class="meta">@JavascriptInterface</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">send</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        Log.e(<span class="string">"test"</span>, <span class="string">"js send: "</span> + msg);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"send"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, <span class="string">"androidObject"</span>);</span><br></pre></td></tr></table></figure><h3 id="JS调用Android"><a href="#JS调用Android" class="headerlink" title="JS调用Android"></a>JS调用Android</h3><ul><li>通过<code>WebView</code>的<code>addJavascriptInterface()</code>进行对象映射</li><li>通过<code>WebViewClient</code>的<code>shouldOverrideUrlLoading()</code>方法回调拦截 url</li><li>通过<code>WebChromeClient</code>的<code>onJsAlert()</code>、<code>onJsConfirm()</code>、<code>onJsPrompt()</code>方法回调拦截JS对话框<code>alert()</code>、<code>confirm()</code>、<code>prompt()</code>消息</li></ul>]]></content>
    
    <summary type="html">
    
      WebView
    
    </summary>
    
      <category term="Android" scheme="/categories/Android/"/>
    
    
      <category term="WebView" scheme="/tags/WebView/"/>
    
  </entry>
  
  <entry>
    <title>NFC</title>
    <link href="/2020/02/03/Android/%E7%B3%BB%E7%BB%9F/NFC/"/>
    <id>/2020/02/03/Android/系统/NFC/</id>
    <published>2020-02-03T00:44:37.000Z</published>
    <updated>2020-02-03T00:44:37.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">--AndroidManifest.xml--</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">application</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".MainActivity"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--绑定事件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.nfc.action.TECH_DISCOVERED"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--NFC数据过滤，仅捕获指定数据类型事件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta-data</span></span></span><br><span class="line"><span class="tag">      <span class="attr">android:name</span>=<span class="string">"android.nfc.action.TECH_DISCOVERED"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">android:resource</span>=<span class="string">"@xml/nfc_tech_filter"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--NFC权限--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.NFC"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 声明所依赖的外部的硬件，并指定为必须 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-feature</span> <span class="attr">android:name</span>=<span class="string">"android.hardware.nfc"</span> <span class="attr">android:required</span>=<span class="string">"true"</span> /&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--nfc_tech_filter.xml--&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tech-list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tech</span>&gt;</span>android.nfc.tech.NfcB<span class="tag">&lt;/<span class="name">tech</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tech-list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tech-list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tech</span>&gt;</span>android.nfc.tech.IsoDep<span class="tag">&lt;/<span class="name">tech</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tech-list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">NfcAdapter m_nfcAdapter;</span><br><span class="line">PendingIntent m_nfcPi;</span><br><span class="line">IntentFilter[] m_nfcIfs;</span><br><span class="line">String[][] m_techLists;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    m_nfcAdapter = NfcAdapter.getDefaultAdapter(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> == m_nfcAdapter) &#123;</span><br><span class="line">        m_textDes.setText(<span class="string">"设备不支持NFC功能"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!m_nfcAdapter.isEnabled()) &#123;</span><br><span class="line">        m_textDes.setText(<span class="string">"请先开启设备NFC功能"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        m_textDes.setText(<span class="string">"请放置身份证到设备背面"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 用于页面绑定：仅软件启动时绑定NFC事件</span></span><br><span class="line">    m_nfcPi = PendingIntent.getActivity(<span class="keyword">this</span>, <span class="number">0</span>, <span class="keyword">new</span> Intent(<span class="keyword">this</span>, getClass()).addFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP), PendingIntent.FLAG_UPDATE_CURRENT);</span><br><span class="line">    m_nfcIfs = <span class="keyword">new</span> IntentFilter[]&#123;<span class="keyword">new</span> IntentFilter(NfcAdapter.ACTION_TECH_DISCOVERED)&#125;;</span><br><span class="line">    m_techLists = new String[][]&#123;new String[]&#123;NfcB.class.getName()&#125;, new String[]&#123;IsoDep.class.getName()&#125;&#125;;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onResume</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onResume();</span><br><span class="line">    <span class="keyword">if</span> (m_nfcAdapter != <span class="keyword">null</span>) <span class="comment">// 绑定NFC事件</span></span><br><span class="line">        m_nfcAdapter.enableForegroundDispatch(<span class="keyword">this</span>, m_nfcPi, m_nfcIfs, m_techLists);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPause</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onPause();</span><br><span class="line">    Log.e(<span class="string">"test"</span>, <span class="string">"onPause"</span>);</span><br><span class="line">    <span class="keyword">if</span> (m_nfcAdapter != <span class="keyword">null</span>) <span class="comment">// 解绑NFC</span></span><br><span class="line">        m_nfcAdapter.disableForegroundDispatch(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onNewIntent</span><span class="params">(Intent intent)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onNewIntent(intent);</span><br><span class="line">    <span class="comment">//获取到Tag标签对象</span></span><br><span class="line">    Tag mTag = intent.getParcelableExtra(NfcAdapter.EXTRA_TAG);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        String[] techList = mTag.getTechList();</span><br><span class="line">        Log.w(<span class="string">"test"</span>, <span class="string">"标签支持的tachnology类型："</span>);</span><br><span class="line">        <span class="keyword">for</span> (String tech : techList) &#123;</span><br><span class="line">            Log.w(<span class="string">"test"</span>, tech);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NullPointerException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSetting</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 根据包名打开对应的设置界面：开关NFC位置</span></span><br><span class="line">    Intent intent = <span class="keyword">new</span> Intent(Settings.ACTION_NFC_SETTINGS);</span><br><span class="line">    startActivity(intent);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      NFC
    
    </summary>
    
      <category term="Android" scheme="/categories/Android/"/>
    
    
      <category term="NFC" scheme="/tags/NFC/"/>
    
  </entry>
  
  <entry>
    <title>UI优化</title>
    <link href="/2020/02/02/Android/%E7%95%8C%E9%9D%A2%E7%BE%8E%E5%8C%96/"/>
    <id>/2020/02/02/Android/界面美化/</id>
    <published>2020-02-02T13:22:08.000Z</published>
    <updated>2020-02-02T13:22:08.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="沉浸式状态栏"><a href="#沉浸式状态栏" class="headerlink" title="沉浸式状态栏"></a>沉浸式状态栏</h2><p><a href="https://www.jianshu.com/p/752f4551e134" target="_blank" rel="noopener">沉浸式状态栏</a><br><a href="https://www.jianshu.com/p/035a7e19fd9b" target="_blank" rel="noopener">渐变式状态栏</a></p><ul><li>getWindow().addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);<ul><li>隐藏状态栏 + 全屏</li><li>等价于<code>SYSTEM_UI_FLAG_LAYOUT_STABLE | SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN</code></li><li>也可以在<code>theme</code>中设置属性<code>windowTranslucentStatus</code></li><li>自己绘制状态栏即可</li></ul></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 清除全屏，指定状态栏颜色</span></span><br><span class="line">getWindow().addFlags(WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS);</span><br><span class="line"><span class="comment">//注意要清除 FLAG_TRANSLUCENT_STATUS flag</span></span><br><span class="line">getWindow().clearFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);</span><br><span class="line">getWindow().setStatusBarColor(getResources().getColor(android.R.color.holo_red_light));</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      UI优化
    
    </summary>
    
      <category term="Android" scheme="/categories/Android/"/>
    
    
      <category term="UI优化" scheme="/tags/UI%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>文件</title>
    <link href="/2020/02/02/Windows/%E6%96%87%E4%BB%B6/"/>
    <id>/2020/02/02/Windows/文件/</id>
    <published>2020-02-01T23:19:00.000Z</published>
    <updated>2020-02-01T23:19:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><h3 id="文件拷贝"><a href="#文件拷贝" class="headerlink" title="文件拷贝"></a>文件拷贝</h3><h4 id="强健文件拷贝"><a href="#强健文件拷贝" class="headerlink" title="强健文件拷贝"></a>强健文件拷贝</h4><p><code>robocopy &quot;C:\Users&quot; &quot;D:\Users&quot; /E /COPYALL /XJ /XD &quot;C:\Users\Administrator&quot;</code><br><code>robocopy &quot;C:\Users&quot; &quot;D:\Users&quot; /E /COPYALL /MOVE</code></p><ul><li>/E 表示拷贝文件时包含子目录（包括空目录）</li><li>/S 复制子目录，但不复制空的子目录。</li><li>/COPYALL 表示拷贝所有文件信息</li><li>/XJ 表示不包括Junction points（默认是包括的）</li><li>/XD 表示不包括指定的目录，此处指定目录为”C:\Users\Administrator”</li><li>/MOVE 表示移动</li></ul><figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">:: 复制指定文件，支持通配符</span><br><span class="line">robocopy d:\work e:\back *.txt *.doc *.bmp *.tif /e</span><br><span class="line">:: 只复制两级目录</span><br><span class="line">robocopy d:\work e:\back /e /lev:<span class="number">2</span></span><br><span class="line">:: 不包含指定类型文件</span><br><span class="line">robocopy d:\work e:\back /e /xf *.tmp *.bak</span><br><span class="line">:: 大文件限制，单位byte</span><br><span class="line">robocopy d:\work e:\back /e /max:<span class="number">6000000</span></span><br><span class="line">:: 日期限制：<span class="number">1</span>天&lt;修改日期&lt;<span class="number">7</span>天，也可以用YYYYMMDD来表示具体的日期</span><br><span class="line">robocopy d:\work e:\look /s *.txt *.doc *.xls *.ppt /maxage:<span class="number">7</span> /minage:<span class="number">1</span></span><br><span class="line"></span><br><span class="line">:: 完全克隆：删除源目录不存在的文件</span><br><span class="line">robcopy d:\work e:\look /mir</span><br><span class="line"></span><br><span class="line">:: 监视，自动备份。每<span class="number">1</span>分钟检查一次，被修改的次数&gt;=<span class="number">2</span>才备份</span><br><span class="line">robocopy d:\work e:\back/e /copyall /mot:<span class="number">1</span> /mon:<span class="number">2</span></span><br></pre></td></tr></table></figure><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p>删除指定目录：<code>rmdir /s /q E:\test</code></p><ul><li>/S 删除指定目录及其中的所有文件,用于删除目录树。</li><li>/Q 安静模式。删除时不询问。`</li></ul><h4 id="顽固文件强删除"><a href="#顽固文件强删除" class="headerlink" title="顽固文件强删除"></a>顽固文件强删除</h4><figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">:: 新建bat文件，然后把文件/文件夹拖到bat即可</span><br><span class="line"><span class="built_in">DEL</span> /F /A /Q \\?\%<span class="number">1</span></span><br><span class="line"><span class="built_in">RD</span> /S /Q \\?\%<span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="硬链接"><a href="#硬链接" class="headerlink" title="硬链接"></a>硬链接</h2><p><code>mklink /D &quot;C:\Users&quot; &quot;D:\Users&quot;</code></p><ul><li>/D 符号链接</li><li>/J 软连接</li><li>目标位置”C:\Users”必须不存在</li></ul>]]></content>
    
    <summary type="html">
    
      文件
    
    </summary>
    
      <category term="windows" scheme="/categories/windows/"/>
    
    
      <category term="文件" scheme="/tags/%E6%96%87%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>基础</title>
    <link href="/2020/02/01/Android/%E5%9F%BA%E7%A1%80/"/>
    <id>/2020/02/01/Android/基础/</id>
    <published>2020-02-01T13:22:08.000Z</published>
    <updated>2020-02-01T13:22:08.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul><li><a href="https://developer.android.google.cn/" target="_blank" rel="noopener">官网</a>下载安装包</li><li>新建工程，下载默认gradle</li></ul><h3 id="gradle"><a href="#gradle" class="headerlink" title="gradle"></a>gradle</h3><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 依赖包下载镜像</span></span><br><span class="line"><span class="keyword">allprojects</span> &#123;</span><br><span class="line">  <span class="keyword">repositories</span> &#123;</span><br><span class="line">    mavenCentral()</span><br><span class="line">    jcenter()</span><br><span class="line">    google()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://services.gradle.org/distributions/" target="_blank" rel="noopener">gradle手动下载路径</a></p><ul><li>打开项目的时候有时候会卡在”refreshing gradle project”</li><li>打开工程文件”gradle\wrapper\gradle-wrapper.properties”, 里面指明了gradle的版本</li><li>本地路径<code>C:\Users\lfx\.gradle\wrapper\dists\gradle-5.4.1-all\3221gyojl5jsh0helicew7rwx</code><ul><li>gradle-5.4.1-all.zip</li><li>gradle-5.4.1<ul><li>bin</li><li>docs</li><li>lib</li><li>samples</li><li>getting-started.html</li><li>…</li></ul></li></ul></li></ul><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><ul><li>旧工程，建议先升级gradle版本号为最新<ul><li>避免下载半天包下载完了编译失败</li></ul></li><li>gradle版本号: 工程编译失败时，通常都是gradle配置问题<ul><li>新建一个空工程</li><li>确认build.gradle配置内容</li><li>确认gradle\wrapper\gradle-wrapper.properties</li></ul></li><li>备注<ul><li>build.gradle中的版本：gradle插件版本</li><li>gradle-wrapper.properties中的版本：才是gradle版本</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      基础
    
    </summary>
    
      <category term="Android" scheme="/categories/Android/"/>
    
    
      <category term="基础" scheme="/tags/%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>网络</title>
    <link href="/2020/01/16/Windows/%E7%BD%91%E7%BB%9C/"/>
    <id>/2020/01/16/Windows/网络/</id>
    <published>2020-01-16T03:55:32.000Z</published>
    <updated>2020-01-16T03:55:32.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="网络联通"><a href="#网络联通" class="headerlink" title="网络联通"></a>网络联通</h2><figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">:: 获取IP已经网络状况</span><br><span class="line"><span class="built_in">ping</span> www.baidu.com</span><br><span class="line">:: 路由跟踪,用于确定IP数据包访问目标时所选择的路径</span><br><span class="line">tracert <span class="number">139</span>.<span class="number">224</span>.<span class="number">170</span>.<span class="number">31</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      网络
    
    </summary>
    
      <category term="windows" scheme="/categories/windows/"/>
    
    
      <category term="网络" scheme="/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>命令行</title>
    <link href="/2020/01/06/Python/%E7%B3%BB%E7%BB%9F/%E5%91%BD%E4%BB%A4%E8%A1%8C/"/>
    <id>/2020/01/06/Python/系统/命令行/</id>
    <published>2020-01-06T09:21:03.000Z</published>
    <updated>2020-01-06T09:21:03.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CMD交互"><a href="#CMD交互" class="headerlink" title="CMD交互"></a>CMD交互</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding:gbk -*-</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_cmd</span><span class="params">(cmd, path=None)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> cmd:</span><br><span class="line">        eslogger.info(<span class="string">'your cmd is null'</span>)</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'Your cmd is null'</span></span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">'exec'</span>: <span class="literal">False</span>, <span class="string">'data'</span>: <span class="literal">None</span>&#125;</span><br><span class="line">    work_path = os.getcwd()</span><br><span class="line">    cmd += <span class="string">" 2&gt;&amp;1"</span></span><br><span class="line">    <span class="keyword">if</span> path:</span><br><span class="line">        os.chdir(path)</span><br><span class="line">    p_cmd = os.popen(cmd)</span><br><span class="line">    data = p_cmd.read()</span><br><span class="line">    is_success = p_cmd.close()</span><br><span class="line">    os.chdir(work_path)</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">'exec'</span>: is_success, <span class="string">'data'</span>: data&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    re = run_cmd(<span class="string">"dir"</span>)</span><br><span class="line">    <span class="keyword">print</span> re[<span class="string">'exec'</span>]</span><br><span class="line">    <span class="keyword">print</span> re[<span class="string">'data'</span>]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      命令行
    
    </summary>
    
      <category term="Python" scheme="/categories/Python/"/>
    
    
      <category term="命令行" scheme="/tags/%E5%91%BD%E4%BB%A4%E8%A1%8C/"/>
    
  </entry>
  
  <entry>
    <title>防火墙</title>
    <link href="/2020/01/06/Windows/%E9%98%B2%E7%81%AB%E5%A2%99/"/>
    <id>/2020/01/06/Windows/防火墙/</id>
    <published>2020-01-06T07:37:09.000Z</published>
    <updated>2020-01-06T07:37:09.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Windows防火墙命令行"><a href="#Windows防火墙命令行" class="headerlink" title="Windows防火墙命令行"></a>Windows防火墙命令行</h2><figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">::开启服务</span><br><span class="line"><span class="built_in">net</span> <span class="built_in">start</span> MpsSvc</span><br><span class="line"></span><br><span class="line">::开机启动</span><br><span class="line">sc config MpsSvc <span class="built_in">start</span>= auto</span><br><span class="line"></span><br><span class="line">::启用/禁用防火墙</span><br><span class="line">netsh advfirewall <span class="built_in">set</span> allprofiles state on|off</span><br><span class="line">:: <span class="built_in">set</span> global     - 设置全局属性。</span><br><span class="line">:: <span class="built_in">set</span> allprofiles - 在所有配置文件中设置属性。</span><br><span class="line">:: <span class="built_in">set</span> currentprofile - 在活动配置文件中设置属性。</span><br><span class="line">:: <span class="built_in">set</span> domainprofile - 在域配置文件中设置属性。</span><br><span class="line">:: <span class="built_in">set</span> privateprofile - 在专用配置文件中设置属性。</span><br><span class="line">:: <span class="built_in">set</span> publicprofile - 在公用配置文件中设置属性。</span><br><span class="line"></span><br><span class="line">:: 添加规则 - action: allow(放行)|block(拦截)</span><br><span class="line">:: add(添加新项)|delete(删除)|<span class="built_in">set</span>(修改现有项)|show(显示)</span><br><span class="line">netsh advfirewall firewall add rule name="HTTP" protocol=TCP <span class="built_in">dir</span>=<span class="keyword">in</span> localport=<span class="number">80</span> action=allow</span><br><span class="line">:: 端口段 - localport=<span class="number">111</span>-<span class="number">222</span></span><br><span class="line"></span><br><span class="line">:: 使用说明</span><br><span class="line">netsh advfirewall firewall add rule <span class="built_in">help</span></span><br><span class="line">netsh advfirewall firewall <span class="built_in">set</span> rule <span class="built_in">help</span></span><br><span class="line"></span><br><span class="line">:: 查看</span><br><span class="line">netsh advfirewall firewall show rule name="HTTP" <span class="built_in">dir</span>=<span class="keyword">in</span></span><br></pre></td></tr></table></figure><h3 id="远程桌面"><a href="#远程桌面" class="headerlink" title="远程桌面"></a>远程桌面</h3><figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line">::开启服务</span><br><span class="line"><span class="built_in">net</span> <span class="built_in">start</span> SessionEnv</span><br><span class="line"><span class="built_in">net</span> <span class="built_in">start</span> TermService</span><br><span class="line">::开机手动启动</span><br><span class="line">::sc config SessionEnv <span class="built_in">start</span>=demand</span><br><span class="line">::sc config TermService <span class="built_in">start</span>=demand</span><br><span class="line">:: 启用远程桌面连接 - 重启生效</span><br><span class="line">REG ADD "HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server" /v fDenyTSConnections /t REG_DWORD /d <span class="number">0</span> /f</span><br><span class="line">::开启<span class="number">3389</span>端口</span><br><span class="line">netsh advfirewall firewall add rule name="Remote Desktop" protocol=TCP <span class="built_in">dir</span>=<span class="keyword">in</span> localport=<span class="number">3389</span> action=allow</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      防火墙
    
    </summary>
    
      <category term="windows" scheme="/categories/windows/"/>
    
    
      <category term="防火墙" scheme="/tags/%E9%98%B2%E7%81%AB%E5%A2%99/"/>
    
  </entry>
  
  <entry>
    <title>服务</title>
    <link href="/2020/01/06/Windows/%E6%9C%8D%E5%8A%A1/"/>
    <id>/2020/01/06/Windows/服务/</id>
    <published>2020-01-06T05:36:58.000Z</published>
    <updated>2020-01-06T05:36:58.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Windows服务命令行"><a href="#Windows服务命令行" class="headerlink" title="Windows服务命令行"></a>Windows服务命令行</h2><figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">:: <span class="built_in">net</span> 开/关, 仅支持未禁止的服务</span><br><span class="line"><span class="built_in">net</span> <span class="built_in">start</span> 服务名</span><br><span class="line"><span class="built_in">net</span> stop 服务名</span><br></pre></td></tr></table></figure><figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">:: SC 指令</span><br><span class="line">:: 调整启动形式：手动 | 自动 | 禁用</span><br><span class="line">sc config 服务名 <span class="built_in">start</span>=demand</span><br><span class="line">sc config 服务名 <span class="built_in">start</span>=auto</span><br><span class="line">sc config 服务名 <span class="built_in">start</span>=disabled</span><br><span class="line">:: 开/关</span><br><span class="line">sc <span class="built_in">start</span> 服务名</span><br><span class="line">sc stop 服务名</span><br><span class="line">sc query 服务名</span><br><span class="line">sc delete 服务名</span><br><span class="line">sc qc 服务名</span><br><span class="line">:: 创建服务</span><br><span class="line">sc create 服务名 binPath=xxx.exe</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      服务
    
    </summary>
    
      <category term="windows" scheme="/categories/windows/"/>
    
    
      <category term="服务" scheme="/tags/%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>文件</title>
    <link href="/2020/01/04/VC/%E6%96%87%E4%BB%B6/"/>
    <id>/2020/01/04/VC/文件/</id>
    <published>2020-01-04T07:56:13.000Z</published>
    <updated>2020-01-04T07:56:13.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><ul><li><a href="https://github.com/fxliu/VCDemo/tree/master/File/Log" target="_blank" rel="noopener">内存日志</a></li><li><a href="https://github.com/fxliu/VCDemo/tree/master/NET/ProductUpdate/module/Log" target="_blank" rel="noopener">日志模块</a></li></ul>]]></content>
    
    <summary type="html">
    
      文件
    
    </summary>
    
      <category term="VC" scheme="/categories/VC/"/>
    
    
      <category term="文件" scheme="/tags/%E6%96%87%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>USBHID</title>
    <link href="/2019/12/23/VCSystem/USBHID/"/>
    <id>/2019/12/23/VCSystem/USBHID/</id>
    <published>2019-12-23T10:32:50.000Z</published>
    <updated>2019-12-23T10:32:50.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><ul><li>抓包工具：<code>Bus Hound</code></li><li>开源封装：<a href="https://github.com/libusb/libusb" target="_blank" rel="noopener">libusb</a></li></ul><h2 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">BOOL CMyUsbHid::Init()</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (m_devHandle)</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">  <span class="function">CriticalSectionManager <span class="title">csm</span><span class="params">(m_cs)</span></span>;</span><br><span class="line">  CUsbHidConfig cfg;</span><br><span class="line">  m_vid = <span class="number">0x0400</span>;     <span class="comment">// 未知的话，可以使用遍历函数，遍历所有</span></span><br><span class="line">  m_pid = <span class="number">0x9666</span>;</span><br><span class="line">  <span class="keyword">if</span> (libusb_init(<span class="literal">NULL</span>) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    LOG_HID_ERROR(TEXT(<span class="string">"SDK初始化失败"</span>));</span><br><span class="line">    <span class="keyword">return</span> FALSE;</span><br><span class="line">  &#125;</span><br><span class="line">  m_devHandle = libusb_open_device_with_vid_pid(<span class="literal">NULL</span>, m_vid, m_pid);</span><br><span class="line">  <span class="keyword">if</span> (m_devHandle == <span class="literal">NULL</span>) &#123;</span><br><span class="line">    LOG_HID_ERROR(TEXT(<span class="string">"设备连接失败"</span>));</span><br><span class="line">    libusb_exit(<span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">return</span> FALSE;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (!IsModule())</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> (libusb_set_configuration(m_devHandle, <span class="number">1</span>) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">      LOG_HID_ERROR(TEXT(<span class="string">"设备配置失败"</span>));</span><br><span class="line">      libusb_exit(<span class="literal">NULL</span>);</span><br><span class="line">      <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (libusb_claim_interface(m_devHandle, <span class="number">0</span>) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">      LOG_HID_ERROR(TEXT(<span class="string">"设备接口打开失败"</span>));</span><br><span class="line">      libusb_exit(<span class="literal">NULL</span>);</span><br><span class="line">      <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//PrintInfo();</span></span><br><span class="line">  <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line">BOOL CMyUsbHid::CheckInit()</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> m_devHandle != <span class="literal">NULL</span>;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">void</span> CMyUsbHid::Release()</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (m_devHandle)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="function">CriticalSectionManager <span class="title">csm</span><span class="params">(m_cs)</span></span>;</span><br><span class="line">    libusb_close(m_devHandle);</span><br><span class="line">    libusb_exit(<span class="literal">NULL</span>);</span><br><span class="line">    m_devHandle = <span class="literal">NULL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> CMyUsbHid::PrintInfo()</span><br><span class="line">&#123;</span><br><span class="line">  libusb_device *dev = libusb_get_device(m_devHandle);</span><br><span class="line">  <span class="comment">// 读取设备属性 Device properties</span></span><br><span class="line">  <span class="keyword">uint8_t</span> bus = libusb_get_bus_number(dev);</span><br><span class="line">  <span class="keyword">uint8_t</span> port_path[<span class="number">8</span>];</span><br><span class="line">  <span class="keyword">int</span> port_numbers = libusb_get_port_numbers(dev, port_path, <span class="keyword">sizeof</span>(port_path));</span><br><span class="line">  <span class="keyword">if</span> (port_numbers &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    LOG_HID_DEBUG(TEXT(<span class="string">"Device properties:"</span>));</span><br><span class="line">    LOG_HID_DEBUG(TEXT(<span class="string">"\tbus number: %d"</span>), bus);</span><br><span class="line">    CString strPortPath;</span><br><span class="line">    strPortPath.Format(TEXT(<span class="string">"\tport path: %d"</span>), port_path[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; port_numbers; i++) &#123;</span><br><span class="line">      CString strTmp;</span><br><span class="line">      strTmp.Format(TEXT(<span class="string">"-&gt;%d"</span>), port_path[i]);</span><br><span class="line">      strPortPath += strTmp;</span><br><span class="line">    &#125;</span><br><span class="line">    LOG_HID_DEBUG(strPortPath);</span><br><span class="line">    <span class="comment">//LOG_HID_DEBUG(TEXT(" (from root hub)"));</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">int</span> speed = libusb_get_device_speed(dev);</span><br><span class="line">  <span class="keyword">if</span> ((speed &lt; <span class="number">0</span>) || (speed &gt; <span class="number">4</span>))</span><br><span class="line">    speed = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">static</span> TCHAR *speed_name[<span class="number">5</span>] = &#123; <span class="string">L"Unknown"</span>, <span class="string">L"1.5 Mbit/s (USB LowSpeed)"</span>, <span class="string">L"12 Mbit/s (USB FullSpeed)"</span>,</span><br><span class="line">    <span class="string">L"480 Mbit/s (USB HighSpeed)"</span>, <span class="string">L"5000 Mbit/s (USB SuperSpeed)"</span> &#125;;</span><br><span class="line">  LOG_HID_DEBUG(<span class="string">L"\tspeed: %s"</span>, speed_name[speed]);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 读取设备描述 Reading device descriptor</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">libusb_device_descriptor</span> <span class="title">dev_desc</span>;</span></span><br><span class="line">  <span class="keyword">if</span> (libusb_get_device_descriptor(dev, &amp;dev_desc) &gt;= <span class="number">0</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    LOG_HID_DEBUG(TEXT(<span class="string">"Reading device descriptor:"</span>));</span><br><span class="line">    LOG_HID_DEBUG(<span class="string">L"\tlength: %d"</span>, dev_desc.bLength);</span><br><span class="line">    LOG_HID_DEBUG(<span class="string">L"\tdevice class: %d"</span>, dev_desc.bDeviceClass);</span><br><span class="line">    LOG_HID_DEBUG(<span class="string">L"\tS/N: %d"</span>, dev_desc.iSerialNumber);</span><br><span class="line">    LOG_HID_DEBUG(<span class="string">L"\tVID:PID: %04X:%04X"</span>, dev_desc.idVendor, dev_desc.idProduct);</span><br><span class="line">    LOG_HID_DEBUG(<span class="string">L"\tbcdDevice: %04X"</span>, dev_desc.bcdDevice);</span><br><span class="line">    LOG_HID_DEBUG(<span class="string">L"\tiMan:iProd:iSer: %d:%d:%d"</span>, dev_desc.iManufacturer, dev_desc.iProduct, dev_desc.iSerialNumber);</span><br><span class="line">    LOG_HID_DEBUG(<span class="string">L"\tnb confs: %d"</span>, dev_desc.bNumConfigurations);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 读取配置描述 Reading configuration descriptor</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">libusb_config_descriptor</span> *<span class="title">conf_desc</span>;</span></span><br><span class="line">  <span class="keyword">if</span> (libusb_get_config_descriptor(dev, <span class="number">0</span>, &amp;conf_desc) &gt;= <span class="number">0</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">uint8_t</span> nb_ifaces = conf_desc-&gt;bNumInterfaces;</span><br><span class="line">    LOG_HID_DEBUG(<span class="string">L"\tnb interfaces : %d"</span>, nb_ifaces);</span><br><span class="line">    LOG_HID_DEBUG(<span class="string">L"\tMaxPower : %d (milliamps)"</span>, (conf_desc-&gt;MaxPower) * <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">uint8_t</span> endpoint_in = <span class="number">0</span>, endpoint_out = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nb_ifaces; i++) &#123;</span><br><span class="line">      LOG_HID_DEBUG(<span class="string">L"\tinterface[%d]: id = %d"</span>, i, conf_desc-&gt;interface[i].altsetting[<span class="number">0</span>].bInterfaceNumber);</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; conf_desc-&gt;interface[i].num_altsetting; j++) &#123;</span><br><span class="line">        LOG_HID_DEBUG(<span class="string">L"\t\tinterface[%d].altsetting[%d]: num endpoints = %d"</span>,</span><br><span class="line">          i, j, conf_desc-&gt;interface[i].altsetting[j].bNumEndpoints);</span><br><span class="line">        LOG_HID_DEBUG(<span class="string">L"\t\tClass.SubClass.Protocol: %02X.%02X.%02X"</span>,</span><br><span class="line">          conf_desc-&gt;interface[i].altsetting[j].bInterfaceClass,</span><br><span class="line">          conf_desc-&gt;interface[i].altsetting[j].bInterfaceSubClass,</span><br><span class="line">          conf_desc-&gt;interface[i].altsetting[j].bInterfaceProtocol);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ((conf_desc-&gt;interface[i].altsetting[j].bInterfaceClass == LIBUSB_CLASS_MASS_STORAGE)</span><br><span class="line">          &amp;&amp; ((conf_desc-&gt;interface[i].altsetting[j].bInterfaceSubClass == <span class="number">0x01</span>)</span><br><span class="line">            || (conf_desc-&gt;interface[i].altsetting[j].bInterfaceSubClass == <span class="number">0x06</span>))</span><br><span class="line">          &amp;&amp; (conf_desc-&gt;interface[i].altsetting[j].bInterfaceProtocol == <span class="number">0x50</span>)) &#123;</span><br><span class="line">          <span class="comment">// Mass storage devices that can use basic SCSI commands</span></span><br><span class="line">          test_mode = USE_SCSI;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; conf_desc-&gt;interface[i].altsetting[j].bNumEndpoints; k++) &#123;</span><br><span class="line">          <span class="class"><span class="keyword">struct</span> <span class="title">libusb_ss_endpoint_companion_descriptor</span> *<span class="title">ep_comp</span> = <span class="title">NULL</span>;</span></span><br><span class="line">          <span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">libusb_endpoint_descriptor</span> *<span class="title">endpoint</span>;</span></span><br><span class="line">          endpoint = &amp;conf_desc-&gt;interface[i].altsetting[j].endpoint[k];</span><br><span class="line">          LOG_HID_DEBUG(<span class="string">L"\t\tendpoint[%d].address: %02X"</span>, k, endpoint-&gt;bEndpointAddress);</span><br><span class="line"></span><br><span class="line">          <span class="comment">// Use the first interrupt or bulk IN/OUT endpoints as default for testing</span></span><br><span class="line">          <span class="keyword">if</span> ((endpoint-&gt;bmAttributes &amp; LIBUSB_TRANSFER_TYPE_MASK) &amp; (LIBUSB_TRANSFER_TYPE_BULK | LIBUSB_TRANSFER_TYPE_INTERRUPT)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (endpoint-&gt;bEndpointAddress &amp; LIBUSB_ENDPOINT_IN) &#123;</span><br><span class="line">              <span class="keyword">if</span> (!endpoint_in)</span><br><span class="line">                endpoint_in = endpoint-&gt;bEndpointAddress;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">              <span class="keyword">if</span> (!endpoint_out)</span><br><span class="line">                endpoint_out = endpoint-&gt;bEndpointAddress;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (!((endpoint-&gt;bmAttributes &amp; LIBUSB_TRANSFER_TYPE_MASK) ^ (LIBUSB_TRANSFER_TYPE_BULK))) &#123;</span><br><span class="line">            LOG_HID_DEBUG(<span class="string">L"\t\ttransfer type: %s"</span>, <span class="string">L"bulk"</span>);</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (!((endpoint-&gt;bmAttributes &amp; LIBUSB_TRANSFER_TYPE_MASK) ^ (LIBUSB_TRANSFER_TYPE_INTERRUPT))) &#123;</span><br><span class="line">            LOG_HID_DEBUG(<span class="string">L"\t\ttransfer type: %s"</span>, <span class="string">L"interrupt"</span>);</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (!((endpoint-&gt;bmAttributes &amp; LIBUSB_TRANSFER_TYPE_MASK) ^ (LIBUSB_TRANSFER_TYPE_ISOCHRONOUS))) &#123;</span><br><span class="line">            LOG_HID_DEBUG(<span class="string">L"\t\ttransfer type: %s"</span>, <span class="string">L"isochronous"</span>);</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          LOG_HID_DEBUG(<span class="string">L"\t\tmax packet size: %04X"</span>, endpoint-&gt;wMaxPacketSize);</span><br><span class="line">          LOG_HID_DEBUG(<span class="string">L"\t\tpolling interval: %02X"</span>, endpoint-&gt;bInterval);</span><br><span class="line"></span><br><span class="line">          libusb_get_ss_endpoint_companion_descriptor(<span class="literal">NULL</span>, endpoint, &amp;ep_comp);</span><br><span class="line">          <span class="keyword">if</span> (ep_comp) &#123;</span><br><span class="line">            LOG_HID_DEBUG(<span class="string">L"\t\tmax burst: %02X   (USB 3.0)"</span>, ep_comp-&gt;bMaxBurst);</span><br><span class="line">            LOG_HID_DEBUG(<span class="string">L"\t\t  bytes per interval: %04X (USB 3.0)"</span>, ep_comp-&gt;wBytesPerInterval);</span><br><span class="line">            libusb_free_ss_endpoint_companion_descriptor(ep_comp);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// LOG_HID_DEBUG(L"----------------------------------------------");</span></span><br><span class="line">    <span class="comment">// for (int iface = 0; iface &lt; nb_ifaces; iface++)</span></span><br><span class="line">    <span class="comment">// &#123;</span></span><br><span class="line">    <span class="comment">//   LOG_HID_DEBUG(L"Claiming interface %d...", iface);</span></span><br><span class="line">    <span class="comment">//   int r = libusb_claim_interface(m_devHandle, iface);</span></span><br><span class="line">    <span class="comment">//   if (r != LIBUSB_SUCCESS) &#123;</span></span><br><span class="line">    <span class="comment">//     LOG_HID_DEBUG(L"libusb_set_auto_detach_kernel_driver Failed.");</span></span><br><span class="line">    <span class="comment">//   &#125;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">  &#125;</span><br><span class="line">  libusb_free_config_descriptor(conf_desc);</span><br><span class="line">  libusb_set_auto_detach_kernel_driver(m_devHandle, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 命令字方式读取</span></span><br><span class="line"><span class="keyword">int</span> CMyUsbHid::ReadModule(<span class="keyword">unsigned</span> <span class="keyword">char</span>* szData)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 指令</span></span><br><span class="line">  <span class="keyword">uint8_t</span> request_type = <span class="number">0xA1</span>;  <span class="comment">// 161</span></span><br><span class="line">  <span class="keyword">uint8_t</span> bRequest = <span class="number">0x01</span>;</span><br><span class="line">  <span class="keyword">uint16_t</span> wValue = <span class="number">0x0100</span>;     <span class="comment">// 256</span></span><br><span class="line">  <span class="keyword">uint16_t</span> wIndex = <span class="number">0x0000</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">CriticalSectionManager <span class="title">csm</span><span class="params">(m_cs)</span></span>;</span><br><span class="line">  <span class="keyword">return</span> libusb_control_transfer(m_devHandle, request_type, bRequest, wValue, wIndex, szData, <span class="number">64</span>, <span class="number">500</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span>* CMyUsbHid::Read(<span class="keyword">int</span> &amp;len)</span><br><span class="line">&#123;</span><br><span class="line">  ZeroMemory(m_szData, <span class="keyword">sizeof</span>(m_szData));</span><br><span class="line">  <span class="comment">// <span class="doctag">TODO:</span> 在此添加控件通知处理程序代码</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">char</span> epIn = <span class="number">0x84</span>;  <span class="comment">// 常规读终端地址, 可查询接口属性获取 endpoint_in</span></span><br><span class="line">  <span class="keyword">int</span> packLen = <span class="number">0x0040</span>;       <span class="comment">// 64，包长度</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">char</span> *szTmp = m_szData;</span><br><span class="line">  <span class="keyword">while</span> (TRUE)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> (!m_devHandle)</span><br><span class="line">    &#123;</span><br><span class="line">      len = <span class="number">-1</span>;</span><br><span class="line">      LOG_HID_ERROR(<span class="string">L"单片机读失败: need init"</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// transfer type: interrupt</span></span><br><span class="line">    <span class="keyword">int</span> tmpLen = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> re = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (IsModule())</span><br><span class="line">      re = tmpLen = ReadModule(szTmp);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      re = libusb_interrupt_transfer(m_devHandle, epIn, szTmp, packLen, &amp;tmpLen, <span class="number">500</span>);</span><br><span class="line">    <span class="comment">// transfer type: bulk</span></span><br><span class="line">    <span class="comment">//int re = libusb_interrupt_transfer(m_devHandle, epIn, szTmp, packLen, &amp;tmpLen, 2000);</span></span><br><span class="line">    <span class="keyword">if</span> (re &lt; <span class="number">0</span> &amp;&amp; re != LIBUSB_ERROR_TIMEOUT) &#123;</span><br><span class="line">      len = <span class="number">-1</span>;</span><br><span class="line">      LOG_HID_ERROR(<span class="string">L"单片机读失败: %d, need init"</span>, re);</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (tmpLen == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (len == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">// 当前帧数据长度</span></span><br><span class="line">      len = szTmp[<span class="number">4</span>];</span><br><span class="line">      len &lt;&lt;= <span class="number">8</span>;</span><br><span class="line">      len += szTmp[<span class="number">5</span>];</span><br><span class="line">      len += <span class="number">8</span>;</span><br><span class="line">      <span class="keyword">if</span> (len &lt; packLen)</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    szTmp += packLen;</span><br><span class="line">    <span class="keyword">if</span> (szTmp - m_szData &gt; len)</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> m_szData;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> CMyUsbHid::WriteModule(<span class="keyword">unsigned</span> <span class="keyword">char</span> *szData, <span class="keyword">int</span> len)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 控制字写</span></span><br><span class="line">  <span class="keyword">uint8_t</span> request_type = <span class="number">0x21</span>;  <span class="comment">// 33</span></span><br><span class="line">  <span class="keyword">uint8_t</span> bRequest = <span class="number">0x09</span>;</span><br><span class="line">  <span class="keyword">uint16_t</span> wValue = <span class="number">0x0200</span>;     <span class="comment">// 512</span></span><br><span class="line">  <span class="keyword">uint16_t</span> wIndex = <span class="number">0x0000</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> libusb_control_transfer(m_devHandle, request_type, bRequest, wValue, wIndex, szData, len, <span class="number">3000</span>);</span><br><span class="line">&#125;</span><br><span class="line">BOOL CMyUsbHid::Write(<span class="keyword">unsigned</span> <span class="keyword">char</span> *szData, <span class="keyword">int</span> len)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="function">CriticalSectionManager <span class="title">csm</span><span class="params">(m_cs)</span></span>;</span><br><span class="line">  <span class="keyword">int</span> lenTmp = len;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">char</span> *szDataTmp = szData;</span><br><span class="line">  <span class="keyword">int</span> packLen = <span class="number">0x0040</span>;         <span class="comment">// 64</span></span><br><span class="line">  <span class="keyword">while</span>(lenTmp &gt; <span class="number">0</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> (!m_devHandle)</span><br><span class="line">      <span class="keyword">return</span> FALSE;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> epOut = <span class="number">0x03</span>;  <span class="comment">// 常规写终端地址，可查询接口属性获取 endpoint_out</span></span><br><span class="line">    <span class="keyword">int</span> actual_length = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> re = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (IsModule())</span><br><span class="line">    &#123;</span><br><span class="line">      re = WriteModule(szDataTmp, packLen);</span><br><span class="line">      actual_length = packLen + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      re = libusb_interrupt_transfer(m_devHandle, epOut, szDataTmp, packLen, &amp;actual_length, <span class="number">1000</span>);</span><br><span class="line">    <span class="keyword">if</span> ((re &lt; <span class="number">0</span>) || (actual_length != packLen+<span class="number">1</span>))</span><br><span class="line">    &#123;</span><br><span class="line">      LOG_HID_ERROR(TEXT(<span class="string">"单片机写失败:re=%d, packLen=%d, actual_length=%d"</span>), re, packLen, actual_length);</span><br><span class="line">      <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">//LOG_HID_DEBUG(TEXT("单片机写成功:re=%d, packLen=%d"), re, packLen);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    lenTmp -= packLen;</span><br><span class="line">    szDataTmp += packLen;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (len &gt; <span class="number">1000</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    LOG_HID_DEBUG(TEXT(<span class="string">"大包解析延迟5ms"</span>));</span><br><span class="line">    Sleep(<span class="number">5</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      USBHID
    
    </summary>
    
      <category term="VC" scheme="/categories/VC/"/>
    
    
      <category term="USBHID" scheme="/tags/USBHID/"/>
    
  </entry>
  
  <entry>
    <title>CURL</title>
    <link href="/2019/12/18/VCNet/CURL/"/>
    <id>/2019/12/18/VCNet/CURL/</id>
    <published>2019-12-18T08:26:15.000Z</published>
    <updated>2019-12-18T08:26:15.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">curl_easy_setopt(curl, CURLOPT_CONNECTTIMEOUT, <span class="number">2L</span>); <span class="comment">// 连接超时</span></span><br><span class="line">curl_easy_setopt(curl, CURLOPT_TIMEOUT, <span class="number">5L</span>);  <span class="comment">// 下载超时</span></span><br><span class="line">curl_easy_setopt(curl, CURLOPT_NOSIGNAL, <span class="number">1L</span>); <span class="comment">// DNS相关优化</span></span><br><span class="line">curl_easy_setopt(curl, CURLOPT_LOW_SPEED_LIMIT, <span class="number">10L</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// CURL启动SSL参数后，执行curl_easy_perform动作时，会对本线程中TCP Socket造成干扰</span></span><br><span class="line"><span class="comment">// 可以通过使用单独的CURL线程避免</span></span><br><span class="line">curl_easy_setopt(curl, CURLOPT_SSL_VERIFYPEER, <span class="number">0L</span>); <span class="comment">// 关闭SSL证书校验</span></span><br><span class="line">curl_easy_setopt(curl, CURLOPT_SSL_VERIFYHOST, <span class="number">0L</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      CURL
    
    </summary>
    
      <category term="VC" scheme="/categories/VC/"/>
    
    
      <category term="CURL" scheme="/tags/CURL/"/>
    
  </entry>
  
  <entry>
    <title>sqlite</title>
    <link href="/2019/12/18/VCTools/sqlite/"/>
    <id>/2019/12/18/VCTools/sqlite/</id>
    <published>2019-12-18T01:19:35.000Z</published>
    <updated>2019-12-18T01:19:35.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><ul><li><a href="https://www.sqlite.org/download.html" target="_blank" rel="noopener">官网下载</a><ul><li>sqlite-snapshot-*.tar</li><li>sqlite-dll-win32-x86-*.zip</li></ul></li><li>[DLL环境]<ul><li>解压<code>sqlite-dll-win32-x86-*.zip</code>得到<code>sqlite3.dll</code>+<code>sqlite3.def</code></li><li>DLL同级目录执行如下指令得到lib：<ul><li><code>VS_PATH\bin\lib.exe /out:sqlite3.lib /MACHINE:IX86 /DEF:sqlite3.def</code></li></ul></li><li>加压<code>sqlite-snapshot-*.tar</code>得到<code>sqlite3.h</code></li><li>复制<code>sqlite3.lib</code>+<code>sqlite3.h</code>到工程即可</li></ul></li></ul><h2 id="简单案例"><a href="#简单案例" class="headerlink" title="简单案例"></a>简单案例</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 打开本地缓存库</span></span><br><span class="line">CStringA strDB = CStringA(CW2A(GetRunPath()).m_psz) + <span class="string">"\\usbhid.db"</span>;</span><br><span class="line"><span class="keyword">if</span> (SQLITE_OK != sqlite3_open(strDB, &amp;m_sql))</span><br><span class="line">&#123;</span><br><span class="line">  LOG_HID_ERROR(TEXT(<span class="string">"sqlite3打开失败，删除本地缓存，并重新创建"</span>));</span><br><span class="line">  DeleteFileA(strDB);</span><br><span class="line">  <span class="keyword">if</span> (SQLITE_OK != sqlite3_open(strDB, &amp;m_sql))</span><br><span class="line">  &#123;</span><br><span class="line">    LOG_HID_ERROR(TEXT(<span class="string">"本地缓存库创建失败"</span>));</span><br><span class="line">    <span class="keyword">return</span> FALSE;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 检查表，不存在则创建</span></span><br><span class="line"><span class="keyword">char</span>* errmsg = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">if</span> (sqlite3_exec(m_sql, R<span class="string">"(</span></span><br><span class="line"><span class="string">  CREATE TABLE IF NOT EXISTS `idcard` (</span></span><br><span class="line"><span class="string">    `uuid` varchar(16) NOT NULL,</span></span><br><span class="line"><span class="string">    `info` varchar(320) NOT NULL,</span></span><br><span class="line"><span class="string">    `uptm` datetime DEFAULT CURRENT_TIMESTAMP,</span></span><br><span class="line"><span class="string">    PRIMARY KEY (`uuid`)); )"</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, &amp;errmsg) != SQLITE_OK)</span><br><span class="line">&#123;</span><br><span class="line">  LOG_HID_ERROR(TEXT(<span class="string">"本地缓存表创建失败： %s"</span>), CA2W(errmsg));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 清理1个月前缓存</span></span><br><span class="line">  CString strTime = (CTime::GetCurrentTime() - CTimeSpan(<span class="number">365</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)).Format(_T(<span class="string">"%Y-%m-%d"</span>));</span><br><span class="line">  CString strSql;</span><br><span class="line">  strSql.Format(TEXT(<span class="string">"DELETE FROM idcard WHERE uptm&lt;'%s'"</span>), strTime);</span><br><span class="line">  <span class="keyword">if</span> (sqlite3_exec(m_sql, CW2A(strSql).m_psz, <span class="literal">NULL</span>, <span class="literal">NULL</span>, &amp;errmsg) != SQLITE_OK)</span><br><span class="line">  &#123;</span><br><span class="line">    LOG_HID_ERROR(TEXT(<span class="string">"本地缓存表清理失败： %s"</span>), CA2W(errmsg));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 回调</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ExecCallback</span><span class="params">(<span class="keyword">void</span>* lpParam, <span class="keyword">int</span> nCount, <span class="keyword">char</span>** pValue, <span class="keyword">char</span>** pName)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  CStringA &amp;strResult = *(CStringA*)(lpParam);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; nCount; index++)</span><br><span class="line">  &#123;</span><br><span class="line">    strResult += pValue[index];</span><br><span class="line">    strResult += <span class="string">","</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  strResult += <span class="string">";"</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">BOOL ******::Exec(CString strSql)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">char</span>* errmsg = <span class="literal">NULL</span>;</span><br><span class="line">  CStringA strResult;</span><br><span class="line">  <span class="keyword">if</span> (sqlite3_exec(m_sql, CW2A(strSql).m_psz, ExecCallback, &amp;strResult, &amp;errmsg) != SQLITE_OK)</span><br><span class="line">  &#123;</span><br><span class="line">    LOG_HID_ERROR(TEXT(<span class="string">"指令执行失败： %s"</span>), errmsg);</span><br><span class="line">    <span class="keyword">return</span> FALSE;</span><br><span class="line">  &#125;</span><br><span class="line">  LOG_HID_INFO(TEXT(<span class="string">"指令执行成功： %s"</span>), CA2W(strResult));</span><br><span class="line">  <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      sqlite
    
    </summary>
    
      <category term="VC" scheme="/categories/VC/"/>
    
    
      <category term="sqlite" scheme="/tags/sqlite/"/>
    
  </entry>
  
  <entry>
    <title>socket</title>
    <link href="/2019/12/14/Python/%E7%BD%91%E7%BB%9C/Socket/"/>
    <id>/2019/12/14/Python/网络/Socket/</id>
    <published>2019-12-14T10:46:20.000Z</published>
    <updated>2019-12-14T10:46:20.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding=gbk</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tcp_server_start</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># socket.AF_INET (IPV4)</span></span><br><span class="line">    <span class="comment"># socket.SOCK_STREAM (TCP)</span></span><br><span class="line">    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取本地主机名</span></span><br><span class="line">    host = socket.gethostname()</span><br><span class="line">    <span class="comment"># 绑定端口 IP:port</span></span><br><span class="line">    s.bind((<span class="string">''</span>, <span class="number">8080</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 最大允许连接数量</span></span><br><span class="line">    s.listen(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 死循环，重复的处理着每个客户端的请求</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># 阻塞 每当有客户端的请求过来开始执行</span></span><br><span class="line">        <span class="comment"># 连接处理 （已完成三次握手）并获取资源对象 | conn 请求对象 | addr 客户端地址 ip: port</span></span><br><span class="line">        conn, addr = s.accept()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 请求处理 | 读取客户端发送过来的数据 | recv(1024) 指定每次读取 1024 字节，当数据较长时可以通过 while 循环读取</span></span><br><span class="line">        data = conn.recv(<span class="number">1024</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">print</span> data</span><br><span class="line">        conn.send(data)</span><br><span class="line">        conn.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tcp_client</span><span class="params">()</span>:</span></span><br><span class="line">    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    s.connect((<span class="string">'127.0.0.1'</span>, <span class="number">8080</span>))</span><br><span class="line">    s.send(<span class="string">"test"</span>)</span><br><span class="line">    <span class="keyword">print</span> s.recv(<span class="number">1024</span>)</span><br><span class="line">    s.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    tcp_server_start()</span><br><span class="line">    <span class="comment"># tcp_client()</span></span><br></pre></td></tr></table></figure><h2 id="SocketServer"><a href="#SocketServer" class="headerlink" title="SocketServer"></a>SocketServer</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding=gbk</span></span><br><span class="line"><span class="keyword">import</span> SocketServer</span><br><span class="line"></span><br><span class="line"><span class="comment"># 必须继承socketserver基类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyTcpHandler</span><span class="params">(SocketServer.BaseRequestHandler)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setup</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'setup'</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 重写基类里的handler()方法，在这个方法里处理接收、发送请求</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            data = self.request.recv(<span class="number">1024</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> data:</span><br><span class="line">                print(<span class="string">"客户端退出！"</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            print(data)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 发送转换小写的数据给客户端，然后进入到下一个循环</span></span><br><span class="line">            self.request.send(data)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">finish</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'finish'</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># 实例化socketserver，并传送服务器ip、port和子类</span></span><br><span class="line">    <span class="comment"># 单进程，单线程</span></span><br><span class="line">    <span class="comment"># my_server = SocketServer.TCPServer(('127.0.0.1', 8080), MyTcpHandler)</span></span><br><span class="line">    <span class="comment"># 单进程，多线程</span></span><br><span class="line">    my_server = SocketServer.ThreadingTCPServer((<span class="string">'127.0.0.1'</span>, <span class="number">8080</span>), MyTcpHandler)</span><br><span class="line">    <span class="comment"># 多进程：linux</span></span><br><span class="line">    <span class="comment"># my_server = SocketServer.ForkingTCPServer(('127.0.0.1', 8080), MyTcpHandler)</span></span><br><span class="line">    my_server.serve_forever()</span><br></pre></td></tr></table></figure><h2 id="tornado-TcpServer"><a href="#tornado-TcpServer" class="headerlink" title="tornado TcpServer"></a>tornado TcpServer</h2><p><a href="https://www.tornadoweb.org/en/stable/" target="_blank" rel="noopener">官网</a>看Demo吧<br>tornado的多进程都是基于fork，仅支持Linux</p><p><a href="https://tornado-zh.readthedocs.io/zh/latest/index.html" target="_blank" rel="noopener">中文版</a></p><ul><li>tornado.tcpserver</li><li>tornado.tcpclient</li></ul>]]></content>
    
    <summary type="html">
    
      socket
    
    </summary>
    
      <category term="Python" scheme="/categories/Python/"/>
    
    
      <category term="socket" scheme="/tags/socket/"/>
    
  </entry>
  
  <entry>
    <title>时间</title>
    <link href="/2019/12/12/VC/Time/"/>
    <id>/2019/12/12/VC/Time/</id>
    <published>2019-12-12T06:09:05.000Z</published>
    <updated>2019-12-12T06:09:05.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="常规"><a href="#常规" class="headerlink" title="常规"></a>常规</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 当前时间</span></span><br><span class="line">CTime tNow = CTime::GetCurrentTime(); <span class="comment">// 当前系统时间（北京时间）</span></span><br><span class="line">CString tNow = CTime::GetCurrentTime().Format(_T(<span class="string">"%Y-%m-%d %H:%M:%S"</span>));</span><br><span class="line">CString strYesterday = (tNow - CTimeSpan(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>)).Format(_T(<span class="string">"%Y-%m-%d %H:%M:%S"</span>));  <span class="comment">// 时间差：昨天</span></span><br><span class="line"><span class="comment">// COM: 当前时间</span></span><br><span class="line">COleDateTime oleTime;</span><br><span class="line">oleTime.ParseDateTime(<span class="string">"2012-02-10 12:20:20"</span>);</span><br><span class="line">COleDateTime tNow = COleDateTime::GetCurrentTime();</span><br><span class="line">COleDateTimeSpan span = tNow - oleTime;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当前时间：精确到毫秒</span></span><br><span class="line"><span class="function">CString <span class="title">GetTime</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  CString strTime;</span><br><span class="line">  SYSTEMTIME st;</span><br><span class="line">  GetLocalTime(&amp;st);</span><br><span class="line">  strTime.Format(TEXT(<span class="string">"[%04d-%02d-%02d %02d:%02d:%02d.%03d]"</span>),</span><br><span class="line">    st.wYear, st.wMonth, st.wDay, st.wHour, st.wMinute, st.wSecond, st.wMilliseconds);</span><br><span class="line">  <span class="keyword">return</span> strTime;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置时间</span></span><br><span class="line">SYSTEMTIME st;</span><br><span class="line">oleTime.GetAsSystemTime(st);</span><br><span class="line">SetLocalTime(&amp;st);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 系统启动时长，单位：毫秒</span></span><br><span class="line"><span class="function">DWORD <span class="title">GetTickCount</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">ULONGLONG <span class="title">GetTickCount64</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">// 程序运行时长(CPU占用时间)，单位：毫秒</span></span><br><span class="line"><span class="comment">// 备注：真实单位：1/CLOCKS_PER_SEC 秒, Windows 下 CLOCKS_PER_SEC=1000，相当于1ms</span></span><br><span class="line"><span class="keyword">clock_t</span> clock();</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      time
    
    </summary>
    
      <category term="VC" scheme="/categories/VC/"/>
    
    
      <category term="time" scheme="/tags/time/"/>
    
  </entry>
  
  <entry>
    <title>CURL</title>
    <link href="/2019/12/12/VCTools/curl/"/>
    <id>/2019/12/12/VCTools/curl/</id>
    <published>2019-12-12T01:49:15.000Z</published>
    <updated>2019-12-12T01:49:15.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><ul><li><a href="https://github.com/fxliu/VCDemo/tree/master/NET/CUrl" target="_blank" rel="noopener">CURL</a></li></ul><h2 id="简单案例"><a href="#简单案例" class="headerlink" title="简单案例"></a>简单案例</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="OpenSSL"><a href="#OpenSSL" class="headerlink" title="OpenSSL"></a>OpenSSL</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      CURL
    
    </summary>
    
      <category term="VC" scheme="/categories/VC/"/>
    
    
      <category term="CURL" scheme="/tags/CURL/"/>
    
  </entry>
  
  <entry>
    <title>USB-HID</title>
    <link href="/2019/12/03/VCTools/libusb/"/>
    <id>/2019/12/03/VCTools/libusb/</id>
    <published>2019-12-03T10:01:16.000Z</published>
    <updated>2019-12-03T10:01:16.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="开源库"><a href="#开源库" class="headerlink" title="开源库"></a>开源库</h2><ul><li><a href="https://github.com/libusb/libusb" target="_blank" rel="noopener">libusb</a></li></ul><h2 id="基础使用"><a href="#基础使用" class="headerlink" title="基础使用"></a>基础使用</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">BOOL CMyUsbHid::Init()</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (libusb_init(<span class="literal">NULL</span>) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"SDK初始化失败"</span>);</span><br><span class="line">    <span class="keyword">return</span> FALSE;</span><br><span class="line">  &#125;</span><br><span class="line">  m_devHandle = libusb_open_device_with_vid_pid(<span class="literal">NULL</span>, m_vid, m_pid);</span><br><span class="line">  <span class="keyword">if</span> (m_devHandle == <span class="literal">NULL</span>) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"设备连接失败"</span>);</span><br><span class="line">    libusb_exit(<span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">return</span> FALSE;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> CMyUsbHid::Release()</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (m_devHandle)</span><br><span class="line">  &#123;</span><br><span class="line">    libusb_close(m_devHandle);</span><br><span class="line">    libusb_exit(<span class="literal">NULL</span>);</span><br><span class="line">    m_devHandle = <span class="literal">NULL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span>* CMyUsbHid::Read(<span class="keyword">int</span> &amp;len)</span><br><span class="line">&#123;</span><br><span class="line">  ZeroMemory(m_szData, <span class="keyword">sizeof</span>(m_szData));</span><br><span class="line">  <span class="keyword">uint8_t</span> request_type = <span class="number">0xA1</span>;  <span class="comment">// 161</span></span><br><span class="line">  <span class="keyword">uint8_t</span> bRequest = <span class="number">0x01</span>;</span><br><span class="line">  <span class="keyword">uint16_t</span> wValue = <span class="number">0x0100</span>;     <span class="comment">// 256</span></span><br><span class="line">  <span class="keyword">uint16_t</span> wIndex = <span class="number">0x0000</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    len = libusb_control_transfer(m_devHandle, request_type, bRequest, wValue, wIndex, m_szData, <span class="number">64</span>, <span class="number">500</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (len &lt; <span class="number">0</span>) &#123;</span><br><span class="line">      Log(TEXT(<span class="string">"单片机读失败"</span>));</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (len &gt; <span class="number">0</span>)</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    Sleep(<span class="number">100</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> m_szData;</span><br><span class="line">&#125;</span><br><span class="line">BOOL CMyUsbHid::Write(<span class="keyword">unsigned</span> <span class="keyword">char</span> *szData, <span class="keyword">int</span> &amp;len)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">uint8_t</span> request_type = <span class="number">0x21</span>;  <span class="comment">// 33</span></span><br><span class="line">  <span class="keyword">uint8_t</span> bRequest = <span class="number">0x09</span>;</span><br><span class="line">  <span class="keyword">uint16_t</span> wValue = <span class="number">0x0200</span>;     <span class="comment">// 512</span></span><br><span class="line">  <span class="keyword">uint16_t</span> wIndex = <span class="number">0x0000</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span>(len &gt; <span class="number">0</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// 这里接口有问题，只能是64，使用len会写失败</span></span><br><span class="line">    <span class="keyword">int</span> re = libusb_control_transfer(m_devHandle, request_type, bRequest, wValue, wIndex, szData, <span class="number">64</span>, <span class="number">3000</span>);</span><br><span class="line">    <span class="keyword">if</span> (re &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      Log(TEXT(<span class="string">"单片机写失败"</span>));</span><br><span class="line">      <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    len -= <span class="number">64</span>;</span><br><span class="line">    szData += <span class="number">64</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Windows-HID-API-备记"><a href="#Windows-HID-API-备记" class="headerlink" title="Windows HID API 备记"></a>Windows HID API 备记</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">1.获取设备信息，在建立连接时</span><br><span class="line">HidD_GetAttributes</span><br><span class="line">HidD_GetHidGuid</span><br><span class="line">HidD_GetIndexedString</span><br><span class="line">HidD_GetManufacturerString</span><br><span class="line">HidD_GetPhysicalDescriptor</span><br><span class="line">HidD_GetPreparsedData</span><br><span class="line">HidD_GetProductString</span><br><span class="line">HidD_GetSerialNumberString</span><br><span class="line"></span><br><span class="line">2.设置输入缓冲大小</span><br><span class="line">HidD_GetNumInputBuffers</span><br><span class="line">HidD_SetNumInputBuffers</span><br><span class="line"></span><br><span class="line">3.读数据</span><br><span class="line">HidD_GetInputReport</span><br><span class="line">ReadFile</span><br><span class="line"></span><br><span class="line">4.写数据</span><br><span class="line">HidD_SetOutputReport</span><br><span class="line">ReadFile</span><br><span class="line">HidD_SetFeature</span><br><span class="line"></span><br><span class="line">5.HID语法信息</span><br><span class="line">HidP_GetButtonCaps</span><br><span class="line">HidP_GetButtons</span><br><span class="line">HidP_GetButtonsEx</span><br><span class="line">HidP_GetCaps</span><br><span class="line">HidP_GetData</span><br><span class="line">HidP_GetExtendedAttributes</span><br><span class="line">HidP_GetLinkCollectionNodes</span><br><span class="line">HidP_GetScaledUsageValue</span><br><span class="line">HidP_GetSpecificButtonCaps</span><br><span class="line">HidP_GetSpecificValueCaps</span><br><span class="line">HidP_GetUsages</span><br><span class="line">HidP_GetUsagesEx</span><br><span class="line">HidP_GetUsageValue</span><br><span class="line">HidP_GetUsageValueArray</span><br><span class="line">HidP_GetValueCaps</span><br><span class="line">HidP_InitializeReportForID</span><br><span class="line">HidP_IsSameUsageAndPage</span><br><span class="line">HidP_MaxDataListLength</span><br><span class="line">HidP_MaxUsageListLength</span><br><span class="line">HidP_SetButtons</span><br><span class="line">HidP_SetData</span><br><span class="line">HidP_SetScaledUsageValue</span><br><span class="line">HidP_SetUsages</span><br><span class="line">HidP_SetUsageValue</span><br><span class="line">HidP_SetUsageValueArray</span><br><span class="line">HidP_UnsetButtons</span><br><span class="line">HidP_UnsetUsages</span><br><span class="line">HidP_UsageAndPageListDifference</span><br><span class="line">HidP_UsageListDifference</span><br><span class="line"></span><br><span class="line">6.注意事项</span><br><span class="line">读写数据的时候，数据大小必须是HidP_GetCaps获得的HIDP_CAPS的 InputReportByteLength/OutputReportByteLength</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      USB, HID
    
    </summary>
    
      <category term="VC" scheme="/categories/VC/"/>
    
    
      <category term="USB" scheme="/tags/USB/"/>
    
      <category term="HID" scheme="/tags/HID/"/>
    
  </entry>
  
  <entry>
    <title>Vue</title>
    <link href="/2019/12/02/Html/Vue/"/>
    <id>/2019/12/02/Html/Vue/</id>
    <published>2019-12-02T02:56:59.000Z</published>
    <updated>2019-12-02T02:56:59.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 嵌套: 三元表达式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">"[isActive ? 'active' : '', ...]"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="绑定-class-style"><a href="#绑定-class-style" class="headerlink" title="绑定(class | style)"></a>绑定(class | style)</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">  <span class="attr">class</span>=<span class="string">"static"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-bind:class</span>=<span class="string">"&#123; active: isActive, 'text-danger': hasError &#125;"</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="comment">// HTML对象形式</span></span></span><br><span class="line">data: &#123;</span><br><span class="line"><span class="javascript">  isActive: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">  hasError: <span class="literal">false</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">  <span class="attr">class</span>=<span class="string">"static"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-bind:class</span>=<span class="string">"classObject"</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="comment">// JS对象形式</span></span></span><br><span class="line">data: &#123;</span><br><span class="line">  classObject: &#123;</span><br><span class="line"><span class="javascript">    active: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">    <span class="string">'text-danger'</span>: <span class="literal">false</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">"[active, error]"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="comment">// 数组形式</span></span></span><br><span class="line">data: &#123;</span><br><span class="line"><span class="javascript">  active: <span class="string">'active'</span>,</span></span><br><span class="line"><span class="javascript">  isActive: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">  error: <span class="string">'text-danger'</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">"[&#123; active: isActive &#125;, error]"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="comment">// 数组对象交叉</span></span></span><br><span class="line">data: &#123;</span><br><span class="line"><span class="javascript">  isActive: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">  error: <span class="string">'text-danger'</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Vue
    
    </summary>
    
      <category term="JS" scheme="/categories/JS/"/>
    
    
      <category term="Vue" scheme="/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>二维码</title>
    <link href="/2019/11/30/Python/%E6%96%87%E4%BB%B6/%E4%BA%8C%E7%BB%B4%E7%A0%81/"/>
    <id>/2019/11/30/Python/文件/二维码/</id>
    <published>2019-11-30T09:47:48.000Z</published>
    <updated>2019-11-30T09:47:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="二维码"><a href="#二维码" class="headerlink" title="二维码"></a>二维码</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p><code>pip install qrcode pillow image zxing</code></p><h3 id="简单应用"><a href="#简单应用" class="headerlink" title="简单应用"></a>简单应用</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding:gbk -*-</span></span><br><span class="line"><span class="keyword">import</span> qrcode</span><br><span class="line"><span class="keyword">import</span> zxing</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image, ImageDraw, ImageFont</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_create1</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 二维码内容</span></span><br><span class="line">    data = <span class="string">"https://www.baidu.com"</span></span><br><span class="line">    <span class="comment"># 生成二维码</span></span><br><span class="line">    img = qrcode.make(data=data)</span><br><span class="line">    <span class="comment"># 直接显示二维码</span></span><br><span class="line">    img.show()</span><br><span class="line">    <span class="comment"># 保存二维码为文件</span></span><br><span class="line">    <span class="comment"># img.save("baidu.jpg")</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_create2</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 实例化二维码生成类</span></span><br><span class="line">    qr = qrcode.QRCode(</span><br><span class="line">        version=<span class="number">1</span>,</span><br><span class="line">        error_correction=qrcode.constants.ERROR_CORRECT_L,</span><br><span class="line">        box_size=<span class="number">10</span>,</span><br><span class="line">        border=<span class="number">4</span>,</span><br><span class="line">    )</span><br><span class="line">    <span class="comment"># 设置二维码数据</span></span><br><span class="line">    data = <span class="string">"https://www.baidu.com"</span></span><br><span class="line">    qr.add_data(data=data)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 启用二维码颜色设置</span></span><br><span class="line">    qr.make(fit=<span class="literal">True</span>)</span><br><span class="line">    img = qr.make_image(fill_color=<span class="string">"green"</span>, back_color=<span class="string">"white"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># PIL修改图片</span></span><br><span class="line">    img = img.convert(<span class="string">"RGBA"</span>)   <span class="comment"># 需要转码</span></span><br><span class="line">    draw = ImageDraw.Draw(img)</span><br><span class="line">    font = ImageFont.truetype(<span class="string">'C:/windows/fonts/Dengl.ttf'</span>, <span class="number">20</span>)</span><br><span class="line">    color = <span class="string">"#0000ff"</span>  <span class="comment"># 蓝色</span></span><br><span class="line">    draw.text((<span class="number">10</span>, <span class="number">10</span>), <span class="string">'蓝色文字'</span>, font=font, fill=color, fill=(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 显示二维码</span></span><br><span class="line">    <span class="comment"># img.show()</span></span><br><span class="line">    img.save(<span class="string">"bd.jpg"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_read_content</span><span class="params">()</span>:</span></span><br><span class="line">    reader = zxing.BarCodeReader()</span><br><span class="line">    barcode = reader.decode(<span class="string">"bd.jpg"</span>)</span><br><span class="line">    print(barcode.parsed)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      二维码
    
    </summary>
    
      <category term="Python" scheme="/categories/Python/"/>
    
    
      <category term="二维码" scheme="/tags/%E4%BA%8C%E7%BB%B4%E7%A0%81/"/>
    
  </entry>
  
</feed>
