<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>福</title>
  
  <subtitle>业精于勤荒于嬉</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://fxliu.github.io/"/>
  <updated>2019-10-03T08:33:13.576Z</updated>
  <id>https://fxliu.github.io/</id>
  
  <author>
    <name>福</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>加解密</title>
    <link href="https://fxliu.github.io/2019/10/03/PHP/openssl/"/>
    <id>https://fxliu.github.io/2019/10/03/PHP/openssl/</id>
    <published>2019-10-03T08:03:34.730Z</published>
    <updated>2019-10-03T08:33:13.576Z</updated>
    
    <content type="html"><![CDATA[<h2 id="openssl-1-1-1"><a href="#openssl-1-1-1" class="headerlink" title="openssl(1.1.1)"></a>openssl(1.1.1)</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 版本号以及支持的内容</span></span><br><span class="line">printf(<span class="string">"Versoin : %s"</span>, OPENSSL_VERSION_TEXT);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;<span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">$digests = openssl_get_md_methods(<span class="keyword">false</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"Digests : "</span>;</span><br><span class="line"><span class="keyword">foreach</span> ($digests <span class="keyword">as</span> $digest) &#123;</span><br><span class="line">    <span class="keyword">echo</span> $digest.<span class="string">","</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;<span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">$ciphers = openssl_get_cipher_methods(<span class="keyword">false</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"Ciphers : "</span>;</span><br><span class="line"><span class="keyword">foreach</span> ($ciphers <span class="keyword">as</span> $cipher) &#123;</span><br><span class="line">    <span class="keyword">echo</span> $cipher.<span class="string">","</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;<span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line"></span><br><span class="line">$curves = openssl_get_curve_names();</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"Curves : "</span>;</span><br><span class="line"><span class="keyword">foreach</span> ($curves <span class="keyword">as</span> $curve) &#123;</span><br><span class="line">    <span class="keyword">echo</span> $curve.<span class="string">","</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;<span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SM4 加解密</span></span><br><span class="line">$key = openssl_random_pseudo_bytes(<span class="number">16</span>);</span><br><span class="line">$ivlen = openssl_cipher_iv_length(<span class="string">"sm4"</span>);</span><br><span class="line"><span class="comment">// $iv = openssl_random_pseudo_bytes($ivlen);</span></span><br><span class="line">$iv = str_repeat(<span class="string">"\0"</span>, $ivlen);</span><br><span class="line">$plaintext = <span class="string">"message to be encrypted"</span>;</span><br><span class="line">$ciphertext = openssl_encrypt($plaintext, <span class="string">"sm4"</span>, $key, $options=<span class="number">0</span>, $iv);</span><br><span class="line">$original_plaintext = openssl_decrypt($ciphertext, <span class="string">"sm4"</span>, $key, $options=<span class="number">0</span>, $iv);</span><br><span class="line"></span><br><span class="line">printf(<span class="string">"sms4enc(\"%s\") = %s\n"</span>, $plaintext, bin2hex($ciphertext));</span><br><span class="line">printf(<span class="string">"sms4dec(%s) = \"%s\"\n"</span>, bin2hex($ciphertext), $original_plaintext);</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ------------------------------------------------</span></span><br><span class="line"><span class="comment">// 证书加载：RM2 pkcs8格式证书</span></span><br><span class="line">$private_content = file_get_contents(<span class="keyword">__DIR__</span>.<span class="string">'\lfx.pkcs8.pem'</span>);</span><br><span class="line">$prikey = openssl_pkey_get_private($private_content);</span><br><span class="line"></span><br><span class="line">$pubkeypem = openssl_pkey_get_details($prikey)[<span class="string">"key"</span>];</span><br><span class="line">$pubkey = openssl_pkey_get_public($pubkeypem);</span><br><span class="line"></span><br><span class="line">$ec = openssl_pkey_get_details($prikey)[<span class="string">"ec"</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line"><span class="comment">// $ec["d"] &lt;==&gt; 证书明文</span></span><br><span class="line">printf(<span class="string">"SM2 Private Key: \nd:%s, \nx:%s, \ny:%s\n"</span>, bin2hex($ec[<span class="string">"d"</span>]), bin2hex($ec[<span class="string">"x"</span>]), bin2hex($ec[<span class="string">"y"</span>]));</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;<span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 证书签名/验签</span></span><br><span class="line">$msg = <span class="string">"abc"</span>;</span><br><span class="line">$signature = <span class="string">""</span>;</span><br><span class="line">openssl_sign($msg, $signature, $prikey);            <span class="comment">// 签名</span></span><br><span class="line">$ok = openssl_verify($msg, $signature, $pubkey);    <span class="comment">// 签名校验</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;<span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">printf(<span class="string">"verify(\"%s\", %s) = %s\n"</span>, $msg, bin2hex($signature), $ok ? <span class="string">"OK"</span> : <span class="string">"Failure"</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;openssl-1-1-1&quot;&gt;&lt;a href=&quot;#openssl-1-1-1&quot; class=&quot;headerlink&quot; title=&quot;openssl(1.1.1)&quot;&gt;&lt;/a&gt;openssl(1.1.1)&lt;/h2&gt;&lt;figure class=&quot;highlight ph
      
    
    </summary>
    
      <category term="PHP" scheme="https://fxliu.github.io/categories/PHP/"/>
    
      <category term="SM2/SM4" scheme="https://fxliu.github.io/categories/PHP/SM2-SM4/"/>
    
    
      <category term="openssl" scheme="https://fxliu.github.io/tags/openssl/"/>
    
  </entry>
  
  <entry>
    <title>常规函数</title>
    <link href="https://fxliu.github.io/2019/10/03/Java/%E5%B8%B8%E8%A7%84%E5%87%BD%E6%95%B0/"/>
    <id>https://fxliu.github.io/2019/10/03/Java/常规函数/</id>
    <published>2019-10-03T04:29:05.993Z</published>
    <updated>2019-10-03T08:01:40.991Z</updated>
    
    <content type="html"><![CDATA[<h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 格式化输出</span></span><br><span class="line">System.out.printf(<span class="string">"&#123;\"result\":\"%s\"&#125;"</span>, <span class="keyword">new</span> String(key));</span><br><span class="line"><span class="comment">// 对象打印: 可以直接打印单个任意对象</span></span><br><span class="line">System.out.println(<span class="string">"asdf"</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;字符串&quot;&gt;&lt;a href=&quot;#字符串&quot; class=&quot;headerlink&quot; title=&quot;字符串&quot;&gt;&lt;/a&gt;字符串&lt;/h2&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span
      
    
    </summary>
    
      <category term="JAVA" scheme="https://fxliu.github.io/categories/JAVA/"/>
    
    
      <category term="入门" scheme="https://fxliu.github.io/tags/%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>证书</title>
    <link href="https://fxliu.github.io/2019/10/02/Tools/%E8%AF%81%E4%B9%A6/"/>
    <id>https://fxliu.github.io/2019/10/02/Tools/证书/</id>
    <published>2019-10-02T09:47:56.201Z</published>
    <updated>2019-10-03T04:34:57.868Z</updated>
    
    <content type="html"><![CDATA[<h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>这两天被国密SM2/SM3/SM4整郁闷了，备记一些证书转换相关吧</p><ul><li>python2+gmssl没整明白，加密好使，解密不好使</li><li>PHP openssl(1.1.1b)据说事支持国密了，证书配置好使，RM4加解密好使，RM2/RM3却没整过去</li><li>C加解密都整过去了，和第三方却对接不上，对方给的数据解密后和Demo（Java版）对应不上</li></ul><h2 id="openssl工具"><a href="#openssl工具" class="headerlink" title="openssl工具"></a>openssl工具</h2><p>安装phpStudy之后自带的，命令<code>openssl version</code>查看版本：<code>1.1.1b</code>。<br>版本必须再<code>1.1.1</code>以上，否则不支持国密(RM2/RM3/RM4)。</p><h2 id="SM2证书测试-转化"><a href="#SM2证书测试-转化" class="headerlink" title="SM2证书测试+转化"></a>SM2证书测试+转化</h2><ul><li>生成私钥(默认ec格式)<ul><li><code>openssl ecparam -genkey -name SM2 -out sm2PriKey.pem</code></li></ul></li><li>查看密钥明文(必须是EC格式证书)<ul><li><code>openssl ec -in sm2PriKey.pem -text</code></li><li>备注：公钥前面的02或者03表示是压缩公钥，04表示未压缩公钥, 04的时候，使用时根据情况可以去掉前面的04</li></ul></li><li>格式转换<ul><li>ec -&gt; pkcs8<ul><li><code>openssl pkcs8 -topk8 -inform PEM -in sm2PriKey.pem -outform pem -nocrypt -out sm2PriKeyPkcs8.pem</code></li></ul></li><li>pkcs8 -&gt; pkcs1<ul><li><code>openssl pkcs8 -inform PEM -in sm2PriKeyPkcs8.pem -outform pem -nocrypt -out sm2PriKeyPkcs1.pem</code></li></ul></li><li>pkcs8 -&gt; ec<ul><li><code>openssl ec -in sm2PriKeyPkcs8.pem -outform pem -out sm2PriKey2.pem</code></li></ul></li></ul></li><li>RM2加密说明<ul><li>加密数据：旧版RM2密文结构(C1C2C3)，新版RM2密文结构(C1C3C2)<ul><li>C1为固定的64字节，c2和原始数据一样长，C3为固定的32字节</li></ul></li><li>加密过程中使用了SM3的散列算法(官方叫杂凑算法)，这个算法输出为32字节的数据。</li><li>加密数据如果<code>04</code>开头，04仅代表是旧版密文模式(C1C2C3)，解密时要根据情况转换</li><li>C1：64字节的随机数</li><li>C2：真正的密文，跟明文的长度是一样的</li><li>C3：是杂凑值（32字节）。通过SM3（摘要算法）进行运算得出的。</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;描述&quot;&gt;&lt;a href=&quot;#描述&quot; class=&quot;headerlink&quot; title=&quot;描述&quot;&gt;&lt;/a&gt;描述&lt;/h2&gt;&lt;p&gt;这两天被国密SM2/SM3/SM4整郁闷了，备记一些证书转换相关吧&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;python2+gmssl没整明白，加密好使，
      
    
    </summary>
    
      <category term="tools" scheme="https://fxliu.github.io/categories/tools/"/>
    
    
      <category term="openssl" scheme="https://fxliu.github.io/tags/openssl/"/>
    
      <category term="证书" scheme="https://fxliu.github.io/tags/%E8%AF%81%E4%B9%A6/"/>
    
      <category term="SM2" scheme="https://fxliu.github.io/tags/SM2/"/>
    
  </entry>
  
  <entry>
    <title>Git</title>
    <link href="https://fxliu.github.io/2019/09/28/Tools/github/"/>
    <id>https://fxliu.github.io/2019/09/28/Tools/github/</id>
    <published>2019-09-28T03:04:52.316Z</published>
    <updated>2019-10-03T04:35:37.980Z</updated>
    
    <content type="html"><![CDATA[<h2 id="常规指令"><a href="#常规指令" class="headerlink" title="常规指令"></a>常规指令</h2><ul><li>恢复误删除文件(尚未提交到本地库情况)：<code>git checkout -- file</code><ul><li><code>git status</code> 查看删除文件，中文会转码，但git checkout时，直接用中文使用转码文件名不好使</li></ul></li></ul><h2 id="gihub"><a href="#gihub" class="headerlink" title="gihub"></a>gihub</h2><h3 id="fork"><a href="#fork" class="headerlink" title="fork"></a>fork</h3><p>分支别人的仓库到自己仓库</p><ul><li>打开大佬的github，点击右上角的fork按钮</li><li>然后回到自己的github-&gt;Repositories，同名的仓库已经存在了，就是这么简单</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;常规指令&quot;&gt;&lt;a href=&quot;#常规指令&quot; class=&quot;headerlink&quot; title=&quot;常规指令&quot;&gt;&lt;/a&gt;常规指令&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;恢复误删除文件(尚未提交到本地库情况)：&lt;code&gt;git checkout -- file&lt;/code&gt;&lt;ul
      
    
    </summary>
    
      <category term="Tools" scheme="https://fxliu.github.io/categories/Tools/"/>
    
    
      <category term="Git" scheme="https://fxliu.github.io/tags/Git/"/>
    
      <category term="Github" scheme="https://fxliu.github.io/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>常用函数</title>
    <link href="https://fxliu.github.io/2019/09/28/PHP/%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/"/>
    <id>https://fxliu.github.io/2019/09/28/PHP/常用函数/</id>
    <published>2019-09-28T01:41:02.330Z</published>
    <updated>2019-10-03T08:40:45.696Z</updated>
    
    <content type="html"><![CDATA[<h2 id="IDE"><a href="#IDE" class="headerlink" title="IDE"></a>IDE</h2><ul><li><strong>PHPStorm</strong><ul><li>注册码: <a href="http://idea.lanyus.com/" target="_blank" rel="noopener">http://idea.lanyus.com/</a></li><li>也可以到<a href="http://www.php.cn/" target="_blank" rel="noopener">PHP中文网</a>找</li></ul></li><li><strong>运行工具</strong><ul><li>phpStudy</li></ul></li></ul><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 指定编码类型</span></span><br><span class="line">header(<span class="string">"Content-Type: text/html; charset=utf-8"</span>);</span><br><span class="line"><span class="comment">// 返回自定义错误</span></span><br><span class="line">header(<span class="string">'HTTP/1.1 404 Not Found'</span>);</span><br><span class="line"><span class="keyword">exit</span>(<span class="string">"Not Found"</span>);</span><br><span class="line"><span class="comment">// GET/POST数据</span></span><br><span class="line">print_r($_POST);</span><br><span class="line">print_r($_GET);</span><br><span class="line">print_r($_SERVER);</span><br><span class="line">print_r(<span class="string">"php://input"</span>);    <span class="comment">// post数据流</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// define ( string $name , mixed $value [, bool $case_insensitive = FALSE ] ) : bool</span></span><br><span class="line"><span class="comment">// case_insensitive: 不区分大小写</span></span><br><span class="line">define(<span class="string">'TEST'</span>, <span class="string">'Hello world'</span>);</span><br><span class="line"><span class="keyword">echo</span> TEST;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 外变量</span></span><br><span class="line">$GLOBALS[<span class="string">'t'</span>] = <span class="string">'global_t'</span>;</span><br><span class="line"><span class="comment">// 类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> Test: 单例类变量, 默认为NULL, 无需指定</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> $t;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Test: self::$t默认值会影响这里的返回值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getInterface</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> $GLOBALS[<span class="string">'t'</span>];        <span class="comment">// 外变量</span></span><br><span class="line">        <span class="keyword">if</span>(!<span class="keyword">self</span>::$t)</span><br><span class="line">            <span class="keyword">self</span>::$t = <span class="keyword">new</span> Test(<span class="string">"HelloWorld."</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span>::$t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> $content;</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($content)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;content = $content;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">p</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;content;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$t = Test::getInterface();</span><br><span class="line">$t-&gt;p();</span><br></pre></td></tr></table></figure><h2 id="字符串处理"><a href="#字符串处理" class="headerlink" title="字符串处理"></a>字符串处理</h2><h3 id="字符串转化"><a href="#字符串转化" class="headerlink" title="字符串转化"></a>字符串转化</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// str_replace ( mixed $search , mixed $replace , mixed $subject [, int &amp;$count ] ) : mixed</span></span><br><span class="line">$_POST = str_replace(<span class="string">"\r"</span>, <span class="string">""</span>, $_POST);</span><br><span class="line"><span class="comment">// substr ( string $string , int $start [, int $length ] ) : string</span></span><br><span class="line"><span class="keyword">echo</span> substr(<span class="string">'abcdef'</span>, <span class="number">1</span>);     <span class="comment">// bcdef</span></span><br><span class="line"><span class="keyword">echo</span> substr(<span class="string">'abcdef'</span>, <span class="number">1</span>, <span class="number">3</span>);  <span class="comment">// bcd</span></span><br><span class="line"><span class="keyword">echo</span> substr(<span class="string">'abcdef'</span>, <span class="number">-3</span>, <span class="number">2</span>); <span class="comment">// de</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// JSON</span></span><br><span class="line">json_decode(<span class="string">'&#123;"k":"v"&#125;'</span>，<span class="keyword">true</span>);     <span class="comment">// json -&gt; array，true一定要有，否则返回的是stdClass对象</span></span><br><span class="line">json_encode(<span class="keyword">array</span>(<span class="string">"k"</span> =&gt; <span class="string">"v"</span>));     <span class="comment">// array -&gt; json</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 类型转换</span></span><br><span class="line">$foo = <span class="string">"0"</span>; <span class="comment">// $foo 是字符串 (ASCII 48)</span></span><br><span class="line">$foo += <span class="number">2</span>; <span class="comment">// $foo 现在是一个整数 (2)</span></span><br><span class="line">$foo = $foo + <span class="number">1.3</span>; <span class="comment">// $foo 现在是一个浮点数 (3.3)</span></span><br><span class="line">$foo = <span class="number">5</span> + <span class="string">"10 Little Piggies"</span>; <span class="comment">// $foo 是整数 (15)</span></span><br><span class="line">$foo = <span class="number">5</span> + <span class="string">"10 Small Pigs"</span>; <span class="comment">// $foo 是整数 (15)</span></span><br><span class="line"></span><br><span class="line">$foo = <span class="number">1</span> + <span class="string">"10.5"</span>; <span class="comment">// $foo is float (11.5)</span></span><br><span class="line">$foo = <span class="number">1</span> + <span class="string">"-1.3e3"</span>; <span class="comment">// $foo is float (-1299)</span></span><br><span class="line">$foo = <span class="number">1</span> + <span class="string">"bob-1.3e3"</span>; <span class="comment">// $foo is integer (1)</span></span><br><span class="line">$foo = <span class="number">1</span> + <span class="string">"bob3"</span>; <span class="comment">// $foo is integer (1)</span></span><br><span class="line">$foo = <span class="number">1</span> + <span class="string">"10 Small Pigs"</span>; <span class="comment">// $foo is integer (11)</span></span><br><span class="line">$foo = <span class="number">4</span> + <span class="string">"10.2 Little Piggies"</span>; <span class="comment">// $foo is float (14.2)</span></span><br><span class="line">$foo = <span class="string">"10.0 pigs "</span> + <span class="number">1</span>; <span class="comment">// $foo is float (11)</span></span><br><span class="line">$foo = <span class="string">"10.0 pigs "</span> + <span class="number">1.0</span>; <span class="comment">// $foo is float (11)</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将16进制数串转换为二进制数据的函数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> $hexdata</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> string bindata</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">str2bin</span><span class="params">($hexdata)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $bindata=<span class="string">""</span>;</span><br><span class="line">    <span class="keyword">for</span> ($i=<span class="number">0</span>;$i &lt; strlen($hexdata);$i+=<span class="number">2</span>) &#123;</span><br><span class="line">        $bindata.=chr(hexdec(substr($hexdata,$i,<span class="number">2</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> $bindata;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> bin2hex(<span class="string">'abc'</span>);      <span class="comment">// 3132333435363738</span></span><br><span class="line"><span class="keyword">echo</span> str2bin(<span class="string">'616263'</span>);   <span class="comment">// abc</span></span><br><span class="line"><span class="keyword">echo</span> hex2bin(<span class="string">'616263'</span>);   <span class="comment">// abc</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 路径</span></span><br><span class="line"><span class="comment">// include dirname(__FILE__) . "/config/config2.php";</span></span><br><span class="line"><span class="keyword">echo</span> <span class="keyword">__FILE__</span>.<span class="string">"\r\n"</span>;</span><br><span class="line"><span class="keyword">echo</span> dirname(<span class="keyword">__FILE__</span>).<span class="string">"\r\n"</span>;</span><br><span class="line"><span class="keyword">echo</span> dirname(<span class="keyword">__FILE__</span>) . <span class="string">"/config/config2.php"</span>.<span class="string">"\r\n"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模块：测试附加代码</span></span><br><span class="line"><span class="keyword">if</span> (strcasecmp(basename($_SERVER[<span class="string">'SCRIPT_NAME'</span>]), basename(<span class="keyword">__FILE__</span>)) == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 直接请求该PHP，运行如下测试代码</span></span><br><span class="line">    <span class="comment">// 作为模块被include，则不运行</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"test"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// autoload.php: 根据应用到的类名自动加载对应PHP</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 注意根目录检查</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">autoload</span><span class="params">($class)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $path = <span class="keyword">array</span>(<span class="string">"."</span>, <span class="string">".."</span>, <span class="string">"../.."</span>, $_SERVER[<span class="string">'DOCUMENT_ROOT'</span>]);</span><br><span class="line">    <span class="keyword">foreach</span>($path <span class="keyword">as</span> $p) &#123;</span><br><span class="line">        $fn = $p . <span class="string">'/'</span>. $class . <span class="string">".php"</span>;</span><br><span class="line">        $fn = strtr($fn, <span class="keyword">array</span>(<span class="string">"\\"</span> =&gt; <span class="string">"/"</span>));</span><br><span class="line">        <span class="keyword">if</span> (file_exists($fn)) &#123;</span><br><span class="line">            <span class="keyword">require_once</span>($fn);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">spl_autoload_register(<span class="string">"autoload"</span>);</span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="keyword">include_once</span> dirname(<span class="keyword">__FILE__</span>) . <span class="string">"/../autoload.php"</span>;</span><br></pre></td></tr></table></figure><h3 id="加解密"><a href="#加解密" class="headerlink" title="加解密"></a>加解密</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  hash ( string $algo , string $data [, bool $raw_output = FALSE ] ) : string</span></span><br><span class="line"><span class="comment">// $algo: 哈希算法名称，例如："md5"，"sha256"，"haval160,4" 等, 算法清单，见 hash_hmac_algos() 函数</span></span><br><span class="line"><span class="comment">// $raw_output = TRUE: 输出原始二进制数据, 设置为 FALSE 输出小写 16 进制字符串</span></span><br><span class="line"><span class="keyword">echo</span> hash(<span class="string">'sha256'</span>, <span class="string">'The quick brown fox jumped over the lazy dog.'</span>);</span><br><span class="line"><span class="comment">//  md5 ( string $str [, bool $raw_output = FALSE ] ) : string</span></span><br><span class="line"><span class="keyword">echo</span> md5(<span class="string">'The quick brown fox jumped over the lazy dog.'</span>);</span><br><span class="line"><span class="comment">// sha1 ( string $str [, bool $raw_output = false ] ) : string</span></span><br><span class="line"><span class="comment">// crc32 ( string $str ) : int</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// hash_file() - 使用给定文件的内容生成哈希值</span></span><br><span class="line"><span class="comment">// md5_file() - 计算指定文件的 MD5 散列值</span></span><br><span class="line"><span class="comment">// sha1_file() - 计算文件的 sha1 散列值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// hash_hmac ( string $algo , string $data , string $key [, bool $raw_output = FALSE ] ) : string</span></span><br><span class="line"><span class="comment">// raw_output: 默认16进制字符串，置为TRUE输出原始二进制字符串</span></span><br><span class="line">hash_hmac(<span class="string">"md5"</span>, <span class="string">"数据"</span>, <span class="string">"密钥"</span>, <span class="keyword">TRUE</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// base64</span></span><br><span class="line">$str = <span class="string">'This is an encoded string'</span>;</span><br><span class="line"><span class="keyword">echo</span> base64_encode($str);</span><br><span class="line"><span class="keyword">echo</span> base64_decode(<span class="string">'VGhpcyBpcyBhbiBlbmNvZGVkIHN0cmluZw=='</span>);</span><br></pre></td></tr></table></figure><h2 id="时间"><a href="#时间" class="headerlink" title="时间"></a>时间</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 修改时区，php.ini: date.timezone = "Asia/Shanghai"</span></span><br><span class="line">date_default_timezone_set(<span class="string">"Asia/Shanghai"</span>);</span><br><span class="line"><span class="comment">// 当前时间</span></span><br><span class="line"><span class="keyword">echo</span> date(<span class="string">"Y-m-d h:i:s"</span>, time()); <span class="comment">//2019-09-28 09:58:04</span></span><br></pre></td></tr></table></figure><h2 id="数组-对象"><a href="#数组-对象" class="headerlink" title="数组/对象"></a>数组/对象</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 数组：遍历</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getSign</span><span class="params">($data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $str = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">foreach</span>($data <span class="keyword">as</span> $key =&gt; $value)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(is_array($value))</span><br><span class="line">            $str.=$key.<span class="string">"="</span>.getSign($value).<span class="string">"&amp;"</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            $str.=$key.<span class="string">"="</span>.$value.<span class="string">"&amp;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    $str = trim($str, <span class="string">"&amp;"</span>);</span><br><span class="line">    <span class="keyword">return</span> $str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$arr = <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">"a"</span> =&gt; <span class="string">"b"</span>,</span><br><span class="line">    <span class="string">"c"</span> =&gt; <span class="keyword">array</span>(</span><br><span class="line">        <span class="string">"d"</span> =&gt; <span class="string">"e"</span></span><br><span class="line">    ),</span><br><span class="line">    <span class="string">"e"</span> =&gt; <span class="string">"f"</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">echo</span> getSign($arr);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组：排序</span></span><br><span class="line"><span class="comment">// 键排序</span></span><br><span class="line">ksort($arr);</span><br><span class="line">krsort($arr);       <span class="comment">// 逆序</span></span><br><span class="line"><span class="comment">// 值排序</span></span><br><span class="line">sort($arr);</span><br><span class="line">rsort($arr);        <span class="comment">// 逆序</span></span><br><span class="line"><span class="comment">// 值排序：保持键值对应</span></span><br><span class="line">asort($arr);</span><br><span class="line">arsort($arr);       <span class="comment">// 逆序</span></span><br><span class="line"><span class="comment">// 支持自定义排序</span></span><br><span class="line">uksort();           <span class="comment">// 键排序</span></span><br><span class="line">uasort();           <span class="comment">// 值排序</span></span><br></pre></td></tr></table></figure><h2 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 参数处理</span></span><br><span class="line">$data = <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">'foo'</span> =&gt; <span class="string">'bar'</span>,</span><br><span class="line">    <span class="string">'baz'</span> =&gt; <span class="string">'boom'</span>,</span><br><span class="line">    <span class="string">'cow'</span> =&gt; <span class="string">'milk'</span>,</span><br><span class="line">    <span class="string">'php'</span> =&gt; <span class="string">'hypertext processor'</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">echo</span> http_build_query($data); <span class="comment">// foo=bar&amp;baz=boom&amp;cow=milk&amp;php=hypertext+processor</span></span><br><span class="line"><span class="comment">// 简单GET</span></span><br><span class="line">var_dump(file_get_contents($url));</span><br><span class="line"></span><br><span class="line"><span class="comment">// POST：直接Post数据情况</span></span><br><span class="line">$data = <span class="string">'&#123;"k":"v"&#125;'</span>;</span><br><span class="line">$cl = curl_init();</span><br><span class="line"><span class="keyword">if</span>(stripos($url, <span class="string">'https://'</span>) !== <span class="keyword">FALSE</span>) &#123;</span><br><span class="line">    curl_setopt($cl, CURLOPT_SSL_VERIFYPEER, <span class="keyword">FALSE</span>);</span><br><span class="line">    curl_setopt($cl, CURLOPT_SSL_VERIFYHOST, <span class="keyword">FALSE</span>);</span><br><span class="line">    curl_setopt($cl, CURLOPT_SSLVERSION, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">curl_setopt($cl, CURLOPT_POST, <span class="keyword">true</span>);</span><br><span class="line"><span class="comment">// 直接POST数据指定数据类型，默认FORM</span></span><br><span class="line"><span class="comment">// 屏蔽掉CURLOPT_HTTPHEADER，$data直接换成 数组即为普通表单提交模式</span></span><br><span class="line"><span class="comment">// POST 文件：array('file1'=&gt;'@/data/1.jpg')</span></span><br><span class="line">curl_setopt($cl, CURLOPT_HTTPHEADER, <span class="keyword">array</span>(<span class="string">'Content-Type: application/json'</span>, <span class="string">'Content-Length: '</span>.strlen($data)));</span><br><span class="line"></span><br><span class="line">curl_setopt($cl, CURLOPT_URL, $url);</span><br><span class="line">curl_setopt($cl, CURLOPT_RETURNTRANSFER, <span class="number">1</span> );</span><br><span class="line">curl_setopt($cl, CURLOPT_TIMEOUT,<span class="number">30</span>);<span class="comment">//设置30秒超时</span></span><br><span class="line">curl_setopt($cl, CURLOPT_POSTFIELDS, $data);</span><br><span class="line">$content = curl_exec($cl);</span><br><span class="line">$status = curl_getinfo($cl);</span><br><span class="line">curl_close($cl);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($status[<span class="string">'http_code'</span>]) &amp;&amp; $status[<span class="string">'http_code'</span>] == <span class="number">200</span>)</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"success"</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"fail"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 跨域</span></span><br><span class="line">header(<span class="string">"Content-Type: text/html; charset=UTF-8"</span>);</span><br><span class="line">header(<span class="string">"Access-Control-Allow-Origin: *"</span>);</span><br><span class="line">header(<span class="string">"Access-Control-Allow-Headers: x-requested-with"</span>);</span><br><span class="line">header(<span class="string">"Access-Control-Allow-Methods: GET, POST, GET, OPTIONS"</span>);</span><br></pre></td></tr></table></figure><h2 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">php_sapi_name(); <span class="comment">// cli代表命令行执行, 不同Web环境, 对应不同字符串</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 命令行执行判断: 方式1</span></span><br><span class="line"><span class="keyword">if</span>(php_sapi_name() == <span class="string">"cli"</span>)</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"命令行执行"</span>;</span><br><span class="line"><span class="comment">// 命令行执行判断: 方式2</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($argc))</span><br><span class="line">    test();</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 命令行参数</span></span><br><span class="line"><span class="comment"> * v: 代表字符串参数</span></span><br><span class="line"><span class="comment"> * h  $options数组是否包含h代表参数中是否包含-h</span></span><br><span class="line"><span class="comment"> * help: $options数组是否包含help代表参数中是否包含--help</span></span><br><span class="line"><span class="comment"> * src: 代表字符串参数</span></span><br><span class="line"><span class="comment"> * module:: 代表字符串数组参数, 可以指定多个</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">$options = getopt(<span class="string">'v:h'</span>, <span class="keyword">array</span>(<span class="string">'help'</span>, <span class="string">'src:'</span>,<span class="string">'module::'</span>));</span><br><span class="line">var_dump($options);</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  命令行参数解析:</span></span><br><span class="line"><span class="comment"> * php test.php -a=check -i=2399013994 -i=2399013993 -g=1</span></span><br><span class="line"><span class="comment"> * php test.php --action=check --icafe=2399013994 --icafe=2399013995 --grade=1</span></span><br><span class="line"><span class="comment"> * 双冒号代表是可叠加参数, 使用一次是字符串, 使用多次是数组</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">$shortopts = <span class="string">"a:i::g:"</span>;                                 <span class="comment">// 短参数: -a</span></span><br><span class="line">$longopts = <span class="keyword">array</span>(<span class="string">"action:"</span>, <span class="string">"icafe::"</span>, <span class="string">"grade:"</span>);      <span class="comment">// 长参数: --action</span></span><br><span class="line">$param_arr = getopt($shortopts, $longopts);</span><br><span class="line">print_r($param_arr);</span><br></pre></td></tr></table></figure><h2 id="特殊函数"><a href="#特殊函数" class="headerlink" title="特殊函数"></a>特殊函数</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 注册PHP退出前执行函数，可以注册多个</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">shutdown</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'Script executed with success'</span>, PHP_EOL;</span><br><span class="line">&#125;</span><br><span class="line">register_shutdown_function(<span class="string">'shutdown'</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;IDE&quot;&gt;&lt;a href=&quot;#IDE&quot; class=&quot;headerlink&quot; title=&quot;IDE&quot;&gt;&lt;/a&gt;IDE&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;PHPStorm&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;注册码: &lt;a href=&quot;http://idea.
      
    
    </summary>
    
      <category term="PHP" scheme="https://fxliu.github.io/categories/PHP/"/>
    
    
      <category term="入门" scheme="https://fxliu.github.io/tags/%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>串口通讯</title>
    <link href="https://fxliu.github.io/2019/09/22/System/CSerialPort%E4%B8%B2%E5%8F%A3%E9%80%9A%E8%AE%AF/"/>
    <id>https://fxliu.github.io/2019/09/22/System/CSerialPort串口通讯/</id>
    <published>2019-09-22T03:08:30.175Z</published>
    <updated>2019-09-22T04:10:53.373Z</updated>
    
    <content type="html"><![CDATA[<h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><ul><li><code>CreateFile</code>: 打开串口，文件名指定为<code>COM2</code>即可</li><li>参数设置：<ul><li><code>SetCommTimeouts</code>: 读写超时控制</li><li><code>SetCommState</code>: 设置参数<ul><li><code>GetCommState</code>: 获取参数(DCB)</li><li>先获取，调整需要修改的项，然后再设置</li><li>注意停止位的定义：0代表1个停止位，1代表1.5个停止位，2代表2个停止位</li></ul></li></ul></li></ul><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 常用字段</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">DCB</span> &#123;</span></span><br><span class="line">    DWORD DCBlength;      <span class="comment">/* sizeof(DCB)                     */</span></span><br><span class="line">    DWORD BaudRate;       <span class="comment">/* 波特率：115200,9600等       */</span></span><br><span class="line">    DWORD fBinary: <span class="number">1</span>;     <span class="comment">/* 数据位：通常为8    */</span></span><br><span class="line">    DWORD fParity: <span class="number">1</span>;     <span class="comment">/* 奇偶检验位          */</span></span><br><span class="line">    BYTE StopBits;        <span class="comment">/* 停止位：0,1,2 = 1, 1.5, 2        */</span></span><br><span class="line">&#125; DCB, *LPDCB;</span><br></pre></td></tr></table></figure><ul><li><code>PurgeComm</code>: 清空缓冲区<ul><li>PURGE_TXABORT：中断所有写操作并立即返回，即使写操作还没有完成。</li><li>PURGE_RXABORT：中断所有读操作并立即返回，即使读操作还没有完成。</li><li>PURGE_TXCLEAR：清除输出缓冲区</li><li>PURGE_RXCLEAR：清除输入缓冲区</li></ul></li><li><code>ReadFile</code>: 读</li><li><code>WriteFile</code>: 写</li><li>串口遍历<ul><li><code>SetupDiGetClassDevs</code>: 打开句柄<ul><li>GUID: <code>GUID_CLASS_COMPORT</code>，在<code>WinIoCtl.h</code>文件中被定义</li><li><code>SetupDiDestroyDeviceInfoList</code>：释放句柄</li></ul></li><li><code>SetupDiEnumDeviceInterfaces</code>: 遍历</li><li><code>SetupDiGetDeviceInterfaceDetail</code>: 接口路径，比如“COM2”什么的</li><li><code>SetupDiGetDeviceRegistryProperty</code>：接口属性<ul><li><code>SPDRP_DEVICEDESC</code>：设备描述</li><li><code>SPDRP_CLASS</code>：类名</li><li><code>SPDRP_MFG</code>：制造商</li><li><code>SPDRP_FRIENDLYNAME</code>：设备描述(友好名称)</li><li><code>SPDRP_LOCATION_INFORMATION</code>：本地环境属性</li><li><code>SPDRP_PHYSICAL_DEVICE_OBJECT_NAME</code>：设备物理名称</li><li><code>SPDRP_ENUMERATOR_NAME</code>：枚举类型</li></ul></li></ul></li></ul><h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><p><a href="https://github.com/fxliu/VCDemo/tree/master/SYSTEM/CSerialPort" target="_blank" rel="noopener">CSerialPort</a></p><h2 id="GitHub第三方库"><a href="#GitHub第三方库" class="headerlink" title="GitHub第三方库"></a>GitHub第三方库</h2><ul><li><a href="https://github.com/itas109/CSerialPort" target="_blank" rel="noopener">CSerialPort</a>，支持Windows/Linux，封装比较完善</li><li>直接搜索<code>CSerialPort</code>也有其他一些简单封装</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;API&quot;&gt;&lt;a href=&quot;#API&quot; class=&quot;headerlink&quot; title=&quot;API&quot;&gt;&lt;/a&gt;API&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;CreateFile&lt;/code&gt;: 打开串口，文件名指定为&lt;code&gt;COM2&lt;/code&gt;即可&lt;/li&gt;
      
    
    </summary>
    
      <category term="VC" scheme="https://fxliu.github.io/categories/VC/"/>
    
    
      <category term="串口" scheme="https://fxliu.github.io/tags/%E4%B8%B2%E5%8F%A3/"/>
    
      <category term="通讯" scheme="https://fxliu.github.io/tags/%E9%80%9A%E8%AE%AF/"/>
    
  </entry>
  
  <entry>
    <title>Windows开发环境</title>
    <link href="https://fxliu.github.io/2019/09/21/Java/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
    <id>https://fxliu.github.io/2019/09/21/Java/开发环境/</id>
    <published>2019-09-21T02:55:05.240Z</published>
    <updated>2019-10-03T07:50:38.002Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.runoob.com/java/java-environment-setup.html" target="_blank" rel="noopener">菜鸟教程</a></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul><li><a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html" target="_blank" rel="noopener">安装包下载</a><a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html" target="_blank" rel="noopener">http://www.oracle.com/technetwork/java/javase/downloads/index.html</a></li><li>点击最新版的JDK(Java SE DownLoads)下载就行</li><li>下载页：Java SE Development Kit XX<ul><li>点击同意协议：Accept License Agreement</li><li>然后下载Windows版安装包即可</li></ul></li></ul><h2 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h2><ul><li>我的电脑-&gt;属性-&gt;高级-&gt;环境变量-&gt;系统环境变量</li><li>JAVA_HOME：软件安装路径，例如：C:\Program Files\Java\jdk-13</li><li>Path：补充”%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin”</li></ul><h2 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境"></a>测试环境</h2><figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure><h2 id="HelloWorld"><a href="#HelloWorld" class="headerlink" title="HelloWorld"></a>HelloWorld</h2><ul><li>创建HelloWorld.java文件，<strong>文件名需与类名一致</strong>，代码如下：</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello World"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><ul><li><p>编码GBK的不可映射字符：<code>javac -encoding UTF-8 test.java</code></p></li><li><p>编译：<code>javac HelloWorld.java</code></p><ul><li>生成：<code>HelloWorld.class</code>文件</li></ul></li><li><p>执行：<code>java HelloWorld</code></p><ul><li>打印：<code>Hello World</code></li></ul></li></ul><h2 id="IDE"><a href="#IDE" class="headerlink" title="IDE"></a>IDE</h2><ul><li>netbeans<ul><li>Java官网有netbeans的下载链接</li><li>netbeans官网<a href="https://netbeans.org/" target="_blank" rel="noopener">https://netbeans.org/</a>, 下载最新的LTS版即可</li><li>绿色版，直接解压就可以用</li></ul></li><li>Java with Ant<ul><li>工程创建使用：Java with Ant（其他俩没找到怎么挂在第三方库 -_-! ）</li><li>常规库，直接Alt+Enter键自动import</li><li>右键Libraries导入其他第三方库<ul><li>mvn：<a href="https://mvnrepository.com/" target="_blank" rel="noopener">https://mvnrepository.com/</a></li></ul></li><li>编译Jar<ul><li>补充如下内容到<code>build.xml</code></li><li>右键<code>build.xml</code>-&gt;<code>Run Target</code>-&gt;<code>Other Targets</code>-&gt;<code>pachage-for-store</code>，完成打包</li></ul></li></ul></li><li>打包后的jar运行错误处理<ul><li>提示缺少辅助jar之类，工程右键-&gt;属性-&gt;源：降低目标版本号即可</li></ul></li></ul><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">target</span> <span class="attr">name</span>=<span class="string">"package-for-store"</span> <span class="attr">depends</span>=<span class="string">"jar"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Change the value of this property to be the name of your JAR,</span></span><br><span class="line"><span class="comment">         minus the .jar extension. It should not have spaces.</span></span><br><span class="line"><span class="comment">         &lt;property name="store.jar.name" value="MyJarName"/&gt;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"store.jar.name"</span> <span class="attr">value</span>=<span class="string">"目标文件名"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- don't edit below this line --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"store.dir"</span> <span class="attr">value</span>=<span class="string">"store"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"store.jar"</span> <span class="attr">value</span>=<span class="string">"$&#123;store.dir&#125;/$&#123;store.jar.name&#125;.jar"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">echo</span> <span class="attr">message</span>=<span class="string">"Packaging $&#123;application.title&#125; into a single JAR at $&#123;store.jar&#125;"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">dir</span>=<span class="string">"$&#123;store.dir&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mkdir</span> <span class="attr">dir</span>=<span class="string">"$&#123;store.dir&#125;"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">jar</span> <span class="attr">destfile</span>=<span class="string">"$&#123;store.dir&#125;/temp_final.jar"</span> <span class="attr">filesetmanifest</span>=<span class="string">"skip"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">zipgroupfileset</span> <span class="attr">dir</span>=<span class="string">"dist"</span> <span class="attr">includes</span>=<span class="string">"*.jar"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">zipgroupfileset</span> <span class="attr">dir</span>=<span class="string">"dist/lib"</span> <span class="attr">includes</span>=<span class="string">"*.jar"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">manifest</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">attribute</span> <span class="attr">name</span>=<span class="string">"Main-Class"</span> <span class="attr">value</span>=<span class="string">"$&#123;main.class&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">jar</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">zip</span> <span class="attr">destfile</span>=<span class="string">"$&#123;store.jar&#125;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">zipfileset</span> <span class="attr">src</span>=<span class="string">"$&#123;store.dir&#125;/temp_final.jar"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">excludes</span>=<span class="string">"META-INF/*.SF, META-INF/*.DSA, META-INF/*.RSA"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">zip</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">file</span>=<span class="string">"$&#123;store.dir&#125;/temp_final.jar"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>Java with Maven<ul><li>创建工程后，源码路径比较深，保持原样，在最深层创建java文件开发即可</li><li>引入jar<ul><li>打开pom.xml</li><li>右键<code>Insert Code...</code> -&gt; <code>dependency</code> -&gt; 输入对应的字段搜索即可，或者预先到<a href="https://mvnrepository.com/" target="_blank" rel="noopener">maven</a>, 直接补充到pom中</li><li>保存pom的时候该jar会自动被下载，并显示到项目中；如果没显示出来，可以编译下，会触发下载</li></ul></li></ul></li></ul><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--pom.xml--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.bouncycastle<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>bcprov-jdk15on<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.63<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.runoob.com/java/java-environment-setup.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;菜鸟教程&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; c
      
    
    </summary>
    
      <category term="JAVA" scheme="https://fxliu.github.io/categories/JAVA/"/>
    
    
      <category term="入门" scheme="https://fxliu.github.io/tags/%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>FFmepg(4.2)+SDL(2.0)播放器</title>
    <link href="https://fxliu.github.io/2019/09/16/Tools/FFmepg+SDL%E6%92%AD%E6%94%BE%E5%99%A8/"/>
    <id>https://fxliu.github.io/2019/09/16/Tools/FFmepg+SDL播放器/</id>
    <published>2019-09-16T09:55:53.191Z</published>
    <updated>2019-09-16T09:55:53.191Z</updated>
    
    <content type="html"><![CDATA[<h2 id="FFmepg环境-4-2"><a href="#FFmepg环境-4-2" class="headerlink" title="FFmepg环境(4.2)"></a>FFmepg环境(4.2)</h2><ul><li><a href="http://ffmpeg.zeranoe.com/builds/" target="_blank" rel="noopener">FFmepg官网</a> 下载最新的ffmpeg的dev版和share版，当前最新版是4.2<ul><li>注意区分x64和x86，取决于你vs2015调试的解决方案平台用什么，如果安装了错误的版本将会出现一堆无法解析的错误</li><li>包含三个版本：Static、Shared以及Dev<ul><li>Static: 包含3个应用程序：ffmpeg.exe , ffplay.exe , ffprobe.exe，体积都很大，相关的DLL已经被编译到exe里面去了。</li><li>Shared: 除了ffmpeg.exe , ffplay.exe , ffprobe.exe之外还有一些DLL，exe体积很小，在运行时到相应的DLL中调用功能。</li><li>Dev: 开发者（developer）版本，里面包含了库文件xxx.lib以及头文件xxx.h，这个版本不含exe文件</li></ul></li><li>把dev版本与share版本都下下来解压，dev版本文件夹中的Include和lib目录整个儿复制到VS项目目录下</li><li>将share版本文件夹中bin目录下对应的所有dll复制到exe根目录</li></ul></li></ul><h3 id="FFmepg引入"><a href="#FFmepg引入" class="headerlink" title="FFmepg引入"></a>FFmepg引入</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 头文件中的函数定义在编译为 C 程序的文件中，而头文件是在 C++ 文件中不带 extern “C” 修饰符声明的。在此情况下，需要添加extern "C"修饰符。</span></span><br><span class="line"><span class="comment">// 不添加 extern “C” 修饰符 会提示 无法解析 导致编译失败</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"libavcodec\avcodec.h"</span>  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"libavformat\avformat.h"</span>  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"libavutil\channel_layout.h"</span>  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"libavutil\common.h"</span>  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"libavutil\imgutils.h"</span>  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"libswscale\swscale.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"libavutil\imgutils.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"libavutil\opt.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"libavutil\mathematics.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"libavutil\samplefmt.h"</span></span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib, <span class="meta-string">"avcodec.lib"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib, <span class="meta-string">"avformat.lib"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib, <span class="meta-string">"avdevice.lib"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib, <span class="meta-string">"avfilter.lib"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib, <span class="meta-string">"avutil.lib"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib, <span class="meta-string">"postproc.lib"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib, <span class="meta-string">"swresample.lib"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib, <span class="meta-string">"swscale.lib"</span>)</span></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s"</span>, avcodec_configuration());</span><br></pre></td></tr></table></figure><h3 id="FFmepg应用"><a href="#FFmepg应用" class="headerlink" title="FFmepg应用"></a>FFmepg应用</h3><p>关键函数调试不通过时，还是自己到dev版的examples搜函数使用案例吧，网上各种旧版本的说明，有些函数已经废弃了，调用逻辑也不对</p><p>视频播放基本上时固定模式打开-&gt;参数设定-&gt;读取-&gt;解码-&gt;转码-&gt;显示，剩下的看Demo吧</p><p>音频处理流程基本类似</p><ul><li><code>avformat_open_input</code>打开视频文件<ul><li><code>avformat_close_input</code>关闭视频文件</li></ul></li><li><code>av_read_frame</code>读</li><li><code>avcodec_send_packet</code> -&gt; <code>avcodec_receive_frame</code>解码</li><li><code>sws_scale</code>转码，Demo中时转为YUV420P格式，提供SDL播放<ul><li>注意保存解码结果的缓冲区的申请，被网上旧代码各种坑，自己去examples看官方势力吧</li><li>注意还有个视频/音频播放延迟提取，SDL播放时要做到音视频同步</li></ul></li></ul><h3 id="备记几个FFmepg常用参数"><a href="#备记几个FFmepg常用参数" class="headerlink" title="备记几个FFmepg常用参数"></a>备记几个FFmepg常用参数</h3><ul><li>格式转换<ul><li><code>ffmpeg -i input.avi output.mp4</code></li><li><code>-vcodec mpeg4</code>：指定编码格式</li></ul></li><li>裁剪：从30秒开始到40秒<ul><li><code>ffmpeg -i input.wmv -ss 30 -t 10 output.wmv</code></li><li><code>ffmpeg -i input.wmv -ss 30 -to 40 output.wmv</code><ul><li>把-ss, -t参数放在-i参数之后，是对输出文件执行的seek操作; 逐帧解码，直到-ss设置的时间点为止，这么操作会很慢，虽然时间点是准确的，但是很容易出现黑屏问题。</li><li>将-ss，-t参数放在-i参数之前，对输入文件执行seek操作，会seek到-ss设置的时间点前面的关键帧上，时间不精确，但是不会出现黑屏。<ul><li>可以补充accurate_seek 参数，让剪切时间更加精准，但seek要放在-i之前</li><li><code>ffmpeg -ss 10 -t 15 -accurate_seek -i test.mp4 cut.mp4</code></li><li>如果编码格式采用的copy 最好加上 -avoid_negative_ts 1参数</li><li><code>ffmpeg -ss 10 -t 15 -accurate_seek -i test.mp4 -codec copy -avoid_negative_ts 1 cut.mp4</code></li></ul></li></ul></li><li><code>-c copy</code>：复制所有的流</li><li><code>-vcodec copy</code>：使用跟原视频一样的视频编解码器</li><li><code>-acodec copy</code>：使用跟原视频一样的音频编解码器</li><li>``</li></ul></li><li>音量：音贝<ul><li><code>.\ffmpeg -i s1.mp4 -af &quot;volumedetect&quot; -f null /dev/null</code>：查看<code>mean_volume</code>-&gt;<code>max_volume</code></li><li><code>ffmpeg  -i input.mp3 -af &quot;volume=0.5&quot; output.mp3</code>：减半</li><li><code>ffmpeg  -i input.mp3 -af &quot;volume=2&quot; output.mp3</code>：加倍</li><li><code>ffmpeg  -i input.mp3 -af &quot;volume=5dB&quot; output.mp3</code>：增加指定分贝数（使用负数<code>-5dB</code>则为降低分贝）</li><li><code>ffmepg -i input.mp3 -filter:a &quot;loudnorm&quot; output.mp3</code>：音频标准化：削峰填谷，使整个音频的音量变化跨度降低，变得平滑</li></ul></li></ul><h2 id="SDL环境-2-0"><a href="#SDL环境-2-0" class="headerlink" title="SDL环境(2.0)"></a>SDL环境(2.0)</h2><ul><li><a href="http://www.libsdl.org/" target="_blank" rel="noopener">SDL官网</a></li></ul><h3 id="SDL引入"><a href="#SDL引入" class="headerlink" title="SDL引入"></a>SDL引入</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ffmpeg\libavutil\frame.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"SDL/SDL.h"</span></span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib, <span class="meta-string">"SDL2.lib"</span>)</span></span><br></pre></td></tr></table></figure><h3 id="SDL应用"><a href="#SDL应用" class="headerlink" title="SDL应用"></a>SDL应用</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 初始化</span></span><br><span class="line">SDL_Init(SDL_INIT_EVERYTHING);</span><br><span class="line"><span class="comment">// 创建窗体：支持直接创建一个弹出窗，或者附加到指定窗体句柄上</span></span><br><span class="line"><span class="keyword">if</span> (!m_hWnd)</span><br><span class="line">&#123;</span><br><span class="line">  m_sdlWindow = SDL_CreateWindow(<span class="string">"SDL_Window"</span>, SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED,</span><br><span class="line">    w, h, SDL_WINDOW_SHOWN | SDL_WINDOW_RESIZABLE);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">  m_sdlWindow = SDL_CreateWindowFrom(m_hWnd);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 渲染器</span></span><br><span class="line">m_sdlRenderer = SDL_CreateRenderer(m_sdlWindow, <span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="comment">// 设置Renderer按视频比例(m_videoWidth, m_videoHeight)缩放，默认按屏幕拉伸</span></span><br><span class="line">SDL_RenderSetLogicalSize(m_sdlRenderer, m_videoWidth, m_videoHeight);</span><br><span class="line"><span class="comment">// 纹理：Texture宽高一定要对应视频宽高</span></span><br><span class="line">m_sdlTexture = SDL_CreateTexture(m_sdlRenderer, SDL_PIXELFORMAT_IYUV, SDL_TEXTUREACCESS_STREAMING, m_videoWidth, m_videoHeight);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 视频播放 frame 为FFmepg解码后的数据帧</span></span><br><span class="line"><span class="keyword">if</span> (m_sdlTexture) SDL_UpdateTexture(m_sdlTexture, <span class="literal">NULL</span>, frame-&gt;data[<span class="number">0</span>], frame-&gt;linesize[<span class="number">0</span>]);</span><br><span class="line"><span class="comment">// 遇到SDL_UpdateTexture崩溃情况的话，可以尝试直接调用SDL_UpdateYUVTexture</span></span><br><span class="line"><span class="comment">//if (m_sdlTexture) SDL_UpdateYUVTexture(m_sdlTexture, NULL,</span></span><br><span class="line"><span class="comment">//  frame-&gt;data[0], frame-&gt;linesize[0], frame-&gt;data[1], frame-&gt;linesize[1], frame-&gt;data[2], frame-&gt;linesize[2]);</span></span><br><span class="line"><span class="keyword">if</span> (m_sdlRenderer) SDL_RenderClear(m_sdlRenderer);</span><br><span class="line"><span class="keyword">if</span> (m_sdlRenderer &amp;&amp; m_sdlTexture) SDL_RenderCopy(m_sdlRenderer, m_sdlTexture, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">if</span> (m_sdlRenderer) SDL_RenderPresent(m_sdlRenderer);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 清理</span></span><br><span class="line"><span class="keyword">if</span> (m_sdlTexture)</span><br><span class="line">&#123;</span><br><span class="line">  SDL_DestroyTexture(m_sdlTexture);</span><br><span class="line">  m_sdlTexture = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (m_sdlRenderer)</span><br><span class="line">&#123;</span><br><span class="line">  SDL_DestroyRenderer(m_sdlRenderer);</span><br><span class="line">  m_sdlRenderer = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (m_sdlWindowScreen)</span><br><span class="line">&#123;</span><br><span class="line">  SDL_FreeSurface(m_sdlWindowScreen);</span><br><span class="line">  m_sdlWindowScreen = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (m_sdlWindow)</span><br><span class="line">&#123;</span><br><span class="line">  SDL_DestroyWindow(m_sdlWindow);</span><br><span class="line">  m_sdlWindow = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">SDL_Quit();</span><br><span class="line"><span class="comment">// ----------------------------------------------------------</span></span><br><span class="line"><span class="comment">// 音频播放回调</span></span><br><span class="line"><span class="comment">//音频设备需要更多数据的时候会调用该回调函数</span></span><br><span class="line"><span class="keyword">void</span> CMyVideo::read_audio_data(<span class="keyword">void</span> *udata, Uint8 *stream, <span class="keyword">int</span> len)</span><br><span class="line">&#123;</span><br><span class="line">  CMyVideo *pThis = (CMyVideo*)udata;</span><br><span class="line">  <span class="comment">//首先使用SDL_memset()将stream中的数据设置为0</span></span><br><span class="line">  SDL_memset(stream, <span class="number">0</span>, len);</span><br><span class="line">  <span class="keyword">if</span> (pThis-&gt;m_audio_len == <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  len = (len &gt; (<span class="keyword">int</span>)pThis-&gt;m_audio_len ? pThis-&gt;m_audio_len : len);</span><br><span class="line">  <span class="comment">// 最后一个参数代表音量：SDL_MIX_MAXVOLUME</span></span><br><span class="line">  SDL_MixAudio(stream, pThis-&gt;m_audio_pos, len, pThis-&gt;m_volume);</span><br><span class="line">  pThis-&gt;m_audio_pos += len;</span><br><span class="line">  pThis-&gt;m_audio_len -= len;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 打开音频</span></span><br><span class="line">BOOL CMyVideo::OpenAudio(<span class="keyword">int</span> audioRate, Uint16 audioFrameSize)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 音频参数: 最好和视频参数保持一致，否则会有杂声</span></span><br><span class="line">  SDL_AudioSpec spec;</span><br><span class="line">  spec.freq = audioRate;        <span class="comment">// 对应音频转换设置</span></span><br><span class="line">  spec.format = AUDIO_S32;      <span class="comment">// 对应音频转换设置</span></span><br><span class="line">  spec.channels = <span class="number">2</span>;</span><br><span class="line">  spec.silence = <span class="number">0</span>;</span><br><span class="line">  spec.samples = audioFrameSize;    <span class="comment">// 对应音频帧缓存大小</span></span><br><span class="line">  spec.callback = read_audio_data;</span><br><span class="line">  spec.userdata = <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (SDL_OpenAudio(&amp;spec, <span class="literal">NULL</span>) &lt; <span class="number">0</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span> FALSE;</span><br><span class="line">  &#125;</span><br><span class="line">  SDL_PauseAudio(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 音频播放：buf/len为FFmepg音频解析结果</span></span><br><span class="line">m_audio_chunk = buf[<span class="number">0</span>];</span><br><span class="line">m_audio_pos = m_audio_chunk;</span><br><span class="line">m_audio_len = len;</span><br><span class="line"><span class="comment">// 等待播放完成</span></span><br><span class="line"><span class="keyword">while</span> (m_audio_len &gt; <span class="number">0</span>)</span><br><span class="line">  SDL_Delay(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 音频关闭</span></span><br><span class="line">SDL_CloseAudio();</span><br></pre></td></tr></table></figure><h2 id="SDL扩展"><a href="#SDL扩展" class="headerlink" title="SDL扩展"></a>SDL扩展</h2><ul><li><a href="http://www.libsdl.org/projects/SDL_image/" target="_blank" rel="noopener">SDL_Image</a>扩展支持多种类型图片加载<ul><li>SDL默认只支持加载BMP</li></ul></li><li><a href="http://www.libsdl.org/projects/SDL_mixer/" target="_blank" rel="noopener">SDL_mixer</a>扩展各种音乐播放</li></ul><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 窗体创建：略，SDL窗体句柄：sdlWindow</span></span><br><span class="line">SDL_Surface *image = SDL_LoadBMP(<span class="string">"1.bmp"</span>);</span><br><span class="line">SDL_Renderer *renderer = SDL_CreateRenderer(sdlWindow, <span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line">SDL_Texture *texture = SDL_CreateTextureFromSurface(renderer, image);</span><br><span class="line"><span class="comment">// SDL_RenderClear(renderer);</span></span><br><span class="line"><span class="comment">// 复制到渲染器</span></span><br><span class="line">SDL_RenderCopy(renderer, texture, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="comment">// 渲染显示</span></span><br><span class="line">SDL_RenderPresent(renderer);</span><br><span class="line"><span class="comment">// 数据释放：略</span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 代码备记：未校验</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;SDL\SDL_mixer.h&gt;</span></span></span><br><span class="line">SDL_Init(SDL_INIT_EVERYTHING)</span><br><span class="line">Mix_OpenAudio(<span class="number">44100</span>,MIX_DEFAULT_FORMAT,<span class="number">2</span>,<span class="number">2048</span>);</span><br><span class="line">Mix_Music *sound=Mix_LoadMUS(<span class="string">"sound.wav"</span>);</span><br><span class="line">Mix_PlayMusic(sound,<span class="number">1</span>);</span><br></pre></td></tr></table></figure><h2 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h2><ul><li>注意FFmepg解析和SDL播放需要多线程分开，避免视频/音频播放卡顿</li><li>SDL音频和视频的播放一定要多线程，不能相互等待</li><li>音频和视频要注意延迟处理，Window延迟控制是达不到播放要求的，做个毫秒级的延迟同步即可，人类是感知不到这点误差的</li><li>音视频同步要控制视频播放，让视频帧根据音频播放加减速，声音播放不能卡顿，很容被人耳感知的</li><li>SDL核心是图像的加载，渲染，显示；而视频播放就是图片快速切换而已。</li></ul><h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><p><a href="https://github.com/fxliu/VCDemo/tree/master/TOOLS/ffmpeg+SDL" target="_blank" rel="noopener">FFmpeg+SDL播放器</a><br><code>https://github.com/fxliu/VCDemo/tree/master/TOOLS/ffmpeg+SDL</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;FFmepg环境-4-2&quot;&gt;&lt;a href=&quot;#FFmepg环境-4-2&quot; class=&quot;headerlink&quot; title=&quot;FFmepg环境(4.2)&quot;&gt;&lt;/a&gt;FFmepg环境(4.2)&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://ffmpeg
      
    
    </summary>
    
      <category term="VC" scheme="https://fxliu.github.io/categories/VC/"/>
    
    
      <category term="FFmepg" scheme="https://fxliu.github.io/tags/FFmepg/"/>
    
      <category term="SDL" scheme="https://fxliu.github.io/tags/SDL/"/>
    
      <category term="UI" scheme="https://fxliu.github.io/tags/UI/"/>
    
  </entry>
  
  <entry>
    <title>无线网卡</title>
    <link href="https://fxliu.github.io/2019/09/16/System/WLan/"/>
    <id>https://fxliu.github.io/2019/09/16/System/WLan/</id>
    <published>2019-09-16T06:55:54.123Z</published>
    <updated>2019-09-16T10:32:07.828Z</updated>
    
    <content type="html"><![CDATA[<h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><ul><li><code>WlanOpenHandle</code>: 打开操作句柄</li><li><code>WlanEnumInterfaces</code>: 遍历无线设备接口，并获取接口状态<ul><li>已连接，连接中，已断开等</li></ul></li><li><code>WlanGetAvailableNetworkList</code>: 遍历热点<ul><li>包含SSID，加密方式等热点信息</li></ul></li><li><code>WlanGetProfileList</code>: 获取机器已保存所有热点配置<ul><li>Windows没连接一次热点，会自动保存一份该热点的配置文件，配置文件名一般就是热点名</li><li>API操作中配置文件名可以随意指定</li></ul></li><li><code>WlanDeleteProfile</code>: 删除指定配置文件</li><li><code>WlanSetProfile</code>: 新增/重置指定配置文件</li><li><code>WlanConnect</code>: WIFI连接指令，Windows会自动查找默认配置，并尝试连接<ul><li>该函数指令返回时，仅说明Windows接收到该指令并开始执行，不保证能连接成功</li></ul></li><li><code>WlanDisconnect</code>: 终止WIFI连接</li></ul><h2 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h2><ul><li>查看所有配置名称: <code>netsh wlan show profile</code></li><li>连接到无线WIFI: <code>wlan connect name=PROFILE</code><ul><li>指定SSID: <code>netsh wlan connect ssid=SSID name=PROFILE</code></li></ul></li><li>断开无线: <code>netsh wlan disconnect</code></li><li>添加配置: <code>Netsh WLAN add profile filename=&quot;存放路径&quot;</code></li><li>导出配置：<code>Netsh WLAN export profile key=clear folder=&quot;存放路径&quot;</code><ul><li>导出的 XML 配置文件是明文存储，而且会导出 WIFI 连接密码</li></ul></li><li>删除配置: <code>Netsh WLAN delete profile name=&quot;无线名称&quot;</code></li><li>无线网卡配置，状态: <code>Netsh WLAN show interfaces</code></li><li>查看指定网卡: <code>Netsh WLAN show interface name=&quot;网卡名称&quot;</code></li><li>查看已存储密码: <code>Netsh WLAN show profile name=&quot;无线名称&quot; key=clear</code></li><li>查看无线网卡信息: <code>Netsh WLAN show drivers</code></li><li>无线网卡兼容/支持的功能: <code>Netsh WLAN show wirelesscapabilities</code></li></ul><h2 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h2><ul><li>都是Windows标准API，懒得解释了，需要的时候直接看Demo把</li><li>Demo中检查到Wifi已连接时，是通过注册表获取IP数据的，实际上这个有延迟<ul><li>通常Windows先连接AP，然后在自动获取IP，而且获取IP整个动作是有延迟的，此时即使是使用ipconfig也未必能拿到正确的状态</li><li>问题备记，搁置~~</li></ul></li></ul><h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><p><a href="https://github.com/fxliu/VCDemo/tree/master/SYSTEM/WLan" target="_blank" rel="noopener">WLan</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;API&quot;&gt;&lt;a href=&quot;#API&quot; class=&quot;headerlink&quot; title=&quot;API&quot;&gt;&lt;/a&gt;API&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;WlanOpenHandle&lt;/code&gt;: 打开操作句柄&lt;/li&gt;
&lt;li&gt;&lt;code&gt;WlanEnumI
      
    
    </summary>
    
      <category term="VC" scheme="https://fxliu.github.io/categories/VC/"/>
    
    
      <category term="WLAN" scheme="https://fxliu.github.io/tags/WLAN/"/>
    
      <category term="无线网卡" scheme="https://fxliu.github.io/tags/%E6%97%A0%E7%BA%BF%E7%BD%91%E5%8D%A1/"/>
    
  </entry>
  
  <entry>
    <title>UPNP穿透</title>
    <link href="https://fxliu.github.io/2019/09/12/Net/UPNP/"/>
    <id>https://fxliu.github.io/2019/09/12/Net/UPNP/</id>
    <published>2019-09-12T10:14:38.665Z</published>
    <updated>2019-09-12T10:56:09.757Z</updated>
    
    <content type="html"><![CDATA[<h2 id="UPNP"><a href="#UPNP" class="headerlink" title="UPNP"></a>UPNP</h2><p>用即插即用（英语：Universal Plug and Play，简称UPnP）是由“通用即插即用论坛”（UPnP™ Forum）推广的一套网络协议。<br>该协议的目标是使家庭网络（数据共享、通信和娱乐）和公司网络中的各种设备能够相互无缝连接，并简化相关网络的实现。<br>UPnP通过定义和发布基于开放、因特网通讯网协议标准的UPnP设备控制协议来实现这一目标。<br>UPnP这个概念是从即插即用（Plug-and-play）派生而来的，即插即用是一种热拔插技术。</p><h2 id="UPNP穿透-WIN-API"><a href="#UPNP穿透-WIN-API" class="headerlink" title="UPNP穿透(WIN API)"></a>UPNP穿透(WIN API)</h2><p>NAT穿透允许UPnP数据包在没有用户交互的情况下，无障碍的通过路由器或者防火墙（假如那个路由器或者防火墙支持NAT）。<br>事实上大部分防火墙默认都是开通这个端口的</p><h3 id="初始化COM接口"><a href="#初始化COM接口" class="headerlink" title="初始化COM接口"></a>初始化COM接口</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">```C++</span><br><span class="line">typedef enum _EPortMapping</span><br><span class="line">&#123;</span><br><span class="line">  PM_OK = 0,// 操作成功</span><br><span class="line">  PM_SUCCESS = 0,// 未注册 &amp;&amp; 可注册</span><br><span class="line">  PM_SUCCESS_EXIST,// 已注册</span><br><span class="line">  PM_ERROR = 10,// 操作失败</span><br><span class="line">  PM_ERROR_PORT,// 外网端口已被本机其他端口映射</span><br><span class="line">  PM_ERROR_REMOTE_PORT,// 外网端口已被其他机器映射</span><br><span class="line">  PM_ERROR_PORT_CONFLICT,// 端口冲突：端口必须 &gt;= 1024</span><br><span class="line">&#125;EPortMapping;</span><br><span class="line"></span><br><span class="line">// 定义结构体模型：每个IUPnPDevice都有子IUPnPDevice组以及自身提供的IUPnPService组</span><br><span class="line">typedef struct _MyUpnpService</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">  CComVariant cv;</span><br><span class="line">  CComPtr&lt;IUPnPService&gt; service;</span><br><span class="line">  _MyUpnpService(CComVariant &amp;cv)</span><br><span class="line">  &#123;</span><br><span class="line">    this-&gt;cv = cv;</span><br><span class="line">    this-&gt;service = (IUPnPService*)V_DISPATCH(&amp;cv);</span><br><span class="line">  &#125;</span><br><span class="line">  ~_MyUpnpService()</span><br><span class="line">  &#123;&#125;</span><br><span class="line">&#125;MyUpnpService;</span><br><span class="line"></span><br><span class="line">typedef struct _MyUpnpDevice</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">  CComVariant cv;</span><br><span class="line">  CComPtr&lt;IUPnPDevice&gt; device;</span><br><span class="line">  std::vector&lt;_MyUpnpDevice&gt; subDevice;</span><br><span class="line">  std::vector&lt;MyUpnpService&gt; service;</span><br><span class="line">  _MyUpnpDevice(CComVariant &amp;cv)</span><br><span class="line">  &#123;</span><br><span class="line">    this-&gt;cv = cv;</span><br><span class="line">    this-&gt;device = (IUPnPDevice*)V_DISPATCH(&amp;cv);</span><br><span class="line">  &#125;</span><br><span class="line">  ~_MyUpnpDevice()</span><br><span class="line">  &#123;</span><br><span class="line">    service.clear();</span><br><span class="line">    subDevice.clear();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;MyUpnpDevice;</span><br></pre></td></tr></table></figure><h3 id="遍历跟设备"><a href="#遍历跟设备" class="headerlink" title="遍历跟设备"></a>遍历跟设备</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">BOOL CMyUpnp::SearchRootDevices()</span><br><span class="line">&#123;</span><br><span class="line">  IUPnPDeviceFinder* pUPnPDeviceFinder;</span><br><span class="line">  HRESULT hr = CoCreateInstance(CLSID_UPnPDeviceFinder, <span class="literal">NULL</span>, CLSCTX_INPROC_SERVER,</span><br><span class="line">    IID_IUPnPDeviceFinder, <span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">void</span>**&gt;(&amp;pUPnPDeviceFinder));</span><br><span class="line">  <span class="keyword">if</span> (SUCCEEDED(hr))</span><br><span class="line">  &#123;</span><br><span class="line">    IUPnPDevices *devices = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="comment">// TypeURI: 对应ST字段内容</span></span><br><span class="line">    <span class="comment">// 查询跟设备：upnp:rootdevice</span></span><br><span class="line">    <span class="comment">// 查询网关设备：urn:schemas-upnp-org:device:InternetGatewayDevice:1</span></span><br><span class="line">    BSTR uri = SysAllocString(TEXT(<span class="string">"urn:schemas-upnp-org:device:InternetGatewayDevice:1"</span>));</span><br><span class="line">    hr = pUPnPDeviceFinder-&gt;FindByType(uri, <span class="number">0</span>, &amp;devices);</span><br><span class="line">    SysFreeString(uri);</span><br><span class="line">    <span class="keyword">if</span> (SUCCEEDED(hr))</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">// 遍历根设备</span></span><br><span class="line">      IEnumVARIANT *piEnum = <span class="literal">NULL</span>;</span><br><span class="line">      hr = devices-&gt;get__NewEnum((IUnknown**)&amp;piEnum);</span><br><span class="line">      CComVariant var;</span><br><span class="line">      ULONG nReturned = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">while</span> (piEnum-&gt;Next(<span class="number">1</span>, &amp;var, &amp;nReturned) == S_OK)</span><br><span class="line">      &#123;</span><br><span class="line">        m_rootDevices.push_back(var);</span><br><span class="line">      &#125;</span><br><span class="line">      piEnum-&gt;Release();</span><br><span class="line">    &#125;</span><br><span class="line">    pUPnPDeviceFinder-&gt;Release();</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="遍历子设备"><a href="#遍历子设备" class="headerlink" title="遍历子设备"></a>遍历子设备</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// device</span></span><br><span class="line"><span class="keyword">void</span> CMyUpnp::EnumSubDevices(MyUpnpDevice &amp;device)</span><br><span class="line">&#123;</span><br><span class="line">  device.subDevice.clear();</span><br><span class="line">  EnumSubServices(device);</span><br><span class="line">  IUPnPDevices *children;</span><br><span class="line">  <span class="keyword">if</span> (device.device-&gt;get_Children(&amp;children) == S_OK)</span><br><span class="line">  &#123;</span><br><span class="line">    IEnumVARIANT *piEnum = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">if</span> (children-&gt;get__NewEnum((IUnknown**)&amp;piEnum) == S_OK)</span><br><span class="line">    &#123;</span><br><span class="line">      CComVariant var;</span><br><span class="line">      ULONG nReturned = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">while</span> (piEnum-&gt;Next(<span class="number">1</span>, &amp;var, &amp;nReturned) == S_OK)</span><br><span class="line">      &#123;</span><br><span class="line">        device.subDevice.push_back(MyUpnpDevice(var));</span><br><span class="line">        EnumSubDevices(device.subDevice.back());</span><br><span class="line">      &#125;</span><br><span class="line">      piEnum-&gt;Release();</span><br><span class="line">    &#125;</span><br><span class="line">    children-&gt;Release();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="遍历服务"><a href="#遍历服务" class="headerlink" title="遍历服务"></a>遍历服务</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> CMyUpnp::EnumSubServices(MyUpnpDevice &amp;device)</span><br><span class="line">&#123;</span><br><span class="line">  device.service.clear();</span><br><span class="line">  <span class="comment">// 遍历服务</span></span><br><span class="line">  IUPnPServices* services = <span class="literal">NULL</span>;</span><br><span class="line">  <span class="keyword">if</span> (device.device-&gt;get_Services(&amp;services) == S_OK)</span><br><span class="line">  &#123;</span><br><span class="line">    IEnumVARIANT *piEnum = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">if</span> (services-&gt;get__NewEnum((IUnknown**)&amp;piEnum) == S_OK)</span><br><span class="line">    &#123;</span><br><span class="line">      CComVariant var;</span><br><span class="line">      ULONG nReturned = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">while</span> (piEnum-&gt;Next(<span class="number">1</span>, &amp;var, &amp;nReturned) == S_OK)</span><br><span class="line">      &#123;</span><br><span class="line">        device.service.push_back(var);</span><br><span class="line">        IUPnPService *service = (IUPnPService*)V_DISPATCH(&amp;var);</span><br><span class="line">        BSTR tmp = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">if</span> (service-&gt;get_ServiceTypeIdentifier(&amp;tmp) == S_OK)</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="comment">//cout &lt;&lt; "get_ServiceTypeIdentifier\t\t" &lt;&lt; CW2A(tmp) &lt;&lt; endl;</span></span><br><span class="line">          CString sn = tmp;</span><br><span class="line">          <span class="keyword">if</span> (sn == TEXT(<span class="string">"urn:schemas-upnp-org:service:WANIPConnection:1"</span>) || sn == TEXT(<span class="string">"urn:schemas-upnp-org:service:WANPPPConnection:1"</span>))</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="comment">// 这个就是端口映射服务</span></span><br><span class="line">            m_connService = service;</span><br><span class="line">          &#125;</span><br><span class="line">          SysFreeString(tmp);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      piEnum-&gt;Release();</span><br><span class="line">    &#125;</span><br><span class="line">    services-&gt;Release();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="端口映射"><a href="#端口映射" class="headerlink" title="端口映射"></a>端口映射</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 服务接口：发送Action事件，反馈执行结果</span></span><br><span class="line">BOOL CMyUpnp::InvokeAction(CString strAction, CComSafeArray&lt;VARIANT&gt; &amp;arr, CComVariant &amp;vaOutArgs, CComVariant &amp;vaRetVal)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (!m_connService)</span><br><span class="line">  &#123;</span><br><span class="line">    CheckSupportPortMapping();</span><br><span class="line">    <span class="keyword">if</span> (!m_connService)</span><br><span class="line">      <span class="keyword">return</span> FALSE;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function">CComVariant <span class="title">vaInActionArgs</span><span class="params">(*arr.GetSafeArrayPtr())</span></span>;</span><br><span class="line">  BSTR act = strAction.AllocSysString();</span><br><span class="line">  HRESULT re = m_connService-&gt;InvokeAction(act, vaInActionArgs, &amp;vaOutArgs, &amp;vaRetVal);</span><br><span class="line">  <span class="keyword">if</span> (re != S_OK)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> (re == DISP_E_TYPEMISMATCH)</span><br><span class="line">      wcout &lt;&lt; strAction.GetBuffer() &lt;&lt; <span class="string">L" -&gt; InvokeAction Error: 类型不匹配"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(re == E_FAIL)</span><br><span class="line">      wcout &lt;&lt; strAction.GetBuffer() &lt;&lt; <span class="string">L" -&gt; InvokeAction Error: E_FAIL"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      wcout &lt;&lt; strAction.GetBuffer() &lt;&lt; <span class="string">L" -&gt; InvokeAction Error: "</span> &lt;&lt; hex &lt;&lt; re;</span><br><span class="line">      <span class="keyword">if</span> (vaRetVal.vt == VT_BSTR)</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// 排除常规遍历提醒</span></span><br><span class="line">        <span class="keyword">if</span> (strAction != TEXT(<span class="string">"GetGenericPortMappingEntry"</span>) || CString(V_BSTR(&amp;vaRetVal)) != TEXT(<span class="string">"SpecifiedArrayIndexInvalid"</span>))</span><br><span class="line">        &#123;</span><br><span class="line">          wcout &lt;&lt; <span class="string">L" -&gt; "</span> &lt;&lt; V_BSTR(&amp;vaRetVal);</span><br><span class="line">          m_lastError = V_BSTR(&amp;vaRetVal);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      wcout &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  SysFreeString(act);</span><br><span class="line">  <span class="keyword">return</span> re == S_OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">EPortMapping CMyUpnp::AddPortMapping(CString localIP, DWORD localPort, DWORD remotePort, CString des, CString protocol, CString remoteHost)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 添加映射</span></span><br><span class="line">  CString act = TEXT(<span class="string">"AddPortMapping"</span>);</span><br><span class="line">  CComSafeArray&lt;VARIANT&gt; saInArr;</span><br><span class="line">  saInArr.Create();</span><br><span class="line">  <span class="comment">// 注意这里的参数顺序是固定的，一一对应到XML结构</span></span><br><span class="line">  saInArr.Add(CComVariant(<span class="string">""</span>));<span class="comment">// NewRemoteHost: 通常是空串</span></span><br><span class="line">  saInArr.Add(CComVariant(remotePort));<span class="comment">// NewExternalPort</span></span><br><span class="line">  saInArr.Add(CComVariant(protocol));<span class="comment">// NewProtocol: TCP|UDP</span></span><br><span class="line">  saInArr.Add(CComVariant(localPort));<span class="comment">// NewInternalPort</span></span><br><span class="line">  saInArr.Add(CComVariant(localIP));<span class="comment">// NewInternalClient</span></span><br><span class="line">  saInArr.Add(CComVariant(VARIANT_TRUE));<span class="comment">// NewEnabled: 必须是 VARIANT_TRUE</span></span><br><span class="line">  saInArr.Add(CComVariant(des.GetBuffer()));<span class="comment">// NewPortMappingDescription</span></span><br><span class="line">  saInArr.Add(CComVariant(<span class="string">"0"</span>));<span class="comment">// NewLeaseDuration</span></span><br><span class="line"></span><br><span class="line">  CComVariant vaOutArgs, vaRetVal;</span><br><span class="line">  <span class="keyword">if</span> (InvokeAction(act, saInArr, vaOutArgs, vaRetVal))</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span> PM_SUCCESS;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (m_lastError == TEXT(<span class="string">"ConflictInMappingEntry"</span>))</span><br><span class="line">    <span class="keyword">return</span> PM_ERROR_PORT_CONFLICT;</span><br><span class="line">  <span class="keyword">return</span> PM_ERROR;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">EPortMapping CMyUpnp::DeletePortMapping(DWORD remotePort, CString protocol, CString remoteHost)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 删除映射</span></span><br><span class="line">  CString act = TEXT(<span class="string">"DeletePortMapping"</span>);</span><br><span class="line">  CComSafeArray&lt;VARIANT&gt; saInArr;</span><br><span class="line">  saInArr.Create();</span><br><span class="line">  <span class="comment">// 注意这里的参数顺序是固定的，一一对应到XML结构</span></span><br><span class="line">  saInArr.Add(CComVariant(remoteHost));<span class="comment">// NewRemoteHost: 通常是空串</span></span><br><span class="line">  saInArr.Add(CComVariant(remotePort));<span class="comment">// NewExternalPort</span></span><br><span class="line">  saInArr.Add(CComVariant(protocol));<span class="comment">// NewProtocol: TCP|UDP</span></span><br><span class="line"></span><br><span class="line">  CComVariant vaOutArgs, vaRetVal;</span><br><span class="line">  <span class="keyword">if</span> (InvokeAction(act, saInArr, vaOutArgs, vaRetVal))</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span> PM_SUCCESS;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> PM_ERROR;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h2><ul><li>端口映射<ul><li><strong>测试发现仅支持&gt;=1024的端口，否则反馈端口冲突错误</strong><ul><li>端口映射服务也明确说明了这点，可以查UPNP官方文档，有XML和结构字段说明</li></ul></li><li><strong>WinAPI所传参数和XML结构中的参数是一一对应的，并且顺序是固定的</strong></li><li>WinAPI封装了网络通讯，查找/遍历/添加映射/删除映射都是网络通讯，可以抓包分析明文XML加强理解</li></ul></li><li>测试映射<ul><li>通道打通后，内网端口开HTTP服务</li><li>然后直接访问外网映射端口即可（外网映射端口只能外网访问）</li></ul></li></ul><h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><p><a href="https://github.com/fxliu/VCDemo/tree/master/NET/Upnp" target="_blank" rel="noopener">UPNP</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;UPNP&quot;&gt;&lt;a href=&quot;#UPNP&quot; class=&quot;headerlink&quot; title=&quot;UPNP&quot;&gt;&lt;/a&gt;UPNP&lt;/h2&gt;&lt;p&gt;用即插即用（英语：Universal Plug and Play，简称UPnP）是由“通用即插即用论坛”（UPnP™ For
      
    
    </summary>
    
      <category term="VC" scheme="https://fxliu.github.io/categories/VC/"/>
    
    
      <category term="UPNP" scheme="https://fxliu.github.io/tags/UPNP/"/>
    
  </entry>
  
  <entry>
    <title>HOOK键盘钩子</title>
    <link href="https://fxliu.github.io/2019/09/07/System/HOOK%E9%94%AE%E7%9B%98%E9%92%A9%E5%AD%90/"/>
    <id>https://fxliu.github.io/2019/09/07/System/HOOK键盘钩子/</id>
    <published>2019-09-07T08:51:20.632Z</published>
    <updated>2019-09-07T15:35:34.124Z</updated>
    
    <content type="html"><![CDATA[<h2 id="键盘钩子"><a href="#键盘钩子" class="headerlink" title="键盘钩子"></a>键盘钩子</h2><ul><li><code>WH_KEYBOARD_LL</code>：全局键盘钩子<ul><li>不需要封装DLL，EXE中直接钩挂即可</li><li><code>WH_KEYBOARD</code>：需要DLL封装模式使用</li></ul></li><li><code>WH_MOUSE_LL</code>：鼠标钩子，使用方式同键盘钩子<ul><li><code>WH_KEYBOARD</code>: DLL模式</li><li>DLL导出<code>HOOKPROC</code>函数</li><li>EXE加载DLL后，SetWindowsHookEx安装即可</li></ul></li></ul><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// EXE模式</span></span><br><span class="line"><span class="comment">// 挂在钩子</span></span><br><span class="line">m_hHook = SetWindowsHookEx(WH_KEYBOARD_LL, LowLevelKeyboardProc, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="comment">// 卸载钩子</span></span><br><span class="line">UnhookWindowsHookEx(m_hHook);</span><br><span class="line"><span class="comment">// 键盘事件处理</span></span><br><span class="line"><span class="function">LRESULT CALLBACK <span class="title">LowLevelKeyboardProc</span><span class="params">(<span class="keyword">int</span> nCode, WPARAM wParam, LPARAM lParam)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (nCode == HC_ACTION)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">switch</span> (wParam)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> WM_KEYDOWN:</span><br><span class="line">    <span class="keyword">case</span> WM_SYSKEYDOWN:</span><br><span class="line">    <span class="keyword">case</span> WM_KEYUP:</span><br><span class="line">    <span class="keyword">case</span> WM_SYSKEYUP:</span><br><span class="line">      PKBDLLHOOKSTRUCT p = (PKBDLLHOOKSTRUCT)lParam;</span><br><span class="line">      <span class="keyword">if</span> (p-&gt;vkCode == VK_ESCAPE &amp;&amp; GetAsyncKeyState(VK_CONTROL) &amp; <span class="number">0x8000</span> &amp;&amp; GetAsyncKeyState(VK_SHIFT) &amp; <span class="number">0x8000</span>) &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Ctrl+Shift+Esc"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        <span class="comment">// 返回1代表终止</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (p-&gt;vkCode == VK_ESCAPE &amp;&amp; GetAsyncKeyState(VK_CONTROL) &amp; <span class="number">0x8000</span>) &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Ctrl+Esc"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 其他常规事件一定要继续传递下去</span></span><br><span class="line">  <span class="keyword">return</span> CallNextHookEx(<span class="literal">NULL</span>, nCode, wParam, lParam);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 注意钩子线程不能阻塞，可以内置消息循环，确保钩子有效</span></span><br><span class="line">MSG msg;</span><br><span class="line"><span class="keyword">while</span> (!GetMessage(&amp;msg, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>) &amp;&amp; pThis-&gt;m_hHook)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">//TranslateMessage(&amp;msg);</span></span><br><span class="line">  <span class="comment">//DispatchMessage(&amp;msg);</span></span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// DLL模块方式</span></span><br><span class="line"><span class="comment">// ------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">// DLL导出函数</span></span><br><span class="line"><span class="comment">// 全局共享段，用户DLL公共数据处理，可以根据自己需要增删</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> data_seg(<span class="meta-string">"SHARED"</span>)</span></span><br><span class="line"><span class="keyword">static</span> HHOOK g_hHook = <span class="literal">NULL</span>;  <span class="comment">// 钩子句柄, 便于卸载</span></span><br><span class="line"><span class="keyword">static</span> HWND g_hookWnd = <span class="literal">NULL</span>;  <span class="comment">// 调用DLL的主窗口句柄, 这样就可以SendMessage给主窗口鼠标消息及其参数</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> data_seg()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker,<span class="meta-string">"/section:SHARED,rws"</span>)</span></span><br><span class="line"><span class="comment">// 钩子回调函数</span></span><br><span class="line"><span class="function">LRESULT CALLBACK <span class="title">MouseProc</span><span class="params">(<span class="keyword">int</span> nCode, WPARAM wParam, LPARAM lParam)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">// 有鼠标消息时，将其发给主程序</span></span><br><span class="line">  <span class="keyword">if</span> (g_hookWnd != <span class="literal">NULL</span> &amp;&amp; nCode == HC_ACTION)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// 自定义消息</span></span><br><span class="line">    ::SendMessage(g_hookWnd, WM_HOOKMSG, wParam, lParam);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 常规事件继续传递: g_hook 可以给NULL</span></span><br><span class="line">  <span class="keyword">return</span> CallNextHookEx(g_hHook, nCode, wParam, lParam);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 其他辅助导出函数</span></span><br><span class="line"><span class="function">BOOL <span class="title">SetHwnd</span><span class="params">(HWND hwnd, HHOOK hHook)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  g_hookWnd = hwnd;</span><br><span class="line">  g_hHook = hHook;</span><br><span class="line">  <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// .def 内容</span></span><br><span class="line">LIBRARY</span><br><span class="line">EXPORTS</span><br><span class="line">  MouseProc</span><br><span class="line">  SetHwnd</span><br><span class="line"><span class="comment">// ------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">// EXE 加载部分</span></span><br><span class="line"><span class="comment">// 加载DLL</span></span><br><span class="line">HMODULE hModule = LoadLibrary(GetRunPath() + TEXT(<span class="string">"\\HookDll.dll"</span>));</span><br><span class="line">PSetHwnd pSetHwnd = (PSetHwnd)GetProcAddress(hModule, <span class="string">"SetHwnd"</span>);</span><br><span class="line">HOOKPROC mouseProc = (HOOKPROC)GetProcAddress(hModule, <span class="string">"MouseProc"</span>);</span><br><span class="line"><span class="keyword">if</span> (!pSetHwnd || !mouseProc)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 安装</span></span><br><span class="line">HHOOK hHook = <span class="literal">NULL</span>;</span><br><span class="line"><span class="comment">// 0代表全局</span></span><br><span class="line">hHook = SetWindowsHookEx(WH_MOUSE, mouseProc, hModule, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (hHook)</span><br><span class="line">&#123;</span><br><span class="line">  SetWindowText(g_static, TEXT(<span class="string">"SetWindowsHookEx Success"</span>));</span><br><span class="line">  <span class="comment">// 把句柄设置进去是为了方便回传数据</span></span><br><span class="line">  pSetHwnd(g_hwnd, hHook);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  SetWindowText(g_static, TEXT(<span class="string">"SetWindowsHookEx Fail"</span>));</span><br><span class="line"><span class="comment">// 卸载</span></span><br><span class="line">FreeLibrary(hModule);</span><br><span class="line"><span class="keyword">if</span> (hHook)</span><br><span class="line">  UnhookWindowsHookEx(hHook);</span><br></pre></td></tr></table></figure><h2 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h2><ul><li>EXE模式仍然依赖于消息机制，调用<code>SetWindowsHookEx</code>的线程不可被阻塞，否则会导致钩子无效，系统所有按键事件被延迟处理</li><li>Exe需要管理员权限</li></ul><h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><p><a href="https://github.com/fxliu/VCDemo/tree/master/HOOK/KeyboardHook" target="_blank" rel="noopener">HOOK</a>包含一个EXE方式键盘钩子和一个DLL模块方式鼠标钩子<br><code>https://github.com/fxliu/VCDemo/tree/master/HOOK/KeyboardHook</code><br>EXE方式比DLL方式便捷的多，但貌似DLL模块方式速度比较快</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;键盘钩子&quot;&gt;&lt;a href=&quot;#键盘钩子&quot; class=&quot;headerlink&quot; title=&quot;键盘钩子&quot;&gt;&lt;/a&gt;键盘钩子&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;WH_KEYBOARD_LL&lt;/code&gt;：全局键盘钩子&lt;ul&gt;
&lt;li&gt;不需要封装DLL，EXE中
      
    
    </summary>
    
      <category term="VC" scheme="https://fxliu.github.io/categories/VC/"/>
    
    
      <category term="HOOK" scheme="https://fxliu.github.io/tags/HOOK/"/>
    
  </entry>
  
  <entry>
    <title>opencv2</title>
    <link href="https://fxliu.github.io/2019/09/07/Tools/opcv2/"/>
    <id>https://fxliu.github.io/2019/09/07/Tools/opcv2/</id>
    <published>2019-09-07T08:51:20.629Z</published>
    <updated>2019-09-16T10:07:27.294Z</updated>
    
    <content type="html"><![CDATA[<h2 id="opencv2部署"><a href="#opencv2部署" class="headerlink" title="opencv2部署"></a>opencv2部署</h2><ul><li>官网下载windows安装包：2.x版支持x86，3以上只有x64</li><li>案例：opencv-2.4.13.6-vc14.exe<ul><li>build\include</li><li>build\include\x86\vc14\staticlib：静态lib</li><li>build\include\x86\vc14\lib + bin：动态lib + dll</li></ul></li></ul><h3 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 基础lib - release版去掉文件名最后面的"d"</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib, <span class="meta-string">"IlmImfd.lib"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib, <span class="meta-string">"libjasperd.lib"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib, <span class="meta-string">"libjpegd.lib"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib, <span class="meta-string">"libpngd.lib"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib, <span class="meta-string">"libtiffd.lib"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib, <span class="meta-string">"zlibd.lib"</span>)</span></span><br><span class="line"><span class="comment">// 功能lib，根据代码需要补充</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib, <span class="meta-string">"opencv_core2413d.lib"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib, <span class="meta-string">"opencv_highgui2413d.lib"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib, <span class="meta-string">"opencv_imgproc2413d.lib"</span>)</span></span><br><span class="line"><span class="comment">// 静态lib需要补充下面几个</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib, <span class="meta-string">"vfw32.lib"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib, <span class="meta-string">"comctl32.lib"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib, <span class="meta-string">"gdi32.lib"</span>)</span></span><br></pre></td></tr></table></figure><h3 id="简单应用"><a href="#简单应用" class="headerlink" title="简单应用"></a>简单应用</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">VideoCapture <span class="title">cap</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="keyword">if</span> (!cap.isOpened())</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 尝试打开另一个摄像头</span></span><br><span class="line">  <span class="keyword">if</span> (!cap.open(<span class="number">1</span>))</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 设置摄像头参数: 这个要根据摄像头支持参数设置</span></span><br><span class="line">cap.<span class="built_in">set</span>(CV_CAP_PROP_FRAME_WIDTH, <span class="number">640</span>);</span><br><span class="line">cap.<span class="built_in">set</span>(CV_CAP_PROP_FRAME_HEIGHT, <span class="number">480</span>);</span><br><span class="line">cap.<span class="built_in">set</span>(CV_CAP_PROP_FPS, <span class="number">30</span>);</span><br><span class="line"><span class="comment">// 检查设置是否生效</span></span><br><span class="line"><span class="keyword">int</span> width = (<span class="keyword">int</span>)cap.get(CV_CAP_PROP_FRAME_WIDTH);</span><br><span class="line"><span class="keyword">int</span> height = (<span class="keyword">int</span>)cap.get(CV_CAP_PROP_FRAME_HEIGHT);</span><br><span class="line"><span class="keyword">if</span> (width != <span class="number">640</span> || height != <span class="number">480</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">Mat frame;</span><br><span class="line"><span class="comment">// 窗体命名</span></span><br><span class="line"><span class="keyword">char</span>* title = <span class="string">"摄像头"</span>;</span><br><span class="line">cvNamedWindow(title, WINDOW_NORMAL);</span><br><span class="line"><span class="comment">// 设置全屏</span></span><br><span class="line"><span class="comment">//cvSetWindowProperty(title, CV_WND_PROP_FULLSCREEN, CV_WINDOW_FULLSCREEN);</span></span><br><span class="line"><span class="keyword">while</span> (cap.isOpened())</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">//cap &gt;&gt; frame;</span></span><br><span class="line">  <span class="keyword">if</span> (!cap.read(frame))</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">if</span> (frame.empty())</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  imshow(title, frame);</span><br><span class="line">  <span class="keyword">char</span> ch = waitKey(<span class="number">30</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><p><a href="https://github.com/fxliu/VCDemo/tree/master/TOOLS/opencv" target="_blank" rel="noopener">opencv2 Demo</a><br><code>https://github.com/fxliu/VCDemo/tree/master/TOOLS/opencv</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;opencv2部署&quot;&gt;&lt;a href=&quot;#opencv2部署&quot; class=&quot;headerlink&quot; title=&quot;opencv2部署&quot;&gt;&lt;/a&gt;opencv2部署&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;官网下载windows安装包：2.x版支持x86，3以上只有x64&lt;/l
      
    
    </summary>
    
      <category term="VC" scheme="https://fxliu.github.io/categories/VC/"/>
    
    
      <category term="opencv" scheme="https://fxliu.github.io/tags/opencv/"/>
    
  </entry>
  
  <entry>
    <title>github+hexo搭建个人博客</title>
    <link href="https://fxliu.github.io/2019/09/04/github+hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>https://fxliu.github.io/2019/09/04/github+hexo搭建个人博客/</id>
    <published>2019-09-04T10:24:17.482Z</published>
    <updated>2019-09-16T07:30:46.448Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="https://hexo.io/" target="_blank" rel="noopener">Hexo官网</a></li><li><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">Hexo中文网</a></li></ul><hr><h2 id="nodejs"><a href="#nodejs" class="headerlink" title="nodejs"></a>nodejs</h2><ul><li>官网<a href="http://nodejs.cn/download/" title="中文网" target="_blank" rel="noopener">下载</a>安装最新版即可</li><li><a href="https://npm.taobao.org/" target="_blank" rel="noopener">淘宝cnpm镜像</a><ul><li><code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code></li><li>备注：先装的nodejs 64位，cnpm安装失败，各种百度 - 各种尝试 - 各种不好使；卸载重装32位搞定，心都碎了。</li></ul></li></ul><h2 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h2><ul><li><a href="https://desktop.github.com/" target="_blank" rel="noopener">GitHub Desktop</a>: 桌面版，Git UI工具</li><li><a href="https://gitforwindows.org/" target="_blank" rel="noopener">Git For Windows</a>: Git命令行工具，hexo需要</li><li>仓库1：<a href="https://github.com/fxliu/fxliu.github.io" title="静态文件" target="_blank" rel="noopener">博客仓库</a>静态文件部署位置</li><li>GitHub免费提供，申请方法问度娘，每个账号可以免费申请一个</li><li>仓库2：<a href="https://github.com/fxliu/hexo" target="_blank" rel="noopener">源码仓库</a>hexo源码保存位置</li></ul><h2 id="VSCode：编译器"><a href="#VSCode：编译器" class="headerlink" title="VSCode：编译器"></a>VSCode：编译器</h2><ul><li>微软官网<a href="https://code.visualstudio.com/" target="_blank" rel="noopener">下载</a>安装</li><li>推荐插件<ul><li><code>Ctrl+Shift+P</code>-&gt;<code>configure Display Language</code>安装简体中文</li><li><code>Ctrl+Shift+X</code>-&gt;<code>Markdown All in One</code></li><li><code>Ctrl+Shift+X</code>-&gt;<code>Markdown Preview Github Styling</code><ul><li><a href="https://www.jianshu.com/p/51523a1c6fe1" target="_blank" rel="noopener">规则翻译</a></li></ul></li></ul></li></ul><h2 id="hexo"><a href="#hexo" class="headerlink" title="hexo"></a><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">hexo</a></h2><ul><li>安装：<code>cnpm install -g hexo-cli</code></li><li>初始化：<code>hexo init 保存博客源码目录</code></li><li>配置：<a href="https://hexo.io/zh-cn/docs/configuration" target="_blank" rel="noopener">官网中文文档</a>说的很详细了<ul><li>然而，只需要把title什么的改成自己的就行了，其他都不用动</li></ul></li><li><code>hexo server</code>启动本地服务，看看效果如何</li></ul><h2 id="RSS插件"><a href="#RSS插件" class="headerlink" title="RSS插件"></a>RSS插件</h2><ul><li>安装插件：<code>cnpm install hexo-generator-feed</code></li><li>启用插件：修改根目录下<code>_config.yml</code>配置文件</li></ul><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="attr">plugins:</span></span><br><span class="line">  <span class="string">hexo-generator-feed</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Feed Atom</span></span><br><span class="line"><span class="attr">feed:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">atom</span></span><br><span class="line"><span class="attr">  path:</span> <span class="string">atom.xml</span></span><br><span class="line"><span class="attr">  limit:</span> <span class="number">20</span></span><br></pre></td></tr></table></figure><h2 id="主题更换：推荐一个个人比较喜欢的fexo"><a href="#主题更换：推荐一个个人比较喜欢的fexo" class="headerlink" title="主题更换：推荐一个个人比较喜欢的fexo"></a>主题更换：推荐一个个人比较喜欢的fexo</h2><ul><li><a href="https://github.com/forsigner/fexo" target="_blank" rel="noopener">fexo</a>，中文文档，配置方法说明也很详细</li><li>我是fork到我仓库使用的<ul><li>打开大佬的github，点击右上角的fork按钮</li><li>然后回到自己的github-&gt;Repositories，同名的仓库已经存在了，就是这么简单</li><li>直接把fexo放到<code>my-blog/themes/</code>目录下即可<ul><li>该目录下默认存在一个<code>landscape</code>文件夹，这个就是dexo自带的默认主题，更换主题后可以考虑删除</li></ul></li></ul></li><li>打开根目录的<code>_config.yml</code>，设为<code>theme: fexo</code></li><li>主题配置全部在<code>theme/fexo</code>里面完成，所以下面所有配置指的是配置<code>theme/fexo/_config.yml</code></li><li>名称<code>blog_name</code>，标语<code>slogan</code>，头像<code>avatar</code>什么的一笔带过</li><li>导航，根据自己需要配置<ul><li>除了<code>archives</code>是和hexo的配置文件对应的，其他都是fexo自己的</li><li><em>关键是，关键是所有fexo自己的，都需要自己敲命令启动才好使<del>~</del></em></li><li>启用就好，根据提示补充头，<code>_config.xml</code>中有默认Demo</li></ul></li></ul><h2 id="fexo：启用分类页面"><a href="#fexo：启用分类页面" class="headerlink" title="fexo：启用分类页面"></a>fexo：启用分类页面</h2><ul><li>根目录执行<code>hexo new page category</code></li><li>修改<code>my-blog/source/category/index.md</code>内容</li></ul><figure class="highlight md"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: category</span><br><span class="line">layout: category</span><br><span class="line">comments: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h2 id="fexo：启用标签页面"><a href="#fexo：启用标签页面" class="headerlink" title="fexo：启用标签页面"></a>fexo：启用标签页面</h2><ul><li>根目录执行<code>hexo new page tag</code></li><li>修改<code>my-blog/source/tag/index.md</code>内容</li></ul><figure class="highlight md"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: tag</span><br><span class="line">layout: tag</span><br><span class="line">comments: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h2 id="fexo：启用友链页面"><a href="#fexo：启用友链页面" class="headerlink" title="fexo：启用友链页面"></a>fexo：启用友链页面</h2><ul><li>根目录执行<code>hexo new page link</code></li><li>修改<code>my-blog/source/link/index.md</code>内容</li></ul><figure class="highlight md"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: link</span><br><span class="line">layout: link</span><br><span class="line">comments: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h2 id="fexo-启用关于页面"><a href="#fexo-启用关于页面" class="headerlink" title="fexo: 启用关于页面"></a>fexo: 启用关于页面</h2><ul><li>根目录执行<code>hexo new page about</code></li><li>修改<code>my-blog/source/about/index.md</code>内容</li></ul><figure class="highlight md"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: about</span><br><span class="line">layout: about</span><br><span class="line">comments: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h2 id="fexo-启用项目页面"><a href="#fexo-启用项目页面" class="headerlink" title="fexo: 启用项目页面"></a>fexo: 启用项目页面</h2><ul><li>根目录执行<code>hexo new page project</code></li><li>修改<code>my-blog/source/project/index.md</code>内容</li></ul><figure class="highlight md"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: project</span><br><span class="line">layout: project</span><br><span class="line">comments: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h2 id="fexo-自定义样式"><a href="#fexo-自定义样式" class="headerlink" title="fexo: 自定义样式"></a>fexo: 自定义样式</h2><ul><li>未自定义样式情况，屏蔽<code>personal_style: /css/personal-style.css</code></li><li>需要自定义样式，官网文档有实例</li></ul><h2 id="启用搜索页面"><a href="#启用搜索页面" class="headerlink" title="启用搜索页面"></a>启用搜索页面</h2><ul><li>目录执行<code>hexo new page search</code></li><li>修改<code>my-blog/source/search/index.md</code>内容</li></ul><figure class="highlight md"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: search</span><br><span class="line">layout: search</span><br><span class="line">comments: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure><ul><li><em>然后安装 Hexo 插件<code>hexo-search</code></em><ul><li><code>cd my-blog(hexo根目录)</code></li><li><code>npm install hexo-search --save</code></li></ul></li></ul><h2 id="安装完成，享受成果把"><a href="#安装完成，享受成果把" class="headerlink" title="安装完成，享受成果把"></a>安装完成，享受成果把</h2><ul><li><code>hexo server</code>启动本地服务，看看效果如何</li><li><code>hexo g</code>执行编译，编译结果静态文件保存到<code>Public</code>文件夹</li></ul><h2 id="部署到GitHub"><a href="#部署到GitHub" class="headerlink" title="部署到GitHub"></a>部署到GitHub</h2><ul><li>把<code>Public</code>下所有内容发布到博客仓库即可<ul><li>原理就是这么简单，如果想要自动化复制+上传，自己动手吧</li><li>git命令行自动提交需要配置秘钥什么的，就别问我这种准备使用GitHub Desktop工具的农民了</li></ul></li><li><a href="https://fxliu.github.io/">我的成果</a></li><li><a href="https://github.com/fxliu/hexo" target="_blank" rel="noopener">源码仓库</a></li><li><a href="https://github.com/fxliu/fxliu.github.io" target="_blank" rel="noopener">博客仓库</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo官网&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://hexo.io/zh-cn/docs/&quot; target=&quot;_blank&quot;
      
    
    </summary>
    
      <category term="博客" scheme="https://fxliu.github.io/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="hexo" scheme="https://fxliu.github.io/tags/hexo/"/>
    
      <category term="github" scheme="https://fxliu.github.io/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>hexo小技巧汇总</title>
    <link href="https://fxliu.github.io/2019/09/01/hexo%E5%B0%8F%E6%8A%80%E5%B7%A7%E6%B1%87%E6%80%BB/"/>
    <id>https://fxliu.github.io/2019/09/01/hexo小技巧汇总/</id>
    <published>2019-09-01T09:14:57.000Z</published>
    <updated>2019-09-04T10:24:17.482Z</updated>
    
    <content type="html"><![CDATA[<h2 id="hexo"><a href="#hexo" class="headerlink" title="hexo"></a>hexo</h2><h3 id="代码块不显示行号"><a href="#代码块不显示行号" class="headerlink" title="代码块不显示行号"></a>代码块不显示行号</h3><ul><li>调整根目录<code>_config.yml</code>配置文件</li><li><code>line_number</code>默认<code>true</code>显示行号，影响代码复制</li></ul><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">highlight:</span></span><br><span class="line"><span class="attr">  line_number:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><h2 id="fexo"><a href="#fexo" class="headerlink" title="fexo"></a>fexo</h2><ul><li>调整根目录<code>_config.yml</code>配置文件</li><li><code>busuanzi: true</code>开启网站统计<ul><li>js代码：<code>fexo\layout\_partial\head.ejs</code></li></ul></li><li><code>baidu_analytics: ****</code>百度网站统计<ul><li>js代码：<code>fexo\layout\_partial\baidu-analytics.ejs</code><ul><li>补充类型字段<code>hm.type = &quot;*.*&quot;;</code>，避免部分浏览器加载失败</li></ul></li><li>百度推送：<code>fexo\layout\_partial\baidu-analytics.ejs</code></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;hexo&quot;&gt;&lt;a href=&quot;#hexo&quot; class=&quot;headerlink&quot; title=&quot;hexo&quot;&gt;&lt;/a&gt;hexo&lt;/h2&gt;&lt;h3 id=&quot;代码块不显示行号&quot;&gt;&lt;a href=&quot;#代码块不显示行号&quot; class=&quot;headerlink&quot; title=&quot;代
      
    
    </summary>
    
      <category term="博客" scheme="https://fxliu.github.io/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="hexo" scheme="https://fxliu.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>测试页</title>
    <link href="https://fxliu.github.io/2019/09/01/test/"/>
    <id>https://fxliu.github.io/2019/09/01/test/</id>
    <published>2019-09-01T07:53:28.000Z</published>
    <updated>2019-09-04T10:24:17.482Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="博客" scheme="https://fxliu.github.io/categories/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="test" scheme="https://fxliu.github.io/categories/%E5%8D%9A%E5%AE%A2/test/"/>
    
    
      <category term="hexo" scheme="https://fxliu.github.io/tags/hexo/"/>
    
  </entry>
  
</feed>
