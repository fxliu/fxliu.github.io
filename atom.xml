<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>福</title>
  
  <subtitle>业精于勤荒于嬉</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="/"/>
  <updated>2020-07-16T11:14:10.000Z</updated>
  <id>/</id>
  
  <author>
    <name>福</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>NFS</title>
    <link href="/2020/07/16/Linux/PHP/"/>
    <id>/2020/07/16/Linux/PHP/</id>
    <published>2020-07-16T11:14:10.000Z</published>
    <updated>2020-07-16T11:14:10.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="默认配置文件"><a href="#默认配置文件" class="headerlink" title="默认配置文件"></a>默认配置文件</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># /etc/php.ini</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># PHP 时间策略调整</span></span><br><span class="line">sed -i <span class="string">'s@;date.timezone.*@date.timezone=PRC@g'</span> /etc/php.ini</span><br><span class="line"><span class="comment"># PHP 使用内存大小</span></span><br><span class="line">sed -i <span class="string">'s@memory_limit.*@memory_limit = 512M@g'</span> /etc/php.ini</span><br><span class="line"></span><br><span class="line"><span class="comment"># session目录</span></span><br><span class="line">session.save_path = <span class="string">"/tmp"</span></span><br><span class="line"><span class="comment"># apache可以修改：/etc/httpd/conf.d/php.conf</span></span><br><span class="line">php_value session.save_path    <span class="string">"/var/lib/php/session"</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      NFS
    
    </summary>
    
      <category term="linux" scheme="/categories/linux/"/>
    
    
      <category term="NFS" scheme="/tags/NFS/"/>
    
  </entry>
  
  <entry>
    <title>NFS</title>
    <link href="/2020/07/16/Linux/NFS/"/>
    <id>/2020/07/16/Linux/NFS/</id>
    <published>2020-07-16T11:14:10.000Z</published>
    <updated>2020-07-16T11:14:10.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="linux-部署"><a href="#linux-部署" class="headerlink" title="linux 部署"></a>linux 部署</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1号机安装NFS服务, 并设置为自启动</span></span><br><span class="line">yum install nfs-utils rpcbind</span><br><span class="line">vi /etc/exports</span><br><span class="line">/home/work 10.255.48.33(rw)</span><br><span class="line">systemctl <span class="built_in">enable</span> nfs</span><br><span class="line">systemctl start nfs</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意修改目录权限</span></span><br><span class="line">chown nfsnobody.nfsnobody -R /data/imgdb/</span><br><span class="line">chmod 777 -R /data/imgdb/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2号机自动挂载</span></span><br><span class="line">yum -y install nfs-utils</span><br><span class="line">showmount -e 172.19.189.192  // 查看共享</span><br><span class="line">mount -t nfs 172.19.189.192:/data/imgdb /data/imgdb   // 手动挂载</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"172.19.189.192:/data/imgdb /data/imgdb nfs defaults 0 0"</span> &gt;&gt; /etc/fstab   // 开机自动挂载</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      NFS
    
    </summary>
    
      <category term="linux" scheme="/categories/linux/"/>
    
    
      <category term="NFS" scheme="/tags/NFS/"/>
    
  </entry>
  
  <entry>
    <title>SVG</title>
    <link href="/2020/07/12/Html/vue/svg/"/>
    <id>/2020/07/12/Html/vue/svg/</id>
    <published>2020-07-12T11:27:06.000Z</published>
    <updated>2020-07-12T11:27:06.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="插件引入"><a href="#插件引入" class="headerlink" title="插件引入"></a>插件引入</h2><p><code>npm install svg-sprite-loader --save-dev</code></p><h2 id="插件配置"><a href="#插件配置" class="headerlink" title="插件配置"></a>插件配置</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// vue.config.js</span></span><br><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">dir</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> path.join(__dirname, dir)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  publicPath: <span class="string">'./'</span>,</span><br><span class="line">  lintOnSave: process.env.NODE_ENV === <span class="string">'development'</span>,</span><br><span class="line">  productionSourceMap: <span class="literal">false</span>,</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  chainWebpack(config) &#123;</span><br><span class="line">    <span class="comment">// set svg-sprite-loader，配置svg路径</span></span><br><span class="line">    config.module</span><br><span class="line">      .rule(<span class="string">'svg'</span>)</span><br><span class="line">      .exclude.add(resolve(<span class="string">'src/icons'</span>))</span><br><span class="line">      .end();</span><br><span class="line">    config.module</span><br><span class="line">      .rule(<span class="string">'icons'</span>)</span><br><span class="line">      .test(<span class="regexp">/\.svg$/</span>)</span><br><span class="line">      .include.add(resolve(<span class="string">'src/icons'</span>))</span><br><span class="line">      .end()</span><br><span class="line">      .use(<span class="string">'svg-sprite-loader'</span>)</span><br><span class="line">      .loader(<span class="string">'svg-sprite-loader'</span>)</span><br><span class="line">      .options(&#123;</span><br><span class="line">        symbolId: <span class="string">'icon-[name]'</span></span><br><span class="line">      &#125;)</span><br><span class="line">      .end();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="组件引用"><a href="#组件引用" class="headerlink" title="组件引用"></a>组件引用</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// components/SvgIcon/index.vue</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div v-<span class="keyword">if</span>=<span class="string">"isExternal"</span> :style=<span class="string">"styleExternalIcon"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"svg-external-icon svg-icon"</span> v-on=<span class="string">"$listeners"</span> /&gt;</span><br><span class="line">  &lt;svg v-<span class="keyword">else</span> :<span class="class"><span class="keyword">class</span></span>=<span class="string">"svgClass"</span> aria-hidden=<span class="string">"true"</span> v-on=<span class="string">"$listeners"</span>&gt;</span><br><span class="line">    &lt;use :href=<span class="string">"iconName"</span> /&gt;</span><br><span class="line">  &lt;<span class="regexp">/svg&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="comment">// doc: https://panjiachen.github.io/vue-element-admin-site/feature/component/svg-icon.html#usage</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  name: <span class="string">'SvgIcon'</span>,</span><br><span class="line">  props: &#123;</span><br><span class="line">    iconClass: &#123;</span><br><span class="line">      type: <span class="built_in">String</span>,</span><br><span class="line">      required: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    className: &#123;</span><br><span class="line">      type: <span class="built_in">String</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="string">''</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    isExternal() &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="regexp">/^(https?:|mailto:|tel:)/</span>.test(<span class="keyword">this</span>.iconClass)</span><br><span class="line">    &#125;,</span><br><span class="line">    iconName() &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">`#icon-<span class="subst">$&#123;<span class="keyword">this</span>.iconClass&#125;</span>`</span></span><br><span class="line">    &#125;,</span><br><span class="line">    svgClass() &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.className) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'svg-icon '</span> + <span class="keyword">this</span>.className</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'svg-icon'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    styleExternalIcon() &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        mask: <span class="string">`url(<span class="subst">$&#123;<span class="keyword">this</span>.iconClass&#125;</span>) no-repeat 50% 50%`</span>,</span><br><span class="line">        <span class="string">'-webkit-mask'</span>: <span class="string">`url(<span class="subst">$&#123;<span class="keyword">this</span>.iconClass&#125;</span>) no-repeat 50% 50%`</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;style scoped&gt;</span></span><br><span class="line"><span class="regexp">.svg-icon &#123;</span></span><br><span class="line"><span class="regexp">  width: 1.2em;</span></span><br><span class="line"><span class="regexp">  height: 1.2em;</span></span><br><span class="line"><span class="regexp">  vertical-align: -0.15em;</span></span><br><span class="line"><span class="regexp">  fill: currentColor;</span></span><br><span class="line"><span class="regexp">  overflow: hidden;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">.svg-external-icon &#123;</span></span><br><span class="line"><span class="regexp">  background-color: currentColor;</span></span><br><span class="line"><span class="regexp">  mask-size: cover!important;</span></span><br><span class="line"><span class="regexp">  display: inline-block;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>style&gt;</span><br></pre></td></tr></table></figure><h2 id="svg加载"><a href="#svg加载" class="headerlink" title="svg加载"></a>svg加载</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/index.js</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> SvgIcon <span class="keyword">from</span> <span class="string">'@/components/SvgIcon'</span><span class="comment">// svg component</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// register globally</span></span><br><span class="line">Vue.component(<span class="string">'svg-icon'</span>, SvgIcon);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> req = <span class="built_in">require</span>.context(<span class="string">'./svg'</span>, <span class="literal">false</span>, /\.svg$/);</span><br><span class="line"><span class="keyword">const</span> requireAll = <span class="function"><span class="params">requireContext</span> =&gt;</span> requireContext.keys().map(requireContext);</span><br><span class="line">requireAll(req);</span><br></pre></td></tr></table></figure><h2 id="svg-使用"><a href="#svg-使用" class="headerlink" title="svg 使用"></a>svg 使用</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建svg文件到 src/icons/svg</span></span><br><span class="line">&lt;svg-icon icon-<span class="class"><span class="keyword">class</span></span>=<span class="string">"password"</span> <span class="class"><span class="keyword">class</span>-<span class="title">name</span></span>=<span class="string">"myclass"</span> /&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      SVG
    
    </summary>
    
      <category term="JS" scheme="/categories/JS/"/>
    
    
      <category term="SVG" scheme="/tags/SVG/"/>
    
  </entry>
  
  <entry>
    <title>Git</title>
    <link href="/2020/06/18/Tools/github/"/>
    <id>/2020/06/18/Tools/github/</id>
    <published>2020-06-18T09:18:18.224Z</published>
    <updated>2020-06-18T09:18:18.224Z</updated>
    
    <content type="html"><![CDATA[<h2 id="常规指令"><a href="#常规指令" class="headerlink" title="常规指令"></a>常规指令</h2><ul><li>恢复误删除文件(尚未提交到本地库情况)：<code>git checkout -- file</code><ul><li><code>git status</code> 查看删除文件，中文会转码，但git checkout时，直接用中文使用转码文件名不好使</li><li>恢复所有<ul><li><code>git reset head ./</code></li><li><code>git checkout ./</code></li></ul></li></ul></li><li>恢复误删除文件(已提交到本地库/远程库情况)<ul><li><code>git reset --hard + 版本号</code>版本回溯, 再<code>git checkout -- file</code></li></ul></li></ul><h2 id="gihub"><a href="#gihub" class="headerlink" title="gihub"></a>gihub</h2><p><a href="http://rogerdudler.github.io/git-guide/index.zh.html" target="_blank" rel="noopener">git-简明指南</a><br><a href="https://backlog.com/git-tutorial/cn/" target="_blank" rel="noopener">猴子都能懂得GIT入门</a></p><h3 id="fork"><a href="#fork" class="headerlink" title="fork"></a>fork</h3><p>分支别人的仓库到自己仓库</p><ul><li>打开大佬的github，点击右上角的fork按钮</li><li>然后回到自己的github-&gt;Repositories，同名的仓库已经存在了，就是这么简单</li></ul>]]></content>
    
    <summary type="html">
    
      Git, Github
    
    </summary>
    
      <category term="Tools" scheme="/categories/Tools/"/>
    
    
      <category term="Git" scheme="/tags/Git/"/>
    
      <category term="Github" scheme="/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>WebStorm</title>
    <link href="/2020/05/29/Html/IDE/WebStorm/"/>
    <id>/2020/05/29/Html/IDE/WebStorm/</id>
    <published>2020-05-29T01:52:05.000Z</published>
    <updated>2020-05-29T01:52:05.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 识别 @，创建 webpack.conf.js</span></span><br><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">dir</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> path.join(__dirname, <span class="string">'.'</span>, dir)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  context: path.resolve(__dirname, <span class="string">'./'</span>),</span><br><span class="line">  resolve: &#123;</span><br><span class="line">    extensions: [<span class="string">'.js'</span>, <span class="string">'.vue'</span>, <span class="string">'.json'</span>],</span><br><span class="line">    alias: &#123;</span><br><span class="line">      <span class="string">'@'</span>: resolve(<span class="string">'src'</span>),</span><br><span class="line">      <span class="comment">// '@assets': resolve('src/assets'),</span></span><br><span class="line">      <span class="comment">// '@layouts': resolve('src/layouts'),</span></span><br><span class="line">      <span class="comment">// '@pages': resolve('src/pages'),</span></span><br><span class="line">      <span class="comment">// '@comp': resolve('src/components'),</span></span><br><span class="line">      <span class="comment">// '@api': resolve('src/api'),</span></span><br><span class="line">      <span class="comment">// '@plug': resolve('src/plugins'),</span></span><br><span class="line">      <span class="comment">// '@utils': resolve('src/utils')</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="EditorConfig"><a href="#EditorConfig" class="headerlink" title=".EditorConfig"></a>.EditorConfig</h2><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 表明是最顶层的配置文件</span></span><br><span class="line"><span class="attr">root</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件类型，可以是 *.js *.html</span></span><br><span class="line"><span class="section">[*]</span></span><br><span class="line"><span class="comment"># 编码</span></span><br><span class="line"><span class="attr">charset</span> = utf-<span class="number">8</span></span><br><span class="line"><span class="comment"># 缩进 tab | space</span></span><br><span class="line"><span class="attr">indent_style</span> = tab</span><br><span class="line"><span class="comment"># 缩进占位</span></span><br><span class="line"><span class="attr">indent_size</span> = <span class="number">4</span></span><br><span class="line"><span class="comment"># 行尾回车符统一 lf | cr | crlf</span></span><br><span class="line"><span class="attr">end_of_line</span> = lf</span><br><span class="line"><span class="comment"># 使文件以一个空白行结尾</span></span><br><span class="line"><span class="attr">insert_final_newline</span> = <span class="literal">true</span></span><br><span class="line"><span class="comment"># 除去换行行首的任意空白字符</span></span><br><span class="line"><span class="attr">trim_trailing_whitespace</span> = <span class="literal">true</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      WebStorm
    
    </summary>
    
      <category term="IDE" scheme="/categories/IDE/"/>
    
    
      <category term="WebStorm" scheme="/tags/WebStorm/"/>
    
  </entry>
  
  <entry>
    <title>组件</title>
    <link href="/2020/05/09/Html/vue/%E7%BB%84%E4%BB%B6/"/>
    <id>/2020/05/09/Html/vue/组件/</id>
    <published>2020-05-09T03:15:09.000Z</published>
    <updated>2020-05-09T03:15:09.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;my-component v-model=<span class="string">"test"</span> /&gt;</span><br><span class="line"><span class="comment">// 等价于：有些$event就是值，有些需要使用$event.target.value</span></span><br><span class="line">&lt;my-component :value=<span class="string">"value"</span> @input=<span class="string">"value = $event"</span> /&gt;</span><br><span class="line"><span class="comment">// 自定义组件中转 v-model</span></span><br><span class="line">&lt;my-component :value=<span class="string">"value"</span> @input=<span class="string">"$emit('input', $event.target.value)"</span> /&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 组件内容：自定义module名称</span></span><br><span class="line">Vue.component(<span class="string">'base-checkbox'</span>, &#123;</span><br><span class="line">  model: &#123;</span><br><span class="line">    prop: <span class="string">'checked'</span>,  <span class="comment">// 字段改名：默认 value</span></span><br><span class="line">    event: <span class="string">'change'</span>   <span class="comment">// 事件改名：默认 input</span></span><br><span class="line">  &#125;,</span><br><span class="line">  props: &#123;</span><br><span class="line">    checked: <span class="built_in">Boolean</span>  <span class="comment">// 等价于 value</span></span><br><span class="line">  &#125;,</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;input</span></span><br><span class="line"><span class="string">      type="checkbox"</span></span><br><span class="line"><span class="string">      v-bind:checked="checked"</span></span><br><span class="line"><span class="string">      v-on:change="$emit('change', $event.target.checked)"</span></span><br><span class="line"><span class="string">    &gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="sync"><a href="#sync" class="headerlink" title="sync"></a>sync</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 等价于 v-model 指定名称</span></span><br><span class="line">&lt;my-component :test.sync=<span class="string">"test"</span> /&gt;</span><br><span class="line"><span class="comment">// 展开写法</span></span><br><span class="line">&lt;my-component :test=<span class="string">"test"</span> @update:test=<span class="string">"test = $event"</span> /&gt;</span><br><span class="line"><span class="comment">// 组件更新事件</span></span><br><span class="line"><span class="keyword">this</span>.$emit(<span class="string">'update:test'</span>, v);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      组件
    
    </summary>
    
      <category term="JS" scheme="/categories/JS/"/>
    
    
      <category term="组件" scheme="/tags/%E7%BB%84%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>多线程</title>
    <link href="/2020/04/30/VC/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <id>/2020/04/30/VC/多线程/</id>
    <published>2020-04-30T12:49:55.000Z</published>
    <updated>2020-04-30T12:49:55.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><h2 id="简单线程池"><a href="#简单线程池" class="headerlink" title="简单线程池"></a>简单线程池</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// .h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="comment">/************************************************************************/</span></span><br><span class="line"><span class="comment">/* 简单线程池                                                           */</span></span><br><span class="line"><span class="comment">/************************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span><span class="params">(*PMyThreadPoolCallBack)</span><span class="params">(LPVOID lpData, LPVOID lpParam)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CMyThreadPool</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    CMyThreadPool();</span><br><span class="line">    ~CMyThreadPool();</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    CriticalSection m_cs;</span><br><span class="line">    <span class="keyword">bool</span> m_bExist;</span><br><span class="line">    PMyThreadPoolCallBack m_cb;</span><br><span class="line">    LPVOID m_cbParam;</span><br><span class="line">    DWORD m_dwQueueMaxSize;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">queue</span>&lt;LPVOID&gt; m_queue;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;HANDLE&gt; m_vecHandle;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="keyword">static</span> DWORD WINAPI _Run(LPVOID);</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Run</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">LPVOID <span class="title">GetPopFont</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Add</span><span class="params">(LPVOID pData)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span><span class="params">(DWORD dwThreadCount, DWORD queueMaxSize, PMyThreadPoolCallBack cb, LPVOID lpParam)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">WaitStop</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// .cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdafx.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"MyThreadPool.h"</span></span></span><br><span class="line"></span><br><span class="line">CMyThreadPool::CMyThreadPool()</span><br><span class="line">&#123;</span><br><span class="line">    m_bExist = <span class="literal">false</span>;</span><br><span class="line">    m_cb = <span class="literal">NULL</span>;</span><br><span class="line">    m_cbParam = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">CMyThreadPool::~CMyThreadPool()</span><br><span class="line">&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> CMyThreadPool::Add(LPVOID pData)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 控制上限</span></span><br><span class="line">    <span class="keyword">while</span> (m_queue.size() &gt; m_dwQueueMaxSize)</span><br><span class="line">        Sleep(<span class="number">1</span>);</span><br><span class="line">    <span class="function">CriticalSectionManager <span class="title">csm</span><span class="params">(m_cs)</span></span>;</span><br><span class="line">    m_queue.push(pData);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> CMyThreadPool::Start(DWORD dwThreadCount, DWORD queueMaxSize, PMyThreadPoolCallBack cb, LPVOID lpParam)</span><br><span class="line">&#123;</span><br><span class="line">    m_cb = cb;</span><br><span class="line">    m_cbParam = lpParam;</span><br><span class="line">    m_dwQueueMaxSize = queueMaxSize;</span><br><span class="line">    <span class="keyword">for</span> (DWORD index = <span class="number">0</span>; index &lt; dwThreadCount; index++)</span><br><span class="line">    &#123;</span><br><span class="line">        HANDLE handle = CreateThread(<span class="literal">NULL</span>, <span class="number">0</span>, _Run, <span class="keyword">this</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">        m_vecHandle.push_back(handle);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> CMyThreadPool::WaitStop()</span><br><span class="line">&#123;</span><br><span class="line">    m_bExist = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (DWORD index = <span class="number">0</span>; index &lt; m_vecHandle.size(); index++)</span><br><span class="line">    &#123;</span><br><span class="line">        WaitForSingleObject(m_vecHandle[index], INFINITE);</span><br><span class="line">        CloseHandle(m_vecHandle[index]);</span><br><span class="line">    &#125;</span><br><span class="line">    m_vecHandle.clear();</span><br><span class="line">    m_cb = <span class="literal">NULL</span>;</span><br><span class="line">    m_cbParam = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DWORD WINAPI CMyThreadPool::_Run(LPVOID lpVoid)</span><br><span class="line">&#123;</span><br><span class="line">    CMyThreadPool *pThis = (CMyThreadPool*)lpVoid;</span><br><span class="line">    pThis-&gt;Run();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">LPVOID CMyThreadPool::GetPopFont()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function">CriticalSectionManager <span class="title">csm</span><span class="params">(m_cs)</span></span>;</span><br><span class="line">    <span class="keyword">if</span> (m_queue.empty())</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    LPVOID pData = m_queue.front();</span><br><span class="line">    m_queue.pop();</span><br><span class="line">    <span class="keyword">return</span> pData;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> CMyThreadPool::Run()</span><br><span class="line">&#123;</span><br><span class="line">    LPVOID pData = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">while</span>(!m_bExist || !m_queue.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!m_cb || m_queue.empty())</span><br><span class="line">        &#123;</span><br><span class="line">            Sleep(<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        pData = GetPopFont();</span><br><span class="line">        <span class="keyword">if</span>(pData == <span class="literal">NULL</span>)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span> (m_cb)</span><br><span class="line">            m_cb(pData, m_cbParam);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      多线程
    
    </summary>
    
      <category term="VC" scheme="/categories/VC/"/>
    
    
      <category term="多线程" scheme="/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>element-ui</title>
    <link href="/2020/04/04/Html/vue/element-ui/"/>
    <id>/2020/04/04/Html/vue/element-ui/</id>
    <published>2020-04-04T12:59:46.000Z</published>
    <updated>2020-04-04T12:59:46.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="饿了么组件"><a href="#饿了么组件" class="headerlink" title="饿了么组件"></a>饿了么组件</h2><p><a href="https://element.eleme.cn/#/zh-CN/component/installation" target="_blank" rel="noopener">element-ui</a></p><h2 id="按需加载"><a href="#按需加载" class="headerlink" title="按需加载"></a>按需加载</h2><ul><li>安装babel编译插件<ul><li><code>npm i babel-plugin-component -D</code></li></ul></li></ul><h3 id="插件配置"><a href="#插件配置" class="headerlink" title="插件配置"></a>插件配置</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="string">"presets"</span>: [...],</span><br><span class="line">  <span class="string">"plugins"</span>: [</span><br><span class="line">    [</span><br><span class="line">      <span class="string">"component"</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">"libraryName"</span>: <span class="string">"element-ui"</span>,</span><br><span class="line">        <span class="string">"styleLibraryName"</span>: <span class="string">"theme-chalk"</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="插件加载"><a href="#插件加载" class="headerlink" title="插件加载"></a>插件加载</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'element-ui/lib/theme-chalk/index.css'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'./element.css'</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Element <span class="keyword">from</span> <span class="string">'element-ui'</span></span><br><span class="line"><span class="comment">// Vue.use(Element);</span></span><br><span class="line"><span class="comment">// 按需引用</span></span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">    Button,</span><br><span class="line">    Tag,</span><br><span class="line">    Input,</span><br><span class="line">    Loading,</span><br><span class="line">    Message,</span><br><span class="line">    Notification,</span><br><span class="line">    InfiniteScroll,</span><br><span class="line">    MessageBox,</span><br><span class="line">    Icon,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'element-ui'</span></span><br><span class="line"></span><br><span class="line">Vue.component(Button.name, Button);</span><br><span class="line">Vue.component(Tag.name, Tag);</span><br><span class="line">Vue.component(Input.name, Input);</span><br><span class="line">Vue.component(Icon.name, Icon);</span><br><span class="line"></span><br><span class="line">Vue.prototype.$message = Message;</span><br><span class="line">Vue.prototype.$notify = Notification;</span><br><span class="line"></span><br><span class="line">Vue.prototype.$msgbox = MessageBox;</span><br><span class="line">Vue.prototype.$alert = MessageBox.alert;</span><br><span class="line">Vue.prototype.$confirm = MessageBox.confirm;</span><br><span class="line">Vue.prototype.$prompt = MessageBox.prompt;</span><br><span class="line"></span><br><span class="line">Vue.use(InfiniteScroll);</span><br><span class="line"></span><br><span class="line"><span class="comment">// loading 效果默认值</span></span><br><span class="line">Vue.prototype.$loading = <span class="function"><span class="keyword">function</span> (<span class="params">options</span>) </span>&#123;</span><br><span class="line">    options = options || &#123;&#125;;</span><br><span class="line">    <span class="keyword">return</span> Loading.service(&#123;</span><br><span class="line">        text: <span class="string">'拼命加载中'</span>,</span><br><span class="line">        spinner: <span class="string">'el-icon-loading'</span>,</span><br><span class="line">        background: <span class="string">'rgba(0, 0, 0, 0.7)'</span>,</span><br><span class="line">        ...options</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      element-ui
    
    </summary>
    
      <category term="JS" scheme="/categories/JS/"/>
    
      <category term="vue" scheme="/categories/JS/vue/"/>
    
    
      <category term="element-ui" scheme="/tags/element-ui/"/>
    
  </entry>
  
  <entry>
    <title>element-ui</title>
    <link href="/2020/04/04/Html/vue/bootstrap/"/>
    <id>/2020/04/04/Html/vue/bootstrap/</id>
    <published>2020-04-04T12:59:46.000Z</published>
    <updated>2020-04-04T12:59:46.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="组件默认属性"><a href="#组件默认属性" class="headerlink" title="组件默认属性"></a>组件默认属性</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">textarea</span><span class="selector-pseudo">:focus</span> &#123;</span><br><span class="line">    <span class="attribute">outline</span>:none;   <span class="comment">/*去掉自带外边框，点击变色问题*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="对齐"><a href="#对齐" class="headerlink" title="对齐"></a>对齐</h2><figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 工具类：文本 */</span></span><br><span class="line"><span class="selector-tag">text-justify</span>: 组件对齐</span><br><span class="line">text-left | text-center | text-right: 左右定位</span><br><span class="line">text-wrap | text-nowrap: 多行定位</span><br><span class="line"><span class="comment">/* 垂直对齐 */</span></span><br><span class="line">align-baseline | align-top | align-middle | align-bottom | align-text-top | align-text-bottom</span><br></pre></td></tr></table></figure><h2 id="flex"><a href="#flex" class="headerlink" title="flex"></a>flex</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 工具类：flex布局 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"d-flex"</span> <span class="attr">bc</span>=<span class="string">"x99"</span>&gt;</span>宽度：100%<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"d-inline-flex"</span> <span class="attr">bc</span>=<span class="string">"xff"</span>&gt;</span>宽度：auto<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"d-flex flex-column"</span> <span class="attr">bc</span>=<span class="string">"x99"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>单行：左右<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>justify-content-start：居左<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>justify-content-end：居右<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>justify-content-between：两端<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>justify-content-around：两端留空<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"d-flex flex-column"</span> <span class="attr">bc</span>=<span class="string">"xff"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>单行：上下<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>align-items-start：居上<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>align-items-end：居下<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>align-items-centern：居中<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>align-items-baseline：基线对齐<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>align-items-stretch：拉伸：高度占满<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"d-flex flex-column"</span> <span class="attr">bc</span>=<span class="string">"x99"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>子元素自身：上下<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>align-self-start：居上<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>align-self-end：居下<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>align-self-centern：居中<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>align-self-baseline：基线对齐<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>align-self-stretch：拉伸：高度占满<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>子元素自身：左右<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>flex-fill：根据子内容计算子元素宽度比例<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>flex-grow-1：占满剩余空间<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>flex-shrink-1: 子元素占两行<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>子元素：上下弹簧<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>mb-auto：底部弹簧<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>mt-auto：顶端弹簧<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"d-flex flex-column"</span> <span class="attr">bc</span>=<span class="string">"xff"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>flex-nowrap: 强制单行<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>flex-wrap: 多行<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>多行：上下<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>align-content-start: 多行居上<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>align-content-end: 多行居下<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>align-content-center: 多行居中<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>align-content-between: 多行两端<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>align-content-around: 多行均分-两端留白<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>align-content-stretch: 多行拉伸<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      element-ui
    
    </summary>
    
      <category term="JS" scheme="/categories/JS/"/>
    
      <category term="vue" scheme="/categories/JS/vue/"/>
    
    
      <category term="element-ui" scheme="/tags/element-ui/"/>
    
  </entry>
  
  <entry>
    <title>数据结构</title>
    <link href="/2020/04/03/Html/JS/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <id>/2020/04/03/Html/JS/数据结构/</id>
    <published>2020-04-03T09:47:42.000Z</published>
    <updated>2020-04-03T09:47:42.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 切割</span></span><br><span class="line"><span class="string">'jpg|bmp|gif|ico|png'</span>.split(<span class="string">'|'</span>); <span class="comment">// 返回数组</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">'jpg'</span>,<span class="string">'bmp'</span>,<span class="string">'gif'</span>,<span class="string">'ico'</span>,<span class="string">'png'</span>).join(<span class="string">'|'</span>);</span><br></pre></td></tr></table></figure><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[...new <span class="built_in">Array</span>(<span class="number">10</span>).keys()]          <span class="comment">//生成[0,1,2,3,4,5,6,7,8,9]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">0</span>, len = arr.length; index &lt; len; index++) &#123;</span><br><span class="line">&#125;</span><br><span class="line">arr.forEach(<span class="function">(<span class="params">item,index,array</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//执行代码</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 清空，从指定位置开始，删除指定数量元素</span></span><br><span class="line">arr.splice(<span class="number">0</span>, arr.length);</span><br><span class="line"><span class="comment">// 头部添加</span></span><br><span class="line">arr.unshift(<span class="number">0</span>, <span class="number">1</span>, ...n);</span><br><span class="line"><span class="comment">// 结尾添加</span></span><br><span class="line">arr.push(<span class="number">0</span>, <span class="number">1</span>, ...n);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查找: 失败返回-1，成功返回下标</span></span><br><span class="line">arr.indexOf(<span class="string">'a'</span>);</span><br><span class="line"><span class="comment">// 查找(从指定下标往后查询)：返回布尔值</span></span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>].includes(<span class="string">'a'</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历：只要有一个符合条件，就返回true</span></span><br><span class="line">[<span class="string">'a'</span>,<span class="string">'b'</span>].some(<span class="function"><span class="params">d</span> =&gt;</span> d === <span class="string">'b'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 过滤</span></span><br><span class="line">[<span class="string">'1'</span>,<span class="string">'2'</span>,<span class="string">'3'</span>].filter(<span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 过滤条件</span></span><br><span class="line">    <span class="keyword">return</span> d &gt;= <span class="number">2</span>;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 合并 arr2 到 arr1</span></span><br><span class="line">arr1.push(...arr2);</span><br><span class="line"><span class="comment">// 合并arr1和arr2到arr3，arr1和arr2不变</span></span><br><span class="line">arr3 = arr1.concat(arr2);</span><br></pre></td></tr></table></figure><h2 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 合并obj2 到 obj1，并返回obj1</span></span><br><span class="line"><span class="built_in">Object</span>.assign(obj1, obj2);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 过滤</span></span><br><span class="line"><span class="keyword">const</span> newObj = &#123;&#125;;</span><br><span class="line"><span class="built_in">Object</span>.keys(obj).filter(<span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 过滤条件</span></span><br><span class="line">    <span class="keyword">return</span> obj[key].status;</span><br><span class="line">&#125;).forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">    newObj[key] = obj[key];</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">return</span> form;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象遍历</span></span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertyNames(d2).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">k</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> d2[k] === <span class="string">'string'</span>) &#123;</span><br><span class="line">        d1[k] = d2[k];</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(d2[k])) &#123;</span><br><span class="line">        d1[k] = [...d2[k]];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      数据结构
    
    </summary>
    
      <category term="JS" scheme="/categories/JS/"/>
    
    
      <category term="数据结构" scheme="/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>工具集</title>
    <link href="/2020/04/03/Html/JS/%E5%B8%B8%E7%94%A8%E5%B0%8F%E5%B7%A5%E5%85%B7/"/>
    <id>/2020/04/03/Html/JS/常用小工具/</id>
    <published>2020-04-03T09:47:42.000Z</published>
    <updated>2020-04-03T09:47:42.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="URL解析"><a href="#URL解析" class="headerlink" title="URL解析"></a>URL解析</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// window.location.href 参数解析</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUrlKey</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> parames = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'[?|&amp;]'</span> + name + <span class="string">'='</span> + <span class="string">'([^&amp;;]+?)(&amp;|#|;|$)'</span>).exec(location.href);</span><br><span class="line">    <span class="keyword">if</span>(parames)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">decodeURIComponent</span>(parames[<span class="number">1</span>].replace(<span class="regexp">/\+/g</span>, <span class="string">'%20'</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 参数字符串解析为对象：parseQuery(location.search.substr(1));</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parseUrl</span> (<span class="params">query</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> reg = <span class="regexp">/([^=&amp;\s]+)[=\s]*([^&amp;\s]*)/g</span>;</span><br><span class="line">    <span class="keyword">let</span> obj = &#123;&#125;;</span><br><span class="line">    <span class="keyword">while</span> (reg.exec(query)) &#123;</span><br><span class="line">        obj[<span class="built_in">RegExp</span>.$<span class="number">1</span>] = <span class="built_in">RegExp</span>.$<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// encodeUrl: Object-&gt; n1=v1&amp;n2=v2</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">urlEncode</span>(<span class="params">param</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> paramStr = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> k <span class="keyword">in</span> param) &#123;</span><br><span class="line">        paramStr += paramStr ? <span class="string">'&amp;'</span>:<span class="string">''</span>;</span><br><span class="line">        paramStr += <span class="built_in">encodeURIComponent</span>(k) + <span class="string">'='</span> + <span class="built_in">encodeURIComponent</span>(param[k]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> paramStr;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fen2yuan</span> (<span class="params">v, n</span>) </span>&#123;</span><br><span class="line">    v = <span class="built_in">parseInt</span>(v);</span><br><span class="line">    <span class="keyword">if</span> (n === <span class="number">-1</span>)</span><br><span class="line">        <span class="keyword">return</span> (v / <span class="number">100</span>).toString();</span><br><span class="line">    <span class="keyword">let</span> r = (<span class="built_in">Math</span>.floor(v / <span class="number">100</span>)).toString();</span><br><span class="line">    <span class="keyword">if</span> (n === <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    r += <span class="string">'.'</span> + <span class="built_in">Math</span>.floor(v / <span class="number">10</span>) % <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">if</span> (n === <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    <span class="keyword">return</span> r + v % <span class="number">10</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="异步请求链"><a href="#异步请求链" class="headerlink" title="异步请求链"></a>异步请求链</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Promise对象，必须调用(resolve, reject)其中一个，否则不会继续下一个then</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    ajax().done(<span class="function"><span class="keyword">function</span> (<span class="params">d</span>) </span>&#123;</span><br><span class="line">        resolve(d);</span><br><span class="line">    &#125;).fail(<span class="function"><span class="keyword">function</span> (<span class="params">d</span>) </span>&#123;</span><br><span class="line">        reject(d);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params">d</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// resolve 事件</span></span><br><span class="line">&#125;).catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// reject 事件</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 小技巧: 先catch然后then</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;).catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// reject 事件</span></span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params">d</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 这里的then一定会被调用</span></span><br><span class="line">    <span class="comment">// 如果异常，then接收catch的返回值</span></span><br><span class="line">    <span class="comment">// 如果未异常，then接收 Promise 的 resolve 事件</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写法1</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 接收 resolve 事件</span></span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// catch存在时，该函数无效</span></span><br><span class="line">&#125;).catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 异常处理</span></span><br><span class="line">    <span class="comment">// 优点：前面链条中任何一步出现reject，均会中断，并跳转到catch</span></span><br><span class="line">    <span class="comment">// catch 也可以 return new Promise 继续链条</span></span><br><span class="line">&#125;).then(...);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写法2：</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 接收resolve事件</span></span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 接收reject事件</span></span><br><span class="line">    <span class="comment">// 有点：可以自定义处理，继续 return new Promise 给后面的链条</span></span><br><span class="line">&#125;).then(...);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写法3：then, catch 非异步情况，也可以直接链式调用</span></span><br><span class="line"><span class="comment">// 出错就跳转到下一个catch，可以当做try catch使用</span></span><br><span class="line"><span class="comment">// 未出错，则继续调用下一个then</span></span><br><span class="line"><span class="comment">// 若上一个then 无return，则下一个then的接收值为 undefine</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;).then(...).catch()</span><br><span class="line">.then(...)</span><br><span class="line">.then(...)</span><br><span class="line">.then(...);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      工具集
    
    </summary>
    
      <category term="JS" scheme="/categories/JS/"/>
    
    
      <category term="工具集" scheme="/tags/%E5%B7%A5%E5%85%B7%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>PictureSelector</title>
    <link href="/2020/03/28/Android/%E7%AC%AC%E4%B8%89%E6%96%B9/PictureSelector/"/>
    <id>/2020/03/28/Android/第三方/PictureSelector/</id>
    <published>2020-03-28T11:30:25.000Z</published>
    <updated>2020-03-28T11:30:25.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="图片选择器"><a href="#图片选择器" class="headerlink" title="图片选择器"></a>图片选择器</h2><ul><li><a href="https://github.com/LuckSiege/PictureSelector" target="_blank" rel="noopener">PictureSelector</a><ul><li>相机 + 相册 + 多种主题</li><li>持续更新</li></ul></li><li><a href="https://github.com/qingmei2/RxImagePicker" target="_blank" rel="noopener">图片选择器</a><ul><li>响应式图片选择器，支持相机+相册， 灵活应用于各种需求嵌入</li><li>知乎主题 + 微信主题</li></ul></li><li><a href="https://github.com/zhihu/Matisse" target="_blank" rel="noopener">Matisse</a><ul><li>这是一个漂亮的本地图片、视频选择器</li></ul></li><li><a href="https://github.com/willowtreeapps/spruce-android" target="_blank" rel="noopener">spruce-android</a><ul><li>安卓动画库</li></ul></li></ul><h2 id="PictureSelector"><a href="#PictureSelector" class="headerlink" title="PictureSelector"></a>PictureSelector</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PictureUtil</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String TAG = PictureUtil<span class="class">.<span class="keyword">class</span>.<span class="title">getSimpleName</span>()</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> JsInterface mJsInterface;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(JsInterface jsInterface)</span></span>&#123;</span><br><span class="line">        mJsInterface = jsInterface;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">startPicture</span><span class="params">(AppCompatActivity app, JsonObject jsonObject)</span> </span>&#123;</span><br><span class="line">        start(app, jsonObject, PictureConfig.CHOOSE_REQUEST);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">startCamera</span><span class="params">(AppCompatActivity app, JsonObject jsonObject)</span> </span>&#123;</span><br><span class="line">        start(app, jsonObject, PictureConfig.REQUEST_CAMERA);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">onResult</span><span class="params">(AppCompatActivity app, Intent intent)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// --------------------------------------------------------------------------</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">(AppCompatActivity app, JsonObject jsonObject, <span class="keyword">final</span> <span class="keyword">int</span> requestCode)</span> </span>&#123;</span><br><span class="line">        JsonUtil js = <span class="keyword">new</span> JsonUtil(jsonObject);</span><br><span class="line">        String strTheme = js.value(<span class="string">"theme"</span>, <span class="string">"default"</span>);</span><br><span class="line">        PictureParameterStyle parameterStyle = getPictureParameterStyle(app, strTheme);</span><br><span class="line">        PictureCropParameterStyle cropParameterStyle = getCropStyle(app, parameterStyle, strTheme);</span><br><span class="line"></span><br><span class="line">        PictureSelectionModel pictureSelectionModel;</span><br><span class="line">        <span class="comment">// 全部.PictureMimeType.ofAll()、图片.ofImage()、视频.ofVideo()、音频.ofAudio()</span></span><br><span class="line">        <span class="keyword">if</span>(requestCode == PictureConfig.REQUEST_CAMERA)</span><br><span class="line">            pictureSelectionModel = PictureSelector.create(app)</span><br><span class="line">                    .openCamera(getMode(js.value(<span class="string">"mode"</span>, <span class="string">"image"</span>)));</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            pictureSelectionModel = PictureSelector.create(app)</span><br><span class="line">                    .openGallery(getMode(js.value(<span class="string">"mode"</span>, <span class="string">"image"</span>)));</span><br><span class="line">        pictureSelectionModel</span><br><span class="line">                <span class="comment">// 外部传入图片加载引擎，必传项</span></span><br><span class="line">                .loadImageEngine(GlideEngine.createGlideEngine())</span><br><span class="line">                <span class="comment">// 主题样式设置 具体参考 values/styles</span></span><br><span class="line">                .theme(getTheme(strTheme))</span><br><span class="line">                <span class="comment">// 是否开启微信图片选择风格</span></span><br><span class="line">                .isWeChatStyle(isWeChat(strTheme))</span><br><span class="line">                <span class="comment">// 动态自定义相册主题</span></span><br><span class="line">                .setPictureStyle(parameterStyle)</span><br><span class="line">                <span class="comment">// 动态自定义裁剪主题</span></span><br><span class="line">                .setPictureCropStyle(cropParameterStyle)</span><br><span class="line">                <span class="comment">// 自定义相册启动退出动画</span></span><br><span class="line">                .setPictureWindowAnimationStyle(getPictureWindowAnimationStyle(js.value(<span class="string">"animation_style"</span>, <span class="string">"default"</span>)))</span><br><span class="line">                <span class="comment">// 图片和视频是否可以同选,只在ofAll模式下有效</span></span><br><span class="line">                .isWithVideoImage(<span class="keyword">true</span>)</span><br><span class="line">                <span class="comment">// 图片选择数量</span></span><br><span class="line">                .maxSelectNum(js.value(<span class="string">"max_select_num"</span>, <span class="number">5</span>))</span><br><span class="line">                .minSelectNum(js.value(<span class="string">"min_select_num"</span>, <span class="number">1</span>))</span><br><span class="line">                <span class="comment">// 视频选择数量, 如果没有单独设置的需求则可以不设置，同用 图片选择数量</span></span><br><span class="line">                <span class="comment">// .maxVideoSelectNum(1)</span></span><br><span class="line">                <span class="comment">// .minVideoSelectNum(1)</span></span><br><span class="line">                .imageSpanCount(js.value(<span class="string">"span_count"</span>, <span class="number">4</span>))</span><br><span class="line">                <span class="comment">// 未选择数据时点击按钮是否可以返回</span></span><br><span class="line">                .isReturnEmpty(<span class="keyword">false</span>)</span><br><span class="line">                <span class="comment">// 设置相册Activity方向，不设置默认使用系统</span></span><br><span class="line">                <span class="comment">// .setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED)</span></span><br><span class="line">                <span class="comment">// 是否显示原图控制按钮，如果设置为true则用户可以自由选择是否使用原图，压缩、裁剪功能将会失效</span></span><br><span class="line">                .isOriginalImageControl(js.value(<span class="string">"original"</span>, <span class="keyword">false</span>))</span><br><span class="line">                <span class="comment">// 重命名拍照文件名、如果是相册拍照则内部会自动拼上当前时间戳防止重复</span></span><br><span class="line">                <span class="comment">// 注意这个只在使用相机时可以使用，如果使用相机又开启了压缩或裁剪 需要配合压缩和裁剪文件名api</span></span><br><span class="line">                <span class="comment">//.cameraFileName(System.currentTimeMillis() +".jpg")</span></span><br><span class="line">                <span class="comment">// 重命名压缩文件名、 注意这个不要重复，只适用于单张图压缩使用</span></span><br><span class="line">                <span class="comment">//.renameCompressFile(System.currentTimeMillis() +".jpg")</span></span><br><span class="line">                <span class="comment">// 重命名裁剪文件名、 注意这个不要重复，只适用于单张图裁剪使用</span></span><br><span class="line">                <span class="comment">//.renameCropFileName(System.currentTimeMillis() + ".jpg")</span></span><br><span class="line">                .selectionMode(js.value(<span class="string">"single"</span>, <span class="keyword">true</span>) ? PictureConfig.SINGLE : PictureConfig.MULTIPLE)</span><br><span class="line">                <span class="comment">// 单选模式下是否直接返回，PictureConfig.SINGLE模式下有效</span></span><br><span class="line">                .isSingleDirectReturn(js.value(<span class="string">"single_direct_return"</span>, <span class="keyword">false</span>))</span><br><span class="line">                <span class="comment">// 是否可预览图片</span></span><br><span class="line">                .previewImage(js.value(<span class="string">"preview_img"</span>, <span class="keyword">true</span>))</span><br><span class="line">                <span class="comment">// 是否可预览视频</span></span><br><span class="line">                .previewVideo(js.value(<span class="string">"preview_video"</span>, <span class="keyword">true</span>))</span><br><span class="line">                <span class="comment">// 是否可播放音频</span></span><br><span class="line">                .enablePreviewAudio(js.value(<span class="string">"preview_audio"</span>, <span class="keyword">true</span>))</span><br><span class="line">                <span class="comment">// 是否显示拍照按钮</span></span><br><span class="line">                .isCamera(js.value(<span class="string">"camera"</span>, <span class="keyword">true</span>))</span><br><span class="line">                <span class="comment">// 多图裁剪时是否支持跳过，默认支持</span></span><br><span class="line">                .isMultipleSkipCrop(js.value(<span class="string">"multiple_skip_crop"</span>, <span class="keyword">true</span>))</span><br><span class="line">                <span class="comment">// 多图裁剪底部列表显示动画效果</span></span><br><span class="line">                .isMultipleRecyclerAnimation(<span class="keyword">true</span>)</span><br><span class="line">                <span class="comment">// 图片列表点击 缩放效果 默认true</span></span><br><span class="line">                .isZoomAnim(<span class="keyword">true</span>)</span><br><span class="line">                <span class="comment">// 拍照保存图片格式后缀,默认jpeg</span></span><br><span class="line">                .imageFormat(PictureMimeType.PNG)</span><br><span class="line">                <span class="comment">// 是否压缩</span></span><br><span class="line">                .compress(js.value(<span class="string">"compress"</span>, <span class="keyword">true</span>))<span class="comment">// 是否压缩</span></span><br><span class="line">                <span class="comment">// 图片压缩后输出质量 0~ 100</span></span><br><span class="line">                .compressQuality(js.value(<span class="string">"compress_quality"</span>, <span class="number">80</span>))</span><br><span class="line">                <span class="comment">//同步true或异步false 压缩 默认同步</span></span><br><span class="line">                .synOrAsy(<span class="keyword">true</span>)</span><br><span class="line">                .minimumCompressSize(js.value(<span class="string">"min_compress_size"</span>, <span class="number">100</span>))<span class="comment">// 小于100kb的图片不压缩</span></span><br><span class="line">                <span class="comment">//.queryMaxFileSize(10)// 只查多少M以内的图片、视频、音频  单位M</span></span><br><span class="line">                <span class="comment">//.compressSavePath(getPath())//压缩图片保存地址</span></span><br><span class="line">                <span class="comment">// 是否显示gif图片</span></span><br><span class="line">                .isGif(js.value(<span class="string">"gif"</span>, <span class="keyword">false</span>))</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 是否裁剪</span></span><br><span class="line">                .enableCrop(js.value(<span class="string">"crop"</span>, <span class="keyword">true</span>))</span><br><span class="line">                <span class="comment">// 裁剪比例 如16:9 3:2 3:4 1:1 可自定义</span></span><br><span class="line">                .withAspectRatio(js.value(<span class="string">"aspect_ratio_x"</span>, <span class="number">3</span>), js.value(<span class="string">"aspect_ratio_y"</span>, <span class="number">2</span>))</span><br><span class="line">                <span class="comment">// 裁剪框是否可拖拽</span></span><br><span class="line">                .freeStyleCropEnabled(js.value(<span class="string">"free_crop"</span>, <span class="keyword">true</span>))</span><br><span class="line">                <span class="comment">// 是否圆形裁剪</span></span><br><span class="line">                .circleDimmedLayer(js.value(<span class="string">"crop_circular"</span>, <span class="keyword">false</span>))</span><br><span class="line">                <span class="comment">// 设置圆形裁剪背景色值</span></span><br><span class="line">                <span class="comment">// .setCircleDimmedColor(ContextCompat.getColor(app, R.color.app_color_white))</span></span><br><span class="line">                <span class="comment">// 设置圆形裁剪边框色值</span></span><br><span class="line">                <span class="comment">// .setCircleDimmedBorderColor(ContextCompat.getColor(app, R.color.app_color_red))</span></span><br><span class="line">                <span class="comment">// 设置圆形裁剪边框粗细</span></span><br><span class="line">                .setCircleStrokeWidth(js.value(<span class="string">"crop_circular"</span>, <span class="number">3</span>))</span><br><span class="line">                <span class="comment">// 是否显示裁剪矩形边框 圆形裁剪时建议设为false</span></span><br><span class="line">                .showCropFrame(js.value(<span class="string">"crop_frame"</span>, <span class="keyword">true</span>))</span><br><span class="line">                <span class="comment">// 是否显示裁剪矩形网格 圆形裁剪时建议设为false</span></span><br><span class="line">                .showCropGrid(js.value(<span class="string">"crop_grid"</span>, <span class="keyword">true</span>))</span><br><span class="line">                <span class="comment">// .cutOutQuality(90)// 裁剪输出质量 默认100</span></span><br><span class="line">                <span class="comment">//.cropWH()// 裁剪宽高比，设置如果大于图片本身宽高则无效</span></span><br><span class="line">                <span class="comment">//.cropImageWideHigh()// 裁剪宽高比，设置如果大于图片本身宽高则无效</span></span><br><span class="line">                .rotateEnabled(js.value(<span class="string">"rotate"</span>, <span class="keyword">true</span>)) <span class="comment">// 裁剪是否可旋转图片</span></span><br><span class="line">                .scaleEnabled(js.value(<span class="string">"scale"</span>, <span class="keyword">true</span>)) <span class="comment">// 裁剪是否可旋转图片</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">// 是否开启点击声音</span></span><br><span class="line">                .openClickSound(js.value(<span class="string">"voice"</span>, <span class="keyword">true</span>))</span><br><span class="line">                <span class="comment">// 是否可拖动裁剪框(固定)</span></span><br><span class="line">                .isDragFrame(js.value(<span class="string">"drag_frame"</span>, <span class="keyword">true</span>))</span><br><span class="line">                <span class="comment">// 视频声音范围</span></span><br><span class="line">                .videoMinSecond(js.value(<span class="string">"video_min_second"</span>, <span class="number">5</span>))</span><br><span class="line">                .videoMaxSecond(js.value(<span class="string">"video_max_second"</span>, <span class="number">15</span>))</span><br><span class="line">                <span class="comment">// 录制视频秒数 默认60s</span></span><br><span class="line">                .recordVideoSecond(js.value(<span class="string">"video_second"</span>, <span class="number">60</span>))</span><br><span class="line">                <span class="comment">// .videoQuality(1)// 视频录制质量 0 or 1</span></span><br><span class="line">                <span class="comment">// 预览图片时 是否增强左右滑动图片体验(图片滑动一半即可看到上一张是否选中)</span></span><br><span class="line">                .previewEggs(<span class="keyword">true</span>)</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 结果回调 onActivityResult</span></span><br><span class="line">                <span class="comment">// .forResult(PictureConfig.CHOOSE_REQUEST);</span></span><br><span class="line">                .forResult(requestCode, <span class="keyword">new</span> OnResultCallbackListener() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResult</span><span class="params">(List&lt;LocalMedia&gt; result)</span> </span>&#123;</span><br><span class="line">                        JsonArray objs = <span class="keyword">new</span> JsonArray();</span><br><span class="line">                        <span class="keyword">for</span> (LocalMedia media : result) &#123;</span><br><span class="line">                            <span class="comment">// 裁剪+压缩情况：裁剪和压缩反馈结果是一个</span></span><br><span class="line">                            Log.i(TAG, <span class="string">"是否压缩:"</span> + media.isCompressed());</span><br><span class="line">                            Log.i(TAG, <span class="string">"压缩:"</span> + media.getCompressPath());</span><br><span class="line">                            Log.i(TAG, <span class="string">"原图:"</span> + media.getPath());</span><br><span class="line">                            Log.i(TAG, <span class="string">"是否裁剪:"</span> + media.isCut());</span><br><span class="line">                            Log.i(TAG, <span class="string">"裁剪:"</span> + media.getCutPath());</span><br><span class="line">                            Log.i(TAG, <span class="string">"是否开启原图:"</span> + media.isOriginal());</span><br><span class="line">                            Log.i(TAG, <span class="string">"原图路径:"</span> + media.getOriginalPath());</span><br><span class="line">                            Log.i(TAG, <span class="string">"Android Q 特有Path:"</span> + media.getAndroidQToPath());</span><br><span class="line"></span><br><span class="line">                            String strFile = <span class="string">""</span>;</span><br><span class="line">                            <span class="keyword">if</span>(media.isCompressed())</span><br><span class="line">                                strFile = media.getCompressPath();</span><br><span class="line">                            <span class="keyword">else</span> <span class="keyword">if</span>(media.isCut())</span><br><span class="line">                                strFile = media.getCutPath();</span><br><span class="line">                            <span class="keyword">else</span> <span class="keyword">if</span>(media.isOriginal())</span><br><span class="line">                                strFile = media.getOriginalPath();</span><br><span class="line">                            <span class="keyword">if</span>(strFile.isEmpty())</span><br><span class="line">                                strFile = media.getPath();</span><br><span class="line"></span><br><span class="line">                            JsonObject obj = <span class="keyword">new</span> JsonObject();</span><br><span class="line">                            Bitmap bitmap = BitmapUtils.loadBitmapFromFile(app, strFile);</span><br><span class="line">                            obj.addProperty(<span class="string">"path"</span>, strFile);</span><br><span class="line">                            obj.addProperty(<span class="string">"base64"</span>, BitmapUtils.bitmapToJpegBase64(bitmap, <span class="number">100</span>, <span class="number">400</span>));</span><br><span class="line">                            objs.add(obj);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span>(requestCode == PictureConfig.REQUEST_CAMERA)</span><br><span class="line">                            mJsInterface.sendCameraSuccess(objs.toString());</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                            mJsInterface.sendPictureSuccess(objs.toString());</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCancel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                        Log.i(TAG, <span class="string">"PictureSelector Cancel"</span>);</span><br><span class="line">                        <span class="keyword">if</span>(requestCode == PictureConfig.REQUEST_CAMERA)</span><br><span class="line">                            mJsInterface.sendCameraError(<span class="string">"Cancel"</span>);</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                            mJsInterface.sendPictureError(<span class="string">"Cancel"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ---------------------------------------------------------------------------</span></span><br><span class="line">    <span class="comment">// 参数</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getMode</span><span class="params">(String strMode)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (strMode) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"all"</span>:</span><br><span class="line">                <span class="keyword">return</span> PictureMimeType.ofAll();</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"video"</span>:</span><br><span class="line">                <span class="keyword">return</span> PictureMimeType.ofVideo();</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"audio"</span>:</span><br><span class="line">                <span class="keyword">return</span> PictureMimeType.ofAudio();</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"image"</span>:</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> PictureMimeType.ofImage();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getTheme</span><span class="params">(String strTheme)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (strTheme) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"white"</span>:</span><br><span class="line">                <span class="keyword">return</span> R.style.picture_white_style;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"qq"</span>:</span><br><span class="line">                <span class="keyword">return</span> R.style.picture_QQ_style;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"sina"</span>:</span><br><span class="line">                <span class="keyword">return</span> R.style.picture_Sina_style;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"wx"</span>:</span><br><span class="line">                <span class="keyword">return</span> R.style.picture_WeChat_style;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"default"</span>:</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> R.style.picture_default_style;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isWeChat</span><span class="params">(String strTheme)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> strTheme.equals(<span class="string">"chat"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> PictureParameterStyle <span class="title">getPictureParameterStyle</span><span class="params">(AppCompatActivity app, String strTheme)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (strTheme) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"white"</span>:</span><br><span class="line">                <span class="keyword">return</span> getWhiteStyle(app);</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"qq"</span>:</span><br><span class="line">                <span class="keyword">return</span> getNumStyle(app);</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"sina"</span>:</span><br><span class="line">                <span class="keyword">return</span> getSinaStyle(app);</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"wx"</span>:</span><br><span class="line">                <span class="keyword">return</span> getWeChatStyle(app);</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"default"</span>:</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> getDefaultStyle(app);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> PictureCropParameterStyle <span class="title">getCropStyle</span><span class="params">(AppCompatActivity app, PictureParameterStyle style, String strTheme)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (strTheme) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"white"</span>:</span><br><span class="line">                <span class="keyword">return</span> getWhiteCropStyle(app, style);</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"qq"</span>:</span><br><span class="line">                <span class="keyword">return</span> getNumCropStyle(app, style);</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"sina"</span>:</span><br><span class="line">                <span class="keyword">return</span> getSinaCropStyle(app, style);</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"wx"</span>:</span><br><span class="line">                <span class="keyword">return</span> getWeChatCropStyle(app, style);</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"default"</span>:</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> getDefaultCropStyle(app, style);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// -----------------------------------------------------------------</span></span><br><span class="line">    <span class="comment">// 相册弹出动画</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> PictureWindowAnimationStyle <span class="title">getPictureWindowAnimationStyle</span><span class="params">(String style)</span> </span>&#123;</span><br><span class="line">        PictureWindowAnimationStyle animationStyle = <span class="keyword">new</span> PictureWindowAnimationStyle();</span><br><span class="line">        <span class="keyword">if</span>(style.equals(<span class="string">"up"</span>))</span><br><span class="line">            animationStyle.ofAllAnimation(R.anim.picture_anim_up_in, R.anim.picture_anim_down_out);</span><br><span class="line">        <span class="keyword">return</span> animationStyle;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// -----------------------------------------------------------------</span></span><br><span class="line">    <span class="comment">// 主题</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> PictureParameterStyle <span class="title">getDefaultStyle</span><span class="params">(AppCompatActivity app)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 相册主题：从源码Demo中 获取即可</span></span><br><span class="line">        PictureParameterStyle pictureParameterStyle = <span class="keyword">new</span> PictureParameterStyle();</span><br><span class="line">        <span class="keyword">return</span> pictureParameterStyle;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> PictureCropParameterStyle <span class="title">getDefaultCropStyle</span><span class="params">(AppCompatActivity app, PictureParameterStyle pictureParameterStyle)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PictureCropParameterStyle(</span><br><span class="line">                ContextCompat.getColor(app, R.color.app_color_grey),</span><br><span class="line">                ContextCompat.getColor(app, R.color.app_color_grey),</span><br><span class="line">                Color.parseColor(<span class="string">"#393a3e"</span>),</span><br><span class="line">                ContextCompat.getColor(app, R.color.app_color_white),</span><br><span class="line">                pictureParameterStyle.isChangeStatusBarFontColor);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> PictureParameterStyle <span class="title">getWhiteStyle</span><span class="params">(AppCompatActivity app)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 相册主题：从源码Demo中 获取即可</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> PictureCropParameterStyle <span class="title">getWhiteCropStyle</span><span class="params">(AppCompatActivity app, PictureParameterStyle pictureParameterStyle)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 相册主题：从源码Demo中 获取即可</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> PictureParameterStyle <span class="title">getNumStyle</span><span class="params">(AppCompatActivity app)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 相册主题：从源码Demo中 获取即可</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> PictureCropParameterStyle <span class="title">getNumCropStyle</span><span class="params">(AppCompatActivity app, PictureParameterStyle pictureParameterStyle)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 相册主题：从源码Demo中 获取即可</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> PictureParameterStyle <span class="title">getSinaStyle</span><span class="params">(AppCompatActivity app)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 相册主题：从源码Demo中 获取即可</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> PictureCropParameterStyle <span class="title">getSinaCropStyle</span><span class="params">(AppCompatActivity app, PictureParameterStyle pictureParameterStyle)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 相册主题：从源码Demo中 获取即可</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> PictureParameterStyle <span class="title">getWeChatStyle</span><span class="params">(AppCompatActivity app)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 相册主题：从源码Demo中 获取即可</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> PictureCropParameterStyle <span class="title">getWeChatCropStyle</span><span class="params">(AppCompatActivity app, PictureParameterStyle pictureParameterStyle)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 相册主题：从源码Demo中 获取即可</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      PictureSelector
    
    </summary>
    
      <category term="Android" scheme="/categories/Android/"/>
    
    
      <category term="PictureSelector" scheme="/tags/PictureSelector/"/>
    
  </entry>
  
  <entry>
    <title>声音</title>
    <link href="/2020/03/26/Android/%E7%B3%BB%E7%BB%9F/%E5%A3%B0%E9%9F%B3/"/>
    <id>/2020/03/26/Android/系统/声音/</id>
    <published>2020-03-26T09:11:48.000Z</published>
    <updated>2020-03-26T09:11:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Beep"><a href="#Beep" class="headerlink" title="Beep"></a>Beep</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">BeepManager beepManager = <span class="keyword">new</span> BeepManager(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">beepManager.playBeepSoundAndVibrate();</span><br><span class="line">beepManager.close();</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      声音
    
    </summary>
    
      <category term="Android" scheme="/categories/Android/"/>
    
    
      <category term="声音" scheme="/tags/%E5%A3%B0%E9%9F%B3/"/>
    
  </entry>
  
  <entry>
    <title>常用</title>
    <link href="/2020/03/25/Android/%E6%8E%A7%E4%BB%B6/%E5%B8%B8%E7%94%A8/"/>
    <id>/2020/03/25/Android/控件/常用/</id>
    <published>2020-03-25T07:46:40.000Z</published>
    <updated>2020-03-25T07:46:40.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ToastUtil"><a href="#ToastUtil" class="headerlink" title="ToastUtil"></a>ToastUtil</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ToastUtil</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String TAG = ToastUtil<span class="class">.<span class="keyword">class</span>.<span class="title">getSimpleName</span>()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(<span class="keyword">final</span> Context context, <span class="keyword">final</span> String msg)</span> </span>&#123;</span><br><span class="line">        show(context, msg, Toast.LENGTH_SHORT);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(<span class="keyword">final</span> Context context, <span class="keyword">final</span> String msg, <span class="keyword">final</span> <span class="keyword">int</span> duration)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (Looper.myLooper() == Looper.getMainLooper()) &#123;</span><br><span class="line">            Toast.makeText(context, msg, duration).show();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">new</span> Handler(Looper.getMainLooper()).post(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                Toast.makeText(context, msg, duration).show();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      ToastUtil
    
    </summary>
    
      <category term="Android" scheme="/categories/Android/"/>
    
    
      <category term="ToastUtil" scheme="/tags/ToastUtil/"/>
    
  </entry>
  
  <entry>
    <title>权限管理</title>
    <link href="/2020/03/25/Android/Module/rxpermissions2/"/>
    <id>/2020/03/25/Android/Module/rxpermissions2/</id>
    <published>2020-03-25T01:07:46.000Z</published>
    <updated>2020-03-25T01:07:46.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="原生：权限动态申请"><a href="#原生：权限动态申请" class="headerlink" title="原生：权限动态申请"></a>原生：权限动态申请</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PermissionUtl</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String TAG = PermissionUtl<span class="class">.<span class="keyword">class</span>.<span class="title">getSimpleName</span>()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(AppCompatActivity app)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 前置权限申请</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">request</span><span class="params">(AppCompatActivity app, <span class="keyword">int</span> requestCode, String permission)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (permission != <span class="keyword">null</span> &amp;&amp; permission.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= <span class="number">23</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (app.checkSelfPermission(permission) != PackageManager.PERMISSION_GRANTED) &#123;</span><br><span class="line">                        <span class="comment">// 是否应该显示权限请求</span></span><br><span class="line">                        app.shouldShowRequestPermissionRationale(permission);</span><br><span class="line">                        app.requestPermissions(<span class="keyword">new</span> String[]&#123;permission&#125;, requestCode);</span><br><span class="line">                        Log.e(TAG, <span class="string">"requestPermissions: "</span> + permission);</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (ContextCompat.checkSelfPermission(app, permission) != PackageManager.PERMISSION_GRANTED) &#123;</span><br><span class="line">                        ActivityCompat.shouldShowRequestPermissionRationale(app, permission);</span><br><span class="line">                        ActivityCompat.requestPermissions(app, <span class="keyword">new</span> String[]&#123;permission&#125;, requestCode);</span><br><span class="line">                        Log.e(TAG, <span class="string">"requestPermissions: "</span> + permission);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">                ex.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">requestPermissions(<span class="number">99</span>, Manifest.permission.CAMERA);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 申请结果通知函数：Activity回调</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRequestPermissionsResult</span><span class="params">(<span class="keyword">int</span> requestCode, @NonNull String[] permissions, @NonNull <span class="keyword">int</span>[] grantResults)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onRequestPermissionsResult(requestCode, permissions, grantResults);</span><br><span class="line">    <span class="keyword">if</span> (grantResults.length &gt; <span class="number">0</span> &amp;&amp; grantResults[<span class="number">0</span>]==PackageManager.PERMISSION_GRANTED)&#123;</span><br><span class="line">        <span class="comment">// TODO：权限申请成功</span></span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        Toast.makeText(<span class="keyword">this</span>, <span class="string">"系统权限申请失败，功能无法使用"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="rxpermissions2"><a href="#rxpermissions2" class="headerlink" title="rxpermissions2"></a>rxpermissions2</h2><p><code>implementation &#39;com.tbruyelle.rxpermissions2:rxpermissions:0.9.4@aar&#39;</code></p><h3 id="rxpermissions2-简单应用"><a href="#rxpermissions2-简单应用" class="headerlink" title="rxpermissions2 - 简单应用"></a>rxpermissions2 - 简单应用</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZPermissionUtil</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> RxPermissions rxPermissions;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">ZPermissionUtil</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">RxPermissionUtilHolder</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ZPermissionUtil mInstance = <span class="keyword">new</span> ZPermissionUtil();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ZPermissionUtil <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> RxPermissionUtilHolder.mInstance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(Activity activity)</span> </span>&#123;</span><br><span class="line">        rxPermissions = <span class="keyword">new</span> RxPermissions(activity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressLint</span>(<span class="string">"CheckResult"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">requestPermissions</span><span class="params">(<span class="keyword">final</span> IPermissionsListener listener, <span class="keyword">final</span> String... permissions)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (listener == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"IPermissionsListener not null"</span>);</span><br><span class="line">        rxPermissions.request(permissions)</span><br><span class="line">                .subscribeOn(Schedulers.io())</span><br><span class="line">                .observeOn(AndroidSchedulers.mainThread())</span><br><span class="line">                .subscribe(<span class="keyword">new</span> Consumer&lt;Boolean&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Boolean aBoolean)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                        <span class="keyword">if</span> (aBoolean) &#123;</span><br><span class="line">                            listener.onPermissionsSuccess();</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            listener.onPermissionsFail();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Observable&lt;Boolean&gt; <span class="title">requestPermissions</span><span class="params">(<span class="keyword">final</span> String... permissions)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> rxPermissions.request(permissions);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPermissions</span><span class="params">(String permission)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> rxPermissions.isGranted(permission);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">RxPermissions rxPermission = <span class="keyword">new</span> RxPermissions(FlashActivity.<span class="keyword">this</span>);</span><br><span class="line"><span class="comment">//请求权限全部结果</span></span><br><span class="line">rxPermission.request(</span><br><span class="line">        Manifest.permission.CAMERA,</span><br><span class="line">        Manifest.permission.READ_PHONE_STATE,</span><br><span class="line">        Manifest.permission.WRITE_EXTERNAL_STORAGE,</span><br><span class="line">        Manifest.permission.READ_EXTERNAL_STORAGE,</span><br><span class="line">        Manifest.permission.ACCESS_COARSE_LOCATION)</span><br><span class="line">        .subscribe(<span class="keyword">new</span> Consumer&lt;Boolean&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Boolean granted)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (!granted) &#123;</span><br><span class="line">                    ToastUtils.showToast(<span class="string">"App未能获取全部需要的相关权限，部分功能可能不能正常使用."</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//不管是否获取全部权限，进入主页面</span></span><br><span class="line">                initCountDown();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"><span class="comment">// 分别请求权限</span></span><br><span class="line">rxPermission.requestEach(</span><br><span class="line">        Manifest.permission.CAMERA,</span><br><span class="line">        Manifest.permission.READ_PHONE_STATE,</span><br><span class="line">        Manifest.permission.WRITE_EXTERNAL_STORAGE,</span><br><span class="line">        Manifest.permission.READ_EXTERNAL_STORAGE,</span><br><span class="line">        Manifest.permission.ACCESS_COARSE_LOCATION)</span><br><span class="line">        .subscribe(<span class="keyword">new</span> Consumer&lt;Permission&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Permission permission)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (permission.granted) &#123;</span><br><span class="line">                    <span class="comment">// 用户已经同意该权限</span></span><br><span class="line">                    Log.d(TAG, permission.name + <span class="string">" is granted."</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (permission.shouldShowRequestPermissionRationale) &#123;</span><br><span class="line">                    <span class="comment">// 用户拒绝了该权限，没有选中『不再询问』(Never ask again)</span></span><br><span class="line">                    <span class="comment">// 那么下次再次启动时，还会提示请求权限的对话框</span></span><br><span class="line">                    Log.d(TAG, permission.name + <span class="string">" is denied. More info should be provided."</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// 用户拒绝了该权限，并且选中『不再询问』</span></span><br><span class="line">                    Log.d(TAG, permission.name + <span class="string">" is denied."</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      权限管理
    
    </summary>
    
      <category term="Android" scheme="/categories/Android/"/>
    
    
      <category term="权限管理" scheme="/tags/%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>RxJava</title>
    <link href="/2020/03/15/Android/Module/RxJava/"/>
    <id>/2020/03/15/Android/Module/RxJava/</id>
    <published>2020-03-15T14:00:20.000Z</published>
    <updated>2020-03-15T14:00:20.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基础应用"><a href="#基础应用" class="headerlink" title="基础应用"></a>基础应用</h2><ul><li>创建被观察者<code>Observable</code>，并在订阅接口<code>subscribe</code>中发布时间</li></ul><h3 id="被观察者"><a href="#被观察者" class="headerlink" title="被观察者"></a>被观察者</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Observable。create() 是 RxJava 最基本的创造事件序列的方法</span></span><br><span class="line">Observable&lt;Integer&gt; observable = Observable.create(<span class="keyword">new</span> ObservableOnSubscribe&lt;Integer&gt;() &#123;</span><br><span class="line">    <span class="comment">// 复写的subscribe，定义需要发送的事件</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(ObservableEmitter&lt;Integer&gt; emitter)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 通过 ObservableEmitter 对象(事件发布器)产生事件并通知观察者</span></span><br><span class="line">        <span class="keyword">if</span> (!observer.isUnsubscribed()) &#123;</span><br><span class="line">            emitter.onNext(<span class="number">1</span>);</span><br><span class="line">            emitter.onNext(<span class="number">2</span>);</span><br><span class="line">            emitter.onNext(<span class="number">3</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        emitter.onComplete();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// just</span></span><br><span class="line">Observable observable = Observable.just(<span class="string">"A"</span>, <span class="string">"B"</span>, <span class="string">"C"</span>);</span><br><span class="line"><span class="comment">// 将会依次调用：</span></span><br><span class="line"><span class="comment">// onNext("A");</span></span><br><span class="line"><span class="comment">// onNext("B");</span></span><br><span class="line"><span class="comment">// onNext("C");</span></span><br><span class="line"><span class="comment">// onCompleted();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// from(T[]) / from(Iterable&lt;? extends T&gt;) : 遍历传入的数组 / Iterable，依次发送出来</span></span><br><span class="line">String[] words = &#123;<span class="string">"A"</span>, <span class="string">"B"</span>, <span class="string">"C"</span>&#125;;</span><br><span class="line">Observable observable = Observable.from(words);</span><br><span class="line"><span class="comment">// 将会依次调用：</span></span><br><span class="line"><span class="comment">// onNext("A");</span></span><br><span class="line"><span class="comment">// onNext("B");</span></span><br><span class="line"><span class="comment">// onNext("C");</span></span><br><span class="line"><span class="comment">// onCompleted();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组</span></span><br><span class="line">Integer[] items = &#123; <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> &#125;;</span><br><span class="line">Observable observable = Observable.fromArray(items);</span><br><span class="line"><span class="comment">// 集合</span></span><br><span class="line">List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">list.add(<span class="number">1</span>);</span><br><span class="line">Observable observable = Observable.fromIterable(list);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下列方法一般用于测试使用</span></span><br><span class="line"><span class="comment">// 仅发送Complete事件</span></span><br><span class="line">Observable observable1=Observable.empty();</span><br><span class="line"><span class="comment">// 仅发送Error事件</span></span><br><span class="line">Observable observable2=Observable.error(<span class="keyword">new</span> RuntimeException());</span><br><span class="line"><span class="comment">// 该方法创建的被观察者对象发送事件的特点：不发送任何事件</span></span><br><span class="line">Observable observable3=Observable.never();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 直到有观察者时，才真正创建 ObservableSource</span></span><br><span class="line">Observable&lt;Integer&gt; observable = Observable.defer(<span class="keyword">new</span> Callable&lt;ObservableSource&lt;? extends Integer&gt;&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ObservableSource&lt;? extends Integer&gt; call() <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> Observable.just(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 延迟发送事件： 延迟2s后，发送一个long类型数值</span></span><br><span class="line">Observable.timer(<span class="number">2</span>, TimeUnit.SECONDS);</span><br><span class="line"><span class="comment">// 延迟3秒后，每1秒 发送一个long类型数值，从0开始递增1，无限发送</span></span><br><span class="line">Observable.interval(<span class="number">3</span>,<span class="number">1</span>,TimeUnit.SECONDS);</span><br><span class="line"><span class="comment">// 延迟3秒后，第一个事件延迟2秒，之后每1秒 发送一个long类型数值，从0开始递增1，发送10次</span></span><br><span class="line">Observable.intervalRange(<span class="number">3</span>, <span class="number">10</span>, <span class="number">2</span>, <span class="number">1</span>, TimeUnit.SECONDS);</span><br><span class="line"><span class="comment">// 无延迟，从3开始，发送10个事件</span></span><br><span class="line">Observable.range(<span class="number">3</span>,<span class="number">10</span>);</span><br></pre></td></tr></table></figure><h3 id="观察者-订阅者"><a href="#观察者-订阅者" class="headerlink" title="观察者 / 订阅者"></a>观察者 / 订阅者</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 观察者：Observer 抽象类</span></span><br><span class="line">Observer&lt;Integer&gt; observer = <span class="keyword">new</span> Observer&lt;Integer&gt;() &#123;</span><br><span class="line">    <span class="comment">// 订阅事件通知：观察者接收事件前调用</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Disposable d)</span> </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"开始采用subscribe连接"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 被观察者onNext事件响应</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer value)</span> </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"对Next事件作出响应"</span> + value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 被观察者Error事件响应</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"对Error事件作出响应"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 被观察者生产onCompleted事件响应</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"对Complete事件作出响应"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 订阅者：Subscriber（内置实现 Observer 的抽象类，并对Observer接口进行了扩展）</span></span><br><span class="line">Subscriber&lt;Integer&gt; subscriber = <span class="keyword">new</span> Subscriber&lt;Integer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Subscription s)</span> </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"开始采用subscribe连接"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer value)</span> </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"对Next事件作出响应"</span> + value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"对Error事件作出响应"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"对Complete事件作出响应"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">相同点：二者基本使用方式完全一致</span></span><br><span class="line"><span class="comment">    实质上，在RxJava的 subscribe 过程中，Observer总是会先被转换成Subscriber再使用</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">不同点：Subscriber抽象类对 Observer 接口进行了扩展，新增了两个方法：</span></span><br><span class="line"><span class="comment">    1. onStart()：在还未响应事件前调用，用于做一些初始化工作</span></span><br><span class="line"><span class="comment">    2. unsubscribe()：用于取消订阅。在该方法被调用后，观察者将不再接收 &amp; 响应事件</span></span><br><span class="line"><span class="comment">    调用该方法前，先使用 isUnsubscribed() 判断状态</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 订阅 / 注册</span></span><br><span class="line">observable.subscribe(observer);</span><br><span class="line">observable.subscribe(subscriber)；</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// RxJava的链式操作</span></span><br><span class="line"><span class="comment">/** 注：整体方法调用顺序：</span></span><br><span class="line"><span class="comment">1. 观察者.onSubscribe()</span></span><br><span class="line"><span class="comment">2. 被观察者.subscribe()</span></span><br><span class="line"><span class="comment">3. 观察者.onNext()</span></span><br><span class="line"><span class="comment">4. 观察者.onComplete()</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">Observable.create(<span class="keyword">new</span> ObservableOnSubscribe&lt;Integer&gt;() &#123;</span><br><span class="line">    <span class="comment">// 1. 创建被观察者 &amp; 生产事件</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(ObservableEmitter&lt;Integer&gt; emitter)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        emitter.onNext(<span class="number">1</span>);</span><br><span class="line">        emitter.onNext(<span class="number">2</span>);</span><br><span class="line">        emitter.onNext(<span class="number">3</span>);</span><br><span class="line">        emitter.onComplete();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">.distinct()</span><br><span class="line">.subscribeOn(Schedulers.io())</span><br><span class="line">.observeOn(AndroidSchedulers.mainThread())</span><br><span class="line">.subscribe(<span class="keyword">new</span> Observer&lt;Integer&gt;() &#123;</span><br><span class="line">    <span class="comment">// 2. 通过通过订阅（subscribe）连接观察者和被观察者</span></span><br><span class="line">    <span class="comment">// 3. 创建观察者 &amp; 定义响应事件的行为</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Disposable d)</span> </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"开始采用subscribe连接"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer value)</span> </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"对Next事件"</span>+ value +<span class="string">"作出响应"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"对Error事件作出响应"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"对Complete事件作出响应"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// SubscribeOn: 指定Observable自身在哪个调度器上执行</span></span><br><span class="line"><span class="comment">// ObserveOn: 指定一个观察者在哪个调度器上观察这个Observable</span></span><br><span class="line"><span class="comment">// AndroidSchedulers.mainThread()： 主线程</span></span><br><span class="line"><span class="comment">// Schedulers.newThread()： 新建线程</span></span><br><span class="line"><span class="comment">// Schedulers.io(): 内置线程池，优于Schedulers.newThread</span></span><br><span class="line"><span class="comment">// compose: 关联一个继承RxActivity的Activity，从而实现自动释放</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 便捷函数式应用：消费者</span></span><br><span class="line">Observable.just(<span class="string">"hello"</span>).subscribe(<span class="keyword">new</span> Consumer&lt;String&gt;() &#123;</span><br><span class="line">    <span class="comment">// 每次接收到Observable的事件都会调用Consumer.accept（）</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(String s)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="comment">// 还有其他一些便捷函数式应用</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      RxJava
    
    </summary>
    
      <category term="Android" scheme="/categories/Android/"/>
    
    
      <category term="RxJava" scheme="/tags/RxJava/"/>
    
  </entry>
  
  <entry>
    <title>blankj</title>
    <link href="/2020/03/12/Android/Module/blankj/"/>
    <id>/2020/03/12/Android/Module/blankj/</id>
    <published>2020-03-12T00:29:27.000Z</published>
    <updated>2020-03-12T00:29:27.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="github"><a href="#github" class="headerlink" title="github"></a>github</h2><ul><li><a href="https://github.com/Blankj/AndroidUtilCode" target="_blank" rel="noopener">AndroidUtilCode</a></li></ul><h2 id="utilcode"><a href="#utilcode" class="headerlink" title="utilcode"></a>utilcode</h2><p><a href="https://github.com/Blankj/AndroidUtilCode/blob/master/lib/utilcode/README-CN.md" target="_blank" rel="noopener">utilcode 中文文档</a></p><h2 id="subutil"><a href="#subutil" class="headerlink" title="subutil"></a>subutil</h2><p><a href="https://github.com/Blankj/AndroidUtilCode/blob/master/lib/subutil/README-CN.md" target="_blank" rel="noopener">subutil 中文文档</a></p>]]></content>
    
    <summary type="html">
    
      blankj
    
    </summary>
    
      <category term="Android" scheme="/categories/Android/"/>
    
    
      <category term="blankj" scheme="/tags/blankj/"/>
    
  </entry>
  
  <entry>
    <title>学习资料</title>
    <link href="/2020/03/12/Android/%E7%AC%AC%E4%B8%89%E6%96%B9/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/"/>
    <id>/2020/03/12/Android/第三方/学习资料/</id>
    <published>2020-03-12T00:29:27.000Z</published>
    <updated>2020-03-12T00:29:27.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="学习资料"><a href="#学习资料" class="headerlink" title="学习资料"></a>学习资料</h2><ul><li><a href="http://demo.apkbus.com/" target="_blank" rel="noopener">开源项目分享</a></li></ul><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul><li><code>https://github.com/promeG/TinyPinyin</code><ul><li>汉字转拼音库</li></ul></li><li><code>https://github.com/opendigg/awesome-github-android-ui</code><ul><li>安卓UI相关开源项目库汇总</li></ul></li><li><code>https://juejin.im/post/58f61bb55c497d006ca294bb</code><ul><li>技术选型</li></ul></li><li>BottmBar: 底部导航栏</li><li>Luban: 图片压缩</li><li>uCrop: 图片裁剪</li></ul>]]></content>
    
    <summary type="html">
    
      学习资料
    
    </summary>
    
      <category term="Android" scheme="/categories/Android/"/>
    
    
      <category term="学习资料" scheme="/tags/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/"/>
    
  </entry>
  
  <entry>
    <title>Fragment</title>
    <link href="/2020/03/10/Android/%E6%8E%A7%E4%BB%B6/Fragment/"/>
    <id>/2020/03/10/Android/控件/Fragment/</id>
    <published>2020-03-10T03:30:30.000Z</published>
    <updated>2020-03-10T03:30:30.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 新建 Fragment(Blank): TestFragment.java(fragment_test.xml) --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 默认：FrameLayout，可以右键改为 LinearLayout 等其他 Layout --&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">FrameLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">".TestFragment"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"hello_blank_fragment"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">FrameLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 方式一 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 调整 activity.xml 增加 fragment 控件，根据提示选择 关联新建的 TestFragment 即可 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- fragment 控件一定要有id属性，否则会崩溃 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">androidx.constraintlayout.widget.ConstraintLayout</span></span></span><br><span class="line"><span class="tag">    <span class="attr">...</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">".MainActivity"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">fragment</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/fragment_test"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:name</span>=<span class="string">"com.es.test.TestFragment"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">...</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">androidx.constraintlayout.widget.ConstraintLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 方式二：activity.xml 中增加 FrameLayout 控件，然后代码方式补充 Fragment对象 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Frame 默认透明，可以设置 background 盖住下层内容 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">androidx.constraintlayout.widget.ConstraintLayout</span></span></span><br><span class="line"><span class="tag">    <span class="attr">...</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">".MainActivity"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">FrameLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/frameLayout"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">"@color/colorPrimary"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">FrameLayout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">androidx.constraintlayout.widget.ConstraintLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 挂在 TestFragment 到 FrameLayout</span></span><br><span class="line">getSupportFragmentManager()</span><br><span class="line">        .beginTransaction()</span><br><span class="line">        .replace(R.id.frameLayout, <span class="keyword">new</span> TestFragment())</span><br><span class="line">        .commit();</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Fragment
    
    </summary>
    
      <category term="Android" scheme="/categories/Android/"/>
    
    
      <category term="Fragment" scheme="/tags/Fragment/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB</title>
    <link href="/2020/03/03/VCTools/MongoDB/"/>
    <id>/2020/03/03/VCTools/MongoDB/</id>
    <published>2020-03-03T02:27:37.000Z</published>
    <updated>2020-03-03T02:27:37.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="官网"><a href="#官网" class="headerlink" title="官网"></a>官网</h2><ul><li><a href="https://www.sqlite.org/download.html" target="_blank" rel="noopener">MongoDB</a></li><li><a href="https://github.com/mongodb/mongo-c-driver" target="_blank" rel="noopener">mongo-c-driver</a><ul><li>下载Release版，zip包，包含需要的libbson等</li></ul></li><li><a href="https://github.com/mongodb/libbson.git" target="_blank" rel="noopener">libbson.git</a></li><li>客户端<ul><li><a href="https://robomongo.org/download" target="_blank" rel="noopener">Robo 3T</a></li></ul></li><li>编译工具<ul><li><a href="https://cmake.org/" target="_blank" rel="noopener">cmake</a></li></ul></li></ul><h2 id="客户端编译"><a href="#客户端编译" class="headerlink" title="客户端编译"></a>客户端编译</h2><ul><li><a href="http://mongoc.org/libmongoc/current/installing.html" target="_blank" rel="noopener">官网引导文档</a></li><li>[cmake-gui]<ul><li>Configure<ul><li><code>Source Code</code>: <code>D:/mongo-c-driver-1.16.2</code></li><li><code>build the binaries</code>: <code>D:/mongo-c-driver-1.16.2/build</code></li><li>Configure按钮<ul><li>选择VS编译器版本</li></ul></li><li>错误处理<ul><li>BUILD_VERSION: 1.0.0.0</li><li>CMAKE_INSTALL_PREFIX: 路径要预先创建<code>D:/mongo-c-driver</code></li><li>配置调整完成后，重新点击Configure按钮</li></ul></li></ul></li><li>Generate</li><li><code>D:/mongo-c-driver-1.16.2/build</code>目录找到<code>ALL_BUILD.vcxproj</code>使用VS打开即可<ul><li>编译<code>INSTALL</code>工程<ul><li>内容生成到<code>D:/mongo-c-driver</code>，包含静态lib，include头文件等</li></ul></li></ul></li></ul></li></ul><h2 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h2><p><a href="http://mongoc.org/libmongoc/current/api.html" target="_blank" rel="noopener">API</a></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// .h</span></span><br><span class="line"><span class="keyword">mongoc_uri_t</span> *m_uri;</span><br><span class="line"><span class="keyword">mongoc_client_t</span> *m_client;</span><br><span class="line"><span class="keyword">mongoc_collection_t</span> *m_collection;</span><br><span class="line"><span class="keyword">mongoc_collection_t</span> *m_collConfig;</span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line">mongoc_init();</span><br><span class="line"><span class="comment">// 释放</span></span><br><span class="line">mongoc_cleanup();</span><br><span class="line"><span class="comment">// 连接</span></span><br><span class="line"><span class="keyword">bson_error_t</span> error;</span><br><span class="line">CStringA strMongoDB = <span class="string">"mongodb://127.0.0.1:27017/"</span>;</span><br><span class="line">m_uri = mongoc_uri_new_with_error(strMongoDB, &amp;error);</span><br><span class="line"><span class="keyword">if</span> (!m_uri)</span><br><span class="line">&#123;</span><br><span class="line">    Log()-&gt;LogA(<span class="string">"failed to parse URI: %s\n;error message: %s;\n"</span>, CW2A(strMongoDB).m_psz, error.message);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">m_client = mongoc_client_new_from_uri(m_uri);</span><br><span class="line"><span class="keyword">if</span> (!m_client)</span><br><span class="line">&#123;</span><br><span class="line">    Log()-&gt;LogA(<span class="string">"mongoc_client_set_error_api error;\n"</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 简便方法，不使用uri</span></span><br><span class="line"><span class="comment">// m_client = mongoc_client_new(strMongoDB);</span></span><br><span class="line"><span class="comment">// 释放连接</span></span><br><span class="line">mongoc_uri_destroy(m_uri);</span><br><span class="line">mongoc_client_destroy(m_client);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 集合</span></span><br><span class="line">mongoc_client_set_error_api(m_client, <span class="number">2</span>);</span><br><span class="line">m_collection = mongoc_client_get_collection(m_client, <span class="string">"sync"</span>, <span class="string">"pic"</span>);</span><br><span class="line"><span class="keyword">if</span> (!m_collection)</span><br><span class="line">&#123;</span><br><span class="line">    Log()-&gt;LogA(<span class="string">"mongoc_client_get_collection error: sync.pic;\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 释放集合</span></span><br><span class="line">mongoc_collection_destroy(m_collection);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建索引：不存在则创建</span></span><br><span class="line"><span class="keyword">bson_t</span> keys;</span><br><span class="line">bson_init(&amp;keys);</span><br><span class="line">BSON_APPEND_INT32(&amp;keys, <span class="string">"account"</span>, <span class="number">1</span>);</span><br><span class="line">BSON_APPEND_INT32(&amp;keys, <span class="string">"last_user_time"</span>, <span class="number">-1</span>);</span><br><span class="line"><span class="keyword">mongoc_index_opt_t</span> opt;</span><br><span class="line">mongoc_index_opt_init(&amp;opt);</span><br><span class="line">opt.name = <span class="string">"user_sync_time"</span>;    <span class="comment">// 指定索引名称</span></span><br><span class="line"><span class="keyword">if</span> (!mongoc_collection_create_index(m_collection, &amp;keys, &amp;opt, &amp;error))</span><br><span class="line">&#123;</span><br><span class="line">    Log()-&gt;LogA(<span class="string">"mongoc_collection_create_index error: %s;"</span>, error.message);</span><br><span class="line">    bson_destroy(&amp;keys);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// bson_t 对象需要释放</span></span><br><span class="line">bson_destroy(&amp;keys);</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 插入</span></span><br><span class="line"><span class="keyword">bson_t</span> item;</span><br><span class="line">bson_init(&amp;item);</span><br><span class="line">BSON_APPEND_SYMBOL(&amp;item, <span class="string">"_id"</span>, pic_md5.GetBuffer());</span><br><span class="line">BSON_APPEND_BINARY(&amp;item, <span class="string">"sn"</span>, BSON_SUBTYPE_BINARY, (<span class="keyword">const</span> <span class="keyword">uint8_t</span>*)strFeature.c_str(), strFeature.length());</span><br><span class="line">BSON_APPEND_SYMBOL(&amp;item, <span class="string">"account"</span>, account.GetBuffer());</span><br><span class="line"></span><br><span class="line"><span class="keyword">bson_error_t</span> error;</span><br><span class="line"><span class="keyword">if</span> (mongoc_collection_insert(m_collection, MONGOC_INSERT_CONTINUE_ON_ERROR, &amp;item, <span class="literal">NULL</span>, &amp;error))</span><br><span class="line">    Log()-&gt;LogA(<span class="string">"mongoc_collection_insert: %s"</span>, pic_md5);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    Log()-&gt;LogA(<span class="string">"mongoc_collection_insert error: %s"</span>, pic_md5);</span><br><span class="line">bson_destroy(&amp;item);</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 查询</span></span><br><span class="line"><span class="keyword">mongoc_cursor_t</span>* CMongoClient::Query()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">bson_t</span> filter;</span><br><span class="line">    bson_init(&amp;filter);</span><br><span class="line">    <span class="comment">// 设置查询字段</span></span><br><span class="line">    <span class="keyword">bson_t</span> opts;</span><br><span class="line">    bson_init(&amp;opts);</span><br><span class="line">    BSON_APPEND_INT64(&amp;opts, <span class="string">"skip"</span>, dwSkip);</span><br><span class="line">    BSON_APPEND_INT64(&amp;opts, <span class="string">"limit"</span>, dwLimit);</span><br><span class="line">    <span class="comment">// 设置显示字段</span></span><br><span class="line">    <span class="keyword">bson_t</span> opts_project;</span><br><span class="line">    BSON_APPEND_DOCUMENT_BEGIN(&amp;opts, <span class="string">"projection"</span>, &amp;opts_project);</span><br><span class="line">    BSON_APPEND_INT32(&amp;opts_project, <span class="string">"_id"</span>, <span class="number">0</span>);</span><br><span class="line">    bson_append_document_end(&amp;opts, &amp;opts_project);</span><br><span class="line">    <span class="comment">// 设置索引</span></span><br><span class="line">    <span class="keyword">bson_t</span> opts_sort;</span><br><span class="line">    BSON_APPEND_DOCUMENT_BEGIN(&amp;opts, <span class="string">"sort"</span>, &amp;opts_sort);</span><br><span class="line">    BSON_APPEND_INT32(&amp;opts_sort, <span class="string">"last_user_time"</span>, <span class="number">1</span>);</span><br><span class="line">    bson_append_document_end(&amp;opts, &amp;opts_sort);</span><br><span class="line">    <span class="keyword">mongoc_cursor_t</span>* cursor = mongoc_collection_find_with_opts(m_collection, &amp;filter, &amp;opts, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    bson_destroy(&amp;filter);</span><br><span class="line">    bson_destroy(&amp;opts);</span><br><span class="line">    bson_destroy(&amp;opts_project);</span><br><span class="line">    <span class="keyword">return</span> cursor;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">bson_t</span>* CMongoClient::GetNext(<span class="keyword">mongoc_cursor_t</span>* cursor)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">bson_t</span>* doc = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">if</span> (mongoc_cursor_next(cursor, &amp;doc)) &#123;</span><br><span class="line">        <span class="comment">//char* str = bson_as_canonical_extended_json(doc, NULL);</span></span><br><span class="line">        <span class="comment">//printf("%s\n", str);</span></span><br><span class="line">        <span class="comment">//bson_free(str);</span></span><br><span class="line">        <span class="keyword">return</span> doc;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">CStringA <span class="title">GetStringValue</span><span class="params">(<span class="keyword">const</span> <span class="keyword">bson_t</span>* doc, CStringA key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">bson_iter_t</span> iter;</span><br><span class="line">    <span class="keyword">if</span> (bson_iter_init_find(&amp;iter, doc, key))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">uint32_t</span> len = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">char</span> *value = bson_iter_symbol(&amp;iter, &amp;len);</span><br><span class="line">        <span class="keyword">return</span> CStringA(value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">CStringA <span class="title">GetBinaryValue</span><span class="params">(<span class="keyword">const</span> <span class="keyword">bson_t</span>* doc, CStringA key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">bson_iter_t</span> iter;</span><br><span class="line">    <span class="keyword">if</span> (bson_iter_init_find(&amp;iter, doc, key))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">bson_subtype_t</span> subType;</span><br><span class="line">        <span class="keyword">uint32_t</span> len = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">uint8_t</span> *data = <span class="literal">NULL</span>;</span><br><span class="line">        bson_iter_binary(&amp;iter, &amp;subType, &amp;len, &amp;data);</span><br><span class="line">        <span class="keyword">return</span> CStringA((<span class="keyword">char</span>*)data, len);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FreeQuery</span><span class="params">(<span class="keyword">mongoc_cursor_t</span>* cursor)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    mongoc_cursor_destroy(cursor);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      MongoDB
    
    </summary>
    
      <category term="VC" scheme="/categories/VC/"/>
    
    
      <category term="MongoDB" scheme="/tags/MongoDB/"/>
    
  </entry>
  
</feed>
