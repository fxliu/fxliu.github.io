<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>福</title>
  
  <subtitle>业精于勤荒于嬉</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="/"/>
  <updated>2019-11-19T11:50:02.463Z</updated>
  <id>/</id>
  
  <author>
    <name>福</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>文件</title>
    <link href="/2019/11/19/Python/%E6%96%87%E4%BB%B6/%E6%96%87%E4%BB%B6/"/>
    <id>/2019/11/19/Python/文件/文件/</id>
    <published>2019-11-19T11:40:25.477Z</published>
    <updated>2019-11-19T11:50:02.463Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h2><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建时间</span></span><br><span class="line">os.stat(fn).st_ctime</span><br></pre></td></tr></table></figure><h2 id="文件夹"><a href="#文件夹" class="headerlink" title="文件夹"></a>文件夹</h2><h3 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 通配符遍历</span></span><br><span class="line"><span class="keyword">import</span> glob</span><br><span class="line"></span><br><span class="line">files = glob.glob(<span class="string">'*/*.json'</span>)   <span class="comment"># 遍历一级子目录下的json</span></span><br><span class="line"><span class="keyword">print</span> files   <span class="comment"># ['1/t1.json', '1/t2.json', '2/t.py']</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      文件
    
    </summary>
    
      <category term="Python" scheme="/categories/Python/"/>
    
    
      <category term="文件" scheme="/tags/%E6%96%87%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>加解密</title>
    <link href="/2019/11/18/Python/%E5%8A%A0%E8%A7%A3%E5%AF%86/"/>
    <id>/2019/11/18/Python/加解密/</id>
    <published>2019-11-18T07:25:11.000Z</published>
    <updated>2019-11-18T07:25:11.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><h3 id="base64"><a href="#base64" class="headerlink" title="base64"></a>base64</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># python2</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'我们'</span>.encode(<span class="string">'base64'</span>)</span><br><span class="line"><span class="keyword">print</span> <span class="string">'ztLDxw=='</span>.decode(<span class="string">'base64'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># python2</span></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">s = <span class="string">'我是字符串'</span></span><br><span class="line">a = base64.b64encode(s)</span><br><span class="line"><span class="keyword">print</span> base64.b64decode(a)</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: gbk -*-</span></span><br><span class="line"><span class="comment"># pyton3</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">P3</span>:</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">b2s</span><span class="params">(b)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> b.decode(<span class="string">'gbk'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">s2b</span><span class="params">(s, s16=False)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :param s:</span></span><br><span class="line"><span class="string">        :param s16: 是否是16进制字符串, 比如：616263646566</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> s16:</span><br><span class="line">            <span class="keyword">return</span> bytes.fromhex(s)</span><br><span class="line">        <span class="keyword">return</span> s.encode(<span class="string">'gbk'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">encode</span><span class="params">(self, s, s16=False)</span>:</span></span><br><span class="line">        <span class="comment"># 注意bytes和str之间的转化</span></span><br><span class="line">        s = self.s2b(s, s16)</span><br><span class="line">        <span class="keyword">return</span> base64.b64encode(s)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decode</span><span class="params">(s, out_hex=False)</span>:</span></span><br><span class="line">        <span class="comment"># python3: b64decode -&gt; bytes -&gt; hex()</span></span><br><span class="line">        re = base64.b64decode(s)</span><br><span class="line">        <span class="keyword">if</span> out_hex:</span><br><span class="line">            <span class="keyword">return</span> re.hex()</span><br><span class="line">        <span class="keyword">return</span> re</span><br></pre></td></tr></table></figure><h2 id="AES"><a href="#AES" class="headerlink" title="AES"></a>AES</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pip install crypto</span><br><span class="line"><span class="comment"># 如果提示找不到Crypto.Cipher，近Python第三方安装包目录，把crypto 改为 Crypto 即可</span></span><br><span class="line"><span class="comment"># 如果还提示找不到，更换模块：pycrypto -&gt; pycryptodome</span></span><br><span class="line">pip uninstall pycrypto</span><br><span class="line">pip install pycryptodome</span><br></pre></td></tr></table></figure><h3 id="CBC"><a href="#CBC" class="headerlink" title="CBC"></a>CBC</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding=utf8</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">AES/CBC/PKCS7Padding</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> estools</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ESCBC</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.cfg = estools.get_cfg()</span><br><span class="line">        self.mode = AES.MODE_CBC</span><br><span class="line"></span><br><span class="line">        self.key = self.cfg[<span class="string">'cbc'</span>][<span class="string">'key'</span>]  <span class="comment"># type: str</span></span><br><span class="line">        self.vi = self.cfg[<span class="string">'cbc'</span>][<span class="string">'vi'</span>]  <span class="comment"># type: str</span></span><br><span class="line">        self.key = self.key.decode(<span class="string">"hex"</span>)</span><br><span class="line">        self.vi = self.vi.decode(<span class="string">"hex"</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pkcs7padding</span><span class="params">(data)</span>:</span></span><br><span class="line">        <span class="comment"># AES.block_size 16位</span></span><br><span class="line">        bs = AES.block_size</span><br><span class="line">        padding = bs - len(data) % bs</span><br><span class="line">        padding_text = chr(padding) * padding</span><br><span class="line">        <span class="keyword">return</span> data + padding_text</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pkcs7unpadding</span><span class="params">(data)</span>:</span></span><br><span class="line">        lengt = len(data)</span><br><span class="line">        unpadding = ord(data[lengt - <span class="number">1</span>])</span><br><span class="line">        <span class="keyword">return</span> data[<span class="number">0</span>:lengt - unpadding]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">encrypt</span><span class="params">(self, s)</span>:</span></span><br><span class="line">        s = copy.deepcopy(s)</span><br><span class="line">        cipher = AES.new(self.key, self.mode, self.vi)</span><br><span class="line">        <span class="keyword">return</span> cipher.encrypt(self.pkcs7padding(s))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decrypt</span><span class="params">(self, s)</span>:</span></span><br><span class="line">        s = copy.deepcopy(s)</span><br><span class="line">        cipher = AES.new(self.key, self.mode, self.vi)</span><br><span class="line">        decrypted = cipher.decrypt(s)</span><br><span class="line">        <span class="keyword">return</span> self.pkcs7unpadding(decrypted)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">b64encode</span><span class="params">(s)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> base64.b64encode(s)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">b64decode</span><span class="params">(s)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> base64.b64decode(s)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></span><br><span class="line">    cbc = ESCBC()</span><br><span class="line">    text = <span class="string">'abcdeft'</span></span><br><span class="line">    encrypted = cbc.encrypt(text)</span><br><span class="line">    <span class="keyword">print</span> base64.b64encode(encrypted)</span><br><span class="line">    <span class="keyword">print</span> cbc.decrypt(encrypted)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    test()</span><br></pre></td></tr></table></figure><h3 id="CFB"><a href="#CFB" class="headerlink" title="CFB"></a>CFB</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding=utf8</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">AES/CFB/NOPADDING加解密</span></span><br><span class="line"><span class="string">等价于PHP: AES-128-CFB+OPENSSL_ZERO_PADDING</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ESCFB</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.mode = AES.MODE_CFB</span><br><span class="line"></span><br><span class="line">        self.key = <span class="string">'ba0d1eba1b5aa3dc6f465f0d03d1a1f3'</span>  <span class="comment"># type: str</span></span><br><span class="line">        self.vi = <span class="string">'15b32d0a12b89b7857c75556ff8176aa'</span>  <span class="comment"># type: str</span></span><br><span class="line">        self.key = self.key.decode(<span class="string">"hex"</span>)</span><br><span class="line">        self.vi = self.vi.decode(<span class="string">"hex"</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">zero_padding</span><span class="params">(data)</span>:</span></span><br><span class="line">        bs = AES.block_size</span><br><span class="line">        num = bs - len(data) % bs</span><br><span class="line">        padding_text = <span class="string">'\0'</span> * num</span><br><span class="line">        <span class="keyword">return</span> data + padding_text, num</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">encrypt</span><span class="params">(self, s)</span>:</span></span><br><span class="line">        s = copy.deepcopy(s)</span><br><span class="line">        cipher = AES.new(self.key, self.mode, self.vi, segment_size=<span class="number">128</span>)</span><br><span class="line">        s, n = self.zero_padding(s)</span><br><span class="line">        s = cipher.encrypt(s)</span><br><span class="line">        <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> s</span><br><span class="line">        <span class="keyword">return</span> s[<span class="number">0</span>:-n]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decrypt</span><span class="params">(self, s)</span>:</span></span><br><span class="line">        s = copy.deepcopy(s)</span><br><span class="line">        cipher = AES.new(self.key, self.mode, self.vi, segment_size=<span class="number">128</span>)</span><br><span class="line">        s, n = self.zero_padding(s)</span><br><span class="line">        s = cipher.decrypt(s)</span><br><span class="line">        <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> s</span><br><span class="line">        <span class="keyword">return</span> s[<span class="number">0</span>:-n]</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">b64encode</span><span class="params">(s)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> base64.b64encode(s)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">b64decode</span><span class="params">(s)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> base64.b64decode(s)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></span><br><span class="line">    cbc = ESCFB()</span><br><span class="line">    text = <span class="string">'1ffedd4c51506214a1a196f4128c4267b3c9911wD'</span></span><br><span class="line">    encrypted = cbc.encrypt(text)</span><br><span class="line">    <span class="keyword">print</span> base64.b64encode(encrypted)</span><br><span class="line">    <span class="keyword">print</span> cbc.decrypt(encrypted)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    test()</span><br></pre></td></tr></table></figure><h3 id="DES"><a href="#DES" class="headerlink" title="DES"></a>DES</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">简单应用</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> DES</span><br><span class="line"></span><br><span class="line">mode = DES.MODE_CBC</span><br><span class="line">key = <span class="string">'01234567'</span></span><br><span class="line">vi = <span class="string">'01234567'</span></span><br><span class="line">text = <span class="string">'12345678123456789'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span><span class="params">(text)</span>:</span></span><br><span class="line">    cipher = DES.new(key, mode, vi)</span><br><span class="line">    <span class="keyword">return</span> cipher.encrypt(text + <span class="string">'\0'</span> * (<span class="number">8</span> - len(text) % <span class="number">8</span>))</span><br><span class="line"></span><br><span class="line">encrypted = encrypt(text)</span><br><span class="line"><span class="keyword">print</span> encrypted.encode(<span class="string">'hex'</span>)</span><br><span class="line"><span class="comment"># MODE_CBC must reset vi</span></span><br><span class="line">cipher = DES.new(key, mode, vi)</span><br><span class="line">decrypted = cipher.decrypt(encrypted)</span><br><span class="line"><span class="keyword">print</span> decrypted.rstrip(<span class="string">'\0'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding=gbk</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">文件加解密封装</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> DES</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EsCBC</span>:</span></span><br><span class="line">    mode = DES.MODE_CBC</span><br><span class="line">    key = <span class="string">'01234567'</span></span><br><span class="line">    vi = <span class="string">'01234567'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.cipher = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inttobytes</span><span class="params">(i)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">itoc</span><span class="params">(v)</span>:</span></span><br><span class="line">            <span class="keyword">return</span> chr(v)</span><br><span class="line"></span><br><span class="line">        b = bytearray()</span><br><span class="line">        b.append(itoc(i &amp; <span class="number">0xFF</span>))</span><br><span class="line">        b.append(itoc((i &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF</span>))</span><br><span class="line">        b.append(itoc((i &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xFF</span>))</span><br><span class="line">        b.append(itoc((i &gt;&gt; <span class="number">24</span>) &amp; <span class="number">0xFF</span>))</span><br><span class="line">        <span class="keyword">return</span> b</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bytestoint</span><span class="params">(b)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> ord(b[<span class="number">0</span>]) + (ord(b[<span class="number">1</span>]) &lt;&lt; <span class="number">8</span>) + (ord(b[<span class="number">2</span>]) &lt;&lt; <span class="number">16</span>) + (ord(b[<span class="number">3</span>]) &lt;&lt; <span class="number">24</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 加密</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">encrypt</span><span class="params">(self, fn, new_fn)</span>:</span></span><br><span class="line">        self.cipher = DES.new(EsCBC.key, EsCBC.mode, EsCBC.vi)</span><br><span class="line">        <span class="keyword">with</span> open(fn, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            data = f.read()</span><br><span class="line">            data = bytearray(data)</span><br><span class="line">            data.extend(inttobytes(len(data)))                 <span class="comment"># 追加长度</span></span><br><span class="line">            data.extend(bytearray([<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'D'</span>]))       <span class="comment"># 追加尾部标示</span></span><br><span class="line">            <span class="keyword">if</span> len(data) % <span class="number">8</span>:</span><br><span class="line">                data.extend(bytearray(<span class="number">8</span> - len(data) % <span class="number">8</span>))      <span class="comment"># 长度补全</span></span><br><span class="line">            new_data = self.cipher.encrypt(str(data))</span><br><span class="line">            <span class="keyword">with</span> open(new_fn, <span class="string">'wb'</span>) <span class="keyword">as</span> new_f:</span><br><span class="line">                new_f.write(new_data)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 解密</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decrypt</span><span class="params">(self, fn, new_fn)</span>:</span></span><br><span class="line">        self.cipher = DES.new(EsCBC.key, EsCBC.mode, EsCBC.vi)</span><br><span class="line">        <span class="keyword">with</span> open(fn, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            data = f.read()</span><br><span class="line">            new_data = self.cipher.decrypt(data)</span><br><span class="line">            new_data = bytearray(new_data)</span><br><span class="line">            new_data = new_data.rstrip(<span class="string">b'\x00'</span>)</span><br><span class="line">            <span class="keyword">if</span> (chr(new_data[<span class="number">-4</span>]), chr(new_data[<span class="number">-3</span>]), chr(new_data[<span class="number">-2</span>]), chr(new_data[<span class="number">-1</span>])) != (<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'D'</span>):</span><br><span class="line">                <span class="keyword">raise</span> SyntaxError, <span class="string">'zip error'</span></span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            new_data = str(new_data[:<span class="number">-4</span>])</span><br><span class="line">            new_datalen = EsCBC.bytestoint(new_data[<span class="number">-4</span>:])</span><br><span class="line">            new_data = str(new_data[:<span class="number">-4</span>])</span><br><span class="line">            <span class="comment"># print new_datalen</span></span><br><span class="line">            <span class="comment"># print new_data.encode('hex')</span></span><br><span class="line">            <span class="keyword">with</span> open(new_fn, <span class="string">'wb'</span>) <span class="keyword">as</span> new_f:</span><br><span class="line">                new_f.write(new_data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    cbc = EsCBC()</span><br><span class="line">    cbc.encrypt(<span class="string">'1.txt'</span>, <span class="string">'2.txt'</span>)</span><br><span class="line">    cbc.decrypt(<span class="string">'2.txt'</span>, <span class="string">'3.txt'</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      pymysql
    
    </summary>
    
      <category term="Python" scheme="/categories/Python/"/>
    
    
      <category term="AES, CBC, CFB" scheme="/tags/AES-CBC-CFB/"/>
    
  </entry>
  
  <entry>
    <title>Session</title>
    <link href="/2019/11/16/PHP/SESSION/"/>
    <id>/2019/11/16/PHP/SESSION/</id>
    <published>2019-11-16T10:06:07.000Z</published>
    <updated>2019-11-16T10:06:07.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="登陆"><a href="#登陆" class="headerlink" title="登陆"></a>登陆</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">check();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(substr($_SERVER[<span class="string">'REMOTE_ADDR'</span>], <span class="number">0</span>, <span class="number">10</span>) == <span class="string">'192.168.1.'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 内网放行</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!$_SESSION[<span class="string">'is_login'</span>] == <span class="string">'1'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 已经登陆: 调整Session过期时间</span></span><br><span class="line">        ini_set(<span class="string">'session.gc_maxlifetime'</span>, <span class="string">"86400"</span>); <span class="comment">// 秒</span></span><br><span class="line">        ini_set(<span class="string">"session.cookie_lifetime"</span>,<span class="string">"86400"</span>); <span class="comment">// 秒</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 强制跳转到login</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'&lt;script&gt;window.location.href="./login.html";&lt;/script&gt;'</span>;</span><br><span class="line">    <span class="keyword">die</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ($_REQUEST[<span class="string">'name'</span>] == <span class="string">'...'</span> &amp;&amp; $_REQUEST[<span class="string">'pwd'</span>] == <span class="string">'***'</span>) &#123;</span><br><span class="line">    <span class="comment">// 标记登陆</span></span><br><span class="line">    $_SESSION[<span class="string">'is_login'</span>] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Session, login
    
    </summary>
    
      <category term="PHP" scheme="/categories/PHP/"/>
    
    
      <category term="Session" scheme="/tags/Session/"/>
    
  </entry>
  
  <entry>
    <title>JQuery</title>
    <link href="/2019/11/14/Html/JQuery/"/>
    <id>/2019/11/14/Html/JQuery/</id>
    <published>2019-11-14T11:04:37.000Z</published>
    <updated>2019-11-14T11:04:37.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ajaxGet</span>(<span class="params">url, data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> _this = <span class="keyword">this</span>;</span><br><span class="line">    $.<span class="keyword">get</span>(url, data, function (data, status) &#123;</span><br><span class="line">        myPrint(<span class="string">"状态："</span> + status);</span><br><span class="line">        myPrint(<span class="string">"数据："</span> + data);</span><br><span class="line">        <span class="comment">// 这里的this是ajax的this, 要使用外层this需要自己定义变量保存</span></span><br><span class="line">        _this.content = data;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ajaxPost</span>(<span class="params">url, data, param=&#123;&#125;</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(param)</span><br><span class="line">        url += <span class="string">"?"</span> + $.param(param);</span><br><span class="line">    $.post(url, data, <span class="function"><span class="keyword">function</span> (<span class="params">data, status</span>) </span>&#123;</span><br><span class="line">        myPrint(<span class="string">"状态："</span> + status);</span><br><span class="line">        myPrint(<span class="string">"数据："</span> + data);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> d = &#123;</span><br><span class="line">    a: <span class="string">"1"</span>,</span><br><span class="line">    b: <span class="string">"2"</span>,</span><br><span class="line">&#125;;</span><br><span class="line">ajaxGet(<span class="string">'/uri'</span>, d);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      JQuery
    
    </summary>
    
      <category term="JS" scheme="/categories/JS/"/>
    
    
      <category term="JQuery" scheme="/tags/JQuery/"/>
    
  </entry>
  
  <entry>
    <title>JS基础</title>
    <link href="/2019/11/14/Html/JS%E5%9F%BA%E7%A1%80/"/>
    <id>/2019/11/14/Html/JS基础/</id>
    <published>2019-11-14T11:04:37.000Z</published>
    <updated>2019-11-14T11:04:37.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 模板字符串</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="string">'hello'</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="string">`<span class="subst">$&#123;a&#125;</span> world`</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// json字符串 -&gt; js对象</span></span><br><span class="line">js_obj = <span class="built_in">JSON</span>.parse(json_str);</span><br><span class="line"></span><br><span class="line"><span class="comment">// encodeUrl</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">urlEncode</span>(<span class="params">param</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> paramStr = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> k <span class="keyword">in</span> param) &#123;</span><br><span class="line">        paramStr += paramStr ? <span class="string">'&amp;'</span>:<span class="string">''</span>;</span><br><span class="line">        paramStr += <span class="built_in">encodeURIComponent</span>(k) + <span class="string">'='</span> + <span class="built_in">encodeURIComponent</span>(param[k]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> paramStr;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 日期</span></span><br><span class="line"><span class="keyword">let</span> d1 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'2010-02-12'</span>);</span><br><span class="line">d1.setFullYear(d.getFullYear()+<span class="number">10</span>);</span><br><span class="line"><span class="comment">// 毫秒</span></span><br><span class="line"><span class="keyword">let</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="built_in">console</span>.log(date, date.getMilliseconds());</span><br><span class="line"><span class="comment">// vux的日期格式化</span></span><br><span class="line"><span class="keyword">import</span> &#123;dateFormat&#125; <span class="keyword">from</span> <span class="string">'vux'</span>;</span><br><span class="line"><span class="keyword">let</span> d2 = dateFormat(d, <span class="string">'YYYY-MM-DD'</span>);</span><br></pre></td></tr></table></figure><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 遍历</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> j = <span class="number">0</span>,len=arr.length; j &lt; len; j++) &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 清空</span></span><br><span class="line">arr.splice(<span class="number">0</span>,arr.length);</span><br></pre></td></tr></table></figure><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;<span class="string">'0'</span>:<span class="string">'a'</span>,<span class="string">'1'</span>:<span class="string">'b'</span>,<span class="string">'2'</span>:<span class="string">'c'</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> obj) &#123;</span><br><span class="line">     <span class="built_in">console</span>.log(i,<span class="string">":"</span>,obj[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      基础
    
    </summary>
    
      <category term="JS" scheme="/categories/JS/"/>
    
    
      <category term="基础" scheme="/tags/%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>数据库</title>
    <link href="/2019/11/11/Python/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>/2019/11/11/Python/数据库/</id>
    <published>2019-11-11T06:27:12.000Z</published>
    <updated>2019-11-11T06:27:12.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><code>pip install pymysql</code></p><h2 id="常规使用"><a href="#常规使用" class="headerlink" title="常规使用"></a>常规使用</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接</span></span><br><span class="line">conn = pymysql.connect(</span><br><span class="line">  host=db_info[<span class="string">'ip'</span>], user=db_info[<span class="string">'user'</span>], passwd=db_info[<span class="string">'password'</span>],</span><br><span class="line">  port=port, db=db_info[<span class="string">'dbname'</span>], charset=<span class="string">'utf8'</span>)</span><br><span class="line">conn.autocommit(autocommit)   <span class="comment"># 是否自动提交</span></span><br><span class="line">cur = conn.cursor()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 语句执行</span></span><br><span class="line">cur.execute(sql)</span><br><span class="line"><span class="comment"># 事务提交</span></span><br><span class="line">conn.commit()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Select 结果</span></span><br><span class="line">cur.fetchone()</span><br><span class="line">cur.fetchmany(num)</span><br><span class="line">cur.fetchall()</span><br><span class="line"></span><br><span class="line"><span class="comment"># insert / update / delete 影响个数</span></span><br><span class="line">cur.rowcount</span><br><span class="line">cur.rownumber</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      pymysql
    
    </summary>
    
      <category term="Python" scheme="/categories/Python/"/>
    
    
      <category term="pymysql" scheme="/tags/pymysql/"/>
    
  </entry>
  
  <entry>
    <title>web.py</title>
    <link href="/2019/11/11/Python/Web/web.py/"/>
    <id>/2019/11/11/Python/Web/web.py/</id>
    <published>2019-11-11T05:51:44.000Z</published>
    <updated>2019-11-11T05:51:44.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><code>pip install web.py</code></p><h2 id="hello-world"><a href="#hello-world" class="headerlink" title="hello world"></a>hello world</h2><ul><li>端口: 默认<code>8080</code>, 可以通过命令行修改 <code>python test.py 8081</code></li><li>发现HTTP请求时，创建新进程，所以<strong>脚本更新，即时生效</strong></li></ul><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Hello world</span></span><br><span class="line"><span class="keyword">import</span> web</span><br><span class="line"></span><br><span class="line">urls = (<span class="string">"/.*"</span>, <span class="string">"hello"</span>)   <span class="comment"># 与类名相对应，大小写敏感</span></span><br><span class="line">app = web.application(urls, globals())</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">hello</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">GET</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'Hello, world!'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><h2 id="常规用法"><a href="#常规用法" class="headerlink" title="常规用法"></a>常规用法</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">hello</span>:</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">GET</span><span class="params">(self)</span>:</span></span><br><span class="line">    data = web.input()  <span class="comment"># URL上报所有参数，包含post，get，表单</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Hello, world!'</span></span><br></pre></td></tr></table></figure><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">db = web.database(</span><br><span class="line">    dbn=<span class="string">'mysql'</span>, host=<span class="string">'localhost'</span>, port=<span class="number">3306</span>,</span><br><span class="line">    db=<span class="string">'test_db'</span>, user=<span class="string">'test'</span>, passwd=<span class="string">'123456'</span>)</span><br><span class="line"></span><br><span class="line">data = db.select(<span class="string">"test_table"</span>)</span><br><span class="line"><span class="keyword">for</span> d <span class="keyword">in</span> data:</span><br><span class="line">    print(d[<span class="string">'name'</span>])</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      web.py
    
    </summary>
    
      <category term="Python" scheme="/categories/Python/"/>
    
    
      <category term="web.py" scheme="/tags/web-py/"/>
    
  </entry>
  
  <entry>
    <title>Django</title>
    <link href="/2019/11/09/Python/Web/django/"/>
    <id>/2019/11/09/Python/Web/django/</id>
    <published>2019-11-09T06:25:09.000Z</published>
    <updated>2019-11-09T06:25:09.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><code>pip install Django</code></p><ul><li>命令行测试<code>python -m django --version</code></li><li>Py脚本测试</li></ul><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># py测试安装是否成功</span></span><br><span class="line"><span class="keyword">import</span> django</span><br><span class="line">django.get_version()</span><br></pre></td></tr></table></figure><h2 id="HelloWorld"><a href="#HelloWorld" class="headerlink" title="HelloWorld"></a>HelloWorld</h2><ul><li>创建项目：<code>django-admin startproject mysite</code></li><li>启动项目：<code>python manage.py runserver</code><ul><li>指定IP端口：<code>python manage.py runserver 127.0.0.1:8000</code></li></ul></li><li>创建视图</li></ul><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># hello.py</span></span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">"Hello world ! "</span>)</span><br></pre></td></tr></table></figure><ul><li>映射路径<ul><li>修改：urls.py</li></ul></li></ul><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导入 hello</span></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> hello</span><br><span class="line"><span class="comment"># 映射路径</span></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">''</span>, hello.hello),</span><br><span class="line">]</span><br><span class="line"><span class="comment"># 映射说明：正则写法</span></span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> re_path</span><br><span class="line">re_path(<span class="string">'^hello.*$'</span>, view.hello)    <span class="comment"># 所有hello开头的URI, 均映射到view.hello</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Django
    
    </summary>
    
      <category term="Python" scheme="/categories/Python/"/>
    
    
      <category term="Django" scheme="/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>进程 / 线程</title>
    <link href="/2019/11/08/Python/%E7%BA%BF%E7%A8%8B-%E8%BF%9B%E7%A8%8B/"/>
    <id>/2019/11/08/Python/线程-进程/</id>
    <published>2019-11-08T09:43:31.000Z</published>
    <updated>2019-11-08T09:43:31.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h2><h3 id="multiprocessing"><a href="#multiprocessing" class="headerlink" title="multiprocessing"></a>multiprocessing</h3><ul><li>在UNIX平台上，当某个进程终结之后，该进程需要被其父进程调用wait，否则进程成为僵尸进程(Zombie)。所以，有必要对每个Process对象调用join()方法 (实际上等同于wait)。</li><li>multiprocessing提供的threading包中没有的IPC(比如Pipe和Queue)，效率上更高。</li><li>应优先考虑Pipe和Queue，避免使用Lock/Event/Semaphore/Condition等同步方式 (因为它们占据的不是用户进程的资源)。</li><li>所有进程的任务在打印时都会向同一个标准输出(stdout)输出</li></ul><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: gbk -*-</span></span><br><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(i)</span>:</span></span><br><span class="line">    print(<span class="string">"start"</span>, i)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">"end"</span>, i)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">start</span><span class="params">()</span>:</span></span><br><span class="line">    pros = list()</span><br><span class="line">    <span class="comment"># 创建进程池</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        pros.append(multiprocessing.Process(target=func, args=(i, )))</span><br><span class="line">    <span class="comment"># 启动</span></span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> pros:</span><br><span class="line">        p.start()</span><br><span class="line">    <span class="comment"># 活动子进程</span></span><br><span class="line">    print(multiprocessing.active_children())</span><br><span class="line">    <span class="comment"># 等待终止</span></span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> pros:</span><br><span class="line">        p.join()</span><br><span class="line">        <span class="comment"># 返回值</span></span><br><span class="line">        print(<span class="string">'%15s.exitcode = %s'</span> % (p.name, p.exitcode))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    start()</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 是否活动</span></span><br><span class="line">p.is_alive()</span><br><span class="line"><span class="comment"># 强制终止</span></span><br><span class="line">p.terminate()</span><br><span class="line"><span class="comment"># 返回值</span></span><br><span class="line">p.join()</span><br><span class="line">print(<span class="string">'%15s.exitcode = %s'</span> % (p.name, p.exitcode))</span><br></pre></td></tr></table></figure><ul><li>进程同步：管道，队列</li></ul><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进程安全：管道</span></span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process, Pipe</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(conn)</span>:</span></span><br><span class="line">    conn.send([<span class="number">42</span>, <span class="literal">None</span>, <span class="string">'hello'</span>])</span><br><span class="line">    conn.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    parent_conn, child_conn = Pipe()</span><br><span class="line">    p = Process(target=f, args=(child_conn,))</span><br><span class="line">    p.start()</span><br><span class="line">    <span class="keyword">print</span> parent_conn.recv()   <span class="comment"># prints "[42, None, 'hello']"</span></span><br><span class="line">    p.join()</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进程安全：队列</span></span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process, Queue</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(q)</span>:</span></span><br><span class="line">    <span class="comment">#队列满时阻塞</span></span><br><span class="line">    q.put([<span class="number">42</span>, <span class="literal">None</span>, <span class="string">'hello'</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    q = Queue(<span class="number">10</span>)       <span class="comment">#队列最大存储10条数据, 不指定则代表无限定</span></span><br><span class="line">    p = Process(target=f, args=(q,))</span><br><span class="line">    p.start()</span><br><span class="line">    <span class="keyword">print</span> q.get()       <span class="comment">#无数据时阻塞</span></span><br><span class="line">    p.join()</span><br></pre></td></tr></table></figure><h3 id="concurrent-futures-ProcessPoolExecutor"><a href="#concurrent-futures-ProcessPoolExecutor" class="headerlink" title="concurrent.futures.ProcessPoolExecutor"></a>concurrent.futures.ProcessPoolExecutor</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 批量创建：map机制, 自动等待结束</span></span><br><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ProcessPoolExecutor</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">(params)</span>:</span></span><br><span class="line">    time.sleep(<span class="number">0.1</span>)</span><br><span class="line">    print(params)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    start = time.time()</span><br><span class="line">    <span class="keyword">with</span> ProcessPoolExecutor(max_workers=<span class="number">2</span>) <span class="keyword">as</span> pool:</span><br><span class="line">        results = list(pool.map(fun, [(i,) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)]))</span><br><span class="line">        print(<span class="string">'Took %.3f seconds.'</span> % (time.time() - start))</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 单个创建：submit机制, 程序控制结束</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    <span class="keyword">with</span> ProcessPoolExecutor(max_workers=<span class="number">2</span>) <span class="keyword">as</span> pool:</span><br><span class="line">        futures = [pool.submit(fun, (i, )) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># result等待结束, 并获得返回值</span></span><br><span class="line">        print(<span class="string">'results: %s'</span> % [future.result() <span class="keyword">for</span> future <span class="keyword">in</span> futures])</span><br><span class="line"></span><br><span class="line">        <span class="comment"># wait等待全部结束: ALL_COMPLETED, FIRST_COMPLETED, FIRST_EXCEPTION</span></span><br><span class="line">        <span class="comment"># 返回(done, unfinished)，分别为已完成/未完成future对象列表</span></span><br><span class="line">        done, unfinished = wait(futures, timeout=<span class="number">2</span>, return_when=concurrent.futures.ALL_COMPLETED)</span><br></pre></td></tr></table></figure><h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><h3 id="threading"><a href="#threading" class="headerlink" title="threading"></a>threading</h3><ul><li><code>threading.currentThread()</code>: 返回当前的线程变量。</li><li><code>threading.enumerate()</code>: 返回一个包含正在运行的线程的list。正在运行指线程启动后、结束前，不包括启动前和终止后的线程。</li><li><code>threading.activeCount()</code>: 返回正在运行的线程数量，与<code>len(threading.enumerate())</code>有相同的结果。</li><li>线程对象方法：<ul><li><code>isAlive()</code>: 返回线程是否活动的。</li><li><code>getName()</code>: 返回线程名。</li><li><code>setName()</code>: 设置线程名。</li></ul></li><li>线程队列<code>import queue</code><ul><li><code>q = queue.Queue(10)</code> 创建同步的、线程安全的队列</li><li><code>qsize()</code> 返回队列的大小</li><li><code>empty()</code> 如果队列为空，返回True,反之False</li><li><code>full()</code> 如果队列满了，返回True,反之False, full 与 maxsize 大小对应</li><li><code>get([block[, timeout]])</code> 获取队列，timeout等待时间</li><li><code>get_nowait()</code> 相当Queue.get(False)</li><li><code>put(item)</code> 写入队列，timeout等待时间</li><li><code>put_nowait(item)</code> 相当Queue.put(item, False)</li><li><code>task_done()</code> 在完成一项工作之后，Queue.task_done()函数向任务已经完成的队列发送一个信号</li><li><code>join()</code> 实际上意味着等到队列为空，再执行别的操作</li></ul></li></ul><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">(i)</span>:</span></span><br><span class="line">    time.sleep(<span class="number">0.1</span>)</span><br><span class="line">    print(i)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    t = threading.Thread(target=hello, args=(<span class="number">1</span>,))</span><br><span class="line">    t.setDaemon(<span class="literal">True</span>)   <span class="comment"># 设置跟随父线程</span></span><br><span class="line">    t.setName(<span class="string">'t'</span>)      <span class="comment"># 设置线程名称</span></span><br><span class="line">    t.start()</span><br><span class="line">    t.join()</span><br><span class="line">    print(t.getName())      <span class="comment"># 获取线程名称</span></span><br><span class="line">    print(t.isAlive())      <span class="comment"># 是否活动</span></span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 继承模式，创建自己的线程类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, lock)</span>:</span></span><br><span class="line">        threading.Thread.__init__(self)</span><br><span class="line">        self.name = name</span><br><span class="line">        self.lock = lock</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"开始线程："</span> + self.name)</span><br><span class="line">        time.sleep(<span class="number">0.1</span>)</span><br><span class="line">        self.lock.acquire()     <span class="comment"># 锁定</span></span><br><span class="line">        print(<span class="string">"退出线程："</span> + self.name)</span><br><span class="line">        self.lock.release()     <span class="comment"># 解锁</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    lock = threading.Lock()   <span class="comment"># 线程锁</span></span><br><span class="line">    ts = [MyThread(<span class="string">"Thread-"</span>+str(i), lock) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)]</span><br><span class="line">    <span class="comment"># 设置跟随父线程</span></span><br><span class="line">    [t.setDaemon(<span class="literal">True</span>) <span class="keyword">for</span> t <span class="keyword">in</span> ts]</span><br><span class="line">    [t.start() <span class="keyword">for</span> t <span class="keyword">in</span> ts]</span><br><span class="line">    [t.join() <span class="keyword">for</span> t <span class="keyword">in</span> ts]</span><br></pre></td></tr></table></figure><h3 id="concurrent-futures-ThreadPoolExecutor"><a href="#concurrent-futures-ThreadPoolExecutor" class="headerlink" title="concurrent.futures.ThreadPoolExecutor"></a>concurrent.futures.ThreadPoolExecutor</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># map机制，支持submit控制单个进程，见concurrent.futures.ProcessPoolExecutor例子</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ThreadPoolExecutor</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">(params)</span>:</span></span><br><span class="line">    time.sleep(<span class="number">0.1</span>)</span><br><span class="line">    print(params)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    start = time.time()</span><br><span class="line">    <span class="keyword">with</span> ThreadPoolExecutor(max_workers=<span class="number">5</span>) <span class="keyword">as</span> pool:</span><br><span class="line">        results = list(pool.map(fun, [(i,) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)]))</span><br><span class="line">        print(<span class="string">'Took %.3f seconds.'</span> % (time.time() - start))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      多进程, 多线程
    
    </summary>
    
      <category term="Python" scheme="/categories/Python/"/>
    
    
      <category term="进程" scheme="/tags/%E8%BF%9B%E7%A8%8B/"/>
    
      <category term="线程" scheme="/tags/%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>剪切板</title>
    <link href="/2019/11/08/Python/%E7%B3%BB%E7%BB%9F/%E5%89%AA%E5%88%87%E6%9D%BF/"/>
    <id>/2019/11/08/Python/系统/剪切板/</id>
    <published>2019-11-08T09:36:20.000Z</published>
    <updated>2019-11-08T09:42:07.785Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写入"><a href="#写入" class="headerlink" title="写入"></a>写入</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding=gbk</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">清空剪切板，读取 / 写入字符串：win10, python3 校验有效</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">user32 = windll.user32</span><br><span class="line">kernel32 = windll.kernel32</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_clipboard</span><span class="params">()</span>:</span></span><br><span class="line">    user32.OpenClipboard(c_int(<span class="number">0</span>))</span><br><span class="line">    contents = c_char_p(user32.GetClipboardData(c_int(<span class="number">1</span>))).value</span><br><span class="line">    user32.CloseClipboard()</span><br><span class="line">    <span class="keyword">return</span> contents</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">empty_clipboard</span><span class="params">()</span>:</span></span><br><span class="line">    user32.OpenClipboard(c_int(<span class="number">0</span>))</span><br><span class="line">    user32.EmptyClipboard()</span><br><span class="line">    user32.CloseClipboard()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_clipboard</span><span class="params">(data)</span>:</span></span><br><span class="line">    <span class="comment"># 打开剪切板</span></span><br><span class="line">    user32.OpenClipboard(c_int(<span class="number">0</span>))</span><br><span class="line">    <span class="comment"># 清空</span></span><br><span class="line">    user32.EmptyClipboard()</span><br><span class="line">    <span class="comment"># 写入</span></span><br><span class="line">    alloc = kernel32.GlobalAlloc(<span class="number">0x2000</span>, len(bytes(data, encoding=<span class="string">'utf_8'</span>)) + <span class="number">1</span>)</span><br><span class="line">    lock = kernel32.GlobalLock(alloc)</span><br><span class="line">    cdll.msvcrt.strcpy(c_char_p(lock), bytes(data, encoding=<span class="string">'utf_8'</span>))</span><br><span class="line">    kernel32.GlobalUnlock(alloc)</span><br><span class="line">    user32.SetClipboardData(c_int(<span class="number">1</span>), alloc)</span><br><span class="line">    <span class="comment"># 关闭</span></span><br><span class="line">    user32.CloseClipboard()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># 写入</span></span><br><span class="line">    set_clipboard(datetime.datetime.now().strftime(<span class="string">'%Y-%m-%d %H:%M:%S'</span>))</span><br><span class="line">    <span class="comment"># 获取</span></span><br><span class="line">    text_raw = get_clipboard()</span><br><span class="line">    print(<span class="string">'&#123;0&#125; &#123;1&#125;'</span>.format(text_raw, type(text_raw)))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      剪切板
    
    </summary>
    
      <category term="Python" scheme="/categories/Python/"/>
    
    
      <category term="剪切板" scheme="/tags/%E5%89%AA%E5%88%87%E6%9D%BF/"/>
    
  </entry>
  
  <entry>
    <title>PDF</title>
    <link href="/2019/11/08/Python/%E6%96%87%E4%BB%B6/pdf/"/>
    <id>/2019/11/08/Python/文件/pdf/</id>
    <published>2019-11-08T08:35:15.000Z</published>
    <updated>2019-11-08T08:35:15.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="pdfminer"><a href="#pdfminer" class="headerlink" title="pdfminer"></a>pdfminer</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># python2</span></span><br><span class="line">pip2 install pdfminer</span><br><span class="line"><span class="comment"># python3</span></span><br><span class="line">pip3 install pdfminer3k</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: gbk -*-</span></span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> StringIO</span><br><span class="line"><span class="keyword">from</span> pdfminer.pdfinterp <span class="keyword">import</span> PDFResourceManager</span><br><span class="line"><span class="keyword">from</span> pdfminer.pdfinterp <span class="keyword">import</span> process_pdf</span><br><span class="line"><span class="keyword">from</span> pdfminer.converter <span class="keyword">import</span> TextConverter</span><br><span class="line"><span class="keyword">from</span> pdfminer.layout <span class="keyword">import</span> LAParams</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_from_pdf</span><span class="params">(file_path)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(file_path, <span class="string">'rb'</span>) <span class="keyword">as</span> file:</span><br><span class="line">        resource_manager = PDFResourceManager()</span><br><span class="line">        return_str = StringIO()</span><br><span class="line">        lap_params = LAParams()</span><br><span class="line"></span><br><span class="line">        device = TextConverter(</span><br><span class="line">            resource_manager, return_str, laparams=lap_params)</span><br><span class="line">        process_pdf(resource_manager, device, file)</span><br><span class="line">        device.close()</span><br><span class="line"></span><br><span class="line">        content = return_str.getvalue()</span><br><span class="line">        return_str.close()</span><br><span class="line">        <span class="keyword">return</span> text_to_word(content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">text_to_word</span><span class="params">(content)</span>:</span></span><br><span class="line">    lines = []</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> content.split(<span class="string">'\n'</span>):</span><br><span class="line">        lines.append(remove_control_characters(line) + <span class="string">'\n'</span>)</span><br><span class="line">    <span class="keyword">return</span> lines</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">remove_control_characters</span><span class="params">(content)</span>:</span></span><br><span class="line">    mpa = dict.fromkeys(range(<span class="number">32</span>))</span><br><span class="line">    <span class="keyword">return</span> content.translate(mpa)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    lines = read_from_pdf(<span class="string">'111.pdf'</span>)</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'111.txt'</span>, <span class="string">'w+'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">            f.write(line)</span><br><span class="line">    print(<span class="string">'ok'</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      PDF
    
    </summary>
    
      <category term="Python" scheme="/categories/Python/"/>
    
    
      <category term="PDF" scheme="/tags/PDF/"/>
    
  </entry>
  
  <entry>
    <title>基础</title>
    <link href="/2019/11/08/Python/%E5%9F%BA%E7%A1%80/"/>
    <id>/2019/11/08/Python/基础/</id>
    <published>2019-11-08T05:15:37.000Z</published>
    <updated>2019-11-08T05:15:37.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li><strong>pycharm</strong><ul><li>见PHP -&gt; PHPStorm</li></ul></li><li>快捷键<ul><li>关闭 close: <code>Ctrl+F4</code>, 补充<code>Ctrl+W</code></li><li>运行 run: <code>Ctrl+Shift+F10</code> + <code>Shift+F10</code></li><li><code>Editor</code>-&gt;<code>Inspections</code>-&gt;<code>Python</code><ul><li>取消选中<code>Method may be static</code>, 静态函数</li><li>取消选中<code>Shadowing names from outer scopes</code>, 重复定义(外定义)</li><li>取消选中<code>Too broad exception clauses</code>, 模糊的exception</li></ul></li></ul></li><li>新建文件<ul><li><code>File and Code Templates</code>-&gt;<code>Python Script</code>-&gt;清空</li></ul></li></ul><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: gbk -*-</span></span><br><span class="line"><span class="keyword">import</span> os,sys,traceback</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">version = <span class="string">""</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></span><br><span class="line">  <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">  test()</span><br></pre></td></tr></table></figure><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><h2 id="时间"><a href="#时间" class="headerlink" title="时间"></a>时间</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time, datetime</span><br><span class="line"><span class="comment"># 当前时间</span></span><br><span class="line">time.time()                 <span class="comment"># 1574157735.59</span></span><br><span class="line">time.localtime()            <span class="comment"># time:struct_time(tm_year=2019, ..., tm_hour=18, ...)</span></span><br><span class="line">datetime.datetime.now()     <span class="comment"># datetime.datetime(2019, 11, 19, 18, 3, 6, 764000)</span></span><br><span class="line"><span class="comment"># 指定时间</span></span><br><span class="line">d1 = datetime.datetime(<span class="number">1970</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>)                  <span class="comment"># 默认本地时间</span></span><br><span class="line">d2 = datetime.datetime(<span class="number">2016</span>,<span class="number">3</span>,<span class="number">18</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,pytz.utc)        <span class="comment"># 指明是格林时间</span></span><br><span class="line"><span class="comment"># 延迟</span></span><br><span class="line">time.sleep(<span class="number">1</span>)   <span class="comment"># 休眠1秒</span></span><br><span class="line">time.sleep(<span class="number">0.1</span>) <span class="comment"># 休眠0.1秒</span></span><br></pre></td></tr></table></figure><h3 id="格式转换"><a href="#格式转换" class="headerlink" title="格式转换"></a>格式转换</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># datetime -&gt; str</span></span><br><span class="line"><span class="keyword">print</span> datetime.datetime.now().strftime(<span class="string">'%Y-%m-%d %H:%M:%S'</span>)</span><br><span class="line"><span class="keyword">print</span> datetime.datetime.strftime(datetime.datetime.now(), <span class="string">'%Y-%m-%d %H:%M:%S'</span>)</span><br><span class="line"><span class="comment"># str -&gt; datetime</span></span><br><span class="line">datetime.datetime.strptime(<span class="string">"2016-05-05 05:05:05"</span>, <span class="string">"%Y-%m-%d %H:%M:%S"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># time -&gt; struct_time</span></span><br><span class="line"><span class="keyword">print</span> time.strftime(<span class="string">"%Y-%m-%d %H:%M:%S"</span>, time.localtime())</span><br><span class="line"><span class="keyword">print</span> time.strftime(<span class="string">'%Y-%m-%d %H:%M:%S'</span>, time.gmtime(time.time()))</span><br><span class="line"><span class="comment"># struct_time -&gt; time</span></span><br><span class="line">time.mktime(t)</span><br><span class="line"><span class="comment"># str -&gt; struct_time</span></span><br><span class="line">time.strptime(<span class="string">"time:2009-08-08"</span>, <span class="string">"time:%Y-%m-%d"</span>)</span><br><span class="line">time.strptime(<span class="string">"2016-05-05 05:05:05"</span>, <span class="string">"%Y-%m-%d %H:%M:%S"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># datetime -&gt; struct_time</span></span><br><span class="line"><span class="keyword">print</span> time.strftime(<span class="string">'%Y-%m-%d %H:%M:%S'</span>, datetime.datetime.utcnow().timetuple())  <span class="comment"># utc才是时间戳</span></span><br><span class="line"><span class="keyword">print</span> time.strftime(<span class="string">'%Y-%m-%d %H:%M:%S'</span>, datetime.datetime.now().utctimetuple())</span><br><span class="line"></span><br><span class="line"><span class="comment"># time -&gt; datetime</span></span><br><span class="line">datetime.datetime.fromtimestamp(time.time())</span><br><span class="line">datetime.datetime.utcfromtimestamp(time.time())</span><br><span class="line"><span class="comment"># datetime -&gt; struct_time -&gt; time</span></span><br><span class="line">time.mktime(datetime.datetime.now().timetuple())</span><br><span class="line">time.mktime(datetime.datetime.now().utctimetuple())        <span class="comment"># 指明格林时间</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># gmtime 只支持UTC时间, struct_time中指定tm_isdst=0</span></span><br><span class="line"><span class="comment"># mktime 忽略tm_isdst参数, 只支持本地时间, 使用(- time.altzone)调整为UTC时间戳</span></span><br></pre></td></tr></table></figure><h3 id="程序运行时间"><a href="#程序运行时间" class="headerlink" title="程序运行时间"></a>程序运行时间</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">timer</span><span class="params">(func, *pargs)</span>:</span></span><br><span class="line">    start = time.clock()</span><br><span class="line">    ret = func(*pargs)</span><br><span class="line">    elapsed = time.clock() - start</span><br><span class="line">    <span class="keyword">return</span> (elapsed, ret)</span><br></pre></td></tr></table></figure><h3 id="时差"><a href="#时差" class="headerlink" title="时差"></a>时差</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># datetime.timedelta: 内部存储days，seconds，microseconds, 可直接访问变量</span></span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line">ti1 = datetime.datetime.now()</span><br><span class="line">ti2 = datetime.datetime.now()</span><br><span class="line"><span class="comment"># 时差</span></span><br><span class="line">t=ti2-ti1   <span class="comment"># datetime.timedelta(0, 0, 1000)</span></span><br><span class="line">t.total_seconds() <span class="comment"># ==&gt; (td.microseconds + (td.seconds + td.days * 24 * 3600) * 10**6) / 10**6</span></span><br><span class="line">str(t)    <span class="comment"># 返回字符串，格式为： [D day[s], ][H]H:MM:SS[.UUUUUU]</span></span><br><span class="line">repr(t)   <span class="comment"># 返回字符串，格式为： datetime.timedelta(D[, S[, U]])</span></span><br><span class="line"></span><br><span class="line">now = datetime.now()</span><br><span class="line">now + datetime.timedelta(seconds=<span class="number">11</span>)</span><br><span class="line">yestoday = now - datetime.timedelta(days=<span class="number">1</span>)</span><br><span class="line">tommorow = now + datetime.timedelta(days=<span class="number">1</span>)</span><br><span class="line">next_year = now + timedelta(days = <span class="number">365</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># datetime.date也可以使用timedelta时间差</span></span><br><span class="line">t = datetime.date.today() - datetime.timedelta(days=<span class="number">30</span>)</span><br><span class="line"><span class="keyword">print</span> t.strftime(<span class="string">'%Y-%m-%d'</span>)</span><br></pre></td></tr></table></figure><h3 id="计时"><a href="#计时" class="headerlink" title="计时"></a>计时</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime, time</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TimeSheet</span>:</span></span><br><span class="line">    <span class="comment"># time_sheet = dict()</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, time_sheet, flag, reset=False)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> reset <span class="keyword">or</span> (flag <span class="keyword">not</span> <span class="keyword">in</span> time_sheet):</span><br><span class="line">            time_sheet[flag] = datetime.timedelta()</span><br><span class="line">        self.time_sheet = time_sheet</span><br><span class="line">        self.flag = flag</span><br><span class="line">        self.t = datetime.datetime.now()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__enter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 创建时开始计时</span></span><br><span class="line">        self.t = datetime.datetime.now()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__exit__</span><span class="params">(self, _, __, ___)</span>:</span></span><br><span class="line">        <span class="comment"># 释放时，计算时差</span></span><br><span class="line">        self.time_sheet[self.flag] += datetime.datetime.now() - self.t</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_time_sheet</span><span class="params">(time_sheet)</span>:</span></span><br><span class="line">    re = []</span><br><span class="line">    <span class="keyword">for</span> flag <span class="keyword">in</span> time_sheet:</span><br><span class="line">        re.append(<span class="string">'%s: %s'</span> % (flag, time_sheet[flag]))</span><br><span class="line">    <span class="keyword">return</span> <span class="string">','</span>.join(re)</span><br><span class="line"></span><br><span class="line">time_sheet = &#123;&#125;</span><br><span class="line"><span class="keyword">with</span> TimeSheet(time_sheet, <span class="string">"test"</span>, <span class="literal">True</span>) <span class="keyword">as</span> t:</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">print</span> get_time_sheet(time_sheet)</span><br></pre></td></tr></table></figure><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 随机序列</span></span><br><span class="line">d = [random.randint(<span class="number">0</span>,<span class="number">20</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">20</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列表推导式</span></span><br><span class="line">[i <span class="keyword">for</span> i <span class="keyword">in</span> d <span class="keyword">if</span> i &gt;= <span class="number">0</span>]</span><br><span class="line"><span class="comment"># 过滤：只保留lambda式返回True的项</span></span><br><span class="line">filter(<span class="keyword">lambda</span> x: x&gt;= <span class="number">0</span>, d)</span><br><span class="line"><span class="comment"># 排序</span></span><br><span class="line">sorted(d)</span><br><span class="line">sorted(d, reverse=<span class="literal">True</span>)   <span class="comment"># 反序</span></span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 数组中指定元素出现的次数</span></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line">Counter([<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>])</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 交集</span></span><br><span class="line">set(<span class="string">'abcde'</span>).intersection(set(<span class="string">'cdefg'</span>))</span><br><span class="line"><span class="comment"># 并集</span></span><br><span class="line">set(<span class="string">'abcde'</span>).union(set(<span class="string">'cdefg'</span>))</span><br><span class="line"><span class="comment"># 差集</span></span><br><span class="line">set(<span class="string">'abcde'</span>).difference(set(<span class="string">'cdefg'</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"><span class="comment"># 累积</span></span><br><span class="line">reduce(<span class="keyword">lambda</span> x, y: x+y, [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])</span><br></pre></td></tr></table></figure><h2 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 基础数据</span></span><br><span class="line">d = &#123;<span class="string">'c'</span>:<span class="number">2</span>, <span class="string">'b'</span>:<span class="number">1</span> , <span class="string">'a'</span>:<span class="number">3</span>&#125;</span><br><span class="line">d.keys()</span><br><span class="line">d.values()</span><br><span class="line">d.items()   <span class="comment"># [('a', 2), ('b', 1)]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历，过滤</span></span><br><span class="line">&#123;k: v <span class="keyword">for</span> k, v <span class="keyword">in</span> d.items() <span class="keyword">if</span> v &gt; <span class="number">1</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># key 排序</span></span><br><span class="line">&#123;k:d[k] <span class="keyword">for</span> k <span class="keyword">in</span> sorted(d.keys())&#125;</span><br><span class="line"><span class="comment"># value 自定义排序: 注意 d.items() 返回的是数组，其实用的是数组排序</span></span><br><span class="line"><span class="comment"># 返回值也是 [(k,v),(k,v)] 模式, 转化成 dict 即可</span></span><br><span class="line">dict(sorted(d.items(), key=<span class="keyword">lambda</span> x: x[<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数组 -&gt; 元组列表 -&gt; 字典</span></span><br><span class="line">dict(zip([<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>], [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]))</span><br></pre></td></tr></table></figure><h2 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h2><ul><li>随机数</li></ul><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 随机小数: (0-1)</span></span><br><span class="line">random.random()</span><br><span class="line"><span class="comment"># 随机小数: (1-9)</span></span><br><span class="line">random.uniform(<span class="number">1</span>,<span class="number">9</span>)</span><br><span class="line"><span class="comment"># 随机整数: [1,5]</span></span><br><span class="line">random.randint(<span class="number">1</span>,<span class="number">5</span>)</span><br><span class="line"><span class="comment"># 随机奇数，第三个参数代表递增基数</span></span><br><span class="line">random.randrange(<span class="number">1</span>,<span class="number">10</span>,<span class="number">2</span>)</span><br><span class="line"><span class="comment"># 随机选择</span></span><br><span class="line">random.choice([<span class="string">'1'</span>,<span class="string">'a'</span>])</span><br><span class="line"><span class="comment"># 随机选择多个</span></span><br><span class="line">random.sample([<span class="string">'1'</span>,<span class="string">'a'</span>, <span class="number">1</span>, <span class="number">2</span>], <span class="number">2</span>)</span><br><span class="line"><span class="comment"># 乱序: 直接改变列表</span></span><br><span class="line">random.shuffle(a)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 随机码</span></span><br><span class="line"><span class="string">''</span>.join([random.choice(<span class="string">'0123456789abcdef'</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">64</span>)])</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      数组, 列表, 字典, list, set, bytes
    
    </summary>
    
      <category term="Python" scheme="/categories/Python/"/>
    
    
      <category term="基础" scheme="/tags/%E5%9F%BA%E7%A1%80/"/>
    
      <category term="list" scheme="/tags/list/"/>
    
      <category term="set" scheme="/tags/set/"/>
    
      <category term="dict" scheme="/tags/dict/"/>
    
      <category term="bytes" scheme="/tags/bytes/"/>
    
  </entry>
  
  <entry>
    <title>工具集</title>
    <link href="/2019/10/31/Python/tools/"/>
    <id>/2019/10/31/Python/tools/</id>
    <published>2019-10-31T01:07:37.000Z</published>
    <updated>2019-10-31T01:07:37.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="工具集"><a href="#工具集" class="headerlink" title="工具集"></a>工具集</h2><ul><li>重试机制<ul><li><a href="https://github.com/invl/retry/" target="_blank" rel="noopener">retry</a></li><li><a href="https://github.com/rholder/retrying" target="_blank" rel="noopener">retrying</a></li></ul></li><li>脚本编译成可执行文件<ul><li>pyinstaller: <code>pip install pyinstaller</code><ul><li>编译成单个文件<ul><li><code>pyinstaller -F t.py</code></li></ul></li><li>编译到目录，公共模块会提取成dll<ul><li><code>pyinstaller t.py</code></li><li><code>pyinstaller -D t.py</code></li></ul></li><li>其他参数<ul><li>-p：指定python安装包路径</li><li>-i：指定图标</li><li>–noconsole，就是无窗口运行</li></ul></li></ul></li></ul></li><li>加速</li><li>HTML解析<ul><li>PyQuery</li><li>BeautifulSoup</li></ul></li><li>Web框架<ul><li>web2py: 小巧灵活但功能强大<ul><li>全栈框架</li><li><a href="http://www.web2py.com/books/default/chapter/35" target="_blank" rel="noopener">中文文档</a></li></ul></li><li>web.py<ul><li><a href="http://webpy.org/cookbook/index.zh-cn" target="_blank" rel="noopener">中文文档</a></li></ul></li><li>Django</li></ul></li><li>fabric: 服务器管理+应用发布<ul><li>命令行集合</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      tools, pyinstaller
    
    </summary>
    
      <category term="Python" scheme="/categories/Python/"/>
    
    
      <category term="tools" scheme="/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>apache</title>
    <link href="/2019/10/27/Service/apache/"/>
    <id>/2019/10/27/Service/apache/</id>
    <published>2019-10-27T08:15:33.089Z</published>
    <updated>2019-10-30T10:34:46.294Z</updated>
    
    <content type="html"><![CDATA[<h2 id="apache"><a href="#apache" class="headerlink" title="apache"></a>apache</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -- Centos7 --</span></span><br><span class="line"><span class="comment"># 默认配置文件</span></span><br><span class="line">/etc/httpd/conf/httpd.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认日志位置</span></span><br><span class="line">/var/<span class="built_in">log</span>/httpd/</span><br><span class="line">/etc/httpd/logs/ -&gt; /var/<span class="built_in">log</span>/httpd/</span><br></pre></td></tr></table></figure><h2 id="goaccess"><a href="#goaccess" class="headerlink" title="goaccess"></a>goaccess</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yum install goaccess -y</span><br><span class="line"><span class="comment"># 配置文件</span></span><br><span class="line">/etc/goaccess.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分析</span></span><br><span class="line">goaccess --config-file=/etc/goaccess.conf --output /var/www/html/goaccess.html /var/<span class="built_in">log</span>/httpd/access_log-2018-11-28</span><br><span class="line"><span class="comment"># 多文件：尾部指定多个文件名</span></span><br><span class="line">goaccess --config-file=/etc/goaccess.conf --output /var/www/html/goaccess/2018-04-14.html access_log-2018-11-28 access_log-2018-11-29</span><br><span class="line"><span class="comment"># 多文件：cat合并</span></span><br><span class="line">cat access_log-* | goaccess --config-file=/etc/goaccess.conf --output /var/www/html/all.html</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 时间格式: 根据apache当前日志格式对应调整, [26/Oct/2019:23:59:59 +0800]</span><br><span class="line">time-format %H:%M:%S</span><br><span class="line">date-format %d/%b/%Y</span><br><span class="line"></span><br><span class="line"># 日志格式 - 从http.conf中提取</span><br><span class="line"># %&#123;X-Forwarded-For&#125;i %h %l %u %t &quot;%r&quot; %s %b &quot;%&#123;Referer&#125;i&quot; &quot;%&#123;User-Agent&#125;i&quot;</span><br><span class="line"># &quot;%&#123;X-Forwarded-For&#125;i %h %l %u %t \&quot;%m %U %q %H\&quot; %&gt;s %b \&quot;%&#123;Referer&#125;i\&quot; \&quot;%&#123;User-Agent&#125;i\&quot;&quot; combined</span><br><span class="line"># 222.171.180.161 100.116.227.226 - - [03/Apr/2018:14:29:33 +0800] &quot;POST /wechat/2dBarCode.php HTTP/1.1&quot; 200 262 &quot;-&quot; &quot;-&quot;</span><br><span class="line">log-format %h %^ %l %u %^[%d:%t %^] &quot;%r&quot; %s %b &quot;%R&quot; &quot;%^&quot;</span><br><span class="line"></span><br><span class="line"># 是否需要实时刷新</span><br><span class="line">real-time-html true</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      apache,goaccess,日志分析
    
    </summary>
    
      <category term="service" scheme="/categories/service/"/>
    
      <category term="linux" scheme="/categories/service/linux/"/>
    
    
      <category term="apache" scheme="/tags/apache/"/>
    
      <category term="goaccess" scheme="/tags/goaccess/"/>
    
      <category term="日志" scheme="/tags/%E6%97%A5%E5%BF%97/"/>
    
  </entry>
  
  <entry>
    <title>计划任务</title>
    <link href="/2019/10/27/Linux/%E8%AE%A1%E5%88%92%E4%BB%BB%E5%8A%A1/"/>
    <id>/2019/10/27/Linux/计划任务/</id>
    <published>2019-10-27T07:44:45.943Z</published>
    <updated>2019-11-18T08:07:13.608Z</updated>
    
    <content type="html"><![CDATA[<h2 id="crontab"><a href="#crontab" class="headerlink" title="crontab"></a>crontab</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看root用户的计划任务</span></span><br><span class="line">crontab -u root -l</span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">crontab -l</span><br><span class="line"><span class="comment"># 编辑</span></span><br><span class="line">crontab -e</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计划任务配置说明</span></span><br><span class="line">cat /etc/crontab</span><br><span class="line"><span class="comment"># Example of job definition:</span></span><br><span class="line"><span class="comment"># .---------------- minute (0 - 59)</span></span><br><span class="line"><span class="comment"># |  .------------- hour (0 - 23)</span></span><br><span class="line"><span class="comment"># |  |  .---------- day of month (1 - 31)</span></span><br><span class="line"><span class="comment"># |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...</span></span><br><span class="line"><span class="comment"># |  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat</span></span><br><span class="line"><span class="comment"># |  |  |  |  |</span></span><br><span class="line"><span class="comment"># *  *  *  *  * user-name  command to be executed</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---- 示例 ----</span></span><br><span class="line"><span class="comment"># 每十分钟执行一次</span></span><br><span class="line">*/10 * * * * cmd</span><br><span class="line"><span class="comment"># 每小时执行一次</span></span><br><span class="line">0 * * * * cmd</span><br><span class="line"><span class="comment"># 每天08:00点执行一次</span></span><br><span class="line">0 8 * * * php /<span class="built_in">test</span>/test.php &gt; <span class="built_in">log</span>/test.log</span><br><span class="line"><span class="comment"># 每天的10:30开始，每隔2小时重复一次</span></span><br><span class="line">30 10-23/2 * * * cmd</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 服务管理</span></span><br><span class="line">service crond start | stop | restart | status</span><br><span class="line"><span class="comment"># 重新载入配置</span></span><br><span class="line">service crond reload</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      crontab, 计划任务
    
    </summary>
    
      <category term="linux" scheme="/categories/linux/"/>
    
    
      <category term="crontab" scheme="/tags/crontab/"/>
    
      <category term="计划任务" scheme="/tags/%E8%AE%A1%E5%88%92%E4%BB%BB%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>无线网卡</title>
    <link href="/2019/10/27/VCSystem/WLan/"/>
    <id>/2019/10/27/VCSystem/WLan/</id>
    <published>2019-10-27T07:35:33.565Z</published>
    <updated>2019-10-30T10:45:49.262Z</updated>
    
    <content type="html"><![CDATA[<h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><ul><li><code>WlanOpenHandle</code>: 打开操作句柄</li><li><code>WlanEnumInterfaces</code>: 遍历无线设备接口，并获取接口状态<ul><li>已连接，连接中，已断开等</li></ul></li><li><code>WlanGetAvailableNetworkList</code>: 遍历热点<ul><li>包含SSID，加密方式等热点信息</li></ul></li><li><code>WlanGetProfileList</code>: 获取机器已保存所有热点配置<ul><li>Windows没连接一次热点，会自动保存一份该热点的配置文件，配置文件名一般就是热点名</li><li>API操作中配置文件名可以随意指定</li></ul></li><li><code>WlanDeleteProfile</code>: 删除指定配置文件</li><li><code>WlanSetProfile</code>: 新增/重置指定配置文件</li><li><code>WlanConnect</code>: WIFI连接指令，Windows会自动查找默认配置，并尝试连接<ul><li>该函数指令返回时，仅说明Windows接收到该指令并开始执行，不保证能连接成功</li></ul></li><li><code>WlanDisconnect</code>: 终止WIFI连接</li></ul><h2 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h2><ul><li>查看所有配置名称: <code>netsh wlan show profile</code></li><li>连接到无线WIFI: <code>wlan connect name=PROFILE</code><ul><li>指定SSID: <code>netsh wlan connect ssid=SSID name=PROFILE</code></li></ul></li><li>断开无线: <code>netsh wlan disconnect</code></li><li>添加配置: <code>Netsh WLAN add profile filename=&quot;存放路径&quot;</code></li><li>导出配置：<code>Netsh WLAN export profile key=clear folder=&quot;存放路径&quot;</code><ul><li>导出的 XML 配置文件是明文存储，而且会导出 WIFI 连接密码</li></ul></li><li>删除配置: <code>Netsh WLAN delete profile name=&quot;无线名称&quot;</code></li><li>无线网卡配置，状态: <code>Netsh WLAN show interfaces</code></li><li>查看指定网卡: <code>Netsh WLAN show interface name=&quot;网卡名称&quot;</code></li><li>查看已存储密码: <code>Netsh WLAN show profile name=&quot;无线名称&quot; key=clear</code></li><li>查看无线网卡信息: <code>Netsh WLAN show drivers</code></li><li>无线网卡兼容/支持的功能: <code>Netsh WLAN show wirelesscapabilities</code></li></ul><h2 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h2><ul><li>都是Windows标准API，懒得解释了，需要的时候直接看Demo把</li><li>Demo中检查到Wifi已连接时，是通过注册表获取IP数据的，实际上这个有延迟<ul><li>通常Windows先连接AP，然后在自动获取IP，而且获取IP整个动作是有延迟的，此时即使是使用ipconfig也未必能拿到正确的状态</li><li>问题备记，搁置~~</li></ul></li></ul><h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><p><a href="https://github.com/fxliu/VCDemo/tree/master/SYSTEM/WLan" target="_blank" rel="noopener">WLan</a></p>]]></content>
    
    <summary type="html">
    
      WLAN, 无线网卡
    
    </summary>
    
      <category term="VC" scheme="/categories/VC/"/>
    
    
      <category term="WLAN" scheme="/tags/WLAN/"/>
    
      <category term="无线网卡" scheme="/tags/%E6%97%A0%E7%BA%BF%E7%BD%91%E5%8D%A1/"/>
    
  </entry>
  
  <entry>
    <title>HOOK键盘钩子</title>
    <link href="/2019/10/27/VCSystem/HOOK%E9%94%AE%E7%9B%98%E9%92%A9%E5%AD%90/"/>
    <id>/2019/10/27/VCSystem/HOOK键盘钩子/</id>
    <published>2019-10-27T07:35:33.561Z</published>
    <updated>2019-10-30T10:45:30.171Z</updated>
    
    <content type="html"><![CDATA[<h2 id="键盘钩子"><a href="#键盘钩子" class="headerlink" title="键盘钩子"></a>键盘钩子</h2><ul><li><code>WH_KEYBOARD_LL</code>：全局键盘钩子<ul><li>不需要封装DLL，EXE中直接钩挂即可</li><li><code>WH_KEYBOARD</code>：需要DLL封装模式使用</li></ul></li><li><code>WH_MOUSE_LL</code>：鼠标钩子，使用方式同键盘钩子<ul><li><code>WH_KEYBOARD</code>: DLL模式</li><li>DLL导出<code>HOOKPROC</code>函数</li><li>EXE加载DLL后，SetWindowsHookEx安装即可</li></ul></li></ul><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// EXE模式</span></span><br><span class="line"><span class="comment">// 挂在钩子</span></span><br><span class="line">m_hHook = SetWindowsHookEx(WH_KEYBOARD_LL, LowLevelKeyboardProc, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="comment">// 卸载钩子</span></span><br><span class="line">UnhookWindowsHookEx(m_hHook);</span><br><span class="line"><span class="comment">// 键盘事件处理</span></span><br><span class="line"><span class="function">LRESULT CALLBACK <span class="title">LowLevelKeyboardProc</span><span class="params">(<span class="keyword">int</span> nCode, WPARAM wParam, LPARAM lParam)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (nCode == HC_ACTION)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">switch</span> (wParam)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> WM_KEYDOWN:</span><br><span class="line">    <span class="keyword">case</span> WM_SYSKEYDOWN:</span><br><span class="line">    <span class="keyword">case</span> WM_KEYUP:</span><br><span class="line">    <span class="keyword">case</span> WM_SYSKEYUP:</span><br><span class="line">      PKBDLLHOOKSTRUCT p = (PKBDLLHOOKSTRUCT)lParam;</span><br><span class="line">      <span class="keyword">if</span> (p-&gt;vkCode == VK_ESCAPE &amp;&amp; GetAsyncKeyState(VK_CONTROL) &amp; <span class="number">0x8000</span> &amp;&amp; GetAsyncKeyState(VK_SHIFT) &amp; <span class="number">0x8000</span>) &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Ctrl+Shift+Esc"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        <span class="comment">// 返回1代表终止</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (p-&gt;vkCode == VK_ESCAPE &amp;&amp; GetAsyncKeyState(VK_CONTROL) &amp; <span class="number">0x8000</span>) &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Ctrl+Esc"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 其他常规事件一定要继续传递下去</span></span><br><span class="line">  <span class="keyword">return</span> CallNextHookEx(<span class="literal">NULL</span>, nCode, wParam, lParam);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 注意钩子线程不能阻塞，可以内置消息循环，确保钩子有效</span></span><br><span class="line">MSG msg;</span><br><span class="line"><span class="keyword">while</span> (!GetMessage(&amp;msg, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>) &amp;&amp; pThis-&gt;m_hHook)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">//TranslateMessage(&amp;msg);</span></span><br><span class="line">  <span class="comment">//DispatchMessage(&amp;msg);</span></span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// DLL模块方式</span></span><br><span class="line"><span class="comment">// ------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">// DLL导出函数</span></span><br><span class="line"><span class="comment">// 全局共享段，用户DLL公共数据处理，可以根据自己需要增删</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> data_seg(<span class="meta-string">"SHARED"</span>)</span></span><br><span class="line"><span class="keyword">static</span> HHOOK g_hHook = <span class="literal">NULL</span>;  <span class="comment">// 钩子句柄, 便于卸载</span></span><br><span class="line"><span class="keyword">static</span> HWND g_hookWnd = <span class="literal">NULL</span>;  <span class="comment">// 调用DLL的主窗口句柄, 这样就可以SendMessage给主窗口鼠标消息及其参数</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> data_seg()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker,<span class="meta-string">"/section:SHARED,rws"</span>)</span></span><br><span class="line"><span class="comment">// 钩子回调函数</span></span><br><span class="line"><span class="function">LRESULT CALLBACK <span class="title">MouseProc</span><span class="params">(<span class="keyword">int</span> nCode, WPARAM wParam, LPARAM lParam)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">// 有鼠标消息时，将其发给主程序</span></span><br><span class="line">  <span class="keyword">if</span> (g_hookWnd != <span class="literal">NULL</span> &amp;&amp; nCode == HC_ACTION)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// 自定义消息</span></span><br><span class="line">    ::SendMessage(g_hookWnd, WM_HOOKMSG, wParam, lParam);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 常规事件继续传递: g_hook 可以给NULL</span></span><br><span class="line">  <span class="keyword">return</span> CallNextHookEx(g_hHook, nCode, wParam, lParam);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 其他辅助导出函数</span></span><br><span class="line"><span class="function">BOOL <span class="title">SetHwnd</span><span class="params">(HWND hwnd, HHOOK hHook)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  g_hookWnd = hwnd;</span><br><span class="line">  g_hHook = hHook;</span><br><span class="line">  <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// .def 内容</span></span><br><span class="line">LIBRARY</span><br><span class="line">EXPORTS</span><br><span class="line">  MouseProc</span><br><span class="line">  SetHwnd</span><br><span class="line"><span class="comment">// ------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">// EXE 加载部分</span></span><br><span class="line"><span class="comment">// 加载DLL</span></span><br><span class="line">HMODULE hModule = LoadLibrary(GetRunPath() + TEXT(<span class="string">"\\HookDll.dll"</span>));</span><br><span class="line">PSetHwnd pSetHwnd = (PSetHwnd)GetProcAddress(hModule, <span class="string">"SetHwnd"</span>);</span><br><span class="line">HOOKPROC mouseProc = (HOOKPROC)GetProcAddress(hModule, <span class="string">"MouseProc"</span>);</span><br><span class="line"><span class="keyword">if</span> (!pSetHwnd || !mouseProc)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 安装</span></span><br><span class="line">HHOOK hHook = <span class="literal">NULL</span>;</span><br><span class="line"><span class="comment">// 0代表全局</span></span><br><span class="line">hHook = SetWindowsHookEx(WH_MOUSE, mouseProc, hModule, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (hHook)</span><br><span class="line">&#123;</span><br><span class="line">  SetWindowText(g_static, TEXT(<span class="string">"SetWindowsHookEx Success"</span>));</span><br><span class="line">  <span class="comment">// 把句柄设置进去是为了方便回传数据</span></span><br><span class="line">  pSetHwnd(g_hwnd, hHook);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  SetWindowText(g_static, TEXT(<span class="string">"SetWindowsHookEx Fail"</span>));</span><br><span class="line"><span class="comment">// 卸载</span></span><br><span class="line">FreeLibrary(hModule);</span><br><span class="line"><span class="keyword">if</span> (hHook)</span><br><span class="line">  UnhookWindowsHookEx(hHook);</span><br></pre></td></tr></table></figure><h2 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h2><ul><li>EXE模式仍然依赖于消息机制，调用<code>SetWindowsHookEx</code>的线程不可被阻塞，否则会导致钩子无效，系统所有按键事件被延迟处理</li><li>Exe需要管理员权限</li></ul><h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><p><a href="https://github.com/fxliu/VCDemo/tree/master/HOOK/KeyboardHook" target="_blank" rel="noopener">HOOK</a>包含一个EXE方式键盘钩子和一个DLL模块方式鼠标钩子<br><code>https://github.com/fxliu/VCDemo/tree/master/HOOK/KeyboardHook</code><br>EXE方式比DLL方式便捷的多，但貌似DLL模块方式速度比较快</p>]]></content>
    
    <summary type="html">
    
      HOOK, 钩子
    
    </summary>
    
      <category term="VC" scheme="/categories/VC/"/>
    
    
      <category term="HOOK" scheme="/tags/HOOK/"/>
    
  </entry>
  
  <entry>
    <title>串口通讯</title>
    <link href="/2019/10/27/VCSystem/CSerialPort%E4%B8%B2%E5%8F%A3%E9%80%9A%E8%AE%AF/"/>
    <id>/2019/10/27/VCSystem/CSerialPort串口通讯/</id>
    <published>2019-10-27T07:35:33.556Z</published>
    <updated>2019-10-30T10:45:04.063Z</updated>
    
    <content type="html"><![CDATA[<h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><ul><li><code>CreateFile</code>: 打开串口，文件名指定为<code>COM2</code>即可</li><li>参数设置：<ul><li><code>SetCommTimeouts</code>: 读写超时控制</li><li><code>SetCommState</code>: 设置参数<ul><li><code>GetCommState</code>: 获取参数(DCB)</li><li>先获取，调整需要修改的项，然后再设置</li><li>注意停止位的定义：0代表1个停止位，1代表1.5个停止位，2代表2个停止位</li></ul></li></ul></li></ul><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 常用字段</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">DCB</span> &#123;</span></span><br><span class="line">    DWORD DCBlength;      <span class="comment">/* sizeof(DCB)                     */</span></span><br><span class="line">    DWORD BaudRate;       <span class="comment">/* 波特率：115200,9600等       */</span></span><br><span class="line">    DWORD fBinary: <span class="number">1</span>;     <span class="comment">/* 数据位：通常为8    */</span></span><br><span class="line">    DWORD fParity: <span class="number">1</span>;     <span class="comment">/* 奇偶检验位          */</span></span><br><span class="line">    BYTE StopBits;        <span class="comment">/* 停止位：0,1,2 = 1, 1.5, 2        */</span></span><br><span class="line">&#125; DCB, *LPDCB;</span><br></pre></td></tr></table></figure><ul><li><code>PurgeComm</code>: 清空缓冲区<ul><li>PURGE_TXABORT：中断所有写操作并立即返回，即使写操作还没有完成。</li><li>PURGE_RXABORT：中断所有读操作并立即返回，即使读操作还没有完成。</li><li>PURGE_TXCLEAR：清除输出缓冲区</li><li>PURGE_RXCLEAR：清除输入缓冲区</li></ul></li><li><code>ReadFile</code>: 读</li><li><code>WriteFile</code>: 写</li><li>串口遍历<ul><li><code>SetupDiGetClassDevs</code>: 打开句柄<ul><li>GUID: <code>GUID_CLASS_COMPORT</code>，在<code>WinIoCtl.h</code>文件中被定义</li><li><code>SetupDiDestroyDeviceInfoList</code>：释放句柄</li></ul></li><li><code>SetupDiEnumDeviceInterfaces</code>: 遍历</li><li><code>SetupDiGetDeviceInterfaceDetail</code>: 接口路径，比如“COM2”什么的</li><li><code>SetupDiGetDeviceRegistryProperty</code>：接口属性<ul><li><code>SPDRP_DEVICEDESC</code>：设备描述</li><li><code>SPDRP_CLASS</code>：类名</li><li><code>SPDRP_MFG</code>：制造商</li><li><code>SPDRP_FRIENDLYNAME</code>：设备描述(友好名称)</li><li><code>SPDRP_LOCATION_INFORMATION</code>：本地环境属性</li><li><code>SPDRP_PHYSICAL_DEVICE_OBJECT_NAME</code>：设备物理名称</li><li><code>SPDRP_ENUMERATOR_NAME</code>：枚举类型</li></ul></li></ul></li></ul><h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><p><a href="https://github.com/fxliu/VCDemo/tree/master/SYSTEM/CSerialPort" target="_blank" rel="noopener">CSerialPort</a></p><h2 id="GitHub第三方库"><a href="#GitHub第三方库" class="headerlink" title="GitHub第三方库"></a>GitHub第三方库</h2><ul><li><a href="https://github.com/itas109/CSerialPort" target="_blank" rel="noopener">CSerialPort</a>，支持Windows/Linux，封装比较完善</li><li>直接搜索<code>CSerialPort</code>也有其他一些简单封装</li></ul>]]></content>
    
    <summary type="html">
    
      串口
    
    </summary>
    
      <category term="VC" scheme="/categories/VC/"/>
    
    
      <category term="串口" scheme="/tags/%E4%B8%B2%E5%8F%A3/"/>
    
      <category term="通讯" scheme="/tags/%E9%80%9A%E8%AE%AF/"/>
    
  </entry>
  
  <entry>
    <title>MySQL</title>
    <link href="/2019/10/27/DB/MySQL/"/>
    <id>/2019/10/27/DB/MySQL/</id>
    <published>2019-10-27T05:53:32.370Z</published>
    <updated>2019-11-19T07:15:36.712Z</updated>
    
    <content type="html"><![CDATA[<h2 id="常规Demo"><a href="#常规Demo" class="headerlink" title="常规Demo"></a>常规Demo</h2><ul><li>表复制: <code>INSERT INTO t1 SELECT * FROM t2</code></li></ul><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- REPLACE</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">REPLACE</span>(<span class="string">'aaa.mysql.com'</span>,<span class="string">'a'</span>,<span class="string">'w'</span>);</span><br></pre></td></tr></table></figure><h2 id="SELECT"><a href="#SELECT" class="headerlink" title="SELECT"></a>SELECT</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- CASE</span></span><br><span class="line"><span class="keyword">SELECT</span> k1,</span><br><span class="line">  <span class="keyword">CASE</span></span><br><span class="line">    <span class="keyword">WHEN</span> k2 &gt; <span class="number">150</span> <span class="keyword">THEN</span> <span class="string">'&gt;150'</span></span><br><span class="line">    <span class="keyword">WHEN</span> k2 &gt; <span class="number">120</span> <span class="keyword">THEN</span> <span class="string">'120&lt; k2 &gt;150'</span></span><br><span class="line">    <span class="keyword">ELSE</span> <span class="string">'&lt;120'</span></span><br><span class="line">  <span class="keyword">END</span> <span class="keyword">as</span> v</span><br><span class="line"><span class="keyword">FROM</span> t1</span><br></pre></td></tr></table></figure><h2 id="INSERT-REPLACE"><a href="#INSERT-REPLACE" class="headerlink" title="INSERT/REPLACE"></a>INSERT/REPLACE</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- INSERT INTO</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t1 <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t2;</span><br><span class="line"><span class="comment">-- INSERT INTO</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t1 (k1, k2)</span><br><span class="line"><span class="keyword">SELECT</span> k1, k2 <span class="keyword">FROM</span> t2</span><br><span class="line"></span><br><span class="line"><span class="comment">-- REPLACE INTO: 用法与Insert相同</span></span><br><span class="line"><span class="comment">-- 当KEY不存在时，等价于Delete</span></span><br><span class="line"><span class="comment">-- 当KEY存在时，先Delete然后Insert，未设定的字段按照默认值处理</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- INSERT INTO ** ON DUPLICATE KEY UPDATE</span></span><br><span class="line"><span class="comment">-- 当KEY存在时，只更新指定字段</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t1 (k1, k2)</span><br><span class="line"><span class="keyword">SELECT</span> k1, k2 <span class="keyword">FROM</span> t2</span><br><span class="line"><span class="keyword">ON</span> <span class="keyword">DUPLICATE</span> <span class="keyword">KEY</span> <span class="keyword">UPDATE</span> t1.k1=t2.k1</span><br></pre></td></tr></table></figure><h2 id="Update"><a href="#Update" class="headerlink" title="Update"></a>Update</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 联表更新：方式1</span></span><br><span class="line"><span class="keyword">UPDATE</span> t1 <span class="keyword">as</span> a</span><br><span class="line"><span class="keyword">SET</span> a.test_key=(<span class="keyword">SELECT</span> test_key <span class="keyword">FROM</span> t2 <span class="keyword">as</span> b <span class="keyword">WHERE</span> a.id=b.id);</span><br><span class="line"><span class="comment">-- 联表更新：方式2</span></span><br><span class="line"><span class="keyword">UPDATE</span> t1 <span class="keyword">as</span> a</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> t2 <span class="keyword">as</span> b <span class="keyword">ON</span> a.id=b.id</span><br><span class="line"><span class="keyword">SET</span> a.test_key=b.test_key</span><br><span class="line"><span class="comment">-- 联表更新： 方式3</span></span><br><span class="line"><span class="keyword">UPDATE</span> t1 <span class="keyword">as</span> a, t2 <span class="keyword">as</span> b</span><br><span class="line"><span class="keyword">SET</span> a.test_key=b.test_key</span><br><span class="line"><span class="keyword">WHERE</span> a.id=b.id</span><br></pre></td></tr></table></figure><h2 id="时间"><a href="#时间" class="headerlink" title="时间"></a>时间</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> @d1=<span class="string">'2019-10-20'</span>;</span><br><span class="line"><span class="keyword">SET</span> @d2=<span class="string">'2019-10-27'</span>;</span><br><span class="line"><span class="keyword">SET</span> @dc=<span class="keyword">TIMESTAMPDIFF</span>(<span class="keyword">DAY</span>, @d1, @d2);   <span class="comment">-- 时间差：日</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> tkey, <span class="keyword">count</span>(<span class="number">1</span>) / @dc <span class="keyword">FROM</span> t</span><br><span class="line"><span class="keyword">WHERE</span> uptime <span class="keyword">BETWEEN</span> @d1 <span class="keyword">AND</span> @d2</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> tkey</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 时间差</span></span><br><span class="line"><span class="keyword">set</span> @dt = <span class="keyword">now</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">date_add</span>(@dt, <span class="built_in">interval</span> <span class="number">1</span> <span class="keyword">day</span>); <span class="comment">-- add 1 day</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">date_add</span>(@dt, <span class="built_in">interval</span> <span class="number">1</span> <span class="keyword">hour</span>); <span class="comment">-- add 1 hour</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">date_add</span>(@dt, <span class="built_in">interval</span> <span class="number">1</span> <span class="keyword">minute</span>); <span class="comment">-- ...</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">date_add</span>(@dt, <span class="built_in">interval</span> <span class="number">1</span> <span class="keyword">second</span>);</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">date_add</span>(@dt, <span class="built_in">interval</span> <span class="number">1</span> <span class="keyword">microsecond</span>);</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">date_add</span>(@dt, <span class="built_in">interval</span> <span class="number">1</span> <span class="keyword">week</span>);</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">date_add</span>(@dt, <span class="built_in">interval</span> <span class="number">1</span> <span class="keyword">month</span>);</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">date_add</span>(@dt, <span class="built_in">interval</span> <span class="number">1</span> <span class="keyword">quarter</span>);</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">date_add</span>(@dt, <span class="built_in">interval</span> <span class="number">1</span> <span class="keyword">year</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">date_add</span>(@dt, <span class="built_in">interval</span> <span class="number">-1</span> <span class="keyword">day</span>); <span class="comment">-- sub 1 day</span></span><br><span class="line"><span class="comment">-- 时间差</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">TIMESTAMPDIFF</span>(<span class="keyword">DAY</span>,<span class="string">'2012-10-01'</span>,<span class="string">'2013-01-13'</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">TIMESTAMPDIFF</span>(<span class="keyword">MONTH</span>,<span class="string">'2012-10-01'</span>,<span class="string">'2013-01-13'</span>);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 时间 -&gt; 字符串</span></span><br><span class="line"><span class="keyword">SET</span> @DB := <span class="keyword">CONCAT</span>(<span class="string">'database.database_'</span>, <span class="keyword">DATE_FORMAT</span>(<span class="keyword">now</span>(), <span class="string">'%Y%m%d'</span>));</span><br><span class="line"><span class="keyword">SET</span> @<span class="keyword">LIST</span> := <span class="keyword">CONCAT</span>(<span class="string">'netbaropt.list_'</span>, <span class="keyword">DATE_FORMAT</span>(<span class="keyword">now</span>(), <span class="string">'%Y%m%d'</span>));</span><br><span class="line"><span class="comment">-- 字符串 -&gt; 时间</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">str_to_date</span>(<span class="string">'2008-08-09 08:09:30'</span>, <span class="string">'%Y-%m-%d %h:%i:%s'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 时间戳</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">unix_timestamp</span>(<span class="string">'2008-08-08 12:30:00'</span>);    <span class="comment">-- 1218169800</span></span><br><span class="line"><span class="keyword">select</span> from_unixtime(<span class="number">1218169800</span>);                <span class="comment">-- 2008-08-08 12:30:00</span></span><br><span class="line"><span class="keyword">select</span> from_unixtime(<span class="number">1218169800</span>, <span class="string">'%Y-%m-%d %h:%i:%s'</span>);    <span class="comment">-- 2008-08-08 12:30:00</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      SQL
    
    </summary>
    
      <category term="MySQL" scheme="/categories/MySQL/"/>
    
    
      <category term="SQL" scheme="/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>IDE</title>
    <link href="/2019/10/27/Tools/IDE/"/>
    <id>/2019/10/27/Tools/IDE/</id>
    <published>2019-10-27T04:35:32.501Z</published>
    <updated>2019-10-30T10:42:06.398Z</updated>
    
    <content type="html"><![CDATA[<h2 id="IntelliJ-IDEA"><a href="#IntelliJ-IDEA" class="headerlink" title="IntelliJ IDEA"></a>IntelliJ IDEA</h2><ul><li>注册码：<a href="http://idea.lanyus.com/" target="_blank" rel="noopener">http://idea.lanyus.com/</a></li><li>快捷键：视图查看<ul><li><code>Ctrl+F12</code>:         查看file，method结构图、类继承机构图</li><li><code>Ctrl+shift+Alt+U</code>: 查看maven依赖，类图</li></ul></li><li>快捷键：定位<ul><li><code>Ctrl+E</code>:           定位到最近浏览过的文件</li><li><code>Ctrl+Shift+E</code>:     最近更改的文件</li><li><code>Shift+Click(TAB)</code>: 可以关闭文件</li></ul></li><li>快捷键：位置跳转<ul><li><code>Ctrl+Shift+Backspace</code>: 跳转上一次修改的地方</li><li><code>Ctrl+Alt+B</code>:           跳转到方法实现处</li><li><code>Ctrl+Shift+左箭头</code>:    上一个浏览的地方</li><li><code>Ctrl+Shift+右箭头</code>:    下一个浏览的地方</li></ul></li><li>快捷键：其他跳转<ul><li><code>Ctrl+H</code>:   显示类结构图（类的继承层次）</li><li><code>Ctrl+Q</code>:   显示注释文档</li><li><code>Alt+1</code>:　　快速打开或隐藏工程面板</li><li><code>Alt+left/right</code>:   切换代码视图</li><li><code>F2 或 Shift+F2</code>:   高亮错误或警告快速定位</li><li><code>Tab</code>:      代码标签输入完成后，按 Tab，生成代码</li><li><code>Ctrl+Shift+F7</code>:    高亮显示所有该文本，按 Esc 高亮消失</li></ul></li><li>快捷键：搜索<ul><li><code>Ctrl＋N</code>:    快速搜索类</li><li><code>Ctrl＋Shift＋N</code>:     快速搜索文件</li><li><code>Ctrl＋Alt+Shift＋N</code>: 快速搜索函数</li><li><code>Ctrl+Shift+F</code>:       快速搜索字符串</li></ul></li><li>快捷键：光标移动和选中<ul><li><code>Ctrl＋Alt+Shift＋Click</code>:   多选</li><li><code>Ctrl＋Alt+Shift＋J</code>:       查找所有目标，并选中</li><li><code>Alt+Up/Down</code>：             在方法间快速移动定位</li><li><code>Ctrl+Shift+Up/Down</code>:       向上/下移动语句</li><li><code>Ctrl+Up/Down</code>:</li><li><code>Ctrl+B/Ctrl+Click</code>:    　　跳转到定义处</li></ul></li><li>超级组合键：<code>Alt+Enter</code><ul><li>代码提示 + 自动完成</li></ul></li><li>重构<ul><li><code>Shift+F6</code>:   重命名：所有使用过这个名称的地方都会跟着改变</li><li><code>Ctrl+F6</code>:    重构函数：所有用到此函数的地方一起重构</li><li>变量提取：<ul><li><code>Ctrl+Alt+V</code>  变量</li><li><code>Ctrl+Alt+C</code>  静态变量</li><li><code>Ctrl+Alt+F</code>  成员变量</li><li><code>Ctrl+Alt+P</code>  方法参数</li><li><code>Ctrl+Alt+M</code>  抽取方法</li></ul></li><li><code>Ctrl+Alt+M</code>  代码规范化</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      IntelliJ IDEA, PyCharm, PhpStorm
    
    </summary>
    
      <category term="Tools" scheme="/categories/Tools/"/>
    
      <category term="IDE" scheme="/categories/Tools/IDE/"/>
    
    
      <category term="IntelliJ IDEA" scheme="/tags/IntelliJ-IDEA/"/>
    
      <category term="PyCharm" scheme="/tags/PyCharm/"/>
    
      <category term="PhpStorm" scheme="/tags/PhpStorm/"/>
    
  </entry>
  
</feed>
