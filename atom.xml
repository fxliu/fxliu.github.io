<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>福</title>
  
  <subtitle>业精于勤荒于嬉</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="/"/>
  <updated>2019-11-27T04:09:13.000Z</updated>
  <id>/</id>
  
  <author>
    <name>福</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>命令行</title>
    <link href="/2019/11/26/VCSystem/%E5%91%BD%E4%BB%A4%E8%A1%8C/"/>
    <id>/2019/11/26/VCSystem/命令行/</id>
    <published>2019-11-26T10:05:20.000Z</published>
    <updated>2019-11-27T04:09:13.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><ul><li><a href="https://github.com/fxliu/VCDemo/tree/master/Process/命令行-输入输出" target="_blank" rel="noopener">封装Demo</a><ul><li>支持持续通讯</li></ul></li></ul><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">BOOL <span class="title">GetInfoByCmd</span><span class="params">(CString &amp;strResult, CString strCmd)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  BOOL bret = FALSE;</span><br><span class="line"></span><br><span class="line">  HANDLE hOutRead, hOutWrite, hInRead, hInWrite;</span><br><span class="line">  hOutRead = hOutWrite = hInRead = hInWrite = <span class="literal">NULL</span>;</span><br><span class="line">  SECURITY_ATTRIBUTES sa;</span><br><span class="line">  sa.nLength = <span class="keyword">sizeof</span>(SECURITY_ATTRIBUTES);</span><br><span class="line">  sa.lpSecurityDescriptor = <span class="literal">NULL</span>;</span><br><span class="line">  sa.bInheritHandle = TRUE;</span><br><span class="line">  <span class="comment">//创建管道</span></span><br><span class="line">  <span class="keyword">if</span> (!CreatePipe(&amp;hOutRead, &amp;hOutWrite, &amp;sa, <span class="number">0</span>))</span><br><span class="line">    <span class="keyword">goto</span> _end;</span><br><span class="line">  <span class="keyword">if</span> (!CreatePipe(&amp;hInRead, &amp;hInWrite, &amp;sa, <span class="number">0</span>))</span><br><span class="line">    <span class="keyword">goto</span> _end;</span><br><span class="line">  <span class="comment">//控制命令行窗口信息</span></span><br><span class="line">  STARTUPINFO si;</span><br><span class="line">  ZeroMemory(&amp;si, <span class="keyword">sizeof</span>(si));</span><br><span class="line">  si.cb = <span class="keyword">sizeof</span>(STARTUPINFO);</span><br><span class="line">  GetStartupInfo(&amp;si);</span><br><span class="line">  si.hStdInput = hInRead;</span><br><span class="line">  si.hStdError = hOutWrite;</span><br><span class="line">  si.hStdOutput = hOutWrite;</span><br><span class="line">  si.wShowWindow = SW_HIDE; <span class="comment">//隐藏命令行窗口</span></span><br><span class="line">  si.dwFlags = STARTF_USESHOWWINDOW | STARTF_USESTDHANDLES;</span><br><span class="line">  <span class="comment">//进程信息</span></span><br><span class="line">  PROCESS_INFORMATION pi;</span><br><span class="line">  ZeroMemory(&amp;pi, <span class="keyword">sizeof</span>(pi));</span><br><span class="line"></span><br><span class="line">  <span class="comment">//创建获取命令行进程</span></span><br><span class="line">  <span class="keyword">if</span> (strCmd.Find(<span class="string">'\n'</span>) == <span class="number">-1</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// 单行指令</span></span><br><span class="line">    TCHAR szCmd[<span class="number">256</span>] = TEXT(<span class="string">"cmd.exe /c"</span>);   <span class="comment">// 必须单独申请变量，直接CreateProcess会崩溃，BUG？？</span></span><br><span class="line">    StrCat(szCmd, strCmd);</span><br><span class="line">    <span class="keyword">if</span> (!CreateProcess(<span class="literal">NULL</span>, szCmd, <span class="literal">NULL</span>, <span class="literal">NULL</span>, TRUE, <span class="number">0</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, &amp;si, &amp;pi))</span><br><span class="line">      <span class="keyword">goto</span> _end;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// 多行指令 - 最后一条指令必须是exit，否则进程无法退出</span></span><br><span class="line">    <span class="comment">// strCmd = TEXT("@echo off\ndir\nexit\n");</span></span><br><span class="line">    TCHAR szCmd[<span class="number">32</span>] = TEXT(<span class="string">"cmd.exe"</span>);</span><br><span class="line">    <span class="keyword">if</span> (!CreateProcess(<span class="literal">NULL</span>, szCmd, <span class="literal">NULL</span>, <span class="literal">NULL</span>, TRUE, <span class="number">0</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, &amp;si, &amp;pi))</span><br><span class="line">      <span class="keyword">goto</span> _end;</span><br><span class="line">    <span class="keyword">if</span> (strCmd.Right(<span class="number">1</span>) != TEXT(<span class="string">"\n"</span>))</span><br><span class="line">      strCmd += TEXT(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="keyword">if</span> (!WriteFile(hInWrite, CW2A(strCmd).m_psz, strCmd.GetLength(), <span class="literal">NULL</span>, <span class="literal">NULL</span>))</span><br><span class="line">      <span class="keyword">goto</span> _end;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 等待进程结束</span></span><br><span class="line">  WaitForSingleObject(pi.hProcess, INFINITE);</span><br><span class="line">  CloseHandle(hOutWrite);   <span class="comment">// 关闭Write，避免缓存数据读完后read阻塞</span></span><br><span class="line">  hOutWrite = <span class="literal">NULL</span>;</span><br><span class="line">  <span class="comment">// 缓冲区数据读取</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">long</span> MAX_OUT_SIZE = <span class="number">1024</span>;</span><br><span class="line">  <span class="keyword">char</span> szBuffer[MAX_OUT_SIZE + <span class="number">1</span>];</span><br><span class="line">  <span class="built_in">memset</span>(szBuffer, <span class="number">0</span>, <span class="keyword">sizeof</span>(szBuffer));</span><br><span class="line">  <span class="keyword">while</span> (ReadFile(hOutRead, szBuffer, MAX_OUT_SIZE, <span class="literal">NULL</span>, <span class="number">0</span>))</span><br><span class="line">  &#123;</span><br><span class="line">    strResult += CA2W(szBuffer);</span><br><span class="line">    <span class="built_in">memset</span>(szBuffer, <span class="number">0</span>, <span class="keyword">sizeof</span>(szBuffer));</span><br><span class="line">  &#125;</span><br><span class="line">  bret = TRUE;</span><br><span class="line"></span><br><span class="line">  _end:</span><br><span class="line">  <span class="comment">//关闭所有的句柄</span></span><br><span class="line">  <span class="keyword">if</span> (hOutRead)</span><br><span class="line">    CloseHandle(hOutRead);</span><br><span class="line">  <span class="keyword">if</span> (hOutWrite)</span><br><span class="line">    CloseHandle(hOutWrite);</span><br><span class="line">  <span class="keyword">if</span> (hInRead)</span><br><span class="line">    CloseHandle(hInRead);</span><br><span class="line">  <span class="keyword">if</span> (hInWrite)</span><br><span class="line">    CloseHandle(hInWrite);</span><br><span class="line">  <span class="keyword">if</span> (pi.hProcess)</span><br><span class="line">    CloseHandle(pi.hProcess);</span><br><span class="line">  <span class="keyword">if</span> (pi.hThread)</span><br><span class="line">    CloseHandle(pi.hThread);</span><br><span class="line">  <span class="keyword">return</span> bret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 常规指令</span></span><br><span class="line">UINT re = WinExec(cmd, SW_HIDE);</span><br><span class="line"><span class="keyword">if</span> (re &lt;= <span class="number">31</span>)</span><br><span class="line">&#123;</span><br><span class="line">  CString strError;</span><br><span class="line">  <span class="keyword">switch</span> (re)</span><br><span class="line">  &#123;</span><br><span class="line">  <span class="keyword">case</span> ERROR_BAD_FORMAT:      strError = cmd + TEXT(<span class="string">":ERROR_BAD_FORMAT"</span>); <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> ERROR_FILE_NOT_FOUND:  strError = cmd + TEXT(<span class="string">":ERROR_FILE_NOT_FOUND"</span>); <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> ERROR_PATH_NOT_FOUND:  strError = cmd + TEXT(<span class="string">":ERROR_PATH_NOT_FOUND"</span>); <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">0</span>:                     strError = cmd + TEXT(<span class="string">":系统内存或资源已耗尽"</span>); <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">default</span>:                    strError = cmd + TEXT(<span class="string">":ERROR"</span>); <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 32位程序启动64位程序</span></span><br><span class="line">ShellExecute(<span class="literal">NULL</span>, <span class="literal">NULL</span>, GetRunPath() + TEXT(<span class="string">"\\SystemInit64.exe"</span>), <span class="literal">NULL</span>, <span class="literal">NULL</span>, FALSE);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      管道, 命令行
    
    </summary>
    
      <category term="VC" scheme="/categories/VC/"/>
    
    
      <category term="管道" scheme="/tags/%E7%AE%A1%E9%81%93/"/>
    
      <category term="命令行" scheme="/tags/%E5%91%BD%E4%BB%A4%E8%A1%8C/"/>
    
  </entry>
  
  <entry>
    <title>服务</title>
    <link href="/2019/11/25/Linux/%E6%9C%8D%E5%8A%A1/"/>
    <id>/2019/11/25/Linux/服务/</id>
    <published>2019-11-25T07:14:42.000Z</published>
    <updated>2019-11-25T07:14:42.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Python工具"><a href="#Python工具" class="headerlink" title="Python工具"></a>Python工具</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf8 -*-</span></span><br><span class="line"><span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">Centos7 下注册为自启动服务机制</span></span><br><span class="line"><span class="string">支持start, restart, stop命令：systemctl start|restart|stop my_test_server</span></span><br><span class="line"><span class="string">1. 在工作路径下生成sh</span></span><br><span class="line"><span class="string">2. 把sh注册为服务</span></span><br><span class="line"><span class="string">3. 通过sh控制python</span></span><br><span class="line"><span class="string">"</span><span class="string">""</span></span><br><span class="line"></span><br><span class="line">import os</span><br><span class="line">import sys</span><br><span class="line">import time</span><br><span class="line">import subprocess</span><br><span class="line"></span><br><span class="line">version = <span class="string">'0.0.2'</span></span><br><span class="line"></span><br><span class="line">server_content = <span class="string">''</span><span class="string">'[Unit]</span></span><br><span class="line"><span class="string">Description=%(description)s</span></span><br><span class="line"><span class="string">After=network.target sshd.service</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[Service]</span></span><br><span class="line"><span class="string">Type=simple</span></span><br><span class="line"><span class="string">ExecStart=%(sh)s start &amp;</span></span><br><span class="line"><span class="string">ExecReload=%(sh)s restart &amp;</span></span><br><span class="line"><span class="string">ExecStop=%(sh)s stop</span></span><br><span class="line"><span class="string">Restart=always</span></span><br><span class="line"><span class="string">RestartSec=10s</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[Install]</span></span><br><span class="line"><span class="string">WantedBy=multi-user.target</span></span><br><span class="line"><span class="string">'</span><span class="string">''</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def on_cmd(cmd):</span><br><span class="line">    p = subprocess.Popen(cmd, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)</span><br><span class="line">    d = p.stdout.read()</span><br><span class="line">    <span class="keyword">if</span> p.wait() != 0:</span><br><span class="line">        <span class="comment"># logging.error("cmd error: %s, returncode: %d", cmd, p.returncode)</span></span><br><span class="line">        <span class="built_in">return</span> None</span><br><span class="line">    <span class="built_in">return</span> d</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def get_py_cmd(args):</span><br><span class="line">    cmd = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> arg <span class="keyword">in</span> args:</span><br><span class="line">        <span class="keyword">if</span> arg:</span><br><span class="line">            cmd += <span class="string">' '</span> + arg</span><br><span class="line">    <span class="built_in">return</span> cmd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def install_sh(name, fn, work_path, args, python_args=None):</span><br><span class="line">    with open(os.path.join(os.path.dirname(__file__), <span class="string">'service.sh'</span>), <span class="string">'r'</span>) as f:</span><br><span class="line">        content = f.read()</span><br><span class="line">        content = content % &#123;<span class="string">'cmd'</span>: get_py_cmd([<span class="string">'python'</span>, python_args, fn, args])&#125;</span><br><span class="line">        fn_sh = os.path.join(work_path, name + <span class="string">'.service.sh'</span>)</span><br><span class="line">        with open(fn_sh, <span class="string">'w'</span>) as sf:</span><br><span class="line">            sf.write(content)</span><br><span class="line">            <span class="built_in">return</span> fn_sh</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def install(name, fn, args=None, work_path=None, description=None, python_args=None):</span><br><span class="line">    <span class="comment"># fn是相对路径</span></span><br><span class="line">    <span class="comment"># dir是工作路径: 默认fn所在位置</span></span><br><span class="line">    <span class="keyword">if</span> not work_path:</span><br><span class="line">        work_path = os.path.dirname(fn)</span><br><span class="line">    work_path = os.path.abspath(work_path)</span><br><span class="line">    fn_sh = install_sh(name, fn, work_path, args, python_args)</span><br><span class="line">    <span class="keyword">if</span> not fn_sh:</span><br><span class="line">        <span class="built_in">return</span> False</span><br><span class="line">    with open(<span class="string">'/usr/lib/systemd/system/%s.service'</span> % name, <span class="string">'w'</span>) as f:</span><br><span class="line">        d = &#123;</span><br><span class="line">            <span class="string">'name'</span>: name,</span><br><span class="line">            <span class="string">'sh'</span>: fn_sh,</span><br><span class="line">            <span class="string">'description'</span>: description</span><br><span class="line">        &#125;</span><br><span class="line">        f.write(server_content % d)</span><br><span class="line">        on_cmd(<span class="string">"chmod +x %s"</span> % fn_sh)</span><br><span class="line">        <span class="built_in">return</span> True</span><br><span class="line">    <span class="built_in">return</span> False</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def uninstall(name):</span><br><span class="line">    fn_service = <span class="string">'/usr/lib/systemd/system/%s.service'</span> % name</span><br><span class="line">    on_cmd(<span class="string">"rm -rf %s"</span> % fn_service)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def check_exist(name):</span><br><span class="line">    d = on_cmd(<span class="string">"ls /usr/lib/systemd/system/"</span>)</span><br><span class="line">    <span class="keyword">if</span> d.find(<span class="string">"%s.service"</span> % name) != -1:</span><br><span class="line">        <span class="built_in">return</span> True</span><br><span class="line">    <span class="built_in">return</span> False</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def <span class="built_in">test</span>():</span><br><span class="line">    name = <span class="string">'my_test_server'</span></span><br><span class="line">    <span class="keyword">if</span> len(sys.argv) == 2:</span><br><span class="line">        <span class="keyword">if</span> sys.argv[1] == <span class="string">'install'</span>:</span><br><span class="line">            <span class="keyword">if</span> not check_exist(name):</span><br><span class="line">                fn = __file__</span><br><span class="line">                fn = os.path.split(fn)</span><br><span class="line">                work_path = os.path.dirname(fn[0])  <span class="comment"># 上级路径</span></span><br><span class="line">                fn = os.path.basename(fn[0]) + <span class="string">'.'</span> + os.path.splitext(fn[1])[0]  <span class="comment"># 模块名称</span></span><br><span class="line">                <span class="keyword">if</span> install(name, fn, args=<span class="string">"test"</span>, work_path=work_path,</span><br><span class="line">                           description=<span class="string">"my_startup test"</span>, python_args=<span class="string">'-m'</span>):</span><br><span class="line">                    <span class="built_in">print</span> <span class="string">'install success'</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="built_in">print</span> <span class="string">'install fail'</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span> <span class="string">'is install'</span></span><br><span class="line">        <span class="keyword">elif</span> sys.argv[1] == <span class="string">'uninstall'</span>:</span><br><span class="line">            <span class="keyword">if</span> check_exist(name):</span><br><span class="line">                on_cmd(<span class="string">"rm -rf /usr/lib/systemd/system/%s.service"</span> % name)</span><br><span class="line">                <span class="built_in">print</span> <span class="string">'uninstall success'</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span> <span class="string">'is uninstall'</span></span><br><span class="line">        <span class="keyword">elif</span> sys.argv[1] == <span class="string">'test'</span>:</span><br><span class="line">            <span class="keyword">while</span> 1:</span><br><span class="line">                <span class="built_in">print</span> <span class="string">'test'</span></span><br><span class="line">                time.sleep(10)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span> <span class="string">"arg: install/uninstall"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    <span class="built_in">test</span>()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      服务
    
    </summary>
    
      <category term="linux" scheme="/categories/linux/"/>
    
    
      <category term="服务" scheme="/tags/%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMQ</title>
    <link href="/2019/11/25/DB/RabbitMQ/"/>
    <id>/2019/11/25/DB/RabbitMQ/</id>
    <published>2019-11-25T06:32:34.000Z</published>
    <updated>2019-11-25T06:32:34.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf8 -*-</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">RabbitMQ 操作</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">import</span> pika</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">from</span> tools <span class="keyword">import</span> estools</span><br><span class="line"><span class="keyword">from</span> tools.eslogging <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EsPublish</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""生产者"""</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.cfg = estools.get_cfg()</span><br><span class="line">        self.rm_cfg = self.cfg[<span class="string">'rabbitmq'</span>]</span><br><span class="line">        credentials = pika.PlainCredentials(self.rm_cfg[<span class="string">'user'</span>], self.rm_cfg[<span class="string">'password'</span>])</span><br><span class="line">        self.conn_param = pika.ConnectionParameters(</span><br><span class="line">            host=self.rm_cfg[<span class="string">'ip'</span>], port=int(self.rm_cfg[<span class="string">'port'</span>]),</span><br><span class="line">            virtual_host=<span class="string">'/'</span>, credentials=credentials, heartbeat=<span class="number">60</span>)</span><br><span class="line">        self.connection = <span class="literal">None</span></span><br><span class="line">        self.channel = <span class="literal">None</span></span><br><span class="line">        self.queue_declare = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">blocking_connect</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.connection = pika.BlockingConnection(self.conn_param)</span><br><span class="line">        self.channel = self.connection.channel()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">check_queue</span><span class="params">(self, queue, exchange)</span>:</span></span><br><span class="line">        <span class="comment"># 声明一个持久队列</span></span><br><span class="line">        self.queue_declare = self.channel.queue_declare(queue=queue, durable=<span class="literal">True</span>)</span><br><span class="line">        self.channel.confirm_delivery()</span><br><span class="line">        <span class="comment"># 声明一个持久交换机</span></span><br><span class="line">        self.channel.exchange_declare(exchange=exchange, exchange_type=<span class="string">"direct"</span>, durable=<span class="literal">True</span>)</span><br><span class="line">        self.channel.queue_bind(queue=queue, exchange=exchange, routing_key=queue)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_length</span><span class="params">(self, queue=None, exchange=None)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.queue_declare <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            self.check_queue(queue, exchange)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> self.queue_declare.method.queue != queue:</span><br><span class="line">                self.check_queue(queue, exchange)</span><br><span class="line">        <span class="keyword">return</span> self.queue_declare.method.message_count</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">send</span><span class="params">(self, queue, exchange, body)</span>:</span></span><br><span class="line">        <span class="comment"># 发布一条数据 - 到指定交换机</span></span><br><span class="line">        <span class="keyword">return</span> self.channel.basic_publish(exchange=exchange, routing_key=queue, body=body, mandatory=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.connection.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EsConsume</span><span class="params">(EsPublish)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, callback)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type name: str</span></span><br><span class="line"><span class="string">        :param callback</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        super(EsConsume, self).__init__()</span><br><span class="line">        self.name = name</span><br><span class="line">        self.cb = callback</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">on_consume</span><span class="params">(self, channel, method, properties, body)</span>:</span></span><br><span class="line">        <span class="string">"""消息回调"""</span></span><br><span class="line">        <span class="keyword">if</span> self.cb(channel, method, properties, body):</span><br><span class="line">            <span class="comment"># 消息完成标记</span></span><br><span class="line">            channel.basic_ack(method.delivery_tag)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">basic_consume</span><span class="params">(self, auto_stop=<span class="number">0</span>)</span>:</span></span><br><span class="line">        <span class="comment"># 每次消费1条消息 - 多消费者时, 避免某个消费者一次性获取太多消息</span></span><br><span class="line">        self.channel.basic_qos(prefetch_count=<span class="number">1</span>)</span><br><span class="line">        <span class="comment"># 消费者标签: consumer_test - 用于明确关闭消费者</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.channel.basic_consume(self.on_consume, queue=self.name, no_ack=<span class="literal">False</span>,</span><br><span class="line">                                       consumer_tag=<span class="string">'consumer_%s'</span> % self.name)</span><br><span class="line">        <span class="keyword">except</span> TypeError:</span><br><span class="line">            self.channel.basic_consume(queue=self.name, on_message_callback=self.on_consume, auto_ack=<span class="literal">False</span>,</span><br><span class="line">                                       consumer_tag=<span class="string">'consumer_%s'</span> % self.name)</span><br><span class="line">        <span class="keyword">if</span> auto_stop &gt; <span class="number">0</span>:</span><br><span class="line">            tee = threading.Thread(target=self.thread_stop_consume, args=(auto_stop,))</span><br><span class="line">            tee.setDaemon(<span class="literal">True</span>)  <span class="comment"># 设置跟随父线程</span></span><br><span class="line">            tee.start()</span><br><span class="line">        self.channel.start_consuming()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">stop_consume</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.channel.stop_consuming(consumer_tag=<span class="string">'consumer_%s'</span> % self.name)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">thread_stop_consume</span><span class="params">(self, auto_stop)</span>:</span></span><br><span class="line">        time.sleep(auto_stop)</span><br><span class="line">        eslogger.info(<span class="string">"auto stop: %s"</span> % auto_stop)</span><br><span class="line">        self.channel.stop_consuming(consumer_tag=<span class="string">'consumer_%s'</span> % self.name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    configlogging()</span><br><span class="line">    t = EsPublish()</span><br><span class="line">    t.blocking_connect()</span><br><span class="line">    <span class="comment"># t.check_queue('olcustomer', 'shengyibao')</span></span><br><span class="line">    <span class="keyword">print</span> t.get_length(<span class="string">'olcustomer'</span>, <span class="string">'shengyibao'</span>)</span><br><span class="line">    <span class="keyword">print</span> t.get_length(<span class="string">'funit'</span>, <span class="string">'shengyibao'</span>)</span><br><span class="line">    <span class="comment"># t.send()</span></span><br><span class="line">    t.close()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      RabbitMQ, httpapi
    
    </summary>
    
      <category term="RabbitMQ" scheme="/categories/RabbitMQ/"/>
    
    
      <category term="RabbitMQ" scheme="/tags/RabbitMQ/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMQ</title>
    <link href="/2019/11/23/DB/RabbitMQ-HTTPAPI/"/>
    <id>/2019/11/23/DB/RabbitMQ-HTTPAPI/</id>
    <published>2019-11-23T07:41:11.000Z</published>
    <updated>2019-11-23T07:41:11.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="HTTP-API"><a href="#HTTP-API" class="headerlink" title="HTTP API"></a>HTTP API</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding=utf8</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">RabbitMQ</span></span><br><span class="line"><span class="string">无效队列: RabbitMQ 会自动清理长时间不使用的队列</span></span><br><span class="line"><span class="string">    猜测：所谓的持久队列仅仅是数据持久，如果队列无数据且无消费者/生产者，还是会被自动清理掉的</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RabbitMQHttp</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.host = <span class="string">'http://127.0.0.1:15672'</span></span><br><span class="line">        self.auth = (<span class="string">'***'</span>, <span class="string">'***'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">request_api</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        r = requests.get(self.host + <span class="string">'/api/'</span> + name, auth=self.auth)</span><br><span class="line">        <span class="keyword">return</span> json.loads(r.content)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">request_vhosts</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.request_api(<span class="string">'vhosts'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">request_queues</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.request_api(<span class="string">'queues'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">request_connections</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.request_api(<span class="string">'connections'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EsClear</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.rh = RabbitMQHttp()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_invalid_queues</span><span class="params">(self)</span>:</span></span><br><span class="line">        d = datetime.datetime.now() - datetime.timedelta(days=<span class="number">1</span>)</span><br><span class="line">        d = d.strftime(<span class="string">'%Y-%m-%d %H:%M:%S'</span>)</span><br><span class="line">        queues = self.rh.request_queues()</span><br><span class="line">        re = []</span><br><span class="line">        <span class="keyword">for</span> q <span class="keyword">in</span> queues:</span><br><span class="line">            <span class="comment"># 自动清理的越过</span></span><br><span class="line">            <span class="keyword">if</span> q[<span class="string">'auto_delete'</span>]:</span><br><span class="line">                <span class="comment"># print 'auto_delete', q</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="comment"># 存在消费者的越过</span></span><br><span class="line">            <span class="keyword">if</span> q[<span class="string">'consumers'</span>] &gt; <span class="number">0</span>:</span><br><span class="line">                <span class="comment"># print 'consumers: name=%(name)s, consumers=%(consumers)s, messages=%(messages)s' % q</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="comment"># 最近使用过的越过</span></span><br><span class="line">            <span class="keyword">if</span> q[<span class="string">'idle_since'</span>] &gt; d:</span><br><span class="line">                <span class="keyword">print</span> <span class="string">'idle_since: name=%(name)s, idle_since=%(idle_since)s, messages=%(messages)s'</span> % q</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            re.append(q)</span><br><span class="line">            <span class="keyword">print</span> json.dumps(q, sort_keys=<span class="literal">True</span>, indent=<span class="number">4</span>)</span><br><span class="line">        <span class="keyword">return</span> re</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    ec = EsClear()</span><br><span class="line">    ec.get_invalid_queues()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      RabbitMQ, httpapi
    
    </summary>
    
      <category term="RabbitMQ" scheme="/categories/RabbitMQ/"/>
    
    
      <category term="RabbitMQ" scheme="/tags/RabbitMQ/"/>
    
      <category term="httpapi" scheme="/tags/httpapi/"/>
    
  </entry>
  
  <entry>
    <title>系统</title>
    <link href="/2019/11/22/Linux/%E7%B3%BB%E7%BB%9F/"/>
    <id>/2019/11/22/Linux/系统/</id>
    <published>2019-11-22T05:30:15.000Z</published>
    <updated>2019-11-22T05:30:15.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="磁盘"><a href="#磁盘" class="headerlink" title="磁盘"></a>磁盘</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 磁盘容量</span></span><br><span class="line">df -lh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看当前目录总共占的容量。而不单独列出各子项占用的容量</span></span><br><span class="line">du -sh</span><br><span class="line"><span class="comment"># 查看当前目录下一级子文件和子目录占用的磁盘容量</span></span><br><span class="line">du -lh --max-depth=1</span><br><span class="line"><span class="comment"># 统计当前文件夹(目录)大小，并按文件大小排序</span></span><br><span class="line">du -sh * | sort -n</span><br><span class="line"><span class="comment"># 查看指定文件大小</span></span><br><span class="line">du -sk filename</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      磁盘
    
    </summary>
    
      <category term="linux" scheme="/categories/linux/"/>
    
    
      <category term="磁盘" scheme="/tags/%E7%A3%81%E7%9B%98/"/>
    
  </entry>
  
  <entry>
    <title>MySQL-优化</title>
    <link href="/2019/11/22/DB/MySQL-%E4%BC%98%E5%8C%96/"/>
    <id>/2019/11/22/DB/MySQL-优化/</id>
    <published>2019-11-22T03:48:05.000Z</published>
    <updated>2019-11-22T03:48:05.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SELECT优化"><a href="#SELECT优化" class="headerlink" title="SELECT优化"></a>SELECT优化</h2><p>频繁操作的库不适合开启查询缓存</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 当你查询表的有些时候，你已经知道结果只会有一条结果，但因为你可能需要去fetch游标，或是你也许会去检查返回的记录数。</span></span><br><span class="line"><span class="comment">-- 在这种情况下，加上 LIMIT 1 可以增加性能。这样一样，MySQL数据库引擎会在找到一条数据后停止搜索，而不是继续往后查少下一条符合记录的数据。</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> tn <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">1</span> <span class="keyword">LIMIT</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="表优化"><a href="#表优化" class="headerlink" title="表优化"></a>表优化</h2><ul><li>VARCHAR -&gt; ENUM<ul><li>ENUM 类型是非常快和紧凑的。在实际上，其保存的是 TINYINT，但其外表上显示为字符串。</li><li>这样一来，用这个字段来做一些选项列表变得相当的完美; 比如“性别”，“国家”，“民族”，“状态”或“部门”，字段的取值是有限而且固定的</li></ul></li></ul><h3 id="查询缓存检查是否开启"><a href="#查询缓存检查是否开启" class="headerlink" title="查询缓存检查是否开启"></a>查询缓存检查是否开启</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'%cache%'</span>;</span><br><span class="line"><span class="comment">-- query_cache_size</span></span><br><span class="line"><span class="comment">-- query_cache_type = 0/1</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'%qcache%'</span>;        <span class="comment">-- 命中情况</span></span><br><span class="line"><span class="comment">-- Qcache_hits</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 0: 关闭, 1: 开启</span></span><br><span class="line"><span class="comment">-- 临时关闭</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> query_cache_size=<span class="number">0</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> query_cache_type=<span class="number">0</span></span><br><span class="line"><span class="comment">-- 永久关闭: 修改配置文件my.cnf</span></span><br><span class="line">query_cache_type=<span class="number">0</span></span><br><span class="line">query_cache_size=<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 语句指定</span></span><br><span class="line"><span class="keyword">select</span> sql_no_cache <span class="keyword">count</span>(*) <span class="keyword">from</span> <span class="keyword">users</span>;    <span class="comment">-- 无缓存</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">sql_cache</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> <span class="keyword">users</span>;       <span class="comment">-- 缓存</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 单条大数据</span></span><br><span class="line"><span class="comment">-- 默认1M, 改为10M</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'max_allowed_packet'</span>;</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> max_allowed_packet = <span class="number">10</span>*<span class="number">1024</span>*<span class="number">1024</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 特定函数导致不缓存</span></span><br><span class="line"><span class="comment">-- 某些查询语句会让MySQL不使用缓存。请看下面的示例：</span></span><br><span class="line"><span class="comment">-- 查询缓存不开启</span></span><br><span class="line">$r = mysql_query(<span class="string">"SELECT username FROM user WHERE signup_date &gt;= CURDATE()"</span>);</span><br><span class="line"><span class="comment">-- 开启查询缓存</span></span><br><span class="line">$today = date("Y-m-d");</span><br><span class="line">$r = mysql_query("<span class="keyword">SELECT</span> username <span class="keyword">FROM</span> <span class="keyword">user</span> <span class="keyword">WHERE</span> signup_date &gt;= <span class="string">'$today'</span><span class="string">");</span></span><br><span class="line"><span class="string">-- 上面两条SQL语句的差别就是 CURDATE() ，MySQL的查询缓存对这个函数不起作用。</span></span><br><span class="line"><span class="string">-- 所以，像 NOW() 和 RAND() 或是其它的诸如此类的SQL函数都不会开启查询缓存，因为这些函数的返回是会不定的易变的。</span></span><br><span class="line"><span class="string">-- 所以，你所需要的就是用一个变量来代替MySQL的函数，从而开启缓存。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">-- 无缓冲查询</span></span><br><span class="line"><span class="string">-- 并不像mysql_query()一样去自动fethch和缓存结果。这会相当节约很多可观的内存，尤其是那些会产生大量结果的查询语句</span></span><br><span class="line"><span class="string">-- 你不需要等到所有的结果都返回，只需要第一行数据返回的时候，你就可以开始马上开始工作于查询结果了。</span></span><br><span class="line"><span class="string">mysql_unbuffered_query()</span></span><br><span class="line"><span class="string">-- 限制：你要么把所有行都读走，或是你要在进行下一次的查询前调用mysql_free_result() 清除结果</span></span><br><span class="line"><span class="string">-- 而且， mysql_num_rows() 或 mysql_data_seek() 将无法使用。</span></span><br></pre></td></tr></table></figure><h2 id="索引优化"><a href="#索引优化" class="headerlink" title="索引优化"></a>索引优化</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">EXPLAIN</span> <span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(*) <span class="keyword">FROM</span> shengyibao.icafe_services <span class="keyword">WHERE</span> <span class="keyword">id</span>=<span class="string">"1"</span>;</span><br></pre></td></tr></table></figure><table><thead><tr><th>项</th><th>值</th><th>描述</th><th>备注</th></tr></thead><tbody><tr><td>id</td><td></td><td>如果多条的话, 代表该语句分多次运行, id顺序代表执行顺序</td><td></td></tr><tr><td>select_type</td><td>simple</td><td>表示简单查询</td><td>查询类型</td></tr><tr><td></td><td>primary</td><td>最外层的 select 查询</td><td></td></tr><tr><td></td><td>DEPENDENT SUBQUERY</td><td>子查询中的第一个 select 查询,依赖于外部 查询的结果集</td><td></td></tr><tr><td></td><td>DERIVED</td><td>用于 from 子句里有子查询的情况。 MySQL 会 递归执行这些子查询, 把结果放在临时表里。</td><td></td></tr><tr><td></td><td>UNCACHEABLE SUBQUERY</td><td>结果集不能被缓存的子查询,必须重新为外 层查询的每一行进行评估。</td><td></td></tr><tr><td></td><td>UNCACHEABLE UNION</td><td>UNION 中的第二个或随后的 select 查询,属 于不可缓存的子查询</td><td></td></tr><tr><td>type</td><td>system</td><td>表仅有一行, const的特例</td><td></td></tr><tr><td></td><td>const</td><td>const 用于用常数值比较 PRIMARY KEY 时。当 查询的表仅有一行时,使用 System。</td><td></td></tr><tr><td></td><td>eq_ref</td><td>关联表 - 最多匹配一行, 除const外最优</td><td></td></tr><tr><td></td><td>ref</td><td>关联表 - 所有内容都是索引关联</td><td></td></tr><tr><td></td><td>ref_or_null</td><td>等同于ref+NULL判断</td><td></td></tr><tr><td></td><td>ref_or_null</td><td>等同于ref+NULL判断</td><td></td></tr><tr><td></td><td>index_merge</td><td>索引合并优化方法 - 查询中使用多个索引</td><td></td></tr><tr><td></td><td>key</td><td>列包含了使用的索引的清单</td><td></td></tr><tr><td></td><td>unique_subquery</td><td>子查询, 不建议使用</td><td></td></tr><tr><td></td><td>index_subquery</td><td>子查询, 使用非唯一性索引</td><td></td></tr><tr><td></td><td>range</td><td>范围查询</td><td></td></tr><tr><td></td><td>index</td><td>索引全表扫描</td><td></td></tr><tr><td></td><td>all</td><td>行全表扫描</td><td></td></tr><tr><td>possible_keys</td><td></td><td>指出 MySQL 能在该表中使用哪些索引有助于 查询。如果为空,说明没有可用的索引。</td><td></td></tr><tr><td>key</td><td></td><td>MySQL 实际从 possible_key 选择使用的索引。 如果为 NULL,则没有使用索引。</td><td></td></tr><tr><td>key_length</td><td></td><td>使用的索引长度, 越小也好</td><td></td></tr><tr><td>ref</td><td></td><td>显示索引的哪一列被使用了</td><td></td></tr><tr><td>rows</td><td></td><td>检查行数, 越小越好</td><td></td></tr><tr><td>Extra</td><td>Using Index</td><td>使用索引</td><td>解决查询的详细信息</td></tr><tr><td></td><td>using filesort</td><td>外部排序</td><td></td></tr><tr><td></td><td>Using temporary</td><td>使用到临时表</td><td></td></tr></tbody></table><h2 id="配置优化"><a href="#配置优化" class="headerlink" title="配置优化"></a>配置优化</h2><ul><li>table_open_cache<ul><li>该值比较大时, 占用内存较多</li><li>建议值: max_connections * 表数目, 一段时间内可能打开的表对象总和</li><li>释放规则:<ul><li>当缓冲已满，而连接想要打开一个不在缓冲中的表时。</li><li>当缓冲数目已经超过了table_open_cache设置的值，mysql开始使用LRU算法释放表对象。</li><li>当你用flush tables;语句时。</li></ul></li></ul></li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">GLOBAL</span> <span class="keyword">STATUS</span> <span class="keyword">LIKE</span> <span class="string">'Open%tables'</span></span><br><span class="line"><span class="comment">-- Open_tables: 当前打开的table对象数量</span></span><br><span class="line"><span class="comment">-- Opened_tables: 打开过的表的数量总和</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- MYSQL运行时长</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">global</span> <span class="keyword">status</span> <span class="keyword">like</span> <span class="string">'uptime'</span>;</span><br><span class="line"><span class="comment">-- Opened_tables/Uptime的值过大说明table_open_cache过小，</span></span><br><span class="line">  <span class="comment">-- 导致一些table对象（即下文说的table对象）经常会刷出server层，需要的时候再创建，最终导致此计数过大。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 当前打开的表</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">open</span> <span class="keyword">tables</span>;</span><br></pre></td></tr></table></figure><h2 id="碎片整理"><a href="#碎片整理" class="headerlink" title="碎片整理"></a>碎片整理</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 在OPTIMIZE TABLE运行过程中，MySQL会锁定表</span></span><br><span class="line"><span class="comment">-- delete 操作不能够直接回收被删除数据占用的数据文件空间</span></span><br><span class="line"><span class="keyword">OPTIMIZE</span> [<span class="keyword">LOCAL</span> | <span class="keyword">NO_WRITE_TO_BINLOG</span>] <span class="keyword">TABLE</span> tbl_name [, tbl_name] ...</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ENGINE</span> = <span class="keyword">Innodb</span>;<span class="comment">-- 空alter语句，但是也会达到优化的效果，它会重建整个表</span></span><br><span class="line"><span class="comment">-- 表数据状态</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">table</span> <span class="keyword">status</span>;</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">table</span> <span class="keyword">STATUS</span> <span class="keyword">like</span> <span class="string">'表名'</span>;</span><br><span class="line"><span class="comment">-- 分析表</span></span><br><span class="line"><span class="keyword">ANALYZE</span> <span class="keyword">TABLE</span> 表名;    <span class="comment">-- 分析表, 关键字分布等，确保show查询的表状态是正确的</span></span><br><span class="line"><span class="comment">-- 备记</span></span><br><span class="line"><span class="comment">-- 优化表+重组数据，并不会完全释放剩余空间(Data_free)，根据表当前数据量可能会保留一部分(通常是默认值1-4M，压缩表2M，非压缩表4M)</span></span><br></pre></td></tr></table></figure><h2 id="状态检查"><a href="#状态检查" class="headerlink" title="状态检查"></a>状态检查</h2><h3 id="内存占用"><a href="#内存占用" class="headerlink" title="内存占用"></a>内存占用</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FLUSH</span> <span class="keyword">TABLES</span>;</span><br><span class="line"><span class="keyword">FLUSH</span> <span class="keyword">STATUS</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 清理: FLUSH, 缓慢释放已占用内存</span></span><br><span class="line"><span class="keyword">FLUSH</span> flush_option [,flush_option]</span><br><span class="line"><span class="comment">-- HOSTS: 清空主机缓存表</span></span><br><span class="line"><span class="comment">-- LOGS:  关闭当前的二进制日志文件并创建一个新文件</span></span><br><span class="line"><span class="comment">-- TABLES: 关闭所有打开的表，同时该操作将会清空查询缓存中的内容。</span></span><br><span class="line">        <span class="comment">-- FLUSH TABLES WITH READ LOCK  关闭所有打开的表，同时对于所有数据库中的表都加一个读锁</span></span><br><span class="line">        <span class="comment">-- 直到显示地执行unlock tables，该操作常常用于数据备份的时候。</span></span><br><span class="line"><span class="comment">-- STATUS: 重置大多数状态变量到0。</span></span><br><span class="line"><span class="comment">-- QUERY CACHE: 重整查询缓存，消除其中的碎片，提高性能，但是并不影响查询缓存中现有的数据，</span></span><br><span class="line">             <span class="comment">-- 这点和Flush table 和Reset Query  Cache（将会清空查询缓存的内容）不一样的。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 各种内存空间配置项</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">where</span> variable_name <span class="keyword">in</span> (</span><br><span class="line"><span class="string">'innodb_buffer_pool_size'</span>,<span class="string">'innodb_log_buffer_size'</span>,<span class="string">'innodb_additional_mem_pool_size'</span>,<span class="string">'key_buffer_size'</span>,<span class="string">'query_cache_size'</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">where</span> variable_name <span class="keyword">in</span> (</span><br><span class="line"><span class="string">'read_buffer_size'</span>,<span class="string">'read_rnd_buffer_size'</span>,<span class="string">'sort_buffer_size'</span>,<span class="string">'join_buffer_size'</span>,<span class="string">'binlog_cache_size'</span>,<span class="string">'tmp_table_size'</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">used_Mem = key_buffer_size + query_cache_size + innodb_buffer_pool_size</span><br><span class="line">used_Mem += innodb_log_buffer_size</span><br><span class="line">used_Mem += 210 * (</span><br><span class="line">    read_buffer_size</span><br><span class="line">    + read_rnd_buffer_size</span><br><span class="line">    + sort_buffer_size</span><br><span class="line">    + join_buffer_size</span><br><span class="line">    + binlog_cache_size</span><br><span class="line">    + tmp_table_size</span><br><span class="line">    + thread_stack</span><br><span class="line">    + thread_cache_size</span><br><span class="line">    + net_buffer_length</span><br><span class="line">    + bulk_insert_buffer_size</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="未提交事务"><a href="#未提交事务" class="headerlink" title="未提交事务"></a>未提交事务</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> t.trx_mysql_thread_id <span class="keyword">from</span> information_schema.innodb_trx t;</span><br><span class="line"><span class="comment">-- kill 3836183;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询 正在执行的事务：</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> information_schema.INNODB_TRX;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看正在锁的事务</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> INFORMATION_SCHEMA.INNODB_LOCKS; </span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看等待锁的事务</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> INFORMATION_SCHEMA.INNODB_LOCK_WAITS;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 长时间未结束的查询</span></span><br><span class="line"><span class="comment">-- COMMAND='Query' AND INFO IS NOT NULL</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> information_schema.<span class="string">`PROCESSLIST`</span> <span class="keyword">where</span> <span class="keyword">id</span> &lt;&gt; CONNECTION_ID() <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="built_in">time</span> <span class="keyword">desc</span>;</span><br><span class="line"><span class="comment">-- 长时间执行的查询(1小时), 可以直接kill掉返回的id</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> information_schema.processlist</span><br><span class="line"><span class="keyword">where</span> <span class="built_in">time</span> &gt;= <span class="number">3600</span> <span class="keyword">and</span> command <span class="keyword">not</span> <span class="keyword">in</span> (<span class="string">'sleep'</span>)</span><br><span class="line">    <span class="keyword">and</span> <span class="keyword">user</span> <span class="keyword">not</span> <span class="keyword">in</span> (<span class="string">'system user'</span>, <span class="string">'replicator'</span>, <span class="string">'aurora'</span>, <span class="string">'event_scheduler'</span>)</span><br><span class="line">    <span class="keyword">and</span> state <span class="keyword">not</span> <span class="keyword">like</span> (<span class="string">'waiting for table%lock'</span>);</span><br></pre></td></tr></table></figure><h3 id="锁等待"><a href="#锁等待" class="headerlink" title="锁等待"></a>锁等待</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> l.* <span class="keyword">FROM</span></span><br><span class="line">  (</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="string">'Blocker'</span> <span class="keyword">role</span>, p.id, p.USER,</span><br><span class="line">      <span class="keyword">LEFT</span> ( p.HOST, <span class="keyword">locate</span>(<span class="string">':'</span>, p.HOST) - <span class="number">1</span> ) HOST,</span><br><span class="line">      tx.trx_id, tx.trx_state, tx.trx_started,</span><br><span class="line">      <span class="keyword">timestampdiff</span>( <span class="keyword">SECOND</span>, tx.trx_started, <span class="keyword">now</span>() ) <span class="keyword">duration</span>,</span><br><span class="line">      lo.lock_mode, lo.lock_type, lo.lock_table, lo.lock_index, tx.trx_query, lw.requesting_trx_id Blockee_trx</span><br><span class="line">    <span class="keyword">FROM</span></span><br><span class="line">      information_schema.innodb_trx tx,</span><br><span class="line">      information_schema.innodb_lock_waits lw,</span><br><span class="line">      information_schema.innodb_locks lo,</span><br><span class="line">      information_schema. <span class="keyword">PROCESSLIST</span> p</span><br><span class="line">    <span class="keyword">WHERE</span></span><br><span class="line">      lw.blocking_trx_id = tx.trx_id <span class="keyword">AND</span> p.id = tx.trx_mysql_thread_id <span class="keyword">AND</span> lo.lock_id = lw.blocking_lock_id</span><br><span class="line">    <span class="keyword">UNION</span></span><br><span class="line">      <span class="keyword">SELECT</span></span><br><span class="line">        <span class="string">'Blockee'</span> <span class="keyword">role</span>, p.id, p.USER, <span class="keyword">LEFT</span> ( p.HOST, <span class="keyword">locate</span>(<span class="string">':'</span>, p.HOST) - <span class="number">1</span> ) HOST,</span><br><span class="line">        tx.trx_id, tx.trx_state, tx.trx_started,</span><br><span class="line">        <span class="keyword">timestampdiff</span>( <span class="keyword">SECOND</span>, tx.trx_started, <span class="keyword">now</span>() ) <span class="keyword">duration</span>,</span><br><span class="line">        lo.lock_mode, lo.lock_type, lo.lock_table, lo.lock_index, tx.trx_query, <span class="literal">NULL</span></span><br><span class="line">      <span class="keyword">FROM</span></span><br><span class="line">        information_schema.innodb_trx tx,</span><br><span class="line">        information_schema.innodb_lock_waits lw,</span><br><span class="line">        information_schema.innodb_locks lo,</span><br><span class="line">        information_schema. <span class="keyword">PROCESSLIST</span> p</span><br><span class="line">      <span class="keyword">WHERE</span></span><br><span class="line">        lw.requesting_trx_id = tx.trx_id <span class="keyword">AND</span> p.id = tx.trx_mysql_thread_id <span class="keyword">AND</span> lo.lock_id = lw.requested_lock_id</span><br><span class="line">  ) l</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">  <span class="keyword">role</span> <span class="keyword">DESC</span>,</span><br><span class="line">  trx_state <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><h3 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">master</span> <span class="keyword">logs</span>;</span><br><span class="line"><span class="keyword">show</span> <span class="built_in">binary</span> <span class="keyword">logs</span>;</span><br><span class="line"><span class="comment">-- 远程提取: 下载后可直接cat查看</span></span><br><span class="line">mysqlbinlog  -u** -p -h***.mysql.rds.aliyuncs.com --read-from-remote-server mysql-bin.000497 &gt;a.sql</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      SQL, 优化
    
    </summary>
    
      <category term="MySQL" scheme="/categories/MySQL/"/>
    
    
      <category term="SQL" scheme="/tags/SQL/"/>
    
      <category term="优化" scheme="/tags/%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>MySQL-存储过程</title>
    <link href="/2019/11/22/DB/MySQL-%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B/"/>
    <id>/2019/11/22/DB/MySQL-存储过程/</id>
    <published>2019-11-22T01:27:41.000Z</published>
    <updated>2019-11-22T01:27:41.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><ul><li>不支持打印输出</li><li>不支持SQL语句输出</li><li>支持参数传入传出</li><li>批量数据只能创建临时表, 存储过程中保存数据到临时表, 存储过程外从临时表提取输出</li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 同名存储过程存在则删除</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">PROCEDURE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`proc_adder`</span>;</span><br><span class="line"><span class="comment">-- 重置语句结束符</span></span><br><span class="line">DELIMITER ;;</span><br><span class="line"><span class="comment">-- 创建存储过程：一个加法器</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> proc_adder(<span class="keyword">IN</span> a <span class="built_in">int</span>, <span class="keyword">IN</span> b <span class="built_in">int</span>, <span class="keyword">OUT</span> <span class="keyword">sum</span> <span class="built_in">int</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">DECLARE</span> c <span class="built_in">int</span>;</span><br><span class="line">    if a is null then <span class="keyword">set</span> a = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">end</span> <span class="keyword">if</span>;</span><br><span class="line">    if b is null then <span class="keyword">set</span> b = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">end</span> <span class="keyword">if</span>;</span><br><span class="line">    <span class="keyword">set</span> <span class="keyword">sum</span> = a + b;</span><br><span class="line"><span class="keyword">END</span></span><br><span class="line">;;</span><br><span class="line">DELIMITER ;    <span class="comment">-- 还原默认语句结束符</span></span><br><span class="line"><span class="comment">-- 调用</span></span><br><span class="line"><span class="keyword">set</span> @b=<span class="number">5</span>;</span><br><span class="line"><span class="keyword">call</span> proc_adder(<span class="number">2</span>,@b,@s);</span><br><span class="line"><span class="keyword">select</span> @s <span class="keyword">as</span> <span class="keyword">sum</span>;</span><br></pre></td></tr></table></figure><h3 id="语句返回值接收"><a href="#语句返回值接收" class="headerlink" title="语句返回值接收"></a>语句返回值接收</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">count</span>(*) <span class="keyword">into</span> @c <span class="keyword">FROM</span> shengyibao.area;</span><br><span class="line"><span class="keyword">SELECT</span> @c;</span><br><span class="line"><span class="comment">-- ----------------------------------------</span></span><br><span class="line"><span class="keyword">SET</span> @STMT = <span class="keyword">CONCAT</span>(<span class="string">"SELECT count(*) into @c FROM shengyibao.area;"</span>);</span><br><span class="line"><span class="keyword">PREPARE</span> STMT <span class="keyword">FROM</span> @STMT;</span><br><span class="line"><span class="keyword">EXECUTE</span> STMT;</span><br><span class="line"><span class="keyword">SELECT</span> @c;</span><br></pre></td></tr></table></figure><h3 id="重建索引"><a href="#重建索引" class="headerlink" title="重建索引"></a>重建索引</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- SQL不支持直接使用IF语句，所以只能使用负载均衡</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">PROCEDURE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="keyword">test</span>;</span><br><span class="line">DELIMITER ;;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> <span class="keyword">test</span> (<span class="keyword">OUT</span> pv <span class="built_in">TEXT</span>) <span class="keyword">DETERMINISTIC</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">  <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>(<span class="keyword">SELECT</span> INDEX_NAME <span class="keyword">FROM</span> information_schema.statistics <span class="keyword">WHERE</span> table_schema=<span class="string">'table_name'</span> <span class="keyword">AND</span> table_name = <span class="string">'index_name'</span> <span class="keyword">AND</span> index_name = <span class="string">'idx_test'</span>) <span class="keyword">THEN</span></span><br><span class="line">    <span class="keyword">ALTER</span> <span class="keyword">TABLE</span> netbar_2308052252.<span class="string">`duty`</span> <span class="keyword">ADD</span> <span class="keyword">INDEX</span> <span class="string">`idx_tmbegin`</span> (<span class="string">`tmbegin`</span>);</span><br><span class="line">  <span class="keyword">END</span> <span class="keyword">IF</span>;</span><br><span class="line"><span class="keyword">END</span>;;</span><br><span class="line">DELIMITER ;</span><br><span class="line"><span class="comment">-- 调用</span></span><br><span class="line"><span class="keyword">call</span> <span class="keyword">test</span>(@pv);</span><br><span class="line"><span class="keyword">select</span> @pv;</span><br></pre></td></tr></table></figure><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><h3 id="修改列"><a href="#修改列" class="headerlink" title="修改列"></a>修改列</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 遍历库，对库中指定表进行操作 */</span></span><br><span class="line"><span class="comment">-- 同名存储过程存在则删除</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">PROCEDURE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="keyword">test</span>;</span><br><span class="line"><span class="comment">-- 置存储过程标记符号";;"</span></span><br><span class="line">DELIMITER ;;</span><br><span class="line"><span class="comment">-- 创建存储过程"test"</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> <span class="keyword">test</span> (<span class="keyword">OUT</span> pv <span class="built_in">TEXT</span>) <span class="keyword">DETERMINISTIC</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">  <span class="keyword">DECLARE</span> time_b <span class="built_in">VARCHAR</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="string">'2018-04-14 8:00:00'</span>;  <span class="comment">-- 自定义变量</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">DECLARE</span> done <span class="built_in">tinyint</span> <span class="keyword">default</span> <span class="number">0</span>;   <span class="comment">-- 游标结束判定符</span></span><br><span class="line">  <span class="keyword">DECLARE</span> db <span class="built_in">VARCHAR</span>(<span class="number">64</span>);           <span class="comment">-- 游标数据接收变量</span></span><br><span class="line">  <span class="comment">-- 创建游标</span></span><br><span class="line">  <span class="keyword">DECLARE</span> cur <span class="keyword">CURSOR</span> <span class="keyword">FOR</span></span><br><span class="line">    <span class="keyword">SELECT</span> SCHEMA_NAME <span class="keyword">FROM</span> information_schema.SCHEMATA <span class="keyword">WHERE</span> SCHEMA_NAME REGEXP <span class="string">"^testdb_[0-9]&#123;10&#125;$"</span>;</span><br><span class="line">  <span class="comment">-- 设定游标结束标记</span></span><br><span class="line">  <span class="keyword">DECLARE</span> continue <span class="keyword">handler</span> <span class="keyword">for</span> <span class="keyword">sqlstate</span> <span class="string">'02000'</span> <span class="keyword">SET</span> done=<span class="number">1</span>;</span><br><span class="line">  <span class="comment">-- 打开游标</span></span><br><span class="line">  OPEN cur;</span><br><span class="line">  <span class="comment">-- 提取游标值</span></span><br><span class="line">  FETCH cur INTO db;</span><br><span class="line">  <span class="comment">-- 循环检查游标</span></span><br><span class="line">  WHILE done&lt;&gt;1 DO</span><br><span class="line">    <span class="keyword">SET</span> @db = db;</span><br><span class="line">    <span class="comment">-- ---------------------------------------------------------------------------------------------</span></span><br><span class="line">    <span class="comment">-- 不需要IF，如果列未发生变化，语句会很快结束</span></span><br><span class="line">    <span class="comment">-- AFTER用于指定调整列位置</span></span><br><span class="line">    <span class="keyword">SET</span> @STMT = <span class="keyword">CONCAT</span>(<span class="string">'</span></span><br><span class="line"><span class="string">      ALTER TABLE '</span>, @db, <span class="string">'.`member`</span></span><br><span class="line"><span class="string">      MODIFY COLUMN `col_name1`  datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT \'创建时间\' AFTER `col_name2`;'</span>);</span><br><span class="line">    <span class="keyword">PREPARE</span> STMT <span class="keyword">FROM</span> @STMT;</span><br><span class="line">    <span class="keyword">EXECUTE</span> STMT;</span><br><span class="line">    <span class="comment">-- -----------------------------------------------------------------------------------------------</span></span><br><span class="line">    <span class="comment">-- 下一个游标</span></span><br><span class="line">    FETCH cur INTO db;</span><br><span class="line">  <span class="keyword">END</span> <span class="keyword">WHILE</span>;</span><br><span class="line">  <span class="comment">-- 关闭游标</span></span><br><span class="line">  CLOSE cur;</span><br><span class="line"><span class="keyword">END</span>;;   <span class="comment">-- 存储过程结束标记</span></span><br><span class="line">DELIMITER ; <span class="comment">-- 重置存储过程结束标记为默认值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 调用该存储过程，注意：输出参数必须是一个带@符号的变量，支持多参数传入传出</span></span><br><span class="line"><span class="keyword">CALL</span> <span class="keyword">test</span> (@pv);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 显示</span></span><br><span class="line"><span class="keyword">SELECT</span> @pv;</span><br></pre></td></tr></table></figure><h3 id="添加列"><a href="#添加列" class="headerlink" title="添加列"></a>添加列</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">PROCEDURE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="keyword">test</span>;</span><br><span class="line"></span><br><span class="line">DELIMITER ;;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> <span class="keyword">test</span> (<span class="keyword">OUT</span> pv <span class="built_in">TEXT</span>) <span class="keyword">DETERMINISTIC</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">  <span class="keyword">SET</span> pv = <span class="string">'0'</span>;</span><br><span class="line">  <span class="comment">-- 检查列是否存在</span></span><br><span class="line">  IF NOT EXISTS(<span class="keyword">SELECT</span> * <span class="keyword">FROM</span> information_schema.<span class="string">`COLUMNS`</span> <span class="keyword">WHERE</span> TABLE_SCHEMA=<span class="string">'NetbarOpt'</span> <span class="keyword">AND</span> TABLE_NAME=<span class="string">'table_name'</span> <span class="keyword">AND</span> COLUMN_NAME=<span class="string">'col_name'</span>)</span><br><span class="line">  <span class="keyword">THEN</span></span><br><span class="line">    <span class="comment">-- 不存在则创建</span></span><br><span class="line">    <span class="keyword">SET</span> @bar_tn = <span class="string">'table_name'</span>;</span><br><span class="line">    <span class="keyword">SET</span> @STMT = <span class="keyword">CONCAT</span>(<span class="string">"ALTER TABLE `"</span>, @bar_tn,<span class="string">"` ADD COLUMN `col_name` VARCHAR (50) NULL AFTER `opt_time`;"</span>);</span><br><span class="line">    <span class="keyword">PREPARE</span> STMT <span class="keyword">FROM</span> @STMT;</span><br><span class="line">    <span class="keyword">EXECUTE</span> STMT;</span><br><span class="line">    <span class="keyword">SET</span> pv = @STMT;</span><br><span class="line">  <span class="keyword">END</span> <span class="keyword">IF</span>;</span><br><span class="line"><span class="keyword">END</span>;;</span><br><span class="line">DELIMITER ;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 调用该存储过程，注意：输出参数必须是一个带@符号的变量 */</span></span><br><span class="line"><span class="keyword">CALL</span> <span class="keyword">test</span> (@pv);</span><br><span class="line"><span class="keyword">SELECT</span> @pv;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      SQL, 存储过程
    
    </summary>
    
      <category term="MySQL" scheme="/categories/MySQL/"/>
    
    
      <category term="SQL" scheme="/tags/SQL/"/>
    
      <category term="存储过程" scheme="/tags/%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>环境</title>
    <link href="/2019/11/20/PHP/IDE/"/>
    <id>/2019/11/20/PHP/IDE/</id>
    <published>2019-11-20T11:20:44.000Z</published>
    <updated>2019-11-20T11:20:44.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul><li><a href="https://www.xp.cn/" target="_blank" rel="noopener">phpStudy</a></li></ul><h2 id="PHPStorm"><a href="#PHPStorm" class="headerlink" title="PHPStorm"></a>PHPStorm</h2><ul><li>注册码: <a href="http://idea.lanyus.com/" target="_blank" rel="noopener">http://idea.lanyus.com/</a><ul><li>也可以到<a href="http://www.php.cn/" target="_blank" rel="noopener">PHP中文网</a>找</li></ul></li><li>配置<ul><li><code>Appearance</code>-&gt;<code>Theme</code>-&gt;选择<code>Darcula</code>，暗色调看着比较舒服<ul><li>字体 -&gt; 微软雅黑，14</li></ul></li><li><code>Editor</code>-&gt;<code>font</code>  首先Scheme save自己的方案，然后字体改 Consolas|Courier|Source Code Pro等宽字体，16<ul><li><code>General</code>-&gt;<code>Appearance</code>-&gt;<code>Show line numbers</code> &amp;&amp; <code>Show whitespace</code></li></ul></li></ul></li><li>其他<ul><li><code>Editor</code>-&gt;<code>Code Style</code>-&gt;<code>PHP</code>：空行 空格</li><li><code>Editor</code>-&gt;<code>Inspections</code>-&gt;<code>Spelling</code>: 取消选中(单词检查)</li><li><code>File Encodings</code>-&gt; IDE Encoding: UTF-8;</li><li><code>File Encodings</code>-&gt; Project Encoding: UTF-8;</li></ul></li></ul><h3 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h3><ul><li><p>查找 / 选中</p><ul><li><p><code>Alt+左键</code>: 多选</p></li><li><p><code>Ctrl+Alt+Shift+左键</code>: 选中多行</p></li><li><p><code>Alt+J</code>: 搜索并选中</p></li><li><p><code>CTRL+F</code>: 在当前窗口查找文本</p></li><li><p><code>CTRL+SHIFT+F</code>: 在指定路径查找文本</p></li><li><p><code>CTRL+R</code>: 当前窗口替换文本</p></li><li><p><code>CTRL+SHIFT+R</code>: 在指定路径替换文本</p></li><li><p><code>CTRL+SHIFT+V</code>: 可以复制多个文本</p></li><li><p><code>CTRL+D</code>: 复制行</p></li><li><p><code>CTRL+SHIFT+[]</code>: 选中块代码，可以快速复制</p></li><li><p><code>CTRL+E</code>: 最近打开的文件</p></li></ul></li><li><p>结构化查找</p><ul><li><code>Ctrl+F12</code>: 文件结构</li><li><code>alt+&#39;7&#39;</code>: 显示当前的类/函数结构</li><li><code>Ctrl+Shift+A</code>: 查找快捷键</li><li><code>CTRL+N</code>: 查找类</li><li><code>CTRL+SHIFT+N</code>: 查找文件，打开工程中的文件(类似于eclipse中的ctrl+shift+R)，目的是打开当前工程下任意目录的文件</li><li><code>CTRL+SHIFT+ALT+N</code>: 查找类中的方法或变量(JS)</li><li><code>SHIFT+F6</code>  重命名,重构 当前区域内变量重命名/重构</li></ul></li><li><p>跳转 / 定位</p><ul><li><code>F2</code>: 高亮错误或警告快速定位</li><li><code>F4</code>: 查找变量来源</li><li><code>Ctrl+左键</code>: 跳转到定义</li><li><code>CTRL+G</code>: 定位行，跳转行</li><li><code>Ctrl+Shift+Backspace</code>: 键导航到最后编辑的位置</li><li><code>CTRL+[]</code>: 光标移动到{}[]开头或结尾位置，python跳转到函数头</li><li><code>CTRL+ALT+ ←/→</code>: 返回上次编辑的位置</li><li><code>ALT+ ↑/↓</code>: 在方法间快速移动定位</li></ul></li><li><p>书签</p><ul><li><code>ALT+ ←/→</code>: 切换代码视图，标签切换</li><li><code>F11</code>: 书签助记符</li><li><code>Shift+F11</code>: 显示书签</li><li><code>Ctrl+Shift+[0-9]</code>: 创建编号书签</li><li><code>Ctrl+[0-9]</code>: 转到编号书签</li></ul></li><li><p>折叠</p><ul><li><code>ctrl+&#39;-/+&#39;</code>: 可以折叠代码块</li><li><code>ctrl+&#39;.&#39;</code>: 折叠选中代码所属代码块</li><li><code>Ctrl+Shift+小键盘+</code>：展开全部</li><li><code>Ctrl+Shift+小键盘-</code>：关闭全部</li></ul></li><li><p>美化 / 优化</p><ul><li><code>CTRL+ALT+L</code>: 格式化代码</li><li><code>CTRL+ALT+I</code>: 自动缩进</li><li><code>CTRL+ALT+O</code>: 优化导入的类和包(冲突：QQ截屏识字)</li></ul></li><li><p>提示 / 快捷输入</p><ul><li><code>CTRL+P</code>: 方法参数提示，显示默认参数</li><li><code>CTRL+ALT+T</code>:  把选中的代码放在 TRY{} IF{} ELSE{} 里</li><li><code>Ctrl+Shift+U</code>: 选中的字符大小写转换</li></ul></li><li><p>本地历史VCS/SVN</p><ul><li><code>Alt+反引号</code>: 快速弹出VCS菜单</li><li><code>Ctrl+K</code>: 提交项目VCS</li><li><code>Ctrl+T</code>: 更新项目从VCS</li><li><code>Alt+Shift+C</code>: 查看最近发生的变化</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      环境, PHPStorm, phpStudy
    
    </summary>
    
      <category term="PHP" scheme="/categories/PHP/"/>
    
    
      <category term="PHPStorm" scheme="/tags/PHPStorm/"/>
    
      <category term="phpStudy" scheme="/tags/phpStudy/"/>
    
  </entry>
  
  <entry>
    <title>文件</title>
    <link href="/2019/11/19/Python/%E6%96%87%E4%BB%B6/%E6%96%87%E4%BB%B6/"/>
    <id>/2019/11/19/Python/文件/文件/</id>
    <published>2019-11-19T11:40:25.477Z</published>
    <updated>2019-11-27T09:51:26.573Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h2><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建时间</span></span><br><span class="line">os.stat(fn).st_ctime</span><br></pre></td></tr></table></figure><h3 id="常规操作"><a href="#常规操作" class="headerlink" title="常规操作"></a>常规操作</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.mkdir(folder_name)      <span class="comment">#创建文件夹</span></span><br><span class="line">os.makedirs(folder_name)   <span class="comment">#创建多层文件夹</span></span><br><span class="line"></span><br><span class="line">os.rmdir(folder_name)      <span class="comment">#删除空文件夹</span></span><br><span class="line">os.removedirs(path)        <span class="comment">#递归删除空目录</span></span><br><span class="line"></span><br><span class="line">os.rename(oldfiles,newfile) <span class="comment">#文件/文件夹改名</span></span><br><span class="line">os.remove(path)             <span class="comment">#文件删除</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#相当于文件移动,但目标目录必须存在</span></span><br><span class="line">os.rename(<span class="string">'D:\\1\\2.txt'</span>,<span class="string">'D:\\2\\3.txt'</span>)</span><br><span class="line"><span class="comment">#目录和文件 同时改名</span></span><br><span class="line">os.renames(<span class="string">'D:\\2\\3.txt'</span>,<span class="string">'D:\\1\\1.txt'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件是否存在</span></span><br><span class="line">os.path.exists(<span class="string">'d:/assist'</span>)</span><br><span class="line">os.path.exists(<span class="string">'d:/assist/getTeacherList.py'</span>)</span><br><span class="line"></span><br><span class="line">os.makedirs(<span class="string">'d:/assist/set'</span>)</span><br><span class="line">os.path.exists(<span class="string">'d:/assist/set'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys,os</span><br><span class="line"></span><br><span class="line"><span class="comment">#当前程序变量</span></span><br><span class="line">print(sys.path)</span><br><span class="line"></span><br><span class="line"><span class="comment">#系统变量</span></span><br><span class="line">print(os.environ[<span class="string">'TMP'</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#环境变量转化</span></span><br><span class="line">os.environ[<span class="string">'myvar'</span>]=<span class="string">'value'</span> <span class="comment">#定义自己的环境变量</span></span><br><span class="line">print(os.path.expandvars(<span class="string">'$TMP\\myvar'</span>))</span><br></pre></td></tr></table></figure><h2 id="Excel"><a href="#Excel" class="headerlink" title="Excel"></a>Excel</h2><p>安装：<code>pip install openpyxl</code></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: gbk -*-</span></span><br><span class="line"><span class="keyword">import</span> openpyxl</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_read</span><span class="params">(fn)</span>:</span></span><br><span class="line">    wb = openpyxl.load_workbook(fn)</span><br><span class="line">    ws = wb.get_sheet_by_name(wb.get_sheet_names()[<span class="number">0</span>])</span><br><span class="line">    wc = ws.cell(row=<span class="number">1</span>, column=<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">print</span> wc.value</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_create</span><span class="params">(fn)</span>:</span></span><br><span class="line">    wb = openpyxl.Workbook()</span><br><span class="line">    ws = wb.create_sheet(index=<span class="number">0</span>, title=<span class="string">"sheet"</span>)</span><br><span class="line">    <span class="comment"># ws = wb.get_active_sheet()</span></span><br><span class="line">    <span class="comment"># ws = wb.active</span></span><br><span class="line">    <span class="comment"># ws.sheet_properties.tabColor = "205EB2"</span></span><br><span class="line">    <span class="comment"># ws.title = "test"</span></span><br><span class="line">    ws.append([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])  <span class="comment"># 添加一行</span></span><br><span class="line">    ws.cell(row=<span class="number">1</span>, column=<span class="number">1</span>, value=<span class="string">'test2'</span>)  <span class="comment"># 指定位置：字符串</span></span><br><span class="line">    ws[<span class="string">'A2'</span>] = datetime.datetime.now()  <span class="comment"># 指定位置：日期</span></span><br><span class="line">    wb.save(fn)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    fn = <span class="string">'test.xlsx'</span></span><br><span class="line">    test_create(fn)</span><br><span class="line">    test_read(fn)</span><br></pre></td></tr></table></figure><h2 id="文件夹"><a href="#文件夹" class="headerlink" title="文件夹"></a>文件夹</h2><h3 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 递归遍历</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">for</span> root,dirs,files <span class="keyword">in</span> os.walk(directiory):</span><br><span class="line">    <span class="keyword">print</span> root,dirs,files</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通配符遍历</span></span><br><span class="line"><span class="keyword">import</span> glob</span><br><span class="line"></span><br><span class="line">files = glob.glob(<span class="string">'*/*.json'</span>)   <span class="comment"># 遍历一级子目录下的json</span></span><br><span class="line"><span class="keyword">print</span> files   <span class="comment"># ['1/t1.json', '1/t2.json', '2/t.py']</span></span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"></span><br><span class="line"><span class="comment">#复制目录:目标目录存在的话则报错</span></span><br><span class="line">shutil.copytree(<span class="string">'d:/www'</span>, <span class="string">'c:/temp/'</span>)</span><br><span class="line"><span class="comment">#删除目录（支持非空删除）</span></span><br><span class="line">shutil.rmtree(path)</span><br><span class="line"></span><br><span class="line"><span class="comment">#简单复制: 如果目标文件存在则覆盖, 目标目录必须存在</span></span><br><span class="line">shutil.copyfile(<span class="string">'src.py'</span>,<span class="string">'des.copy'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#复制</span></span><br><span class="line"><span class="comment">#如果目标不是文件而是路径, 则复制指定文件到指定目录中, 文件名保持不变</span></span><br><span class="line"><span class="comment">#如果目标目录不存在, 则自动创建</span></span><br><span class="line"><span class="comment">#复制文件属性</span></span><br><span class="line">shutil.copy(<span class="string">'src'</span>,<span class="string">'des'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#复制</span></span><br><span class="line"><span class="comment">#文件最后一次被读取和修改时间等一些元信息, 也复制给新文件</span></span><br><span class="line"><span class="comment">#其他等同于copy</span></span><br><span class="line">shutil.copy2(<span class="string">'src'</span>,<span class="string">'des'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#目录复制</span></span><br><span class="line"><span class="comment">#目标目录必须是不存在的</span></span><br><span class="line">shutil.copytree(<span class="string">'src'</span>,<span class="string">'des'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#移动文件或目录</span></span><br><span class="line">shutil.move(a,b)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      文件
    
    </summary>
    
      <category term="Python" scheme="/categories/Python/"/>
    
    
      <category term="文件" scheme="/tags/%E6%96%87%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>加解密</title>
    <link href="/2019/11/18/Python/%E5%8A%A0%E8%A7%A3%E5%AF%86/"/>
    <id>/2019/11/18/Python/加解密/</id>
    <published>2019-11-18T07:25:11.000Z</published>
    <updated>2019-11-18T07:25:11.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><h3 id="base64"><a href="#base64" class="headerlink" title="base64"></a>base64</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># python2</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'我们'</span>.encode(<span class="string">'base64'</span>)</span><br><span class="line"><span class="keyword">print</span> <span class="string">'ztLDxw=='</span>.decode(<span class="string">'base64'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># python2</span></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">s = <span class="string">'我是字符串'</span></span><br><span class="line">a = base64.b64encode(s)</span><br><span class="line"><span class="keyword">print</span> base64.b64decode(a)</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: gbk -*-</span></span><br><span class="line"><span class="comment"># pyton3</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">P3</span>:</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">b2s</span><span class="params">(b)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> b.decode(<span class="string">'gbk'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">s2b</span><span class="params">(s, s16=False)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :param s:</span></span><br><span class="line"><span class="string">        :param s16: 是否是16进制字符串, 比如：616263646566</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> s16:</span><br><span class="line">            <span class="keyword">return</span> bytes.fromhex(s)</span><br><span class="line">        <span class="keyword">return</span> s.encode(<span class="string">'gbk'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">encode</span><span class="params">(self, s, s16=False)</span>:</span></span><br><span class="line">        <span class="comment"># 注意bytes和str之间的转化</span></span><br><span class="line">        s = self.s2b(s, s16)</span><br><span class="line">        <span class="keyword">return</span> base64.b64encode(s)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decode</span><span class="params">(s, out_hex=False)</span>:</span></span><br><span class="line">        <span class="comment"># python3: b64decode -&gt; bytes -&gt; hex()</span></span><br><span class="line">        re = base64.b64decode(s)</span><br><span class="line">        <span class="keyword">if</span> out_hex:</span><br><span class="line">            <span class="keyword">return</span> re.hex()</span><br><span class="line">        <span class="keyword">return</span> re</span><br></pre></td></tr></table></figure><h2 id="AES"><a href="#AES" class="headerlink" title="AES"></a>AES</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pip install crypto</span><br><span class="line"><span class="comment"># 如果提示找不到Crypto.Cipher，近Python第三方安装包目录，把crypto 改为 Crypto 即可</span></span><br><span class="line"><span class="comment"># 如果还提示找不到，更换模块：pycrypto -&gt; pycryptodome</span></span><br><span class="line">pip uninstall pycrypto</span><br><span class="line">pip install pycryptodome</span><br></pre></td></tr></table></figure><h3 id="CBC"><a href="#CBC" class="headerlink" title="CBC"></a>CBC</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding=utf8</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">AES/CBC/PKCS7Padding</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> estools</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ESCBC</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.cfg = estools.get_cfg()</span><br><span class="line">        self.mode = AES.MODE_CBC</span><br><span class="line"></span><br><span class="line">        self.key = self.cfg[<span class="string">'cbc'</span>][<span class="string">'key'</span>]  <span class="comment"># type: str</span></span><br><span class="line">        self.vi = self.cfg[<span class="string">'cbc'</span>][<span class="string">'vi'</span>]  <span class="comment"># type: str</span></span><br><span class="line">        self.key = self.key.decode(<span class="string">"hex"</span>)</span><br><span class="line">        self.vi = self.vi.decode(<span class="string">"hex"</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pkcs7padding</span><span class="params">(data)</span>:</span></span><br><span class="line">        <span class="comment"># AES.block_size 16位</span></span><br><span class="line">        bs = AES.block_size</span><br><span class="line">        padding = bs - len(data) % bs</span><br><span class="line">        padding_text = chr(padding) * padding</span><br><span class="line">        <span class="keyword">return</span> data + padding_text</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pkcs7unpadding</span><span class="params">(data)</span>:</span></span><br><span class="line">        lengt = len(data)</span><br><span class="line">        unpadding = ord(data[lengt - <span class="number">1</span>])</span><br><span class="line">        <span class="keyword">return</span> data[<span class="number">0</span>:lengt - unpadding]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">encrypt</span><span class="params">(self, s)</span>:</span></span><br><span class="line">        s = copy.deepcopy(s)</span><br><span class="line">        cipher = AES.new(self.key, self.mode, self.vi)</span><br><span class="line">        <span class="keyword">return</span> cipher.encrypt(self.pkcs7padding(s))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decrypt</span><span class="params">(self, s)</span>:</span></span><br><span class="line">        s = copy.deepcopy(s)</span><br><span class="line">        cipher = AES.new(self.key, self.mode, self.vi)</span><br><span class="line">        decrypted = cipher.decrypt(s)</span><br><span class="line">        <span class="keyword">return</span> self.pkcs7unpadding(decrypted)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">b64encode</span><span class="params">(s)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> base64.b64encode(s)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">b64decode</span><span class="params">(s)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> base64.b64decode(s)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></span><br><span class="line">    cbc = ESCBC()</span><br><span class="line">    text = <span class="string">'abcdeft'</span></span><br><span class="line">    encrypted = cbc.encrypt(text)</span><br><span class="line">    <span class="keyword">print</span> base64.b64encode(encrypted)</span><br><span class="line">    <span class="keyword">print</span> cbc.decrypt(encrypted)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    test()</span><br></pre></td></tr></table></figure><h3 id="CFB"><a href="#CFB" class="headerlink" title="CFB"></a>CFB</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding=utf8</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">AES/CFB/NOPADDING加解密</span></span><br><span class="line"><span class="string">等价于PHP: AES-128-CFB+OPENSSL_ZERO_PADDING</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ESCFB</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.mode = AES.MODE_CFB</span><br><span class="line"></span><br><span class="line">        self.key = <span class="string">'ba0d1eba1b5aa3dc6f465f0d03d1a1f3'</span>  <span class="comment"># type: str</span></span><br><span class="line">        self.vi = <span class="string">'15b32d0a12b89b7857c75556ff8176aa'</span>  <span class="comment"># type: str</span></span><br><span class="line">        self.key = self.key.decode(<span class="string">"hex"</span>)</span><br><span class="line">        self.vi = self.vi.decode(<span class="string">"hex"</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">zero_padding</span><span class="params">(data)</span>:</span></span><br><span class="line">        bs = AES.block_size</span><br><span class="line">        num = bs - len(data) % bs</span><br><span class="line">        padding_text = <span class="string">'\0'</span> * num</span><br><span class="line">        <span class="keyword">return</span> data + padding_text, num</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">encrypt</span><span class="params">(self, s)</span>:</span></span><br><span class="line">        s = copy.deepcopy(s)</span><br><span class="line">        cipher = AES.new(self.key, self.mode, self.vi, segment_size=<span class="number">128</span>)</span><br><span class="line">        s, n = self.zero_padding(s)</span><br><span class="line">        s = cipher.encrypt(s)</span><br><span class="line">        <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> s</span><br><span class="line">        <span class="keyword">return</span> s[<span class="number">0</span>:-n]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decrypt</span><span class="params">(self, s)</span>:</span></span><br><span class="line">        s = copy.deepcopy(s)</span><br><span class="line">        cipher = AES.new(self.key, self.mode, self.vi, segment_size=<span class="number">128</span>)</span><br><span class="line">        s, n = self.zero_padding(s)</span><br><span class="line">        s = cipher.decrypt(s)</span><br><span class="line">        <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> s</span><br><span class="line">        <span class="keyword">return</span> s[<span class="number">0</span>:-n]</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">b64encode</span><span class="params">(s)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> base64.b64encode(s)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">b64decode</span><span class="params">(s)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> base64.b64decode(s)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></span><br><span class="line">    cbc = ESCFB()</span><br><span class="line">    text = <span class="string">'1ffedd4c51506214a1a196f4128c4267b3c9911wD'</span></span><br><span class="line">    encrypted = cbc.encrypt(text)</span><br><span class="line">    <span class="keyword">print</span> base64.b64encode(encrypted)</span><br><span class="line">    <span class="keyword">print</span> cbc.decrypt(encrypted)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    test()</span><br></pre></td></tr></table></figure><h3 id="DES"><a href="#DES" class="headerlink" title="DES"></a>DES</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">简单应用</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> DES</span><br><span class="line"></span><br><span class="line">mode = DES.MODE_CBC</span><br><span class="line">key = <span class="string">'01234567'</span></span><br><span class="line">vi = <span class="string">'01234567'</span></span><br><span class="line">text = <span class="string">'12345678123456789'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span><span class="params">(text)</span>:</span></span><br><span class="line">    cipher = DES.new(key, mode, vi)</span><br><span class="line">    <span class="keyword">return</span> cipher.encrypt(text + <span class="string">'\0'</span> * (<span class="number">8</span> - len(text) % <span class="number">8</span>))</span><br><span class="line"></span><br><span class="line">encrypted = encrypt(text)</span><br><span class="line"><span class="keyword">print</span> encrypted.encode(<span class="string">'hex'</span>)</span><br><span class="line"><span class="comment"># MODE_CBC must reset vi</span></span><br><span class="line">cipher = DES.new(key, mode, vi)</span><br><span class="line">decrypted = cipher.decrypt(encrypted)</span><br><span class="line"><span class="keyword">print</span> decrypted.rstrip(<span class="string">'\0'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding=gbk</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">文件加解密封装</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> DES</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EsCBC</span>:</span></span><br><span class="line">    mode = DES.MODE_CBC</span><br><span class="line">    key = <span class="string">'01234567'</span></span><br><span class="line">    vi = <span class="string">'01234567'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.cipher = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inttobytes</span><span class="params">(i)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">itoc</span><span class="params">(v)</span>:</span></span><br><span class="line">            <span class="keyword">return</span> chr(v)</span><br><span class="line"></span><br><span class="line">        b = bytearray()</span><br><span class="line">        b.append(itoc(i &amp; <span class="number">0xFF</span>))</span><br><span class="line">        b.append(itoc((i &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF</span>))</span><br><span class="line">        b.append(itoc((i &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xFF</span>))</span><br><span class="line">        b.append(itoc((i &gt;&gt; <span class="number">24</span>) &amp; <span class="number">0xFF</span>))</span><br><span class="line">        <span class="keyword">return</span> b</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bytestoint</span><span class="params">(b)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> ord(b[<span class="number">0</span>]) + (ord(b[<span class="number">1</span>]) &lt;&lt; <span class="number">8</span>) + (ord(b[<span class="number">2</span>]) &lt;&lt; <span class="number">16</span>) + (ord(b[<span class="number">3</span>]) &lt;&lt; <span class="number">24</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 加密</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">encrypt</span><span class="params">(self, fn, new_fn)</span>:</span></span><br><span class="line">        self.cipher = DES.new(EsCBC.key, EsCBC.mode, EsCBC.vi)</span><br><span class="line">        <span class="keyword">with</span> open(fn, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            data = f.read()</span><br><span class="line">            data = bytearray(data)</span><br><span class="line">            data.extend(inttobytes(len(data)))                 <span class="comment"># 追加长度</span></span><br><span class="line">            data.extend(bytearray([<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'D'</span>]))       <span class="comment"># 追加尾部标示</span></span><br><span class="line">            <span class="keyword">if</span> len(data) % <span class="number">8</span>:</span><br><span class="line">                data.extend(bytearray(<span class="number">8</span> - len(data) % <span class="number">8</span>))      <span class="comment"># 长度补全</span></span><br><span class="line">            new_data = self.cipher.encrypt(str(data))</span><br><span class="line">            <span class="keyword">with</span> open(new_fn, <span class="string">'wb'</span>) <span class="keyword">as</span> new_f:</span><br><span class="line">                new_f.write(new_data)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 解密</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decrypt</span><span class="params">(self, fn, new_fn)</span>:</span></span><br><span class="line">        self.cipher = DES.new(EsCBC.key, EsCBC.mode, EsCBC.vi)</span><br><span class="line">        <span class="keyword">with</span> open(fn, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            data = f.read()</span><br><span class="line">            new_data = self.cipher.decrypt(data)</span><br><span class="line">            new_data = bytearray(new_data)</span><br><span class="line">            new_data = new_data.rstrip(<span class="string">b'\x00'</span>)</span><br><span class="line">            <span class="keyword">if</span> (chr(new_data[<span class="number">-4</span>]), chr(new_data[<span class="number">-3</span>]), chr(new_data[<span class="number">-2</span>]), chr(new_data[<span class="number">-1</span>])) != (<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'D'</span>):</span><br><span class="line">                <span class="keyword">raise</span> SyntaxError, <span class="string">'zip error'</span></span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            new_data = str(new_data[:<span class="number">-4</span>])</span><br><span class="line">            new_datalen = EsCBC.bytestoint(new_data[<span class="number">-4</span>:])</span><br><span class="line">            new_data = str(new_data[:<span class="number">-4</span>])</span><br><span class="line">            <span class="comment"># print new_datalen</span></span><br><span class="line">            <span class="comment"># print new_data.encode('hex')</span></span><br><span class="line">            <span class="keyword">with</span> open(new_fn, <span class="string">'wb'</span>) <span class="keyword">as</span> new_f:</span><br><span class="line">                new_f.write(new_data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    cbc = EsCBC()</span><br><span class="line">    cbc.encrypt(<span class="string">'1.txt'</span>, <span class="string">'2.txt'</span>)</span><br><span class="line">    cbc.decrypt(<span class="string">'2.txt'</span>, <span class="string">'3.txt'</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      pymysql
    
    </summary>
    
      <category term="Python" scheme="/categories/Python/"/>
    
    
      <category term="AES, CBC, CFB" scheme="/tags/AES-CBC-CFB/"/>
    
  </entry>
  
  <entry>
    <title>Session</title>
    <link href="/2019/11/16/PHP/SESSION/"/>
    <id>/2019/11/16/PHP/SESSION/</id>
    <published>2019-11-16T10:06:07.000Z</published>
    <updated>2019-11-16T10:06:07.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="登陆"><a href="#登陆" class="headerlink" title="登陆"></a>登陆</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">check();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(substr($_SERVER[<span class="string">'REMOTE_ADDR'</span>], <span class="number">0</span>, <span class="number">10</span>) == <span class="string">'192.168.1.'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 内网放行</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!$_SESSION[<span class="string">'is_login'</span>] == <span class="string">'1'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 已经登陆: 调整Session过期时间</span></span><br><span class="line">        ini_set(<span class="string">'session.gc_maxlifetime'</span>, <span class="string">"86400"</span>); <span class="comment">// 秒</span></span><br><span class="line">        ini_set(<span class="string">"session.cookie_lifetime"</span>,<span class="string">"86400"</span>); <span class="comment">// 秒</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 强制跳转到login</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'&lt;script&gt;window.location.href="./login.html";&lt;/script&gt;'</span>;</span><br><span class="line">    <span class="keyword">die</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ($_REQUEST[<span class="string">'name'</span>] == <span class="string">'...'</span> &amp;&amp; $_REQUEST[<span class="string">'pwd'</span>] == <span class="string">'***'</span>) &#123;</span><br><span class="line">    <span class="comment">// 标记登陆</span></span><br><span class="line">    $_SESSION[<span class="string">'is_login'</span>] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Session, login
    
    </summary>
    
      <category term="PHP" scheme="/categories/PHP/"/>
    
    
      <category term="Session" scheme="/tags/Session/"/>
    
  </entry>
  
  <entry>
    <title>JQuery</title>
    <link href="/2019/11/14/Html/JQuery/"/>
    <id>/2019/11/14/Html/JQuery/</id>
    <published>2019-11-14T11:04:37.000Z</published>
    <updated>2019-11-14T11:04:37.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ajaxGet</span>(<span class="params">url, data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> _this = <span class="keyword">this</span>;</span><br><span class="line">    $.<span class="keyword">get</span>(url, data, function (data, status) &#123;</span><br><span class="line">        myPrint(<span class="string">"状态："</span> + status);</span><br><span class="line">        myPrint(<span class="string">"数据："</span> + data);</span><br><span class="line">        <span class="comment">// 这里的this是ajax的this, 要使用外层this需要自己定义变量保存</span></span><br><span class="line">        _this.content = data;</span><br><span class="line">    &#125;, <span class="string">"json"</span>)  <span class="comment">// 指定 dataType: "json"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ajaxPost</span>(<span class="params">url, data, param=&#123;&#125;</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(param)</span><br><span class="line">        url += <span class="string">"?"</span> + $.param(param);</span><br><span class="line">    $.post(url, data, <span class="function"><span class="keyword">function</span> (<span class="params">data, status</span>) </span>&#123;</span><br><span class="line">        myPrint(<span class="string">"状态："</span> + status);</span><br><span class="line">        myPrint(<span class="string">"数据："</span> + data);</span><br><span class="line">    &#125;, <span class="string">"json"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> d = &#123;</span><br><span class="line">    a: <span class="string">"1"</span>,</span><br><span class="line">    b: <span class="string">"2"</span>,</span><br><span class="line">&#125;;</span><br><span class="line">ajaxGet(<span class="string">'/uri'</span>, d);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 重写，达到事件拦截的效果</span></span><br><span class="line"><span class="comment">/** 简单封装: 仅失败处理</span></span><br><span class="line"><span class="comment"> * 成功: 打印顺序 -&gt; success -&gt; done</span></span><br><span class="line"><span class="comment"> * 失败: 打印顺序 -&gt; error -&gt; --fail-- -&gt; fail</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">$</span>) </span>&#123;</span><br><span class="line">    $._ajax = $.ajax;    <span class="comment">// 备份</span></span><br><span class="line">    $.ajax = <span class="literal">undefined</span>;</span><br><span class="line">    $.ajax = <span class="function"><span class="keyword">function</span> (<span class="params">url, options</span>) </span>&#123;    <span class="comment">// 重写</span></span><br><span class="line">        <span class="keyword">return</span> $._ajax(url, options).fail( <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"--fail--"</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;)(jQuery);</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 事件封装</span></span><br><span class="line"><span class="comment"> * 成功顺序: _beforeSend -&gt; _success -&gt; success -&gt; done -&gt; _complete</span></span><br><span class="line"><span class="comment"> * 失败顺序: _beforeSend -&gt; _error -&gt; error -&gt; fail -&gt; _complete</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">$</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//首先备份下jquery的ajax方法</span></span><br><span class="line">    <span class="keyword">const</span> _ajax = $.ajax;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重写jquery的ajax方法</span></span><br><span class="line">    $.ajax = <span class="function"><span class="keyword">function</span> (<span class="params">opt</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> success = opt.success;</span><br><span class="line">        <span class="keyword">const</span> error = opt.error;</span><br><span class="line">        <span class="keyword">const</span> _opt = $.extend(opt, &#123;</span><br><span class="line">            error: <span class="function"><span class="keyword">function</span> (<span class="params">XMLHttpRequest, textStatus, errorThrown</span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'_error'</span>);</span><br><span class="line">                <span class="keyword">if</span> (error)</span><br><span class="line">                    error(XMLHttpRequest, textStatus, errorThrown);</span><br><span class="line">            &#125;,</span><br><span class="line">            success: <span class="function"><span class="keyword">function</span> (<span class="params">data, textStatus</span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'_success'</span>);</span><br><span class="line">                <span class="keyword">if</span> (success)</span><br><span class="line">                    success(data, textStatus);</span><br><span class="line">            &#125;,</span><br><span class="line">            beforeSend: <span class="function"><span class="keyword">function</span> (<span class="params">XHR</span>) </span>&#123;</span><br><span class="line">                <span class="comment">// 提交前回调方法</span></span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'_beforeSend'</span>);</span><br><span class="line">            &#125;,</span><br><span class="line">            complete: <span class="function"><span class="keyword">function</span> (<span class="params">XHR, TS</span>) </span>&#123;</span><br><span class="line">                <span class="comment">// 请求完成后回调函数 (请求成功或失败之后均调用)。</span></span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'_complete'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> _ajax(_opt);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;)(jQuery);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ajax 事件处理</span></span><br><span class="line"><span class="comment"> * 失败顺序: fail -&gt; document -&gt; window</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">$(<span class="built_in">window</span>).ajaxError(<span class="function"><span class="keyword">function</span> (<span class="params">event, XMLHttpRequest, ajaxOptions</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'ajaxError this === window'</span>, <span class="keyword">this</span> === <span class="built_in">window</span>);</span><br><span class="line">&#125;);</span><br><span class="line">$(<span class="built_in">document</span>).ajaxError(<span class="function"><span class="keyword">function</span> (<span class="params">event, XMLHttpRequest, ajaxOptions</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'ajaxError this === document'</span>, <span class="keyword">this</span> === <span class="built_in">document</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$.ajax(<span class="string">'test.php'</span>).fail(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"fail"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$.ajax(&#123;</span><br><span class="line">    url: <span class="string">"../test.php"</span>,</span><br><span class="line">    type: <span class="string">"GET"</span>,</span><br><span class="line">    success: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'success'</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    error: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'error'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).done(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'done'</span>);</span><br><span class="line">&#125;).fail(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'fail'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      JQuery
    
    </summary>
    
      <category term="JS" scheme="/categories/JS/"/>
    
    
      <category term="JQuery" scheme="/tags/JQuery/"/>
    
  </entry>
  
  <entry>
    <title>JS基础</title>
    <link href="/2019/11/14/Html/JS%E5%9F%BA%E7%A1%80/"/>
    <id>/2019/11/14/Html/JS基础/</id>
    <published>2019-11-14T11:04:37.000Z</published>
    <updated>2019-11-14T11:04:37.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 模板字符串</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="string">'hello'</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="string">`<span class="subst">$&#123;a&#125;</span> world`</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// json字符串 -&gt; js对象</span></span><br><span class="line">js_obj = <span class="built_in">JSON</span>.parse(json_str);</span><br><span class="line"></span><br><span class="line"><span class="comment">// encodeUrl</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">urlEncode</span>(<span class="params">param</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> paramStr = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> k <span class="keyword">in</span> param) &#123;</span><br><span class="line">        paramStr += paramStr ? <span class="string">'&amp;'</span>:<span class="string">''</span>;</span><br><span class="line">        paramStr += <span class="built_in">encodeURIComponent</span>(k) + <span class="string">'='</span> + <span class="built_in">encodeURIComponent</span>(param[k]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> paramStr;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 日期</span></span><br><span class="line"><span class="keyword">let</span> d1 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'2010-02-12'</span>);</span><br><span class="line">d1.setFullYear(d.getFullYear()+<span class="number">10</span>);</span><br><span class="line"><span class="comment">// 毫秒</span></span><br><span class="line"><span class="keyword">let</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="built_in">console</span>.log(date, date.getMilliseconds());</span><br><span class="line"><span class="comment">// vux的日期格式化</span></span><br><span class="line"><span class="keyword">import</span> &#123;dateFormat&#125; <span class="keyword">from</span> <span class="string">'vux'</span>;</span><br><span class="line"><span class="keyword">let</span> d2 = dateFormat(d, <span class="string">'YYYY-MM-DD'</span>);</span><br></pre></td></tr></table></figure><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 遍历</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> j = <span class="number">0</span>,len=arr.length; j &lt; len; j++) &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 清空</span></span><br><span class="line">arr.splice(<span class="number">0</span>,arr.length);</span><br></pre></td></tr></table></figure><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;<span class="string">'0'</span>:<span class="string">'a'</span>,<span class="string">'1'</span>:<span class="string">'b'</span>,<span class="string">'2'</span>:<span class="string">'c'</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> obj) &#123;</span><br><span class="line">     <span class="built_in">console</span>.log(i,<span class="string">":"</span>,obj[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      基础
    
    </summary>
    
      <category term="JS" scheme="/categories/JS/"/>
    
    
      <category term="基础" scheme="/tags/%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>数据库</title>
    <link href="/2019/11/11/Python/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>/2019/11/11/Python/数据库/</id>
    <published>2019-11-11T06:27:12.000Z</published>
    <updated>2019-11-11T06:27:12.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><code>pip install pymysql</code></p><h2 id="常规使用"><a href="#常规使用" class="headerlink" title="常规使用"></a>常规使用</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接</span></span><br><span class="line">conn = pymysql.connect(</span><br><span class="line">  host=db_info[<span class="string">'ip'</span>], user=db_info[<span class="string">'user'</span>], passwd=db_info[<span class="string">'password'</span>],</span><br><span class="line">  port=port, db=db_info[<span class="string">'dbname'</span>], charset=<span class="string">'utf8'</span>)</span><br><span class="line">conn.autocommit(autocommit)   <span class="comment"># 是否自动提交</span></span><br><span class="line">cur = conn.cursor()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 语句执行</span></span><br><span class="line">cur.execute(sql)</span><br><span class="line"><span class="comment"># 事务提交</span></span><br><span class="line">conn.commit()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Select 结果</span></span><br><span class="line">cur.fetchone()</span><br><span class="line">cur.fetchmany(num)</span><br><span class="line">cur.fetchall()</span><br><span class="line"></span><br><span class="line"><span class="comment"># insert / update / delete 影响个数</span></span><br><span class="line">cur.rowcount</span><br><span class="line">cur.rownumber</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      pymysql
    
    </summary>
    
      <category term="Python" scheme="/categories/Python/"/>
    
    
      <category term="pymysql" scheme="/tags/pymysql/"/>
    
  </entry>
  
  <entry>
    <title>web.py</title>
    <link href="/2019/11/11/Python/Web/web.py/"/>
    <id>/2019/11/11/Python/Web/web.py/</id>
    <published>2019-11-11T05:51:44.000Z</published>
    <updated>2019-11-11T05:51:44.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><code>pip install web.py</code></p><h2 id="hello-world"><a href="#hello-world" class="headerlink" title="hello world"></a>hello world</h2><ul><li>端口: 默认<code>8080</code>, 可以通过命令行修改 <code>python test.py 8081</code></li><li>发现HTTP请求时，创建新进程，所以<strong>脚本更新，即时生效</strong></li></ul><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Hello world</span></span><br><span class="line"><span class="keyword">import</span> web</span><br><span class="line"></span><br><span class="line">urls = (<span class="string">"/.*"</span>, <span class="string">"hello"</span>)   <span class="comment"># 与类名相对应，大小写敏感</span></span><br><span class="line">app = web.application(urls, globals())</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">hello</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">GET</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'Hello, world!'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><h2 id="常规用法"><a href="#常规用法" class="headerlink" title="常规用法"></a>常规用法</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">hello</span>:</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">GET</span><span class="params">(self)</span>:</span></span><br><span class="line">    data = web.input()  <span class="comment"># URL上报所有参数，包含post，get，表单</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Hello, world!'</span></span><br></pre></td></tr></table></figure><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">db = web.database(</span><br><span class="line">    dbn=<span class="string">'mysql'</span>, host=<span class="string">'localhost'</span>, port=<span class="number">3306</span>,</span><br><span class="line">    db=<span class="string">'test_db'</span>, user=<span class="string">'test'</span>, passwd=<span class="string">'123456'</span>)</span><br><span class="line"></span><br><span class="line">data = db.select(<span class="string">"test_table"</span>)</span><br><span class="line"><span class="keyword">for</span> d <span class="keyword">in</span> data:</span><br><span class="line">    print(d[<span class="string">'name'</span>])</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      web.py
    
    </summary>
    
      <category term="Python" scheme="/categories/Python/"/>
    
    
      <category term="web.py" scheme="/tags/web-py/"/>
    
  </entry>
  
  <entry>
    <title>Django</title>
    <link href="/2019/11/09/Python/Web/django/"/>
    <id>/2019/11/09/Python/Web/django/</id>
    <published>2019-11-09T06:25:09.000Z</published>
    <updated>2019-11-09T06:25:09.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><code>pip install Django</code></p><ul><li>命令行测试<code>python -m django --version</code></li><li>Py脚本测试</li></ul><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># py测试安装是否成功</span></span><br><span class="line"><span class="keyword">import</span> django</span><br><span class="line">django.get_version()</span><br></pre></td></tr></table></figure><h2 id="HelloWorld"><a href="#HelloWorld" class="headerlink" title="HelloWorld"></a>HelloWorld</h2><ul><li>创建项目：<code>django-admin startproject mysite</code></li><li>启动项目：<code>python manage.py runserver</code><ul><li>指定IP端口：<code>python manage.py runserver 127.0.0.1:8000</code></li></ul></li><li>创建视图</li></ul><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># hello.py</span></span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">"Hello world ! "</span>)</span><br></pre></td></tr></table></figure><ul><li>映射路径<ul><li>修改：urls.py</li></ul></li></ul><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导入 hello</span></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> hello</span><br><span class="line"><span class="comment"># 映射路径</span></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">''</span>, hello.hello),</span><br><span class="line">]</span><br><span class="line"><span class="comment"># 映射说明：正则写法</span></span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> re_path</span><br><span class="line">re_path(<span class="string">'^hello.*$'</span>, view.hello)    <span class="comment"># 所有hello开头的URI, 均映射到view.hello</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Django
    
    </summary>
    
      <category term="Python" scheme="/categories/Python/"/>
    
    
      <category term="Django" scheme="/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>进程 / 线程</title>
    <link href="/2019/11/08/Python/%E7%BA%BF%E7%A8%8B-%E8%BF%9B%E7%A8%8B/"/>
    <id>/2019/11/08/Python/线程-进程/</id>
    <published>2019-11-08T09:43:31.000Z</published>
    <updated>2019-11-08T09:43:31.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h2><h3 id="multiprocessing"><a href="#multiprocessing" class="headerlink" title="multiprocessing"></a>multiprocessing</h3><ul><li>在UNIX平台上，当某个进程终结之后，该进程需要被其父进程调用wait，否则进程成为僵尸进程(Zombie)。所以，有必要对每个Process对象调用join()方法 (实际上等同于wait)。</li><li>multiprocessing提供的threading包中没有的IPC(比如Pipe和Queue)，效率上更高。</li><li>应优先考虑Pipe和Queue，避免使用Lock/Event/Semaphore/Condition等同步方式 (因为它们占据的不是用户进程的资源)。</li><li>所有进程的任务在打印时都会向同一个标准输出(stdout)输出</li></ul><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: gbk -*-</span></span><br><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(i)</span>:</span></span><br><span class="line">    print(<span class="string">"start"</span>, i)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">"end"</span>, i)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">start</span><span class="params">()</span>:</span></span><br><span class="line">    pros = list()</span><br><span class="line">    <span class="comment"># 创建进程池</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        pros.append(multiprocessing.Process(target=func, args=(i, )))</span><br><span class="line">    <span class="comment"># 启动</span></span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> pros:</span><br><span class="line">        p.start()</span><br><span class="line">    <span class="comment"># 活动子进程</span></span><br><span class="line">    print(multiprocessing.active_children())</span><br><span class="line">    <span class="comment"># 等待终止</span></span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> pros:</span><br><span class="line">        p.join()</span><br><span class="line">        <span class="comment"># 返回值</span></span><br><span class="line">        print(<span class="string">'%15s.exitcode = %s'</span> % (p.name, p.exitcode))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    start()</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 是否活动</span></span><br><span class="line">p.is_alive()</span><br><span class="line"><span class="comment"># 强制终止</span></span><br><span class="line">p.terminate()</span><br><span class="line"><span class="comment"># 返回值</span></span><br><span class="line">p.join()</span><br><span class="line">print(<span class="string">'%15s.exitcode = %s'</span> % (p.name, p.exitcode))</span><br></pre></td></tr></table></figure><ul><li>进程同步：管道，队列</li></ul><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进程安全：管道</span></span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process, Pipe</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(conn)</span>:</span></span><br><span class="line">    conn.send([<span class="number">42</span>, <span class="literal">None</span>, <span class="string">'hello'</span>])</span><br><span class="line">    conn.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    parent_conn, child_conn = Pipe()</span><br><span class="line">    p = Process(target=f, args=(child_conn,))</span><br><span class="line">    p.start()</span><br><span class="line">    <span class="keyword">print</span> parent_conn.recv()   <span class="comment"># prints "[42, None, 'hello']"</span></span><br><span class="line">    p.join()</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进程安全：队列</span></span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process, Queue</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(q)</span>:</span></span><br><span class="line">    <span class="comment">#队列满时阻塞</span></span><br><span class="line">    q.put([<span class="number">42</span>, <span class="literal">None</span>, <span class="string">'hello'</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    q = Queue(<span class="number">10</span>)       <span class="comment">#队列最大存储10条数据, 不指定则代表无限定</span></span><br><span class="line">    p = Process(target=f, args=(q,))</span><br><span class="line">    p.start()</span><br><span class="line">    <span class="keyword">print</span> q.get()       <span class="comment">#无数据时阻塞</span></span><br><span class="line">    p.join()</span><br></pre></td></tr></table></figure><h3 id="concurrent-futures-ProcessPoolExecutor"><a href="#concurrent-futures-ProcessPoolExecutor" class="headerlink" title="concurrent.futures.ProcessPoolExecutor"></a>concurrent.futures.ProcessPoolExecutor</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 批量创建：map机制, 自动等待结束</span></span><br><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ProcessPoolExecutor</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">(params)</span>:</span></span><br><span class="line">    time.sleep(<span class="number">0.1</span>)</span><br><span class="line">    print(params)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    start = time.time()</span><br><span class="line">    <span class="keyword">with</span> ProcessPoolExecutor(max_workers=<span class="number">2</span>) <span class="keyword">as</span> pool:</span><br><span class="line">        results = list(pool.map(fun, [(i,) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)]))</span><br><span class="line">        print(<span class="string">'Took %.3f seconds.'</span> % (time.time() - start))</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 单个创建：submit机制, 程序控制结束</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    <span class="keyword">with</span> ProcessPoolExecutor(max_workers=<span class="number">2</span>) <span class="keyword">as</span> pool:</span><br><span class="line">        futures = [pool.submit(fun, (i, )) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># result等待结束, 并获得返回值</span></span><br><span class="line">        print(<span class="string">'results: %s'</span> % [future.result() <span class="keyword">for</span> future <span class="keyword">in</span> futures])</span><br><span class="line"></span><br><span class="line">        <span class="comment"># wait等待全部结束: ALL_COMPLETED, FIRST_COMPLETED, FIRST_EXCEPTION</span></span><br><span class="line">        <span class="comment"># 返回(done, unfinished)，分别为已完成/未完成future对象列表</span></span><br><span class="line">        done, unfinished = wait(futures, timeout=<span class="number">2</span>, return_when=concurrent.futures.ALL_COMPLETED)</span><br></pre></td></tr></table></figure><h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><h3 id="threading"><a href="#threading" class="headerlink" title="threading"></a>threading</h3><ul><li><code>threading.currentThread()</code>: 返回当前的线程变量。</li><li><code>threading.enumerate()</code>: 返回一个包含正在运行的线程的list。正在运行指线程启动后、结束前，不包括启动前和终止后的线程。</li><li><code>threading.activeCount()</code>: 返回正在运行的线程数量，与<code>len(threading.enumerate())</code>有相同的结果。</li><li>线程对象方法：<ul><li><code>isAlive()</code>: 返回线程是否活动的。</li><li><code>getName()</code>: 返回线程名。</li><li><code>setName()</code>: 设置线程名。</li></ul></li><li>线程队列<code>import queue</code><ul><li><code>q = queue.Queue(10)</code> 创建同步的、线程安全的队列</li><li><code>qsize()</code> 返回队列的大小</li><li><code>empty()</code> 如果队列为空，返回True,反之False</li><li><code>full()</code> 如果队列满了，返回True,反之False, full 与 maxsize 大小对应</li><li><code>get([block[, timeout]])</code> 获取队列，timeout等待时间</li><li><code>get_nowait()</code> 相当Queue.get(False)</li><li><code>put(item)</code> 写入队列，timeout等待时间</li><li><code>put_nowait(item)</code> 相当Queue.put(item, False)</li><li><code>task_done()</code> 在完成一项工作之后，Queue.task_done()函数向任务已经完成的队列发送一个信号</li><li><code>join()</code> 实际上意味着等到队列为空，再执行别的操作</li></ul></li></ul><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">(i)</span>:</span></span><br><span class="line">    time.sleep(<span class="number">0.1</span>)</span><br><span class="line">    print(i)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    t = threading.Thread(target=hello, args=(<span class="number">1</span>,))</span><br><span class="line">    t.setDaemon(<span class="literal">True</span>)   <span class="comment"># 设置跟随父线程</span></span><br><span class="line">    t.setName(<span class="string">'t'</span>)      <span class="comment"># 设置线程名称</span></span><br><span class="line">    t.start()</span><br><span class="line">    t.join()</span><br><span class="line">    print(t.getName())      <span class="comment"># 获取线程名称</span></span><br><span class="line">    print(t.isAlive())      <span class="comment"># 是否活动</span></span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 继承模式，创建自己的线程类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, lock)</span>:</span></span><br><span class="line">        threading.Thread.__init__(self)</span><br><span class="line">        self.name = name</span><br><span class="line">        self.lock = lock</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"开始线程："</span> + self.name)</span><br><span class="line">        time.sleep(<span class="number">0.1</span>)</span><br><span class="line">        self.lock.acquire()     <span class="comment"># 锁定</span></span><br><span class="line">        print(<span class="string">"退出线程："</span> + self.name)</span><br><span class="line">        self.lock.release()     <span class="comment"># 解锁</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    lock = threading.Lock()   <span class="comment"># 线程锁</span></span><br><span class="line">    ts = [MyThread(<span class="string">"Thread-"</span>+str(i), lock) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)]</span><br><span class="line">    <span class="comment"># 设置跟随父线程</span></span><br><span class="line">    [t.setDaemon(<span class="literal">True</span>) <span class="keyword">for</span> t <span class="keyword">in</span> ts]</span><br><span class="line">    [t.start() <span class="keyword">for</span> t <span class="keyword">in</span> ts]</span><br><span class="line">    [t.join() <span class="keyword">for</span> t <span class="keyword">in</span> ts]</span><br></pre></td></tr></table></figure><h3 id="concurrent-futures-ThreadPoolExecutor"><a href="#concurrent-futures-ThreadPoolExecutor" class="headerlink" title="concurrent.futures.ThreadPoolExecutor"></a>concurrent.futures.ThreadPoolExecutor</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># map机制，支持submit控制单个进程，见concurrent.futures.ProcessPoolExecutor例子</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ThreadPoolExecutor</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">(params)</span>:</span></span><br><span class="line">    time.sleep(<span class="number">0.1</span>)</span><br><span class="line">    print(params)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    start = time.time()</span><br><span class="line">    <span class="keyword">with</span> ThreadPoolExecutor(max_workers=<span class="number">5</span>) <span class="keyword">as</span> pool:</span><br><span class="line">        results = list(pool.map(fun, [(i,) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)]))</span><br><span class="line">        print(<span class="string">'Took %.3f seconds.'</span> % (time.time() - start))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      多进程, 多线程
    
    </summary>
    
      <category term="Python" scheme="/categories/Python/"/>
    
    
      <category term="进程" scheme="/tags/%E8%BF%9B%E7%A8%8B/"/>
    
      <category term="线程" scheme="/tags/%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>剪切板</title>
    <link href="/2019/11/08/Python/%E7%B3%BB%E7%BB%9F/%E5%89%AA%E5%88%87%E6%9D%BF/"/>
    <id>/2019/11/08/Python/系统/剪切板/</id>
    <published>2019-11-08T09:36:20.000Z</published>
    <updated>2019-11-08T09:42:07.785Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写入"><a href="#写入" class="headerlink" title="写入"></a>写入</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding=gbk</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">清空剪切板，读取 / 写入字符串：win10, python3 校验有效</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">user32 = windll.user32</span><br><span class="line">kernel32 = windll.kernel32</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_clipboard</span><span class="params">()</span>:</span></span><br><span class="line">    user32.OpenClipboard(c_int(<span class="number">0</span>))</span><br><span class="line">    contents = c_char_p(user32.GetClipboardData(c_int(<span class="number">1</span>))).value</span><br><span class="line">    user32.CloseClipboard()</span><br><span class="line">    <span class="keyword">return</span> contents</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">empty_clipboard</span><span class="params">()</span>:</span></span><br><span class="line">    user32.OpenClipboard(c_int(<span class="number">0</span>))</span><br><span class="line">    user32.EmptyClipboard()</span><br><span class="line">    user32.CloseClipboard()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_clipboard</span><span class="params">(data)</span>:</span></span><br><span class="line">    <span class="comment"># 打开剪切板</span></span><br><span class="line">    user32.OpenClipboard(c_int(<span class="number">0</span>))</span><br><span class="line">    <span class="comment"># 清空</span></span><br><span class="line">    user32.EmptyClipboard()</span><br><span class="line">    <span class="comment"># 写入</span></span><br><span class="line">    alloc = kernel32.GlobalAlloc(<span class="number">0x2000</span>, len(bytes(data, encoding=<span class="string">'utf_8'</span>)) + <span class="number">1</span>)</span><br><span class="line">    lock = kernel32.GlobalLock(alloc)</span><br><span class="line">    cdll.msvcrt.strcpy(c_char_p(lock), bytes(data, encoding=<span class="string">'utf_8'</span>))</span><br><span class="line">    kernel32.GlobalUnlock(alloc)</span><br><span class="line">    user32.SetClipboardData(c_int(<span class="number">1</span>), alloc)</span><br><span class="line">    <span class="comment"># 关闭</span></span><br><span class="line">    user32.CloseClipboard()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># 写入</span></span><br><span class="line">    set_clipboard(datetime.datetime.now().strftime(<span class="string">'%Y-%m-%d %H:%M:%S'</span>))</span><br><span class="line">    <span class="comment"># 获取</span></span><br><span class="line">    text_raw = get_clipboard()</span><br><span class="line">    print(<span class="string">'&#123;0&#125; &#123;1&#125;'</span>.format(text_raw, type(text_raw)))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      剪切板
    
    </summary>
    
      <category term="Python" scheme="/categories/Python/"/>
    
    
      <category term="剪切板" scheme="/tags/%E5%89%AA%E5%88%87%E6%9D%BF/"/>
    
  </entry>
  
  <entry>
    <title>PDF</title>
    <link href="/2019/11/08/Python/%E6%96%87%E4%BB%B6/pdf/"/>
    <id>/2019/11/08/Python/文件/pdf/</id>
    <published>2019-11-08T08:35:15.000Z</published>
    <updated>2019-11-08T08:35:15.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="pdfminer"><a href="#pdfminer" class="headerlink" title="pdfminer"></a>pdfminer</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># python2</span></span><br><span class="line">pip2 install pdfminer</span><br><span class="line"><span class="comment"># python3</span></span><br><span class="line">pip3 install pdfminer3k</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: gbk -*-</span></span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> StringIO</span><br><span class="line"><span class="keyword">from</span> pdfminer.pdfinterp <span class="keyword">import</span> PDFResourceManager</span><br><span class="line"><span class="keyword">from</span> pdfminer.pdfinterp <span class="keyword">import</span> process_pdf</span><br><span class="line"><span class="keyword">from</span> pdfminer.converter <span class="keyword">import</span> TextConverter</span><br><span class="line"><span class="keyword">from</span> pdfminer.layout <span class="keyword">import</span> LAParams</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_from_pdf</span><span class="params">(file_path)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(file_path, <span class="string">'rb'</span>) <span class="keyword">as</span> file:</span><br><span class="line">        resource_manager = PDFResourceManager()</span><br><span class="line">        return_str = StringIO()</span><br><span class="line">        lap_params = LAParams()</span><br><span class="line"></span><br><span class="line">        device = TextConverter(</span><br><span class="line">            resource_manager, return_str, laparams=lap_params)</span><br><span class="line">        process_pdf(resource_manager, device, file)</span><br><span class="line">        device.close()</span><br><span class="line"></span><br><span class="line">        content = return_str.getvalue()</span><br><span class="line">        return_str.close()</span><br><span class="line">        <span class="keyword">return</span> text_to_word(content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">text_to_word</span><span class="params">(content)</span>:</span></span><br><span class="line">    lines = []</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> content.split(<span class="string">'\n'</span>):</span><br><span class="line">        lines.append(remove_control_characters(line) + <span class="string">'\n'</span>)</span><br><span class="line">    <span class="keyword">return</span> lines</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">remove_control_characters</span><span class="params">(content)</span>:</span></span><br><span class="line">    mpa = dict.fromkeys(range(<span class="number">32</span>))</span><br><span class="line">    <span class="keyword">return</span> content.translate(mpa)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    lines = read_from_pdf(<span class="string">'111.pdf'</span>)</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'111.txt'</span>, <span class="string">'w+'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">            f.write(line)</span><br><span class="line">    print(<span class="string">'ok'</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      PDF
    
    </summary>
    
      <category term="Python" scheme="/categories/Python/"/>
    
    
      <category term="PDF" scheme="/tags/PDF/"/>
    
  </entry>
  
  <entry>
    <title>基础</title>
    <link href="/2019/11/08/Python/%E5%9F%BA%E7%A1%80/"/>
    <id>/2019/11/08/Python/基础/</id>
    <published>2019-11-08T05:15:37.000Z</published>
    <updated>2019-11-08T05:15:37.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li><strong>pycharm</strong><ul><li>见PHP -&gt; PHPStorm</li></ul></li><li>快捷键<ul><li>关闭 close: <code>Ctrl+F4</code>, 补充<code>Ctrl+W</code></li><li>运行 run: <code>Ctrl+Shift+F10</code> + <code>Shift+F10</code></li><li><code>Editor</code>-&gt;<code>Inspections</code>-&gt;<code>Python</code><ul><li>取消选中<code>Method may be static</code>, 静态函数</li><li>取消选中<code>Shadowing names from outer scopes</code>, 重复定义(外定义)</li><li>取消选中<code>Too broad exception clauses</code>, 模糊的exception</li></ul></li></ul></li><li>新建文件<ul><li><code>File and Code Templates</code>-&gt;<code>Python Script</code>-&gt;清空</li></ul></li></ul><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: gbk -*-</span></span><br><span class="line"><span class="keyword">import</span> os,sys,traceback</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">version = <span class="string">""</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></span><br><span class="line">  <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">  test()</span><br></pre></td></tr></table></figure><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><h2 id="时间"><a href="#时间" class="headerlink" title="时间"></a>时间</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time, datetime</span><br><span class="line"><span class="comment"># 当前时间</span></span><br><span class="line">time.time()                 <span class="comment"># 1574157735.59</span></span><br><span class="line">time.localtime()            <span class="comment"># time:struct_time(tm_year=2019, ..., tm_hour=18, ...)</span></span><br><span class="line">datetime.datetime.now()     <span class="comment"># datetime.datetime(2019, 11, 19, 18, 3, 6, 764000)</span></span><br><span class="line"><span class="comment"># 指定时间</span></span><br><span class="line">d1 = datetime.datetime(<span class="number">1970</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>)                  <span class="comment"># 默认本地时间</span></span><br><span class="line">d2 = datetime.datetime(<span class="number">2016</span>,<span class="number">3</span>,<span class="number">18</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,pytz.utc)        <span class="comment"># 指明是格林时间</span></span><br><span class="line"><span class="comment"># 延迟</span></span><br><span class="line">time.sleep(<span class="number">1</span>)   <span class="comment"># 休眠1秒</span></span><br><span class="line">time.sleep(<span class="number">0.1</span>) <span class="comment"># 休眠0.1秒</span></span><br></pre></td></tr></table></figure><h3 id="格式转换"><a href="#格式转换" class="headerlink" title="格式转换"></a>格式转换</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># datetime -&gt; str</span></span><br><span class="line"><span class="keyword">print</span> datetime.datetime.now().strftime(<span class="string">'%Y-%m-%d %H:%M:%S'</span>)</span><br><span class="line"><span class="keyword">print</span> datetime.datetime.strftime(datetime.datetime.now(), <span class="string">'%Y-%m-%d %H:%M:%S'</span>)</span><br><span class="line"><span class="comment"># str -&gt; datetime</span></span><br><span class="line">datetime.datetime.strptime(<span class="string">"2016-05-05 05:05:05"</span>, <span class="string">"%Y-%m-%d %H:%M:%S"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># time -&gt; struct_time</span></span><br><span class="line"><span class="keyword">print</span> time.strftime(<span class="string">"%Y-%m-%d %H:%M:%S"</span>, time.localtime())</span><br><span class="line"><span class="keyword">print</span> time.strftime(<span class="string">'%Y-%m-%d %H:%M:%S'</span>, time.gmtime(time.time()))</span><br><span class="line"><span class="comment"># struct_time -&gt; time</span></span><br><span class="line">time.mktime(t)</span><br><span class="line"><span class="comment"># str -&gt; struct_time</span></span><br><span class="line">time.strptime(<span class="string">"time:2009-08-08"</span>, <span class="string">"time:%Y-%m-%d"</span>)</span><br><span class="line">time.strptime(<span class="string">"2016-05-05 05:05:05"</span>, <span class="string">"%Y-%m-%d %H:%M:%S"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># datetime -&gt; struct_time</span></span><br><span class="line"><span class="keyword">print</span> time.strftime(<span class="string">'%Y-%m-%d %H:%M:%S'</span>, datetime.datetime.utcnow().timetuple())  <span class="comment"># utc才是时间戳</span></span><br><span class="line"><span class="keyword">print</span> time.strftime(<span class="string">'%Y-%m-%d %H:%M:%S'</span>, datetime.datetime.now().utctimetuple())</span><br><span class="line"></span><br><span class="line"><span class="comment"># time -&gt; datetime</span></span><br><span class="line">datetime.datetime.fromtimestamp(time.time())</span><br><span class="line">datetime.datetime.utcfromtimestamp(time.time())</span><br><span class="line"><span class="comment"># datetime -&gt; struct_time -&gt; time</span></span><br><span class="line">time.mktime(datetime.datetime.now().timetuple())</span><br><span class="line">time.mktime(datetime.datetime.now().utctimetuple())        <span class="comment"># 指明格林时间</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># gmtime 只支持UTC时间, struct_time中指定tm_isdst=0</span></span><br><span class="line"><span class="comment"># mktime 忽略tm_isdst参数, 只支持本地时间, 使用(- time.altzone)调整为UTC时间戳</span></span><br></pre></td></tr></table></figure><h3 id="程序运行时间"><a href="#程序运行时间" class="headerlink" title="程序运行时间"></a>程序运行时间</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">timer</span><span class="params">(func, *pargs)</span>:</span></span><br><span class="line">    start = time.clock()</span><br><span class="line">    ret = func(*pargs)</span><br><span class="line">    elapsed = time.clock() - start</span><br><span class="line">    <span class="keyword">return</span> (elapsed, ret)</span><br></pre></td></tr></table></figure><h3 id="时差"><a href="#时差" class="headerlink" title="时差"></a>时差</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># datetime.timedelta: 内部存储days，seconds，microseconds, 可直接访问变量</span></span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line">ti1 = datetime.datetime.now()</span><br><span class="line">ti2 = datetime.datetime.now()</span><br><span class="line"><span class="comment"># 时差</span></span><br><span class="line">t=ti2-ti1   <span class="comment"># datetime.timedelta(0, 0, 1000)</span></span><br><span class="line">t.total_seconds() <span class="comment"># ==&gt; (td.microseconds + (td.seconds + td.days * 24 * 3600) * 10**6) / 10**6</span></span><br><span class="line">str(t)    <span class="comment"># 返回字符串，格式为： [D day[s], ][H]H:MM:SS[.UUUUUU]</span></span><br><span class="line">repr(t)   <span class="comment"># 返回字符串，格式为： datetime.timedelta(D[, S[, U]])</span></span><br><span class="line"></span><br><span class="line">now = datetime.now()</span><br><span class="line">now + datetime.timedelta(seconds=<span class="number">11</span>)</span><br><span class="line">yestoday = now - datetime.timedelta(days=<span class="number">1</span>)</span><br><span class="line">tommorow = now + datetime.timedelta(days=<span class="number">1</span>)</span><br><span class="line">next_year = now + timedelta(days = <span class="number">365</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># datetime.date也可以使用timedelta时间差</span></span><br><span class="line">t = datetime.date.today() - datetime.timedelta(days=<span class="number">30</span>)</span><br><span class="line"><span class="keyword">print</span> t.strftime(<span class="string">'%Y-%m-%d'</span>)</span><br></pre></td></tr></table></figure><h3 id="计时"><a href="#计时" class="headerlink" title="计时"></a>计时</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime, time</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TimeSheet</span>:</span></span><br><span class="line">    <span class="comment"># time_sheet = dict()</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, time_sheet, flag, reset=False)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> reset <span class="keyword">or</span> (flag <span class="keyword">not</span> <span class="keyword">in</span> time_sheet):</span><br><span class="line">            time_sheet[flag] = datetime.timedelta()</span><br><span class="line">        self.time_sheet = time_sheet</span><br><span class="line">        self.flag = flag</span><br><span class="line">        self.t = datetime.datetime.now()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__enter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 创建时开始计时</span></span><br><span class="line">        self.t = datetime.datetime.now()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__exit__</span><span class="params">(self, _, __, ___)</span>:</span></span><br><span class="line">        <span class="comment"># 释放时，计算时差</span></span><br><span class="line">        self.time_sheet[self.flag] += datetime.datetime.now() - self.t</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_time_sheet</span><span class="params">(time_sheet)</span>:</span></span><br><span class="line">    re = []</span><br><span class="line">    <span class="keyword">for</span> flag <span class="keyword">in</span> time_sheet:</span><br><span class="line">        re.append(<span class="string">'%s: %s'</span> % (flag, time_sheet[flag]))</span><br><span class="line">    <span class="keyword">return</span> <span class="string">','</span>.join(re)</span><br><span class="line"></span><br><span class="line">time_sheet = &#123;&#125;</span><br><span class="line"><span class="keyword">with</span> TimeSheet(time_sheet, <span class="string">"test"</span>, <span class="literal">True</span>) <span class="keyword">as</span> t:</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">print</span> get_time_sheet(time_sheet)</span><br></pre></td></tr></table></figure><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 随机序列</span></span><br><span class="line">d = [random.randint(<span class="number">0</span>,<span class="number">20</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">20</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列表推导式</span></span><br><span class="line">[i <span class="keyword">for</span> i <span class="keyword">in</span> d <span class="keyword">if</span> i &gt;= <span class="number">0</span>]</span><br><span class="line"><span class="comment"># 过滤：只保留lambda式返回True的项</span></span><br><span class="line">filter(<span class="keyword">lambda</span> x: x&gt;= <span class="number">0</span>, d)</span><br><span class="line"><span class="comment"># 排序</span></span><br><span class="line">sorted(d)</span><br><span class="line">sorted(d, reverse=<span class="literal">True</span>)   <span class="comment"># 反序</span></span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 数组中指定元素出现的次数</span></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line">Counter([<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>])</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 交集</span></span><br><span class="line">set(<span class="string">'abcde'</span>).intersection(set(<span class="string">'cdefg'</span>))</span><br><span class="line"><span class="comment"># 并集</span></span><br><span class="line">set(<span class="string">'abcde'</span>).union(set(<span class="string">'cdefg'</span>))</span><br><span class="line"><span class="comment"># 差集</span></span><br><span class="line">set(<span class="string">'abcde'</span>).difference(set(<span class="string">'cdefg'</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"><span class="comment"># 累积</span></span><br><span class="line">reduce(<span class="keyword">lambda</span> x, y: x+y, [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])</span><br></pre></td></tr></table></figure><h2 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 基础数据</span></span><br><span class="line">d = &#123;<span class="string">'c'</span>:<span class="number">2</span>, <span class="string">'b'</span>:<span class="number">1</span> , <span class="string">'a'</span>:<span class="number">3</span>&#125;</span><br><span class="line">d.keys()</span><br><span class="line">d.values()</span><br><span class="line">d.items()   <span class="comment"># [('a', 2), ('b', 1)]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历，过滤</span></span><br><span class="line">&#123;k: v <span class="keyword">for</span> k, v <span class="keyword">in</span> d.items() <span class="keyword">if</span> v &gt; <span class="number">1</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># key 排序</span></span><br><span class="line">&#123;k:d[k] <span class="keyword">for</span> k <span class="keyword">in</span> sorted(d.keys())&#125;</span><br><span class="line"><span class="comment"># value 自定义排序: 注意 d.items() 返回的是数组，其实用的是数组排序</span></span><br><span class="line"><span class="comment"># 返回值也是 [(k,v),(k,v)] 模式, 转化成 dict 即可</span></span><br><span class="line">dict(sorted(d.items(), key=<span class="keyword">lambda</span> x: x[<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数组 -&gt; 元组列表 -&gt; 字典</span></span><br><span class="line">dict(zip([<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>], [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]))</span><br></pre></td></tr></table></figure><h2 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h2><ul><li>随机数</li></ul><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 随机小数: (0-1)</span></span><br><span class="line">random.random()</span><br><span class="line"><span class="comment"># 随机小数: (1-9)</span></span><br><span class="line">random.uniform(<span class="number">1</span>,<span class="number">9</span>)</span><br><span class="line"><span class="comment"># 随机整数: [1,5]</span></span><br><span class="line">random.randint(<span class="number">1</span>,<span class="number">5</span>)</span><br><span class="line"><span class="comment"># 随机奇数，第三个参数代表递增基数</span></span><br><span class="line">random.randrange(<span class="number">1</span>,<span class="number">10</span>,<span class="number">2</span>)</span><br><span class="line"><span class="comment"># 随机选择</span></span><br><span class="line">random.choice([<span class="string">'1'</span>,<span class="string">'a'</span>])</span><br><span class="line"><span class="comment"># 随机选择多个</span></span><br><span class="line">random.sample([<span class="string">'1'</span>,<span class="string">'a'</span>, <span class="number">1</span>, <span class="number">2</span>], <span class="number">2</span>)</span><br><span class="line"><span class="comment"># 乱序: 直接改变列表</span></span><br><span class="line">random.shuffle(a)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 随机码</span></span><br><span class="line"><span class="string">''</span>.join([random.choice(<span class="string">'0123456789abcdef'</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">64</span>)])</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      数组, 列表, 字典, list, set, bytes
    
    </summary>
    
      <category term="Python" scheme="/categories/Python/"/>
    
    
      <category term="基础" scheme="/tags/%E5%9F%BA%E7%A1%80/"/>
    
      <category term="list" scheme="/tags/list/"/>
    
      <category term="set" scheme="/tags/set/"/>
    
      <category term="dict" scheme="/tags/dict/"/>
    
      <category term="bytes" scheme="/tags/bytes/"/>
    
  </entry>
  
</feed>
