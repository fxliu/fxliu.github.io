[{"title":"FFmepg(4.2)+SDL(2.0)播放器","url":"https://fxliu.github.io/2019/09/16/Tools/FFmepg+SDL播放器/","content":"<h2 id=\"FFmepg环境-4-2\"><a href=\"#FFmepg环境-4-2\" class=\"headerlink\" title=\"FFmepg环境(4.2)\"></a>FFmepg环境(4.2)</h2><ul>\n<li><a href=\"http://ffmpeg.zeranoe.com/builds/\" target=\"_blank\" rel=\"noopener\">FFmepg官网</a> 下载最新的ffmpeg的dev版和share版，当前最新版是4.2<ul>\n<li>注意区分x64和x86，取决于你vs2015调试的解决方案平台用什么，如果安装了错误的版本将会出现一堆无法解析的错误</li>\n<li>包含三个版本：Static、Shared以及Dev<ul>\n<li>Static: 包含3个应用程序：ffmpeg.exe , ffplay.exe , ffprobe.exe，体积都很大，相关的DLL已经被编译到exe里面去了。</li>\n<li>Shared: 除了ffmpeg.exe , ffplay.exe , ffprobe.exe之外还有一些DLL，exe体积很小，在运行时到相应的DLL中调用功能。</li>\n<li>Dev: 开发者（developer）版本，里面包含了库文件xxx.lib以及头文件xxx.h，这个版本不含exe文件</li>\n</ul>\n</li>\n<li>把dev版本与share版本都下下来解压，dev版本文件夹中的Include和lib目录整个儿复制到VS项目目录下</li>\n<li>将share版本文件夹中bin目录下对应的所有dll复制到exe根目录</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"FFmepg引入\"><a href=\"#FFmepg引入\" class=\"headerlink\" title=\"FFmepg引入\"></a>FFmepg引入</h3><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 头文件中的函数定义在编译为 C 程序的文件中，而头文件是在 C++ 文件中不带 extern “C” 修饰符声明的。在此情况下，需要添加extern \"C\"修饰符。</span></span><br><span class=\"line\"><span class=\"comment\">// 不添加 extern “C” 修饰符 会提示 无法解析 导致编译失败</span></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"string\">\"C\"</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"libavcodec\\avcodec.h\"</span>  </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"libavformat\\avformat.h\"</span>  </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"libavutil\\channel_layout.h\"</span>  </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"libavutil\\common.h\"</span>  </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"libavutil\\imgutils.h\"</span>  </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"libswscale\\swscale.h\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"libavutil\\imgutils.h\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"libavutil\\opt.h\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"libavutil\\mathematics.h\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"libavutil\\samplefmt.h\"</span></span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> comment(lib, <span class=\"meta-string\">\"avcodec.lib\"</span>)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> comment(lib, <span class=\"meta-string\">\"avformat.lib\"</span>)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> comment(lib, <span class=\"meta-string\">\"avdevice.lib\"</span>)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> comment(lib, <span class=\"meta-string\">\"avfilter.lib\"</span>)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> comment(lib, <span class=\"meta-string\">\"avutil.lib\"</span>)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> comment(lib, <span class=\"meta-string\">\"postproc.lib\"</span>)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> comment(lib, <span class=\"meta-string\">\"swresample.lib\"</span>)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> comment(lib, <span class=\"meta-string\">\"swscale.lib\"</span>)</span></span><br><span class=\"line\"><span class=\"comment\">// 测试</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"%s\"</span>, avcodec_configuration());</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"FFmepg应用\"><a href=\"#FFmepg应用\" class=\"headerlink\" title=\"FFmepg应用\"></a>FFmepg应用</h3><p>关键函数调试不通过时，还是自己到dev版的examples搜函数使用案例吧，网上各种旧版本的说明，有些函数已经废弃了，调用逻辑也不对</p>\n<p>视频播放基本上时固定模式打开-&gt;参数设定-&gt;读取-&gt;解码-&gt;转码-&gt;显示，剩下的看Demo吧</p>\n<p>音频处理流程基本类似</p>\n<ul>\n<li><code>avformat_open_input</code>打开视频文件<ul>\n<li><code>avformat_close_input</code>关闭视频文件</li>\n</ul>\n</li>\n<li><code>av_read_frame</code>读</li>\n<li><code>avcodec_send_packet</code> -&gt; <code>avcodec_receive_frame</code>解码</li>\n<li><code>sws_scale</code>转码，Demo中时转为YUV420P格式，提供SDL播放<ul>\n<li>注意保存解码结果的缓冲区的申请，被网上旧代码各种坑，自己去examples看官方势力吧</li>\n<li>注意还有个视频/音频播放延迟提取，SDL播放时要做到音视频同步</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"备记几个FFmepg常用参数\"><a href=\"#备记几个FFmepg常用参数\" class=\"headerlink\" title=\"备记几个FFmepg常用参数\"></a>备记几个FFmepg常用参数</h3><ul>\n<li>格式转换<ul>\n<li><code>ffmpeg -i input.avi output.mp4</code></li>\n<li><code>-vcodec mpeg4</code>：指定编码格式</li>\n</ul>\n</li>\n<li>裁剪：从30秒开始到40秒<ul>\n<li><code>ffmpeg -i input.wmv -ss 30 -t 10 output.wmv</code></li>\n<li><code>ffmpeg -i input.wmv -ss 30 -to 40 output.wmv</code><ul>\n<li>把-ss, -t参数放在-i参数之后，是对输出文件执行的seek操作; 逐帧解码，直到-ss设置的时间点为止，这么操作会很慢，虽然时间点是准确的，但是很容易出现黑屏问题。</li>\n<li>将-ss，-t参数放在-i参数之前，对输入文件执行seek操作，会seek到-ss设置的时间点前面的关键帧上，时间不精确，但是不会出现黑屏。<ul>\n<li>可以补充accurate_seek 参数，让剪切时间更加精准，但seek要放在-i之前</li>\n<li><code>ffmpeg -ss 10 -t 15 -accurate_seek -i test.mp4 cut.mp4</code></li>\n<li>如果编码格式采用的copy 最好加上 -avoid_negative_ts 1参数</li>\n<li><code>ffmpeg -ss 10 -t 15 -accurate_seek -i test.mp4 -codec copy -avoid_negative_ts 1 cut.mp4</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code>-c copy</code>：复制所有的流</li>\n<li><code>-vcodec copy</code>：使用跟原视频一样的视频编解码器</li>\n<li><code>-acodec copy</code>：使用跟原视频一样的音频编解码器</li>\n<li>``</li>\n</ul>\n</li>\n<li>音量：音贝<ul>\n<li><code>.\\ffmpeg -i s1.mp4 -af &quot;volumedetect&quot; -f null /dev/null</code>：查看<code>mean_volume</code>-&gt;<code>max_volume</code></li>\n<li><code>ffmpeg  -i input.mp3 -af &quot;volume=0.5&quot; output.mp3</code>：减半</li>\n<li><code>ffmpeg  -i input.mp3 -af &quot;volume=2&quot; output.mp3</code>：加倍</li>\n<li><code>ffmpeg  -i input.mp3 -af &quot;volume=5dB&quot; output.mp3</code>：增加指定分贝数（使用负数<code>-5dB</code>则为降低分贝）</li>\n<li><code>ffmepg -i input.mp3 -filter:a &quot;loudnorm&quot; output.mp3</code>：音频标准化：削峰填谷，使整个音频的音量变化跨度降低，变得平滑</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"SDL环境-2-0\"><a href=\"#SDL环境-2-0\" class=\"headerlink\" title=\"SDL环境(2.0)\"></a>SDL环境(2.0)</h2><ul>\n<li><a href=\"http://www.libsdl.org/\" target=\"_blank\" rel=\"noopener\">SDL官网</a></li>\n</ul>\n<h3 id=\"SDL引入\"><a href=\"#SDL引入\" class=\"headerlink\" title=\"SDL引入\"></a>SDL引入</h3><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"string\">\"C\"</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"ffmpeg\\libavutil\\frame.h\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"SDL/SDL.h\"</span></span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> comment(lib, <span class=\"meta-string\">\"SDL2.lib\"</span>)</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"SDL应用\"><a href=\"#SDL应用\" class=\"headerlink\" title=\"SDL应用\"></a>SDL应用</h3><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 初始化</span></span><br><span class=\"line\">SDL_Init(SDL_INIT_EVERYTHING);</span><br><span class=\"line\"><span class=\"comment\">// 创建窗体：支持直接创建一个弹出窗，或者附加到指定窗体句柄上</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!m_hWnd)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  m_sdlWindow = SDL_CreateWindow(<span class=\"string\">\"SDL_Window\"</span>, SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED,</span><br><span class=\"line\">    w, h, SDL_WINDOW_SHOWN | SDL_WINDOW_RESIZABLE);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  m_sdlWindow = SDL_CreateWindowFrom(m_hWnd);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 渲染器</span></span><br><span class=\"line\">m_sdlRenderer = SDL_CreateRenderer(m_sdlWindow, <span class=\"number\">-1</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"comment\">// 设置Renderer按视频比例(m_videoWidth, m_videoHeight)缩放，默认按屏幕拉伸</span></span><br><span class=\"line\">SDL_RenderSetLogicalSize(m_sdlRenderer, m_videoWidth, m_videoHeight);</span><br><span class=\"line\"><span class=\"comment\">// 纹理：Texture宽高一定要对应视频宽高</span></span><br><span class=\"line\">m_sdlTexture = SDL_CreateTexture(m_sdlRenderer, SDL_PIXELFORMAT_IYUV, SDL_TEXTUREACCESS_STREAMING, m_videoWidth, m_videoHeight);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 视频播放 frame 为FFmepg解码后的数据帧</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (m_sdlTexture) SDL_UpdateTexture(m_sdlTexture, <span class=\"literal\">NULL</span>, frame-&gt;data[<span class=\"number\">0</span>], frame-&gt;linesize[<span class=\"number\">0</span>]);</span><br><span class=\"line\"><span class=\"comment\">// 遇到SDL_UpdateTexture崩溃情况的话，可以尝试直接调用SDL_UpdateYUVTexture</span></span><br><span class=\"line\"><span class=\"comment\">//if (m_sdlTexture) SDL_UpdateYUVTexture(m_sdlTexture, NULL,</span></span><br><span class=\"line\"><span class=\"comment\">//  frame-&gt;data[0], frame-&gt;linesize[0], frame-&gt;data[1], frame-&gt;linesize[1], frame-&gt;data[2], frame-&gt;linesize[2]);</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (m_sdlRenderer) SDL_RenderClear(m_sdlRenderer);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (m_sdlRenderer &amp;&amp; m_sdlTexture) SDL_RenderCopy(m_sdlRenderer, m_sdlTexture, <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (m_sdlRenderer) SDL_RenderPresent(m_sdlRenderer);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 清理</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (m_sdlTexture)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  SDL_DestroyTexture(m_sdlTexture);</span><br><span class=\"line\">  m_sdlTexture = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (m_sdlRenderer)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  SDL_DestroyRenderer(m_sdlRenderer);</span><br><span class=\"line\">  m_sdlRenderer = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (m_sdlWindowScreen)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  SDL_FreeSurface(m_sdlWindowScreen);</span><br><span class=\"line\">  m_sdlWindowScreen = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (m_sdlWindow)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  SDL_DestroyWindow(m_sdlWindow);</span><br><span class=\"line\">  m_sdlWindow = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">SDL_Quit();</span><br><span class=\"line\"><span class=\"comment\">// ----------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">// 音频播放回调</span></span><br><span class=\"line\"><span class=\"comment\">//音频设备需要更多数据的时候会调用该回调函数</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> CMyVideo::read_audio_data(<span class=\"keyword\">void</span> *udata, Uint8 *stream, <span class=\"keyword\">int</span> len)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  CMyVideo *pThis = (CMyVideo*)udata;</span><br><span class=\"line\">  <span class=\"comment\">//首先使用SDL_memset()将stream中的数据设置为0</span></span><br><span class=\"line\">  SDL_memset(stream, <span class=\"number\">0</span>, len);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (pThis-&gt;m_audio_len == <span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  len = (len &gt; (<span class=\"keyword\">int</span>)pThis-&gt;m_audio_len ? pThis-&gt;m_audio_len : len);</span><br><span class=\"line\">  <span class=\"comment\">// 最后一个参数代表音量：SDL_MIX_MAXVOLUME</span></span><br><span class=\"line\">  SDL_MixAudio(stream, pThis-&gt;m_audio_pos, len, pThis-&gt;m_volume);</span><br><span class=\"line\">  pThis-&gt;m_audio_pos += len;</span><br><span class=\"line\">  pThis-&gt;m_audio_len -= len;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 打开音频</span></span><br><span class=\"line\">BOOL CMyVideo::OpenAudio(<span class=\"keyword\">int</span> audioRate, Uint16 audioFrameSize)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 音频参数: 最好和视频参数保持一致，否则会有杂声</span></span><br><span class=\"line\">  SDL_AudioSpec spec;</span><br><span class=\"line\">  spec.freq = audioRate;        <span class=\"comment\">// 对应音频转换设置</span></span><br><span class=\"line\">  spec.format = AUDIO_S32;      <span class=\"comment\">// 对应音频转换设置</span></span><br><span class=\"line\">  spec.channels = <span class=\"number\">2</span>;</span><br><span class=\"line\">  spec.silence = <span class=\"number\">0</span>;</span><br><span class=\"line\">  spec.samples = audioFrameSize;    <span class=\"comment\">// 对应音频帧缓存大小</span></span><br><span class=\"line\">  spec.callback = read_audio_data;</span><br><span class=\"line\">  spec.userdata = <span class=\"keyword\">this</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (SDL_OpenAudio(&amp;spec, <span class=\"literal\">NULL</span>) &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> FALSE;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  SDL_PauseAudio(<span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> TRUE;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 音频播放：buf/len为FFmepg音频解析结果</span></span><br><span class=\"line\">m_audio_chunk = buf[<span class=\"number\">0</span>];</span><br><span class=\"line\">m_audio_pos = m_audio_chunk;</span><br><span class=\"line\">m_audio_len = len;</span><br><span class=\"line\"><span class=\"comment\">// 等待播放完成</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> (m_audio_len &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">  SDL_Delay(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 音频关闭</span></span><br><span class=\"line\">SDL_CloseAudio();</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"SDL扩展\"><a href=\"#SDL扩展\" class=\"headerlink\" title=\"SDL扩展\"></a>SDL扩展</h2><ul>\n<li><a href=\"http://www.libsdl.org/projects/SDL_image/\" target=\"_blank\" rel=\"noopener\">SDL_Image</a>扩展支持多种类型图片加载<ul>\n<li>SDL默认只支持加载BMP</li>\n</ul>\n</li>\n<li><a href=\"http://www.libsdl.org/projects/SDL_mixer/\" target=\"_blank\" rel=\"noopener\">SDL_mixer</a>扩展各种音乐播放</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 窗体创建：略，SDL窗体句柄：sdlWindow</span></span><br><span class=\"line\">SDL_Surface *image = SDL_LoadBMP(<span class=\"string\">\"1.bmp\"</span>);</span><br><span class=\"line\">SDL_Renderer *renderer = SDL_CreateRenderer(sdlWindow, <span class=\"number\">-1</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">SDL_Texture *texture = SDL_CreateTextureFromSurface(renderer, image);</span><br><span class=\"line\"><span class=\"comment\">// SDL_RenderClear(renderer);</span></span><br><span class=\"line\"><span class=\"comment\">// 复制到渲染器</span></span><br><span class=\"line\">SDL_RenderCopy(renderer, texture, <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\"><span class=\"comment\">// 渲染显示</span></span><br><span class=\"line\">SDL_RenderPresent(renderer);</span><br><span class=\"line\"><span class=\"comment\">// 数据释放：略</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 代码备记：未校验</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;SDL\\SDL_mixer.h&gt;</span></span></span><br><span class=\"line\">SDL_Init(SDL_INIT_EVERYTHING)</span><br><span class=\"line\">Mix_OpenAudio(<span class=\"number\">44100</span>,MIX_DEFAULT_FORMAT,<span class=\"number\">2</span>,<span class=\"number\">2048</span>);</span><br><span class=\"line\">Mix_Music *sound=Mix_LoadMUS(<span class=\"string\">\"sound.wav\"</span>);</span><br><span class=\"line\">Mix_PlayMusic(sound,<span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"备注\"><a href=\"#备注\" class=\"headerlink\" title=\"备注\"></a>备注</h2><ul>\n<li>注意FFmepg解析和SDL播放需要多线程分开，避免视频/音频播放卡顿</li>\n<li>SDL音频和视频的播放一定要多线程，不能相互等待</li>\n<li>音频和视频要注意延迟处理，Window延迟控制是达不到播放要求的，做个毫秒级的延迟同步即可，人类是感知不到这点误差的</li>\n<li>音视频同步要控制视频播放，让视频帧根据音频播放加减速，声音播放不能卡顿，很容被人耳感知的</li>\n<li>SDL核心是图像的加载，渲染，显示；而视频播放就是图片快速切换而已。</li>\n</ul>\n<h2 id=\"Demo\"><a href=\"#Demo\" class=\"headerlink\" title=\"Demo\"></a>Demo</h2><p><a href=\"https://github.com/fxliu/VCDemo/tree/master/TOOLS/ffmpeg+SDL\" target=\"_blank\" rel=\"noopener\">FFmpeg+SDL播放器</a><br><code>https://github.com/fxliu/VCDemo/tree/master/TOOLS/ffmpeg+SDL</code></p>\n","categories":["VC"],"tags":["FFmepg","SDL","UI"]},{"title":"无线网卡","url":"https://fxliu.github.io/2019/09/16/System/WLan/","content":"<h2 id=\"API\"><a href=\"#API\" class=\"headerlink\" title=\"API\"></a>API</h2><ul>\n<li><code>WlanOpenHandle</code>: 打开操作句柄</li>\n<li><code>WlanEnumInterfaces</code>: 遍历无线设备接口，并获取接口状态<ul>\n<li>已连接，连接中，已断开等</li>\n</ul>\n</li>\n<li><code>WlanGetAvailableNetworkList</code>: 遍历热点<ul>\n<li>包含SSID，加密方式等热点信息</li>\n</ul>\n</li>\n<li><code>WlanGetProfileList</code>: 获取机器已保存所有热点配置<ul>\n<li>Windows没连接一次热点，会自动保存一份该热点的配置文件，配置文件名一般就是热点名</li>\n<li>API操作中配置文件名可以随意指定</li>\n</ul>\n</li>\n<li><code>WlanDeleteProfile</code>: 删除指定配置文件</li>\n<li><code>WlanSetProfile</code>: 新增/重置指定配置文件</li>\n<li><code>WlanConnect</code>: WIFI连接指令，Windows会自动查找默认配置，并尝试连接<ul>\n<li>该函数指令返回时，仅说明Windows接收到该指令并开始执行，不保证能连接成功</li>\n</ul>\n</li>\n<li><code>WlanDisconnect</code>: 终止WIFI连接</li>\n</ul>\n<h2 id=\"命令行\"><a href=\"#命令行\" class=\"headerlink\" title=\"命令行\"></a>命令行</h2><ul>\n<li>查看所有配置名称: <code>netsh wlan show profile</code></li>\n<li>连接到无线WIFI: <code>wlan connect name=PROFILE</code><ul>\n<li>指定SSID: <code>netsh wlan connect ssid=SSID name=PROFILE</code></li>\n</ul>\n</li>\n<li>断开无线: <code>netsh wlan disconnect</code></li>\n<li>添加配置: <code>Netsh WLAN add profile filename=&quot;存放路径&quot;</code></li>\n<li>导出配置：<code>Netsh WLAN export profile key=clear folder=&quot;存放路径&quot;</code><ul>\n<li>导出的 XML 配置文件是明文存储，而且会导出 WIFI 连接密码</li>\n</ul>\n</li>\n<li>删除配置: <code>Netsh WLAN delete profile name=&quot;无线名称&quot;</code></li>\n<li>无线网卡配置，状态: <code>Netsh WLAN show interfaces</code></li>\n<li>查看指定网卡: <code>Netsh WLAN show interface name=&quot;网卡名称&quot;</code></li>\n<li>查看已存储密码: <code>Netsh WLAN show profile name=&quot;无线名称&quot; key=clear</code></li>\n<li>查看无线网卡信息: <code>Netsh WLAN show drivers</code></li>\n<li>无线网卡兼容/支持的功能: <code>Netsh WLAN show wirelesscapabilities</code></li>\n</ul>\n<h2 id=\"备注\"><a href=\"#备注\" class=\"headerlink\" title=\"备注\"></a>备注</h2><ul>\n<li>都是Windows标准API，懒得解释了，需要的时候直接看Demo把</li>\n<li>Demo中检查到Wifi已连接时，是通过注册表获取IP数据的，实际上这个有延迟<ul>\n<li>通常Windows先连接AP，然后在自动获取IP，而且获取IP整个动作是有延迟的，此时即使是使用ipconfig也未必能拿到正确的状态</li>\n<li>问题备记，搁置~~</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Demo\"><a href=\"#Demo\" class=\"headerlink\" title=\"Demo\"></a>Demo</h2><p><a href=\"https://github.com/fxliu/VCDemo/tree/master/SYSTEM/WLan\" target=\"_blank\" rel=\"noopener\">WLan</a></p>\n","categories":["VC"],"tags":["WLAN","无线网卡"]},{"title":"UPNP穿透","url":"https://fxliu.github.io/2019/09/12/Net/UPNP/","content":"<h2 id=\"UPNP\"><a href=\"#UPNP\" class=\"headerlink\" title=\"UPNP\"></a>UPNP</h2><p>用即插即用（英语：Universal Plug and Play，简称UPnP）是由“通用即插即用论坛”（UPnP™ Forum）推广的一套网络协议。<br>该协议的目标是使家庭网络（数据共享、通信和娱乐）和公司网络中的各种设备能够相互无缝连接，并简化相关网络的实现。<br>UPnP通过定义和发布基于开放、因特网通讯网协议标准的UPnP设备控制协议来实现这一目标。<br>UPnP这个概念是从即插即用（Plug-and-play）派生而来的，即插即用是一种热拔插技术。</p>\n<h2 id=\"UPNP穿透-WIN-API\"><a href=\"#UPNP穿透-WIN-API\" class=\"headerlink\" title=\"UPNP穿透(WIN API)\"></a>UPNP穿透(WIN API)</h2><p>NAT穿透允许UPnP数据包在没有用户交互的情况下，无障碍的通过路由器或者防火墙（假如那个路由器或者防火墙支持NAT）。<br>事实上大部分防火墙默认都是开通这个端口的</p>\n<h3 id=\"初始化COM接口\"><a href=\"#初始化COM接口\" class=\"headerlink\" title=\"初始化COM接口\"></a>初始化COM接口</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">```C++</span><br><span class=\"line\">typedef enum _EPortMapping</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  PM_OK = 0,\t\t\t\t// 操作成功</span><br><span class=\"line\">  PM_SUCCESS = 0,\t\t\t// 未注册 &amp;&amp; 可注册</span><br><span class=\"line\">  PM_SUCCESS_EXIST,\t\t// 已注册</span><br><span class=\"line\">  PM_ERROR = 10,\t\t\t// 操作失败</span><br><span class=\"line\">  PM_ERROR_PORT,\t\t\t// 外网端口已被本机其他端口映射</span><br><span class=\"line\">  PM_ERROR_REMOTE_PORT,\t// 外网端口已被其他机器映射</span><br><span class=\"line\">  PM_ERROR_PORT_CONFLICT,\t// 端口冲突：端口必须 &gt;= 1024</span><br><span class=\"line\">&#125;EPortMapping;</span><br><span class=\"line\"></span><br><span class=\"line\">// 定义结构体模型：每个IUPnPDevice都有子IUPnPDevice组以及自身提供的IUPnPService组</span><br><span class=\"line\">typedef struct _MyUpnpService</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">  CComVariant cv;</span><br><span class=\"line\">  CComPtr&lt;IUPnPService&gt; service;</span><br><span class=\"line\">  _MyUpnpService(CComVariant &amp;cv)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    this-&gt;cv = cv;</span><br><span class=\"line\">    this-&gt;service = (IUPnPService*)V_DISPATCH(&amp;cv);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  ~_MyUpnpService()</span><br><span class=\"line\">  &#123;&#125;</span><br><span class=\"line\">&#125;MyUpnpService;</span><br><span class=\"line\"></span><br><span class=\"line\">typedef struct _MyUpnpDevice</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">  CComVariant cv;</span><br><span class=\"line\">  CComPtr&lt;IUPnPDevice&gt; device;</span><br><span class=\"line\">  std::vector&lt;_MyUpnpDevice&gt; subDevice;</span><br><span class=\"line\">  std::vector&lt;MyUpnpService&gt; service;</span><br><span class=\"line\">  _MyUpnpDevice(CComVariant &amp;cv)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    this-&gt;cv = cv;</span><br><span class=\"line\">    this-&gt;device = (IUPnPDevice*)V_DISPATCH(&amp;cv);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  ~_MyUpnpDevice()</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    service.clear();</span><br><span class=\"line\">    subDevice.clear();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;MyUpnpDevice;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"遍历跟设备\"><a href=\"#遍历跟设备\" class=\"headerlink\" title=\"遍历跟设备\"></a>遍历跟设备</h3><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\">BOOL CMyUpnp::SearchRootDevices()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  IUPnPDeviceFinder* pUPnPDeviceFinder;</span><br><span class=\"line\">  HRESULT hr = CoCreateInstance(CLSID_UPnPDeviceFinder, <span class=\"literal\">NULL</span>, CLSCTX_INPROC_SERVER,</span><br><span class=\"line\">    IID_IUPnPDeviceFinder, <span class=\"keyword\">reinterpret_cast</span>&lt;<span class=\"keyword\">void</span>**&gt;(&amp;pUPnPDeviceFinder));</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (SUCCEEDED(hr))</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    IUPnPDevices *devices = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"comment\">// TypeURI: 对应ST字段内容</span></span><br><span class=\"line\">    <span class=\"comment\">// 查询跟设备：upnp:rootdevice</span></span><br><span class=\"line\">    <span class=\"comment\">// 查询网关设备：urn:schemas-upnp-org:device:InternetGatewayDevice:1</span></span><br><span class=\"line\">    BSTR uri = SysAllocString(TEXT(<span class=\"string\">\"urn:schemas-upnp-org:device:InternetGatewayDevice:1\"</span>));</span><br><span class=\"line\">    hr = pUPnPDeviceFinder-&gt;FindByType(uri, <span class=\"number\">0</span>, &amp;devices);</span><br><span class=\"line\">    SysFreeString(uri);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (SUCCEEDED(hr))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 遍历根设备</span></span><br><span class=\"line\">      IEnumVARIANT *piEnum = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">      hr = devices-&gt;get__NewEnum((IUnknown**)&amp;piEnum);</span><br><span class=\"line\">      CComVariant var;</span><br><span class=\"line\">      ULONG nReturned = <span class=\"number\">0</span>;</span><br><span class=\"line\">      <span class=\"keyword\">while</span> (piEnum-&gt;Next(<span class=\"number\">1</span>, &amp;var, &amp;nReturned) == S_OK)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        m_rootDevices.push_back(var);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      piEnum-&gt;Release();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    pUPnPDeviceFinder-&gt;Release();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> TRUE;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> FALSE;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"遍历子设备\"><a href=\"#遍历子设备\" class=\"headerlink\" title=\"遍历子设备\"></a>遍历子设备</h3><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// device</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> CMyUpnp::EnumSubDevices(MyUpnpDevice &amp;device)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  device.subDevice.clear();</span><br><span class=\"line\">  EnumSubServices(device);</span><br><span class=\"line\">  IUPnPDevices *children;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (device.device-&gt;get_Children(&amp;children) == S_OK)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    IEnumVARIANT *piEnum = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (children-&gt;get__NewEnum((IUnknown**)&amp;piEnum) == S_OK)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      CComVariant var;</span><br><span class=\"line\">      ULONG nReturned = <span class=\"number\">0</span>;</span><br><span class=\"line\">      <span class=\"keyword\">while</span> (piEnum-&gt;Next(<span class=\"number\">1</span>, &amp;var, &amp;nReturned) == S_OK)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        device.subDevice.push_back(MyUpnpDevice(var));</span><br><span class=\"line\">        EnumSubDevices(device.subDevice.back());</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      piEnum-&gt;Release();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    children-&gt;Release();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"遍历服务\"><a href=\"#遍历服务\" class=\"headerlink\" title=\"遍历服务\"></a>遍历服务</h3><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> CMyUpnp::EnumSubServices(MyUpnpDevice &amp;device)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  device.service.clear();</span><br><span class=\"line\">  <span class=\"comment\">// 遍历服务</span></span><br><span class=\"line\">  IUPnPServices* services = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (device.device-&gt;get_Services(&amp;services) == S_OK)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    IEnumVARIANT *piEnum = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (services-&gt;get__NewEnum((IUnknown**)&amp;piEnum) == S_OK)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      CComVariant var;</span><br><span class=\"line\">      ULONG nReturned = <span class=\"number\">0</span>;</span><br><span class=\"line\">      <span class=\"keyword\">while</span> (piEnum-&gt;Next(<span class=\"number\">1</span>, &amp;var, &amp;nReturned) == S_OK)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        device.service.push_back(var);</span><br><span class=\"line\">        IUPnPService *service = (IUPnPService*)V_DISPATCH(&amp;var);</span><br><span class=\"line\">        BSTR tmp = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (service-&gt;get_ServiceTypeIdentifier(&amp;tmp) == S_OK)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          <span class=\"comment\">//cout &lt;&lt; \"get_ServiceTypeIdentifier\\t\\t\" &lt;&lt; CW2A(tmp) &lt;&lt; endl;</span></span><br><span class=\"line\">          CString sn = tmp;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (sn == TEXT(<span class=\"string\">\"urn:schemas-upnp-org:service:WANIPConnection:1\"</span>) || sn == TEXT(<span class=\"string\">\"urn:schemas-upnp-org:service:WANPPPConnection:1\"</span>))</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 这个就是端口映射服务</span></span><br><span class=\"line\">            m_connService = service;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          SysFreeString(tmp);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      piEnum-&gt;Release();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    services-&gt;Release();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"端口映射\"><a href=\"#端口映射\" class=\"headerlink\" title=\"端口映射\"></a>端口映射</h3><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 服务接口：发送Action事件，反馈执行结果</span></span><br><span class=\"line\">BOOL CMyUpnp::InvokeAction(CString strAction, CComSafeArray&lt;VARIANT&gt; &amp;arr, CComVariant &amp;vaOutArgs, CComVariant &amp;vaRetVal)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!m_connService)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    CheckSupportPortMapping();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!m_connService)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> FALSE;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\">CComVariant <span class=\"title\">vaInActionArgs</span><span class=\"params\">(*arr.GetSafeArrayPtr())</span></span>;</span><br><span class=\"line\">  BSTR act = strAction.AllocSysString();</span><br><span class=\"line\">  HRESULT re = m_connService-&gt;InvokeAction(act, vaInActionArgs, &amp;vaOutArgs, &amp;vaRetVal);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (re != S_OK)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (re == DISP_E_TYPEMISMATCH)</span><br><span class=\"line\">      wcout &lt;&lt; strAction.GetBuffer() &lt;&lt; <span class=\"string\">L\" -&gt; InvokeAction Error: 类型不匹配\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(re == E_FAIL)</span><br><span class=\"line\">      wcout &lt;&lt; strAction.GetBuffer() &lt;&lt; <span class=\"string\">L\" -&gt; InvokeAction Error: E_FAIL\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      wcout &lt;&lt; strAction.GetBuffer() &lt;&lt; <span class=\"string\">L\" -&gt; InvokeAction Error: \"</span> &lt;&lt; hex &lt;&lt; re;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (vaRetVal.vt == VT_BSTR)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 排除常规遍历提醒</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (strAction != TEXT(<span class=\"string\">\"GetGenericPortMappingEntry\"</span>) || CString(V_BSTR(&amp;vaRetVal)) != TEXT(<span class=\"string\">\"SpecifiedArrayIndexInvalid\"</span>))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          wcout &lt;&lt; <span class=\"string\">L\" -&gt; \"</span> &lt;&lt; V_BSTR(&amp;vaRetVal);</span><br><span class=\"line\">          m_lastError = V_BSTR(&amp;vaRetVal);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      wcout &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  SysFreeString(act);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> re == S_OK;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\">EPortMapping CMyUpnp::AddPortMapping(CString localIP, DWORD localPort, DWORD remotePort, CString des, CString protocol, CString remoteHost)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 添加映射</span></span><br><span class=\"line\">  CString act = TEXT(<span class=\"string\">\"AddPortMapping\"</span>);</span><br><span class=\"line\">  CComSafeArray&lt;VARIANT&gt; saInArr;</span><br><span class=\"line\">  saInArr.Create();</span><br><span class=\"line\">  <span class=\"comment\">// 注意这里的参数顺序是固定的，一一对应到XML结构</span></span><br><span class=\"line\">  saInArr.Add(CComVariant(<span class=\"string\">\"\"</span>));\t<span class=\"comment\">// NewRemoteHost: 通常是空串</span></span><br><span class=\"line\">  saInArr.Add(CComVariant(remotePort));\t<span class=\"comment\">// NewExternalPort</span></span><br><span class=\"line\">  saInArr.Add(CComVariant(protocol));\t\t<span class=\"comment\">// NewProtocol: TCP|UDP</span></span><br><span class=\"line\">  saInArr.Add(CComVariant(localPort));\t<span class=\"comment\">// NewInternalPort</span></span><br><span class=\"line\">  saInArr.Add(CComVariant(localIP));\t\t<span class=\"comment\">// NewInternalClient</span></span><br><span class=\"line\">  saInArr.Add(CComVariant(VARIANT_TRUE));\t<span class=\"comment\">// NewEnabled: 必须是 VARIANT_TRUE</span></span><br><span class=\"line\">  saInArr.Add(CComVariant(des.GetBuffer()));\t<span class=\"comment\">// NewPortMappingDescription</span></span><br><span class=\"line\">  saInArr.Add(CComVariant(<span class=\"string\">\"0\"</span>));\t\t\t<span class=\"comment\">// NewLeaseDuration</span></span><br><span class=\"line\"></span><br><span class=\"line\">  CComVariant vaOutArgs, vaRetVal;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (InvokeAction(act, saInArr, vaOutArgs, vaRetVal))</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> PM_SUCCESS;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (m_lastError == TEXT(<span class=\"string\">\"ConflictInMappingEntry\"</span>))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> PM_ERROR_PORT_CONFLICT;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> PM_ERROR;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">EPortMapping CMyUpnp::DeletePortMapping(DWORD remotePort, CString protocol, CString remoteHost)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 删除映射</span></span><br><span class=\"line\">  CString act = TEXT(<span class=\"string\">\"DeletePortMapping\"</span>);</span><br><span class=\"line\">  CComSafeArray&lt;VARIANT&gt; saInArr;</span><br><span class=\"line\">  saInArr.Create();</span><br><span class=\"line\">  <span class=\"comment\">// 注意这里的参数顺序是固定的，一一对应到XML结构</span></span><br><span class=\"line\">  saInArr.Add(CComVariant(remoteHost));\t<span class=\"comment\">// NewRemoteHost: 通常是空串</span></span><br><span class=\"line\">  saInArr.Add(CComVariant(remotePort));\t<span class=\"comment\">// NewExternalPort</span></span><br><span class=\"line\">  saInArr.Add(CComVariant(protocol));\t\t<span class=\"comment\">// NewProtocol: TCP|UDP</span></span><br><span class=\"line\"></span><br><span class=\"line\">  CComVariant vaOutArgs, vaRetVal;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (InvokeAction(act, saInArr, vaOutArgs, vaRetVal))</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> PM_SUCCESS;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> PM_ERROR;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"备注\"><a href=\"#备注\" class=\"headerlink\" title=\"备注\"></a>备注</h2><ul>\n<li>端口映射<ul>\n<li><strong>测试发现仅支持&gt;=1024的端口，否则反馈端口冲突错误</strong><ul>\n<li>端口映射服务也明确说明了这点，可以查UPNP官方文档，有XML和结构字段说明</li>\n</ul>\n</li>\n<li><strong>WinAPI所传参数和XML结构中的参数是一一对应的，并且顺序是固定的</strong></li>\n<li>WinAPI封装了网络通讯，查找/遍历/添加映射/删除映射都是网络通讯，可以抓包分析明文XML加强理解</li>\n</ul>\n</li>\n<li>测试映射<ul>\n<li>通道打通后，内网端口开HTTP服务</li>\n<li>然后直接访问外网映射端口即可（外网映射端口只能外网访问）</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Demo\"><a href=\"#Demo\" class=\"headerlink\" title=\"Demo\"></a>Demo</h2><p><a href=\"https://github.com/fxliu/VCDemo/tree/master/NET/Upnp\" target=\"_blank\" rel=\"noopener\">UPNP</a></p>\n","categories":["VC"],"tags":["UPNP"]},{"title":"HOOK键盘钩子","url":"https://fxliu.github.io/2019/09/07/System/HOOK键盘钩子/","content":"<h2 id=\"键盘钩子\"><a href=\"#键盘钩子\" class=\"headerlink\" title=\"键盘钩子\"></a>键盘钩子</h2><ul>\n<li><code>WH_KEYBOARD_LL</code>：全局键盘钩子<ul>\n<li>不需要封装DLL，EXE中直接钩挂即可</li>\n<li><code>WH_KEYBOARD</code>：需要DLL封装模式使用</li>\n</ul>\n</li>\n<li><code>WH_MOUSE_LL</code>：鼠标钩子，使用方式同键盘钩子<ul>\n<li><code>WH_KEYBOARD</code>: DLL模式</li>\n<li>DLL导出<code>HOOKPROC</code>函数</li>\n<li>EXE加载DLL后，SetWindowsHookEx安装即可</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// EXE模式</span></span><br><span class=\"line\"><span class=\"comment\">// 挂在钩子</span></span><br><span class=\"line\">m_hHook = SetWindowsHookEx(WH_KEYBOARD_LL, LowLevelKeyboardProc, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"comment\">// 卸载钩子</span></span><br><span class=\"line\">UnhookWindowsHookEx(m_hHook);</span><br><span class=\"line\"><span class=\"comment\">// 键盘事件处理</span></span><br><span class=\"line\"><span class=\"function\">LRESULT CALLBACK <span class=\"title\">LowLevelKeyboardProc</span><span class=\"params\">(<span class=\"keyword\">int</span> nCode, WPARAM wParam, LPARAM lParam)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (nCode == HC_ACTION)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (wParam)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> WM_KEYDOWN:</span><br><span class=\"line\">    <span class=\"keyword\">case</span> WM_SYSKEYDOWN:</span><br><span class=\"line\">    <span class=\"keyword\">case</span> WM_KEYUP:</span><br><span class=\"line\">    <span class=\"keyword\">case</span> WM_SYSKEYUP:</span><br><span class=\"line\">      PKBDLLHOOKSTRUCT p = (PKBDLLHOOKSTRUCT)lParam;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (p-&gt;vkCode == VK_ESCAPE &amp;&amp; GetAsyncKeyState(VK_CONTROL) &amp; <span class=\"number\">0x8000</span> &amp;&amp; GetAsyncKeyState(VK_SHIFT) &amp; <span class=\"number\">0x8000</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Ctrl+Shift+Esc\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 返回1代表终止</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (p-&gt;vkCode == VK_ESCAPE &amp;&amp; GetAsyncKeyState(VK_CONTROL) &amp; <span class=\"number\">0x8000</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Ctrl+Esc\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 其他常规事件一定要继续传递下去</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> CallNextHookEx(<span class=\"literal\">NULL</span>, nCode, wParam, lParam);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 注意钩子线程不能阻塞，可以内置消息循环，确保钩子有效</span></span><br><span class=\"line\">MSG msg;</span><br><span class=\"line\"><span class=\"keyword\">while</span> (!GetMessage(&amp;msg, <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>) &amp;&amp; pThis-&gt;m_hHook)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"comment\">//TranslateMessage(&amp;msg);</span></span><br><span class=\"line\">  <span class=\"comment\">//DispatchMessage(&amp;msg);</span></span><br><span class=\"line\">  <span class=\"keyword\">break</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// DLL模块方式</span></span><br><span class=\"line\"><span class=\"comment\">// ------------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">// DLL导出函数</span></span><br><span class=\"line\"><span class=\"comment\">// 全局共享段，用户DLL公共数据处理，可以根据自己需要增删</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> data_seg(<span class=\"meta-string\">\"SHARED\"</span>)</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> HHOOK g_hHook = <span class=\"literal\">NULL</span>;  <span class=\"comment\">// 钩子句柄, 便于卸载</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> HWND g_hookWnd = <span class=\"literal\">NULL</span>;  <span class=\"comment\">// 调用DLL的主窗口句柄, 这样就可以SendMessage给主窗口鼠标消息及其参数</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> data_seg()</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> comment(linker,<span class=\"meta-string\">\"/section:SHARED,rws\"</span>)</span></span><br><span class=\"line\"><span class=\"comment\">// 钩子回调函数</span></span><br><span class=\"line\"><span class=\"function\">LRESULT CALLBACK <span class=\"title\">MouseProc</span><span class=\"params\">(<span class=\"keyword\">int</span> nCode, WPARAM wParam, LPARAM lParam)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 有鼠标消息时，将其发给主程序</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (g_hookWnd != <span class=\"literal\">NULL</span> &amp;&amp; nCode == HC_ACTION)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 自定义消息</span></span><br><span class=\"line\">    ::SendMessage(g_hookWnd, WM_HOOKMSG, wParam, lParam);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 常规事件继续传递: g_hook 可以给NULL</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> CallNextHookEx(g_hHook, nCode, wParam, lParam);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 其他辅助导出函数</span></span><br><span class=\"line\"><span class=\"function\">BOOL <span class=\"title\">SetHwnd</span><span class=\"params\">(HWND hwnd, HHOOK hHook)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  g_hookWnd = hwnd;</span><br><span class=\"line\">  g_hHook = hHook;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> TRUE;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// .def 内容</span></span><br><span class=\"line\">LIBRARY</span><br><span class=\"line\">EXPORTS</span><br><span class=\"line\">  MouseProc</span><br><span class=\"line\">  SetHwnd</span><br><span class=\"line\"><span class=\"comment\">// ------------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">// EXE 加载部分</span></span><br><span class=\"line\"><span class=\"comment\">// 加载DLL</span></span><br><span class=\"line\">HMODULE hModule = LoadLibrary(GetRunPath() + TEXT(<span class=\"string\">\"\\\\HookDll.dll\"</span>));</span><br><span class=\"line\">PSetHwnd pSetHwnd = (PSetHwnd)GetProcAddress(hModule, <span class=\"string\">\"SetHwnd\"</span>);</span><br><span class=\"line\">HOOKPROC mouseProc = (HOOKPROC)GetProcAddress(hModule, <span class=\"string\">\"MouseProc\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (!pSetHwnd || !mouseProc)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> FALSE;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 安装</span></span><br><span class=\"line\">HHOOK hHook = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"><span class=\"comment\">// 0代表全局</span></span><br><span class=\"line\">hHook = SetWindowsHookEx(WH_MOUSE, mouseProc, hModule, <span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (hHook)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  SetWindowText(g_static, TEXT(<span class=\"string\">\"SetWindowsHookEx Success\"</span>));</span><br><span class=\"line\">  <span class=\"comment\">// 把句柄设置进去是为了方便回传数据</span></span><br><span class=\"line\">  pSetHwnd(g_hwnd, hHook);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">  SetWindowText(g_static, TEXT(<span class=\"string\">\"SetWindowsHookEx Fail\"</span>));</span><br><span class=\"line\"><span class=\"comment\">// 卸载</span></span><br><span class=\"line\">FreeLibrary(hModule);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (hHook)</span><br><span class=\"line\">  UnhookWindowsHookEx(hHook);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"备注\"><a href=\"#备注\" class=\"headerlink\" title=\"备注\"></a>备注</h2><ul>\n<li>EXE模式仍然依赖于消息机制，调用<code>SetWindowsHookEx</code>的线程不可被阻塞，否则会导致钩子无效，系统所有按键事件被延迟处理</li>\n<li>Exe需要管理员权限</li>\n</ul>\n<h2 id=\"Demo\"><a href=\"#Demo\" class=\"headerlink\" title=\"Demo\"></a>Demo</h2><p><a href=\"https://github.com/fxliu/VCDemo/tree/master/HOOK/KeyboardHook\" target=\"_blank\" rel=\"noopener\">HOOK</a>包含一个EXE方式键盘钩子和一个DLL模块方式鼠标钩子<br><code>https://github.com/fxliu/VCDemo/tree/master/HOOK/KeyboardHook</code><br>EXE方式比DLL方式便捷的多，但貌似DLL模块方式速度比较快</p>\n","categories":["VC"],"tags":["HOOK"]},{"title":"opencv2","url":"https://fxliu.github.io/2019/09/07/Tools/opcv2/","content":"<h2 id=\"opencv2部署\"><a href=\"#opencv2部署\" class=\"headerlink\" title=\"opencv2部署\"></a>opencv2部署</h2><ul>\n<li>官网下载windows安装包：2.x版支持x86，3以上只有x64</li>\n<li>案例：opencv-2.4.13.6-vc14.exe<ul>\n<li>build\\include</li>\n<li>build\\include\\x86\\vc14\\staticlib：静态lib</li>\n<li>build\\include\\x86\\vc14\\lib + bin：动态lib + dll</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"引入\"><a href=\"#引入\" class=\"headerlink\" title=\"引入\"></a>引入</h3><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 基础lib - release版去掉文件名最后面的\"d\"</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> comment(lib, <span class=\"meta-string\">\"IlmImfd.lib\"</span>)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> comment(lib, <span class=\"meta-string\">\"libjasperd.lib\"</span>)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> comment(lib, <span class=\"meta-string\">\"libjpegd.lib\"</span>)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> comment(lib, <span class=\"meta-string\">\"libpngd.lib\"</span>)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> comment(lib, <span class=\"meta-string\">\"libtiffd.lib\"</span>)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> comment(lib, <span class=\"meta-string\">\"zlibd.lib\"</span>)</span></span><br><span class=\"line\"><span class=\"comment\">// 功能lib，根据代码需要补充</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> comment(lib, <span class=\"meta-string\">\"opencv_core2413d.lib\"</span>)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> comment(lib, <span class=\"meta-string\">\"opencv_highgui2413d.lib\"</span>)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> comment(lib, <span class=\"meta-string\">\"opencv_imgproc2413d.lib\"</span>)</span></span><br><span class=\"line\"><span class=\"comment\">// 静态lib需要补充下面几个</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> comment(lib, <span class=\"meta-string\">\"vfw32.lib\"</span>)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> comment(lib, <span class=\"meta-string\">\"comctl32.lib\"</span>)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> comment(lib, <span class=\"meta-string\">\"gdi32.lib\"</span>)</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"简单应用\"><a href=\"#简单应用\" class=\"headerlink\" title=\"简单应用\"></a>简单应用</h3><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">VideoCapture <span class=\"title\">cap</span><span class=\"params\">(<span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (!cap.isOpened())</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 尝试打开另一个摄像头</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!cap.open(<span class=\"number\">1</span>))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 设置摄像头参数: 这个要根据摄像头支持参数设置</span></span><br><span class=\"line\">cap.<span class=\"built_in\">set</span>(CV_CAP_PROP_FRAME_WIDTH, <span class=\"number\">640</span>);</span><br><span class=\"line\">cap.<span class=\"built_in\">set</span>(CV_CAP_PROP_FRAME_HEIGHT, <span class=\"number\">480</span>);</span><br><span class=\"line\">cap.<span class=\"built_in\">set</span>(CV_CAP_PROP_FPS, <span class=\"number\">30</span>);</span><br><span class=\"line\"><span class=\"comment\">// 检查设置是否生效</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> width = (<span class=\"keyword\">int</span>)cap.get(CV_CAP_PROP_FRAME_WIDTH);</span><br><span class=\"line\"><span class=\"keyword\">int</span> height = (<span class=\"keyword\">int</span>)cap.get(CV_CAP_PROP_FRAME_HEIGHT);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (width != <span class=\"number\">640</span> || height != <span class=\"number\">480</span>)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">Mat frame;</span><br><span class=\"line\"><span class=\"comment\">// 窗体命名</span></span><br><span class=\"line\"><span class=\"keyword\">char</span>* title = <span class=\"string\">\"摄像头\"</span>;</span><br><span class=\"line\">cvNamedWindow(title, WINDOW_NORMAL);</span><br><span class=\"line\"><span class=\"comment\">// 设置全屏</span></span><br><span class=\"line\"><span class=\"comment\">//cvSetWindowProperty(title, CV_WND_PROP_FULLSCREEN, CV_WINDOW_FULLSCREEN);</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> (cap.isOpened())</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"comment\">//cap &gt;&gt; frame;</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!cap.read(frame))</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (frame.empty())</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  imshow(title, frame);</span><br><span class=\"line\">  <span class=\"keyword\">char</span> ch = waitKey(<span class=\"number\">30</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Demo\"><a href=\"#Demo\" class=\"headerlink\" title=\"Demo\"></a>Demo</h2><p><a href=\"https://github.com/fxliu/VCDemo/tree/master/TOOLS/opencv\" target=\"_blank\" rel=\"noopener\">opencv2 Demo</a><br><code>https://github.com/fxliu/VCDemo/tree/master/TOOLS/opencv</code></p>\n","categories":["VC"],"tags":["opencv"]},{"title":"github+hexo搭建个人博客","url":"https://fxliu.github.io/2019/09/04/github+hexo搭建个人博客/","content":"<ul>\n<li><a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo官网</a></li>\n<li><a href=\"https://hexo.io/zh-cn/docs/\" target=\"_blank\" rel=\"noopener\">Hexo中文网</a></li>\n</ul>\n<hr>\n<h2 id=\"nodejs\"><a href=\"#nodejs\" class=\"headerlink\" title=\"nodejs\"></a>nodejs</h2><ul>\n<li>官网<a href=\"http://nodejs.cn/download/\" title=\"中文网\" target=\"_blank\" rel=\"noopener\">下载</a>安装最新版即可</li>\n<li><a href=\"https://npm.taobao.org/\" target=\"_blank\" rel=\"noopener\">淘宝cnpm镜像</a><ul>\n<li><code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code></li>\n<li>备注：先装的nodejs 64位，cnpm安装失败，各种百度 - 各种尝试 - 各种不好使；卸载重装32位搞定，心都碎了。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"GitHub\"><a href=\"#GitHub\" class=\"headerlink\" title=\"GitHub\"></a>GitHub</h2><ul>\n<li><a href=\"https://desktop.github.com/\" target=\"_blank\" rel=\"noopener\">GitHub Desktop</a>: 桌面版，Git UI工具</li>\n<li><a href=\"https://gitforwindows.org/\" target=\"_blank\" rel=\"noopener\">Git For Windows</a>: Git命令行工具，hexo需要</li>\n<li>仓库1：<a href=\"https://github.com/fxliu/fxliu.github.io\" title=\"静态文件\" target=\"_blank\" rel=\"noopener\">博客仓库</a>静态文件部署位置</li>\n<li>GitHub免费提供，申请方法问度娘，每个账号可以免费申请一个</li>\n<li>仓库2：<a href=\"https://github.com/fxliu/hexo\" target=\"_blank\" rel=\"noopener\">源码仓库</a>hexo源码保存位置</li>\n</ul>\n<h2 id=\"VSCode：编译器\"><a href=\"#VSCode：编译器\" class=\"headerlink\" title=\"VSCode：编译器\"></a>VSCode：编译器</h2><ul>\n<li>微软官网<a href=\"https://code.visualstudio.com/\" target=\"_blank\" rel=\"noopener\">下载</a>安装</li>\n<li>推荐插件<ul>\n<li><code>Ctrl+Shift+P</code>-&gt;<code>configure Display Language</code>安装简体中文</li>\n<li><code>Ctrl+Shift+X</code>-&gt;<code>Markdown All in One</code></li>\n<li><code>Ctrl+Shift+X</code>-&gt;<code>Markdown Preview Github Styling</code><ul>\n<li><a href=\"https://www.jianshu.com/p/51523a1c6fe1\" target=\"_blank\" rel=\"noopener\">规则翻译</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"hexo\"><a href=\"#hexo\" class=\"headerlink\" title=\"hexo\"></a><a href=\"https://hexo.io/zh-cn/docs/\" target=\"_blank\" rel=\"noopener\">hexo</a></h2><ul>\n<li>安装：<code>cnpm install -g hexo-cli</code></li>\n<li>初始化：<code>hexo init 保存博客源码目录</code></li>\n<li>配置：<a href=\"https://hexo.io/zh-cn/docs/configuration\" target=\"_blank\" rel=\"noopener\">官网中文文档</a>说的很详细了<ul>\n<li>然而，只需要把title什么的改成自己的就行了，其他都不用动</li>\n</ul>\n</li>\n<li><code>hexo server</code>启动本地服务，看看效果如何</li>\n</ul>\n<h2 id=\"RSS插件\"><a href=\"#RSS插件\" class=\"headerlink\" title=\"RSS插件\"></a>RSS插件</h2><ul>\n<li>安装插件：<code>cnpm install hexo-generator-feed</code></li>\n<li>启用插件：修改根目录下<code>_config.yml</code>配置文件</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Extensions</span></span><br><span class=\"line\"><span class=\"attr\">plugins:</span></span><br><span class=\"line\">  <span class=\"string\">hexo-generator-feed</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#Feed Atom</span></span><br><span class=\"line\"><span class=\"attr\">feed:</span></span><br><span class=\"line\"><span class=\"attr\">  type:</span> <span class=\"string\">atom</span></span><br><span class=\"line\"><span class=\"attr\">  path:</span> <span class=\"string\">atom.xml</span></span><br><span class=\"line\"><span class=\"attr\">  limit:</span> <span class=\"number\">20</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"主题更换：推荐一个个人比较喜欢的fexo\"><a href=\"#主题更换：推荐一个个人比较喜欢的fexo\" class=\"headerlink\" title=\"主题更换：推荐一个个人比较喜欢的fexo\"></a>主题更换：推荐一个个人比较喜欢的fexo</h2><ul>\n<li><a href=\"https://github.com/forsigner/fexo\" target=\"_blank\" rel=\"noopener\">fexo</a>，中文文档，配置方法说明也很详细</li>\n<li>我是fork到我仓库使用的<ul>\n<li>打开大佬的github，点击右上角的fork按钮</li>\n<li>然后回到自己的github-&gt;Repositories，同名的仓库已经存在了，就是这么简单</li>\n<li>直接把fexo放到<code>my-blog/themes/</code>目录下即可<ul>\n<li>该目录下默认存在一个<code>landscape</code>文件夹，这个就是dexo自带的默认主题，更换主题后可以考虑删除</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>打开根目录的<code>_config.yml</code>，设为<code>theme: fexo</code></li>\n<li>主题配置全部在<code>theme/fexo</code>里面完成，所以下面所有配置指的是配置<code>theme/fexo/_config.yml</code></li>\n<li>名称<code>blog_name</code>，标语<code>slogan</code>，头像<code>avatar</code>什么的一笔带过</li>\n<li>导航，根据自己需要配置<ul>\n<li>除了<code>archives</code>是和hexo的配置文件对应的，其他都是fexo自己的</li>\n<li><em>关键是，关键是所有fexo自己的，都需要自己敲命令启动才好使<del>~</del></em></li>\n<li>启用就好，根据提示补充头，<code>_config.xml</code>中有默认Demo</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"fexo：启用分类页面\"><a href=\"#fexo：启用分类页面\" class=\"headerlink\" title=\"fexo：启用分类页面\"></a>fexo：启用分类页面</h2><ul>\n<li>根目录执行<code>hexo new page category</code></li>\n<li>修改<code>my-blog/source/category/index.md</code>内容</li>\n</ul>\n<figure class=\"highlight md\"><table><tr><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: category</span><br><span class=\"line\">layout: category</span><br><span class=\"line\">comments: false</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"fexo：启用标签页面\"><a href=\"#fexo：启用标签页面\" class=\"headerlink\" title=\"fexo：启用标签页面\"></a>fexo：启用标签页面</h2><ul>\n<li>根目录执行<code>hexo new page tag</code></li>\n<li>修改<code>my-blog/source/tag/index.md</code>内容</li>\n</ul>\n<figure class=\"highlight md\"><table><tr><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: tag</span><br><span class=\"line\">layout: tag</span><br><span class=\"line\">comments: false</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"fexo：启用友链页面\"><a href=\"#fexo：启用友链页面\" class=\"headerlink\" title=\"fexo：启用友链页面\"></a>fexo：启用友链页面</h2><ul>\n<li>根目录执行<code>hexo new page link</code></li>\n<li>修改<code>my-blog/source/link/index.md</code>内容</li>\n</ul>\n<figure class=\"highlight md\"><table><tr><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: link</span><br><span class=\"line\">layout: link</span><br><span class=\"line\">comments: false</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"fexo-启用关于页面\"><a href=\"#fexo-启用关于页面\" class=\"headerlink\" title=\"fexo: 启用关于页面\"></a>fexo: 启用关于页面</h2><ul>\n<li>根目录执行<code>hexo new page about</code></li>\n<li>修改<code>my-blog/source/about/index.md</code>内容</li>\n</ul>\n<figure class=\"highlight md\"><table><tr><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: about</span><br><span class=\"line\">layout: about</span><br><span class=\"line\">comments: false</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"fexo-启用项目页面\"><a href=\"#fexo-启用项目页面\" class=\"headerlink\" title=\"fexo: 启用项目页面\"></a>fexo: 启用项目页面</h2><ul>\n<li>根目录执行<code>hexo new page project</code></li>\n<li>修改<code>my-blog/source/project/index.md</code>内容</li>\n</ul>\n<figure class=\"highlight md\"><table><tr><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: project</span><br><span class=\"line\">layout: project</span><br><span class=\"line\">comments: false</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"fexo-自定义样式\"><a href=\"#fexo-自定义样式\" class=\"headerlink\" title=\"fexo: 自定义样式\"></a>fexo: 自定义样式</h2><ul>\n<li>未自定义样式情况，屏蔽<code>personal_style: /css/personal-style.css</code></li>\n<li>需要自定义样式，官网文档有实例</li>\n</ul>\n<h2 id=\"启用搜索页面\"><a href=\"#启用搜索页面\" class=\"headerlink\" title=\"启用搜索页面\"></a>启用搜索页面</h2><ul>\n<li>目录执行<code>hexo new page search</code></li>\n<li>修改<code>my-blog/source/search/index.md</code>内容</li>\n</ul>\n<figure class=\"highlight md\"><table><tr><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: search</span><br><span class=\"line\">layout: search</span><br><span class=\"line\">comments: false</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><em>然后安装 Hexo 插件<code>hexo-search</code></em><ul>\n<li><code>cd my-blog(hexo根目录)</code></li>\n<li><code>npm install hexo-search --save</code></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"安装完成，享受成果把\"><a href=\"#安装完成，享受成果把\" class=\"headerlink\" title=\"安装完成，享受成果把\"></a>安装完成，享受成果把</h2><ul>\n<li><code>hexo server</code>启动本地服务，看看效果如何</li>\n<li><code>hexo g</code>执行编译，编译结果静态文件保存到<code>Public</code>文件夹</li>\n</ul>\n<h2 id=\"部署到GitHub\"><a href=\"#部署到GitHub\" class=\"headerlink\" title=\"部署到GitHub\"></a>部署到GitHub</h2><ul>\n<li>把<code>Public</code>下所有内容发布到博客仓库即可<ul>\n<li>原理就是这么简单，如果想要自动化复制+上传，自己动手吧</li>\n<li>git命令行自动提交需要配置秘钥什么的，就别问我这种准备使用GitHub Desktop工具的农民了</li>\n</ul>\n</li>\n<li><a href=\"https://fxliu.github.io/\">我的成果</a></li>\n<li><a href=\"https://github.com/fxliu/hexo\" target=\"_blank\" rel=\"noopener\">源码仓库</a></li>\n<li><a href=\"https://github.com/fxliu/fxliu.github.io\" target=\"_blank\" rel=\"noopener\">博客仓库</a></li>\n</ul>\n","categories":["博客"],"tags":["hexo","github"]},{"title":"hexo小技巧汇总","url":"https://fxliu.github.io/2019/09/01/hexo小技巧汇总/","content":"<h2 id=\"hexo\"><a href=\"#hexo\" class=\"headerlink\" title=\"hexo\"></a>hexo</h2><h3 id=\"代码块不显示行号\"><a href=\"#代码块不显示行号\" class=\"headerlink\" title=\"代码块不显示行号\"></a>代码块不显示行号</h3><ul>\n<li>调整根目录<code>_config.yml</code>配置文件</li>\n<li><code>line_number</code>默认<code>true</code>显示行号，影响代码复制</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">highlight:</span></span><br><span class=\"line\"><span class=\"attr\">  line_number:</span> <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"fexo\"><a href=\"#fexo\" class=\"headerlink\" title=\"fexo\"></a>fexo</h2><ul>\n<li>调整根目录<code>_config.yml</code>配置文件</li>\n<li><code>busuanzi: true</code>开启网站统计<ul>\n<li>js代码：<code>fexo\\layout\\_partial\\head.ejs</code></li>\n</ul>\n</li>\n<li><code>baidu_analytics: ****</code>百度网站统计<ul>\n<li>js代码：<code>fexo\\layout\\_partial\\baidu-analytics.ejs</code><ul>\n<li>补充类型字段<code>hm.type = &quot;*.*&quot;;</code>，避免部分浏览器加载失败</li>\n</ul>\n</li>\n<li>百度推送：<code>fexo\\layout\\_partial\\baidu-analytics.ejs</code></li>\n</ul>\n</li>\n</ul>\n","categories":["博客"],"tags":["hexo"]},{"title":"测试页","url":"https://fxliu.github.io/2019/09/01/test/","content":"","categories":["博客","test"],"tags":["hexo"]},{"title":"关于","url":"https://fxliu.github.io/about/index.html","content":"","categories":[],"tags":[]},{"title":"分类","url":"https://fxliu.github.io/category/index.html","content":"","categories":[],"tags":[]},{"title":"search","url":"https://fxliu.github.io/search/index.html","content":"","categories":[],"tags":[]},{"title":"便捷标签","url":"https://fxliu.github.io/tag/index.html","content":"","categories":[],"tags":[]},{"title":"工具集","url":"https://fxliu.github.io/mylink/index.html","content":"<h2 id=\"工具集\"><a href=\"#工具集\" class=\"headerlink\" title=\"工具集\"></a>工具集</h2><p>先当作工作集整理吧</p>\n<h3 id=\"综合工具\"><a href=\"#综合工具\" class=\"headerlink\" title=\"综合工具\"></a>综合工具</h3><ul>\n<li><a href=\"https://www.appinn.com/\" target=\"_blank\" rel=\"noopener\">小众软件</a></li>\n<li><a href=\"https://www.zhihu.com/question/31044894/answer/549432901\" target=\"_blank\" rel=\"noopener\">idata</a>：各种期刊文献的学术资料网站</li>\n</ul>\n<h3 id=\"学习\"><a href=\"#学习\" class=\"headerlink\" title=\"学习\"></a>学习</h3><ul>\n<li><a href=\"https://zh.khanacademy.org/\" target=\"_blank\" rel=\"noopener\">可汗学院中文版</a><ul>\n<li>一家非盈利机构，努力为全世界所有人提供免费的一流教育。</li>\n</ul>\n</li>\n<li><a href=\"http://www.howzhi.com/\" target=\"_blank\" rel=\"noopener\">好知</a></li>\n<li><a href=\"http://www.jlpcn.net/\" target=\"_blank\" rel=\"noopener\">纪录片天地</a>：演讲/纪录片，全部免费</li>\n<li><a href=\"https://yixi.tv/\" target=\"_blank\" rel=\"noopener\">一席</a>：<ul>\n<li>一席鼓励分享见解、体验和对未来的想象，做有价值的传播。</li>\n<li>上面会聚集各行各业的分享者</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"娱乐\"><a href=\"#娱乐\" class=\"headerlink\" title=\"娱乐\"></a>娱乐</h3><ul>\n<li><a href=\"http://bddn.cn/zb.htm\" target=\"_blank\" rel=\"noopener\">全球电视直播</a><ul>\n<li>拥有你想看的任何电视台，不仅支持港澳台，还支持国内外，速度非常快，并且没有像视频平台的广告连篇</li>\n</ul>\n</li>\n<li><a href=\"http://www.mvcat.com/\" target=\"_blank\" rel=\"noopener\">影视资源聚合网站</a><ul>\n<li><strong>超级酷炫有木有</strong></li>\n<li>也有音乐</li>\n</ul>\n</li>\n<li><a href=\"http://www.shipinyu.cn/\" target=\"_blank\" rel=\"noopener\">视频鱼</a>：在线下载各大网站视频的网站<ul>\n<li>土豆，风行，百度什么的都不在话下</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"办公\"><a href=\"#办公\" class=\"headerlink\" title=\"办公\"></a>办公</h3><ul>\n<li><a href=\"https://templates.office.com\" target=\"_blank\" rel=\"noopener\">Office模板和主题</a><ul>\n<li>Office模板和主题是微软官方提供的Office模板网站</li>\n<li>免费</li>\n</ul>\n</li>\n<li><a href=\"http://magnet.chongbuluo.com/\" target=\"_blank\" rel=\"noopener\">虫部落</a>：资源搜索工具</li>\n<li><a href=\"https://www.dogedoge.com/\" target=\"_blank\" rel=\"noopener\">多吉搜索</a>：不追踪，不误导</li>\n</ul>\n<h3 id=\"酷炫-设计\"><a href=\"#酷炫-设计\" class=\"headerlink\" title=\"酷炫/设计\"></a>酷炫/设计</h3><ul>\n<li><a href=\"https://kepler.gl/\" target=\"_blank\" rel=\"noopener\">地图可视化生成器</a></li>\n<li><a href=\"https://bigjpg.com/\" target=\"_blank\" rel=\"noopener\">图片无损放大</a></li>\n<li><a href=\"https://chartify.io/\" target=\"_blank\" rel=\"noopener\">图表生成器</a></li>\n<li><a href=\"https://www.woodo.cn/\" target=\"_blank\" rel=\"noopener\">吾道幻灯片</a></li>\n<li><a href=\"https://www.hipdf.cn/\" target=\"_blank\" rel=\"noopener\">HiPDF</a>: 制作以及各种格式转换什么的</li>\n<li><a href=\"https://hao.uisdc.com/\" target=\"_blank\" rel=\"noopener\">设计师网址导航</a></li>\n<li><a href=\"https://uiiiuiii.com/screen/index.htm\" target=\"_blank\" rel=\"noopener\">屏幕尺寸大全</a></li>\n<li>图片/壁纸<ul>\n<li><a href=\"https://pixivic.com/\" target=\"_blank\" rel=\"noopener\">pixivic</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"工具\"><a href=\"#工具\" class=\"headerlink\" title=\"工具\"></a>工具</h3><ul>\n<li><a href=\"https://www.arcsoft.com.cn/\" target=\"_blank\" rel=\"noopener\">人脸识别</a><ul>\n<li>人脸识别，人证比对，活体检测，还支持人物属性检测（性别，年龄等）</li>\n<li>支持个人身份申请，免费</li>\n<li>支持Window,linux,安卓,接口还是比较简单的</li>\n</ul>\n</li>\n<li><a href=\"https://cn.office-converter.com/\" target=\"_blank\" rel=\"noopener\">转换格式大全</a>: 文件视频音乐统统有<ul>\n<li><a href=\"https://convertio.co/zh/\" target=\"_blank\" rel=\"noopener\">文件转换器</a></li>\n</ul>\n</li>\n<li><a href=\"http://24mail.chacuo.net/\" target=\"_blank\" rel=\"noopener\">临时邮箱</a><ul>\n<li>用于填写邮箱时候，不想使用您的真实邮箱情况。不需要注册，邮箱持续24小时。</li>\n<li>发送匿名邮件</li>\n</ul>\n</li>\n<li><a href=\"https://www.pdflibr.com/\" target=\"_blank\" rel=\"noopener\">临时接收手机验证码</a></li>\n</ul>\n<h3 id=\"赚钱\"><a href=\"#赚钱\" class=\"headerlink\" title=\"赚钱\"></a>赚钱</h3><ul>\n<li><a href=\"http://aso321.com/index.html\" target=\"_blank\" rel=\"noopener\">Aso试玩网</a><ul>\n<li>主要是用来下载一些APP，很多APP还没火的时候都是需要下载量的，这样才能在应用商店上的排名靠前，而商家前期会通过付费给下载用户的形式来得到这个前期种子量，基本上只要碎片时间比较多的学生，一天收入也能有80到100。</li>\n</ul>\n</li>\n<li><a href=\"https://mianbaoduo.com/\" target=\"_blank\" rel=\"noopener\">面包多</a><ul>\n<li>传播的任何文字/图片/视频/ 音频都是有价值的，这个网站可以将你自己的任何作品变成付费版的创作</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"github\"><a href=\"#github\" class=\"headerlink\" title=\"github\"></a>github</h3><ul>\n<li><a href=\"http://listen1.github.io/listen1/\" target=\"_blank\" rel=\"noopener\">listen1</a><ul>\n<li>Listen 1可以搜索和播放来自网易云音乐，虾米，QQ音乐，酷狗音乐，酷我音乐网站的歌曲，让你的曲库更全面。</li>\n<li>还支持歌单功能，你可以方便的播放，收藏和创建自己的歌单。</li>\n</ul>\n</li>\n</ul>\n","categories":[],"tags":[]},{"title":"project","url":"https://fxliu.github.io/myproject/index.html","content":"<h2 id=\"个人测试Demo\"><a href=\"#个人测试Demo\" class=\"headerlink\" title=\"个人测试Demo\"></a>个人测试Demo</h2><h3 id=\"VC-Demo\"><a href=\"#VC-Demo\" class=\"headerlink\" title=\"VC Demo\"></a>VC Demo</h3><ul>\n<li><a href=\"https://github.com/fxliu/VCDemo/tree/master/HOOK/KeyboardHook\" target=\"_blank\" rel=\"noopener\">键盘钩子</a></li>\n<li><a href=\"https://github.com/fxliu/VCDemo/tree/master/TOOLS/ffmpeg+SDL\" target=\"_blank\" rel=\"noopener\">FFmpeg+SDL播放器</a></li>\n</ul>\n<h2 id=\"第三方工具整理\"><a href=\"#第三方工具整理\" class=\"headerlink\" title=\"第三方工具整理\"></a>第三方工具整理</h2><h3 id=\"VC界面\"><a href=\"#VC界面\" class=\"headerlink\" title=\"VC界面\"></a>VC界面</h3><ul>\n<li>网易云信DuiLib<ul>\n<li><a href=\"https://github.com/netease-im/NIM_Duilib_Framework\" target=\"_blank\" rel=\"noopener\">NIM_Duilib_Framework</a></li>\n<li>Duilib + CEF3(简化版)，界面开发框架，有VC实例，比较容易上手<ul>\n<li>Duilib有组件说明文档</li>\n</ul>\n</li>\n<li>CEF3可以直接替换成CEF3完整版使用</li>\n<li>已知：简化版不支持打印</li>\n</ul>\n</li>\n</ul>\n","categories":[],"tags":[]},{"title":"友情链接","url":"https://fxliu.github.io/link/index.html","content":"","categories":[],"tags":[]},{"title":"project","url":"https://fxliu.github.io/project/index.html","content":"","categories":[],"tags":[]}]