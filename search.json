[{"title":"FFmepg(4.2)+SDL(2.0)播放器","url":"https://fxliu.github.io/2019/09/04/FFmepg+SDL播放器/","content":"<h2 id=\"FFmepg环境-4-2\"><a href=\"#FFmepg环境-4-2\" class=\"headerlink\" title=\"FFmepg环境(4.2)\"></a>FFmepg环境(4.2)</h2><ul>\n<li><a href=\"http://ffmpeg.zeranoe.com/builds/\" target=\"_blank\" rel=\"noopener\">FFmepg官网</a> 下载最新的ffmpeg的dev版和share版，当前最新版是4.2<ul>\n<li>注意区分x64和x86，取决于你vs2015调试的解决方案平台用什么，如果安装了错误的版本将会出现一堆无法解析的错误</li>\n<li>包含三个版本：Static、Shared以及Dev<ul>\n<li>Static: 包含3个应用程序：ffmpeg.exe , ffplay.exe , ffprobe.exe，体积都很大，相关的DLL已经被编译到exe里面去了。</li>\n<li>Shared: 除了ffmpeg.exe , ffplay.exe , ffprobe.exe之外还有一些DLL，exe体积很小，在运行时到相应的DLL中调用功能。</li>\n<li>Dev: 开发者（developer）版本，里面包含了库文件xxx.lib以及头文件xxx.h，这个版本不含exe文件</li>\n</ul>\n</li>\n<li>把dev版本与share版本都下下来解压，dev版本文件夹中的Include和lib目录整个儿复制到VS项目目录下</li>\n<li>将share版本文件夹中bin目录下对应的所有dll复制到exe根目录</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"FFmepg引入\"><a href=\"#FFmepg引入\" class=\"headerlink\" title=\"FFmepg引入\"></a>FFmepg引入</h3><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 头文件中的函数定义在编译为 C 程序的文件中，而头文件是在 C++ 文件中不带 extern “C” 修饰符声明的。在此情况下，需要添加extern \"C\"修饰符。</span></span><br><span class=\"line\"><span class=\"comment\">// 不添加 extern “C” 修饰符 会提示 无法解析 导致编译失败</span></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"string\">\"C\"</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"libavcodec\\avcodec.h\"</span>  </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"libavformat\\avformat.h\"</span>  </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"libavutil\\channel_layout.h\"</span>  </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"libavutil\\common.h\"</span>  </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"libavutil\\imgutils.h\"</span>  </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"libswscale\\swscale.h\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"libavutil\\imgutils.h\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"libavutil\\opt.h\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"libavutil\\mathematics.h\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"libavutil\\samplefmt.h\"</span></span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> comment(lib, <span class=\"meta-string\">\"avcodec.lib\"</span>)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> comment(lib, <span class=\"meta-string\">\"avformat.lib\"</span>)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> comment(lib, <span class=\"meta-string\">\"avdevice.lib\"</span>)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> comment(lib, <span class=\"meta-string\">\"avfilter.lib\"</span>)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> comment(lib, <span class=\"meta-string\">\"avutil.lib\"</span>)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> comment(lib, <span class=\"meta-string\">\"postproc.lib\"</span>)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> comment(lib, <span class=\"meta-string\">\"swresample.lib\"</span>)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> comment(lib, <span class=\"meta-string\">\"swscale.lib\"</span>)</span></span><br><span class=\"line\"><span class=\"comment\">// 测试</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"%s\"</span>, avcodec_configuration());</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"FFmepg应用\"><a href=\"#FFmepg应用\" class=\"headerlink\" title=\"FFmepg应用\"></a>FFmepg应用</h3><p>关键函数调试不通过时，还是自己到dev版的examples搜函数使用案例吧，网上各种旧版本的说明，有些函数已经废弃了，调用逻辑也不对</p>\n<p>视频播放基本上时固定模式打开-&gt;参数设定-&gt;读取-&gt;解码-&gt;转码-&gt;显示，剩下的看Demo吧</p>\n<p>音频处理流程基本类似</p>\n<ul>\n<li><code>avformat_open_input</code>打开视频文件<ul>\n<li><code>avformat_close_input</code>关闭视频文件</li>\n</ul>\n</li>\n<li><code>av_read_frame</code>读</li>\n<li><code>avcodec_send_packet</code> -&gt; <code>avcodec_receive_frame</code>解码</li>\n<li><code>sws_scale</code>转码，Demo中时转为YUV420P格式，提供SDL播放<ul>\n<li>注意保存解码结果的缓冲区的申请，被网上旧代码各种坑，自己去examples看官方势力吧</li>\n<li>注意还有个视频/音频播放延迟提取，SDL播放时要做到音视频同步</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"备记几个FFmepg常用参数\"><a href=\"#备记几个FFmepg常用参数\" class=\"headerlink\" title=\"备记几个FFmepg常用参数\"></a>备记几个FFmepg常用参数</h3><ul>\n<li>格式转换<ul>\n<li><code>ffmpeg -i input.avi output.mp4</code></li>\n<li><code>-vcodec mpeg4</code>：指定编码格式</li>\n</ul>\n</li>\n<li>裁剪：从30秒开始到40秒<ul>\n<li><code>ffmpeg -i input.wmv -ss 30 -t 10 output.wmv</code></li>\n<li><code>ffmpeg -i input.wmv -ss 30 -to 40 output.wmv</code></li>\n<li><code>-c copy</code>：复制所有的流</li>\n<li><code>-vcodec copy</code>：使用跟原视频一样的视频编解码器</li>\n<li><code>-acodec copy</code>：使用跟原视频一样的音频编解码器</li>\n</ul>\n</li>\n<li>音量：音贝<ul>\n<li><code>.\\ffmpeg -i s1.mp4 -af &quot;volumedetect&quot; -f null /dev/null</code>：查看<code>mean_volume</code>-&gt;<code>max_volume</code></li>\n<li><code>ffmpeg  -i input.mp3 -af &quot;volume=0.5&quot; output.mp3</code>：减半</li>\n<li><code>ffmpeg  -i input.mp3 -af &quot;volume=2&quot; output.mp3</code>：加倍</li>\n<li><code>ffmpeg  -i input.mp3 -af &quot;volume=5dB&quot; output.mp3</code>：增加指定分贝数（使用负数<code>-5dB</code>则为降低分贝）</li>\n<li><code>ffmepg -i input.mp3 -filter:a &quot;loudnorm&quot; output.mp3</code>：音频标准化：削峰填谷，使整个音频的音量变化跨度降低，变得平滑</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"SDL环境-2-0\"><a href=\"#SDL环境-2-0\" class=\"headerlink\" title=\"SDL环境(2.0)\"></a>SDL环境(2.0)</h2><ul>\n<li><a href=\"http://www.libsdl.org/\" target=\"_blank\" rel=\"noopener\">SDL官网</a></li>\n</ul>\n<h3 id=\"SDL引入\"><a href=\"#SDL引入\" class=\"headerlink\" title=\"SDL引入\"></a>SDL引入</h3><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"string\">\"C\"</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"ffmpeg\\libavutil\\frame.h\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"SDL/SDL.h\"</span></span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> comment(lib, <span class=\"meta-string\">\"SDL2.lib\"</span>)</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"SDL应用\"><a href=\"#SDL应用\" class=\"headerlink\" title=\"SDL应用\"></a>SDL应用</h3><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 初始化</span></span><br><span class=\"line\">SDL_Init(SDL_INIT_EVERYTHING);</span><br><span class=\"line\"><span class=\"comment\">// 创建窗体：支持直接创建一个弹出窗，或者附加到指定窗体句柄上</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!m_hWnd)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  m_sdlWindow = SDL_CreateWindow(<span class=\"string\">\"SDL_Window\"</span>, SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED,</span><br><span class=\"line\">    w, h, SDL_WINDOW_SHOWN | SDL_WINDOW_RESIZABLE);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  m_sdlWindow = SDL_CreateWindowFrom(m_hWnd);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 渲染器</span></span><br><span class=\"line\">m_sdlRenderer = SDL_CreateRenderer(m_sdlWindow, <span class=\"number\">-1</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"comment\">// 设置Renderer按视频比例(m_videoWidth, m_videoHeight)缩放，默认按屏幕拉伸</span></span><br><span class=\"line\">SDL_RenderSetLogicalSize(m_sdlRenderer, m_videoWidth, m_videoHeight);</span><br><span class=\"line\"><span class=\"comment\">// 纹理：Texture宽高一定要对应视频宽高</span></span><br><span class=\"line\">m_sdlTexture = SDL_CreateTexture(m_sdlRenderer, SDL_PIXELFORMAT_IYUV, SDL_TEXTUREACCESS_STREAMING, m_videoWidth, m_videoHeight);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 视频播放 frame 为FFmepg解码后的数据帧</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (m_sdlTexture) SDL_UpdateTexture(m_sdlTexture, <span class=\"literal\">NULL</span>, frame-&gt;data[<span class=\"number\">0</span>], frame-&gt;linesize[<span class=\"number\">0</span>]);</span><br><span class=\"line\"><span class=\"comment\">// 遇到SDL_UpdateTexture崩溃情况的话，可以尝试直接调用SDL_UpdateYUVTexture</span></span><br><span class=\"line\"><span class=\"comment\">//if (m_sdlTexture) SDL_UpdateYUVTexture(m_sdlTexture, NULL,</span></span><br><span class=\"line\"><span class=\"comment\">//  frame-&gt;data[0], frame-&gt;linesize[0], frame-&gt;data[1], frame-&gt;linesize[1], frame-&gt;data[2], frame-&gt;linesize[2]);</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (m_sdlRenderer) SDL_RenderClear(m_sdlRenderer);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (m_sdlRenderer &amp;&amp; m_sdlTexture) SDL_RenderCopy(m_sdlRenderer, m_sdlTexture, <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (m_sdlRenderer) SDL_RenderPresent(m_sdlRenderer);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 清理</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (m_sdlTexture)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  SDL_DestroyTexture(m_sdlTexture);</span><br><span class=\"line\">  m_sdlTexture = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (m_sdlRenderer)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  SDL_DestroyRenderer(m_sdlRenderer);</span><br><span class=\"line\">  m_sdlRenderer = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (m_sdlWindowScreen)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  SDL_FreeSurface(m_sdlWindowScreen);</span><br><span class=\"line\">  m_sdlWindowScreen = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (m_sdlWindow)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  SDL_DestroyWindow(m_sdlWindow);</span><br><span class=\"line\">  m_sdlWindow = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">SDL_Quit();</span><br><span class=\"line\"><span class=\"comment\">// ----------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">// 音频播放回调</span></span><br><span class=\"line\"><span class=\"comment\">//音频设备需要更多数据的时候会调用该回调函数</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> CMyVideo::read_audio_data(<span class=\"keyword\">void</span> *udata, Uint8 *stream, <span class=\"keyword\">int</span> len)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  CMyVideo *pThis = (CMyVideo*)udata;</span><br><span class=\"line\">  <span class=\"comment\">//首先使用SDL_memset()将stream中的数据设置为0</span></span><br><span class=\"line\">  SDL_memset(stream, <span class=\"number\">0</span>, len);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (pThis-&gt;m_audio_len == <span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  len = (len &gt; (<span class=\"keyword\">int</span>)pThis-&gt;m_audio_len ? pThis-&gt;m_audio_len : len);</span><br><span class=\"line\">  <span class=\"comment\">// 最后一个参数代表音量：SDL_MIX_MAXVOLUME</span></span><br><span class=\"line\">  SDL_MixAudio(stream, pThis-&gt;m_audio_pos, len, pThis-&gt;m_volume);</span><br><span class=\"line\">  pThis-&gt;m_audio_pos += len;</span><br><span class=\"line\">  pThis-&gt;m_audio_len -= len;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 打开音频</span></span><br><span class=\"line\">BOOL CMyVideo::OpenAudio(<span class=\"keyword\">int</span> audioRate, Uint16 audioFrameSize)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 音频参数: 最好和视频参数保持一致，否则会有杂声</span></span><br><span class=\"line\">  SDL_AudioSpec spec;</span><br><span class=\"line\">  spec.freq = audioRate;        <span class=\"comment\">// 对应音频转换设置</span></span><br><span class=\"line\">  spec.format = AUDIO_S32;      <span class=\"comment\">// 对应音频转换设置</span></span><br><span class=\"line\">  spec.channels = <span class=\"number\">2</span>;</span><br><span class=\"line\">  spec.silence = <span class=\"number\">0</span>;</span><br><span class=\"line\">  spec.samples = audioFrameSize;    <span class=\"comment\">// 对应音频帧缓存大小</span></span><br><span class=\"line\">  spec.callback = read_audio_data;</span><br><span class=\"line\">  spec.userdata = <span class=\"keyword\">this</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (SDL_OpenAudio(&amp;spec, <span class=\"literal\">NULL</span>) &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> FALSE;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  SDL_PauseAudio(<span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> TRUE;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 音频播放：buf/len为FFmepg音频解析结果</span></span><br><span class=\"line\">m_audio_chunk = buf[<span class=\"number\">0</span>];</span><br><span class=\"line\">m_audio_pos = m_audio_chunk;</span><br><span class=\"line\">m_audio_len = len;</span><br><span class=\"line\"><span class=\"comment\">// 等待播放完成</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> (m_audio_len &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">  SDL_Delay(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 音频关闭</span></span><br><span class=\"line\">SDL_CloseAudio();</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"SDL扩展\"><a href=\"#SDL扩展\" class=\"headerlink\" title=\"SDL扩展\"></a>SDL扩展</h2><ul>\n<li><a href=\"http://www.libsdl.org/projects/SDL_image/\" target=\"_blank\" rel=\"noopener\">SDL_Image</a>扩展支持多种类型图片加载<ul>\n<li>SDL默认只支持加载BMP</li>\n</ul>\n</li>\n<li><a href=\"http://www.libsdl.org/projects/SDL_mixer/\" target=\"_blank\" rel=\"noopener\">SDL_mixer</a>扩展各种音乐播放</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 窗体创建：略，SDL窗体句柄：sdlWindow</span></span><br><span class=\"line\">SDL_Surface *image = SDL_LoadBMP(<span class=\"string\">\"1.bmp\"</span>);</span><br><span class=\"line\">SDL_Renderer *renderer = SDL_CreateRenderer(sdlWindow, <span class=\"number\">-1</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">SDL_Texture *texture = SDL_CreateTextureFromSurface(renderer, image);</span><br><span class=\"line\"><span class=\"comment\">// SDL_RenderClear(renderer);</span></span><br><span class=\"line\"><span class=\"comment\">// 复制到渲染器</span></span><br><span class=\"line\">SDL_RenderCopy(renderer, texture, <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\"><span class=\"comment\">// 渲染显示</span></span><br><span class=\"line\">SDL_RenderPresent(renderer);</span><br><span class=\"line\"><span class=\"comment\">// 数据释放：略</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 代码备记：未校验</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;SDL\\SDL_mixer.h&gt;</span></span></span><br><span class=\"line\">SDL_Init(SDL_INIT_EVERYTHING)</span><br><span class=\"line\">Mix_OpenAudio(<span class=\"number\">44100</span>,MIX_DEFAULT_FORMAT,<span class=\"number\">2</span>,<span class=\"number\">2048</span>);</span><br><span class=\"line\">Mix_Music *sound=Mix_LoadMUS(<span class=\"string\">\"sound.wav\"</span>);</span><br><span class=\"line\">Mix_PlayMusic(sound,<span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"备注\"><a href=\"#备注\" class=\"headerlink\" title=\"备注\"></a>备注</h2><ul>\n<li>注意FFmepg解析和SDL播放需要多线程分开，避免视频/音频播放卡顿</li>\n<li>SDL音频和视频的播放一定要多线程，不能相互等待</li>\n<li>音频和视频要注意延迟处理，Window延迟控制是达不到播放要求的，做个毫秒级的延迟同步即可，人类是感知不到这点误差的</li>\n<li>音视频同步要控制视频播放，让视频帧根据音频播放加减速，声音播放不能卡顿，很容被人耳感知的</li>\n<li>SDL核心是图像的加载，渲染，显示；而视频播放就是图片快速切换而已。</li>\n</ul>\n<h2 id=\"Demo\"><a href=\"#Demo\" class=\"headerlink\" title=\"Demo\"></a>Demo</h2><p><a href=\"https://github.com/fxliu/VCDemo/tree/master/TOOLS/ffmpeg+SDL\" target=\"_blank\" rel=\"noopener\">FFmpeg+SDL播放器</a><br><code>https://github.com/fxliu/VCDemo/tree/master/TOOLS/ffmpeg+SDL</code></p>\n","categories":["博客"],"tags":["FFmepg","SDL"]},{"title":"hexo小技巧汇总","url":"https://fxliu.github.io/2019/09/01/hexo小技巧汇总/","content":"<h2 id=\"hexo\"><a href=\"#hexo\" class=\"headerlink\" title=\"hexo\"></a>hexo</h2><h3 id=\"代码块不显示行号\"><a href=\"#代码块不显示行号\" class=\"headerlink\" title=\"代码块不显示行号\"></a>代码块不显示行号</h3><ul>\n<li>调整根目录<code>_config.yml</code>配置文件</li>\n<li><code>line_number</code>默认<code>true</code>显示行号，影响代码复制</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">highlight:</span></span><br><span class=\"line\"><span class=\"attr\">  line_number:</span> <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"fexo\"><a href=\"#fexo\" class=\"headerlink\" title=\"fexo\"></a>fexo</h2><ul>\n<li>调整根目录<code>_config.yml</code>配置文件</li>\n<li><code>busuanzi: true</code>开启网站统计<ul>\n<li>js代码：<code>fexo\\layout\\_partial\\head.ejs</code></li>\n</ul>\n</li>\n<li><code>baidu_analytics: ****</code>百度网站统计<ul>\n<li>js代码：<code>fexo\\layout\\_partial\\baidu-analytics.ejs</code><ul>\n<li>补充类型字段<code>hm.type = &quot;*.*&quot;;</code>，避免部分浏览器加载失败</li>\n</ul>\n</li>\n<li>百度推送：<code>fexo\\layout\\_partial\\baidu-analytics.ejs</code></li>\n</ul>\n</li>\n</ul>\n","categories":["博客"],"tags":["hexo"]},{"title":"测试页","url":"https://fxliu.github.io/2019/09/01/test/","content":"","categories":["博客","test"],"tags":["hexo"]},{"title":"github+hexo搭建个人博客","url":"https://fxliu.github.io/2019/09/01/github+hexo搭建个人博客/","content":"<ul>\n<li><a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo官网</a></li>\n<li><a href=\"https://hexo.io/zh-cn/docs/\" target=\"_blank\" rel=\"noopener\">Hexo中文网</a></li>\n</ul>\n<hr>\n<h2 id=\"nodejs\"><a href=\"#nodejs\" class=\"headerlink\" title=\"nodejs\"></a>nodejs</h2><ul>\n<li>官网<a href=\"http://nodejs.cn/download/\" title=\"中文网\" target=\"_blank\" rel=\"noopener\">下载</a>安装最新版即可</li>\n<li><a href=\"https://npm.taobao.org/\" target=\"_blank\" rel=\"noopener\">淘宝cnpm镜像</a><ul>\n<li><code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code></li>\n<li>备注：先装的nodejs 64位，cnpm安装失败，各种百度 - 各种尝试 - 各种不好使；卸载重装32位搞定，心都碎了。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"GitHub\"><a href=\"#GitHub\" class=\"headerlink\" title=\"GitHub\"></a>GitHub</h2><ul>\n<li><a href=\"https://desktop.github.com/\" target=\"_blank\" rel=\"noopener\">GitHub Desktop</a>: 桌面版，Git UI工具</li>\n<li><a href=\"https://gitforwindows.org/\" target=\"_blank\" rel=\"noopener\">Git For Windows</a>: Git命令行工具，hexo需要</li>\n<li>仓库1：<a href=\"https://github.com/fxliu/fxliu.github.io\" title=\"静态文件\" target=\"_blank\" rel=\"noopener\">博客仓库</a>静态文件部署位置</li>\n<li>GitHub免费提供，申请方法问度娘，每个账号可以免费申请一个</li>\n<li>仓库2：<a href=\"https://github.com/fxliu/hexo\" target=\"_blank\" rel=\"noopener\">源码仓库</a>hexo源码保存位置</li>\n</ul>\n<h2 id=\"VSCode：编译器\"><a href=\"#VSCode：编译器\" class=\"headerlink\" title=\"VSCode：编译器\"></a>VSCode：编译器</h2><ul>\n<li>微软官网<a href=\"https://code.visualstudio.com/\" target=\"_blank\" rel=\"noopener\">下载</a>安装</li>\n<li>推荐插件<ul>\n<li><code>Ctrl+Shift+P</code>-&gt;<code>configure Display Language</code>安装简体中文</li>\n<li><code>Ctrl+Shift+X</code>-&gt;<code>Markdown All in One</code></li>\n<li><code>Ctrl+Shift+X</code>-&gt;<code>Markdown Preview Github Styling</code><ul>\n<li><a href=\"https://www.jianshu.com/p/51523a1c6fe1\" target=\"_blank\" rel=\"noopener\">规则翻译</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"hexo\"><a href=\"#hexo\" class=\"headerlink\" title=\"hexo\"></a><a href=\"https://hexo.io/zh-cn/docs/\" target=\"_blank\" rel=\"noopener\">hexo</a></h2><ul>\n<li>安装：<code>cnpm install -g hexo-cli</code></li>\n<li>初始化：<code>hexo init 保存博客源码目录</code></li>\n<li>配置：<a href=\"https://hexo.io/zh-cn/docs/configuration\" target=\"_blank\" rel=\"noopener\">官网中文文档</a>说的很详细了<ul>\n<li>然而，只需要把title什么的改成自己的就行了，其他都不用动</li>\n</ul>\n</li>\n<li><code>hexo server</code>启动本地服务，看看效果如何</li>\n</ul>\n<h2 id=\"RSS插件\"><a href=\"#RSS插件\" class=\"headerlink\" title=\"RSS插件\"></a>RSS插件</h2><ul>\n<li>安装插件：<code>cnpm install hexo-generator-feed</code></li>\n<li>启用插件：修改根目录下<code>_config.yml</code>配置文件</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Extensions</span></span><br><span class=\"line\"><span class=\"attr\">plugins:</span></span><br><span class=\"line\">  <span class=\"string\">hexo-generator-feed</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#Feed Atom</span></span><br><span class=\"line\"><span class=\"attr\">feed:</span></span><br><span class=\"line\"><span class=\"attr\">  type:</span> <span class=\"string\">atom</span></span><br><span class=\"line\"><span class=\"attr\">  path:</span> <span class=\"string\">atom.xml</span></span><br><span class=\"line\"><span class=\"attr\">  limit:</span> <span class=\"number\">20</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"主题更换：推荐一个个人比较喜欢的fexo\"><a href=\"#主题更换：推荐一个个人比较喜欢的fexo\" class=\"headerlink\" title=\"主题更换：推荐一个个人比较喜欢的fexo\"></a>主题更换：推荐一个个人比较喜欢的fexo</h2><ul>\n<li><a href=\"https://github.com/forsigner/fexo\" target=\"_blank\" rel=\"noopener\">fexo</a>，中文文档，配置方法说明也很详细</li>\n<li>我是fork到我仓库使用的<ul>\n<li>打开大佬的github，点击右上角的fork按钮</li>\n<li>然后回到自己的github-&gt;Repositories，同名的仓库已经存在了，就是这么简单</li>\n</ul>\n</li>\n<li>打开根目录的<code>_config.yml</code>，设为<code>theme: fexo</code></li>\n<li>主题配置全部在<code>theme/fexo</code>里面完成，所以下面所有配置指的是配置<code>theme/fexo/_config.yml</code></li>\n<li>名称<code>blog_name</code>，标语<code>slogan</code>，头像<code>avatar</code>什么的一笔带过</li>\n<li>导航，根据自己需要配置<ul>\n<li>除了<code>archives</code>是和hexo的配置文件对应的，其他都是fexo自己的</li>\n<li><em>关键是，关键是所有fexo自己的，都需要自己敲命令启动才好使<del>~</del></em></li>\n<li>启用就好，根据提示补充头，<code>_config.xml</code>中有默认Demo</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"fexo：启用分类页面\"><a href=\"#fexo：启用分类页面\" class=\"headerlink\" title=\"fexo：启用分类页面\"></a>fexo：启用分类页面</h2><ul>\n<li>根目录执行<code>hexo new page category</code></li>\n<li>修改<code>my-blog/source/category/index.md</code>内容</li>\n</ul>\n<figure class=\"highlight md\"><table><tr><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: category</span><br><span class=\"line\">layout: category</span><br><span class=\"line\">comments: false</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"fexo：启用标签页面\"><a href=\"#fexo：启用标签页面\" class=\"headerlink\" title=\"fexo：启用标签页面\"></a>fexo：启用标签页面</h2><ul>\n<li>根目录执行<code>hexo new page tag</code></li>\n<li>修改<code>my-blog/source/tag/index.md</code>内容</li>\n</ul>\n<figure class=\"highlight md\"><table><tr><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: tag</span><br><span class=\"line\">layout: tag</span><br><span class=\"line\">comments: false</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"fexo：启用友链页面\"><a href=\"#fexo：启用友链页面\" class=\"headerlink\" title=\"fexo：启用友链页面\"></a>fexo：启用友链页面</h2><ul>\n<li>根目录执行<code>hexo new page link</code></li>\n<li>修改<code>my-blog/source/link/index.md</code>内容</li>\n</ul>\n<figure class=\"highlight md\"><table><tr><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: link</span><br><span class=\"line\">layout: link</span><br><span class=\"line\">comments: false</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"fexo-启用关于页面\"><a href=\"#fexo-启用关于页面\" class=\"headerlink\" title=\"fexo: 启用关于页面\"></a>fexo: 启用关于页面</h2><ul>\n<li>根目录执行<code>hexo new page about</code></li>\n<li>修改<code>my-blog/source/about/index.md</code>内容</li>\n</ul>\n<figure class=\"highlight md\"><table><tr><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: about</span><br><span class=\"line\">layout: about</span><br><span class=\"line\">comments: false</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"fexo-启用项目页面\"><a href=\"#fexo-启用项目页面\" class=\"headerlink\" title=\"fexo: 启用项目页面\"></a>fexo: 启用项目页面</h2><ul>\n<li>根目录执行<code>hexo new page project</code></li>\n<li>修改<code>my-blog/source/project/index.md</code>内容</li>\n</ul>\n<figure class=\"highlight md\"><table><tr><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: project</span><br><span class=\"line\">layout: project</span><br><span class=\"line\">comments: false</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"fexo-自定义样式\"><a href=\"#fexo-自定义样式\" class=\"headerlink\" title=\"fexo: 自定义样式\"></a>fexo: 自定义样式</h2><ul>\n<li>未自定义样式情况，屏蔽<code>personal_style: /css/personal-style.css</code></li>\n<li>需要自定义样式，官网文档有实例</li>\n</ul>\n<h2 id=\"启用搜索页面\"><a href=\"#启用搜索页面\" class=\"headerlink\" title=\"启用搜索页面\"></a>启用搜索页面</h2><ul>\n<li>目录执行<code>hexo new page search</code></li>\n<li>修改<code>my-blog/source/search/index.md</code>内容</li>\n</ul>\n<figure class=\"highlight md\"><table><tr><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: search</span><br><span class=\"line\">layout: search</span><br><span class=\"line\">comments: false</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><em>然后安装 Hexo 插件<code>hexo-search</code></em><ul>\n<li><code>cd my-blog(hexo根目录)</code></li>\n<li><code>npm install hexo-search --save</code></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"安装完成，享受成果把\"><a href=\"#安装完成，享受成果把\" class=\"headerlink\" title=\"安装完成，享受成果把\"></a>安装完成，享受成果把</h2><ul>\n<li><code>hexo server</code>启动本地服务，看看效果如何</li>\n<li><code>hexo g</code>执行编译，编译结果静态文件保存到<code>Public</code>文件夹</li>\n</ul>\n<h2 id=\"部署到GitHub\"><a href=\"#部署到GitHub\" class=\"headerlink\" title=\"部署到GitHub\"></a>部署到GitHub</h2><ul>\n<li>把<code>Public</code>下所有内容发布到博客仓库即可<ul>\n<li>原理就是这么简单，如果想要自动化复制+上传，自己动手吧</li>\n<li>git命令行自动提交需要配置秘钥什么的，就别问我这种准备使用GitHub Desktop工具的农民了</li>\n</ul>\n</li>\n<li><a href=\"https://fxliu.github.io/\">我的成果</a></li>\n<li><a href=\"https://github.com/fxliu/hexo\" target=\"_blank\" rel=\"noopener\">源码仓库</a></li>\n<li><a href=\"https://github.com/fxliu/fxliu.github.io\" target=\"_blank\" rel=\"noopener\">博客仓库</a></li>\n</ul>\n","categories":["博客"],"tags":["hexo","github"]},{"title":"search","url":"https://fxliu.github.io/search/index.html","content":"","categories":[],"tags":[]},{"title":"分类","url":"https://fxliu.github.io/category/index.html","content":"","categories":[],"tags":[]},{"title":"友情链接","url":"https://fxliu.github.io/link/index.html","content":"","categories":[],"tags":[]},{"title":"关于","url":"https://fxliu.github.io/about/index.html","content":"","categories":[],"tags":[]},{"title":"便捷标签","url":"https://fxliu.github.io/tag/index.html","content":"","categories":[],"tags":[]},{"title":"project","url":"https://fxliu.github.io/project/index.html","content":"<h2 id=\"个人测试Demo\"><a href=\"#个人测试Demo\" class=\"headerlink\" title=\"个人测试Demo\"></a>个人测试Demo</h2><h3 id=\"VC-Demo\"><a href=\"#VC-Demo\" class=\"headerlink\" title=\"VC Demo\"></a>VC Demo</h3><ul>\n<li><a href=\"https://github.com/fxliu/VCDemo/tree/master/HOOK/KeyboardHook\" target=\"_blank\" rel=\"noopener\">键盘钩子</a></li>\n<li><a href=\"https://github.com/fxliu/VCDemo/tree/master/TOOLS/ffmpeg+SDL\" target=\"_blank\" rel=\"noopener\">FFmpeg+SDL播放器</a></li>\n</ul>\n<h2 id=\"第三方工具整理\"><a href=\"#第三方工具整理\" class=\"headerlink\" title=\"第三方工具整理\"></a>第三方工具整理</h2><h3 id=\"VC界面\"><a href=\"#VC界面\" class=\"headerlink\" title=\"VC界面\"></a>VC界面</h3><ul>\n<li>网易云信DuiLib<ul>\n<li><a href=\"https://github.com/netease-im/NIM_Duilib_Framework\" target=\"_blank\" rel=\"noopener\">NIM_Duilib_Framework</a></li>\n<li>Duilib + CEF3(简化版)，界面开发框架，有VC实例，比较容易上手<ul>\n<li>Duilib有组件说明文档</li>\n</ul>\n</li>\n<li>CEF3可以直接替换成CEF3完整版使用</li>\n<li>已知：简化版不支持打印</li>\n</ul>\n</li>\n<li>TODO</li>\n</ul>\n","categories":[],"tags":[]}]