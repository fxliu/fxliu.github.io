[{"title":"Camera","url":"/2020/02/26/Android/系统/Camera/","content":"<h2 id=\"第三方\"><a href=\"#第三方\" class=\"headerlink\" title=\"第三方\"></a>第三方</h2><ul>\n<li><p><a href=\"https://developer.android.google.cn/training/camera\" target=\"_blank\" rel=\"noopener\">camera安卓开发文档</a></p>\n</li>\n<li><p><a href=\"https://github.com/LuckSiege/PictureSelector\" target=\"_blank\" rel=\"noopener\">PictureSelector</a></p>\n</li>\n<li><p><a href=\"https://github.com/CameraKit/camerakit-android\" target=\"_blank\" rel=\"noopener\">camerakit-android</a></p>\n</li>\n<li><p><a href=\"https://github.com/bilibili/boxing\" target=\"_blank\" rel=\"noopener\">boxing</a></p>\n</li>\n<li><p><a href=\"https://github.com/natario1/CameraView\" target=\"_blank\" rel=\"noopener\">CameraView</a></p>\n</li>\n<li><p><a href=\"https://github.com/CJT2325/CameraView\" target=\"_blank\" rel=\"noopener\">CameraView</a></p>\n</li>\n</ul>\n<h2 id=\"PictureSelector\"><a href=\"#PictureSelector\" class=\"headerlink\" title=\"PictureSelector\"></a>PictureSelector</h2><pre><code class=\"Java\"></code></pre>\n","categories":["Android"],"tags":["Camera"]},{"title":"AgentWeb","url":"/2020/02/23/Android/第三方/AgentWeb/","content":"<h2 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h2><p><a href=\"https://github.com/Justson/AgentWeb\" target=\"_blank\" rel=\"noopener\">AgentWeb-GitHub-包含Demo</a></p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// build.gradle(app)</span></span><br><span class=\"line\">implementation <span class=\"string\">'com.just.agentweb:agentweb:4.1.2'</span> <span class=\"comment\">// (必选)</span></span><br><span class=\"line\">implementation <span class=\"string\">'com.just.agentweb:filechooser:4.1.2'</span><span class=\"comment\">// (可选)</span></span><br><span class=\"line\">implementation <span class=\"string\">'com.download.library:Downloader:4.1.2'</span><span class=\"comment\">// (可选)</span></span><br><span class=\"line\"><span class=\"comment\">// Demo\\sample\\libs目录有 alipaySdk-20180601.jar // (可选)</span></span><br><span class=\"line\"><span class=\"comment\">// AgentWeb会尝试加载所有组件，可选功能没有时，会报错，忽略即可</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># release 编译混淆告警处理</span><br><span class=\"line\"># 依赖的第三方库，取消混淆即可</span><br><span class=\"line\">-dontwarn com.download.library.**</span><br><span class=\"line\">-keep class com.download.library.** &#123; *; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">-dontwarn com.alipay.sdk.**</span><br><span class=\"line\">-keep class com.alipay.sdk.** &#123; *; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">-dontwarn me.nereo.multi_image_selector.**</span><br><span class=\"line\">-keep class me.nereo.multi_image_selector.** &#123; *; &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 附加对象从Demo获取即可</span></span><br><span class=\"line\">AgentWeb mAgentWeb;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Init</span><span class=\"params\">(AppCompatActivity app)</span> </span>&#123;</span><br><span class=\"line\">    mAgentWeb = AgentWeb.with(app)</span><br><span class=\"line\">            .setAgentWebParent((LinearLayout) app.findViewById(R.id.webLayout), <span class=\"keyword\">new</span> LinearLayout.LayoutParams(-<span class=\"number\">1</span>, -<span class=\"number\">1</span>))</span><br><span class=\"line\">            .useDefaultIndicator()</span><br><span class=\"line\">            .setAgentWebWebSettings(<span class=\"keyword\">new</span> CustomSettings())</span><br><span class=\"line\">            .setWebChromeClient(mWebChromeClient)</span><br><span class=\"line\">            .setWebViewClient(mWebViewClient)</span><br><span class=\"line\">            .setAgentWebUIController(mAgentWebUIController)</span><br><span class=\"line\">            .setMainFrameErrorView(R.layout.agentweb_error_page, -<span class=\"number\">1</span>)</span><br><span class=\"line\">            .setSecurityType(AgentWeb.SecurityType.STRICT_CHECK)</span><br><span class=\"line\">            .setWebLayout(<span class=\"keyword\">new</span> WebLayout(app))</span><br><span class=\"line\">            .setOpenOtherPageWays(DefaultWebClient.OpenOtherPageWays.ASK)<span class=\"comment\">//打开其他应用时，弹窗咨询用户是否前往其他应用</span></span><br><span class=\"line\">            .interceptUnkownUrl() <span class=\"comment\">//拦截找不到相关页面的Scheme</span></span><br><span class=\"line\">            .createAgentWeb()</span><br><span class=\"line\">            .ready()</span><br><span class=\"line\">            .go(Config.WebUrl.get(app));</span><br><span class=\"line\">    addBGChild((FrameLayout) mAgentWeb.getWebCreator().getWebParentLayout());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> com.just.agentweb.WebViewClient mWebViewClient = <span class=\"keyword\">new</span> WebViewClient() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">shouldOverrideUrlLoading</span><span class=\"params\">(WebView view, WebResourceRequest request)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.shouldOverrideUrlLoading(view, request);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onPageStarted</span><span class=\"params\">(WebView view, String url, Bitmap favicon)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">super</span>.onPageStarted(view, url, favicon);</span><br><span class=\"line\">            Log.i(TAG, <span class=\"string\">\"onPageStarted: \"</span> + url);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(mIsMainFrameError) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 错误页隐藏，源码这里处理有漏洞</span></span><br><span class=\"line\">                <span class=\"comment\">// 当遇到页面跳转时：onPageStarted中的url和onPageFinished的url可能不一致</span></span><br><span class=\"line\">                <span class=\"comment\">// 源码校验url必须一致才会隐藏错误页</span></span><br><span class=\"line\">                <span class=\"comment\">// 自己强制处理下</span></span><br><span class=\"line\">                mAgentWebUIController.onShowMainFrame();</span><br><span class=\"line\">                mIsMainFrameError = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onPageFinished</span><span class=\"params\">(WebView view, String url)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">super</span>.onPageFinished(view, url);</span><br><span class=\"line\">            Log.i(TAG, <span class=\"string\">\"onPageFinished: \"</span> + url);</span><br><span class=\"line\">            mIsFinish = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">private</span> AgentWebUIControllerImplBase mAgentWebUIController = <span class=\"keyword\">new</span> AgentWebUIControllerImplBase() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onMainFrameError</span><span class=\"params\">(WebView view, <span class=\"keyword\">int</span> errorCode, String description, String failingUrl)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onMainFrameError(view, errorCode, description, failingUrl);</span><br><span class=\"line\">        Log.i(TAG, <span class=\"string\">\"onMainFrameError: \"</span> + failingUrl);</span><br><span class=\"line\">        mIsMainFrameError = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n","categories":["Android"],"tags":["AgentWeb"]},{"title":"百度人脸识别","url":"/2020/02/22/Android/第三方/百度人脸识别/","content":"<h2 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h2><ul>\n<li>注册账号，并申请License<ul>\n<li>生成签名文件<ul>\n<li><code>keytool -genkey -storepass &quot;storepass&quot; -alias &quot;myapp&quot; -keypass &quot;keypass&quot; -keystore myapp -keyalg RSA -keysize 2048 -validity 10000</code></li>\n<li>注意<code>storepass</code> <code>keypass</code> <code>alias</code>的填写，后续要用，一旦配置License，不允许更改</li>\n<li><code>keystore</code>对应要生成的文件名</li>\n</ul>\n</li>\n<li>获取MD5<ul>\n<li><code>keytool -list -v -keystore myapp</code></li>\n</ul>\n</li>\n<li>下载人脸识别实例包</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"gradle\"><a href=\"#gradle\" class=\"headerlink\" title=\"gradle\"></a>gradle</h3>","categories":["Android"],"tags":["百度人脸识别"]},{"title":"Application","url":"/2020/02/20/Android/控件/Application/","content":"<h2 id=\"MyApplication\"><a href=\"#MyApplication\" class=\"headerlink\" title=\"MyApplication\"></a>MyApplication</h2><h3 id=\"配置私有应用参数\"><a href=\"#配置私有应用参数\" class=\"headerlink\" title=\"配置私有应用参数\"></a>配置私有应用参数</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyApplication</span> <span class=\"keyword\">extends</span> <span class=\"title\">Application</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> test = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">application</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\".MyApplication\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n","categories":["Android"],"tags":["Application"]},{"title":"字符串","url":"/2020/02/16/Android/字符串/","content":"<h2 id=\"特殊串\"><a href=\"#特殊串\" class=\"headerlink\" title=\"特殊串\"></a>特殊串</h2><h3 id=\"UUID\"><a href=\"#UUID\" class=\"headerlink\" title=\"UUID\"></a>UUID</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">String strUUID = UUID.randomUUID().toString();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"json\"><a href=\"#json\" class=\"headerlink\" title=\"json\"></a>json</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// com.google.gson: JsonObject, JsonParser</span></span><br><span class=\"line\">String strJson = <span class=\"string\">\"&#123;&#125;\"</span>;</span><br><span class=\"line\">JsonObject jo = <span class=\"keyword\">new</span> JsonParser().parse(strJson).getAsJsonObject();</span><br><span class=\"line\"></span><br><span class=\"line\">JsonObject obj = <span class=\"keyword\">new</span> JsonObject();</span><br><span class=\"line\">obj.addProperty(key, value);</span><br><span class=\"line\">obj.toString()</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"AES\"><a href=\"#AES\" class=\"headerlink\" title=\"AES\"></a>AES</h2><h3 id=\"CFB\"><a href=\"#CFB\" class=\"headerlink\" title=\"CFB\"></a>CFB</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CFBUtil</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String TAG = CFBUtil<span class=\"class\">.<span class=\"keyword\">class</span>.<span class=\"title\">getSimpleName</span>()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> MODE_ENC = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> MODE_DEC = <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"keyword\">byte</span>[] AES_KEY = <span class=\"string\">\"1234567890123456\"</span>.getBytes();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"keyword\">byte</span>[] AES_VI = <span class=\"string\">\"1234567890123456\"</span>.getBytes();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">byte</span>[] encryption(<span class=\"keyword\">int</span> mode, <span class=\"keyword\">byte</span>[] key, <span class=\"keyword\">byte</span>[] vi, <span class=\"keyword\">byte</span>[] content) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Cipher cipher = Cipher.getInstance(<span class=\"string\">\"AES/CFB128/NoPadding\"</span>);<span class=\"comment\">//AES加密模式，CFB 加密模式</span></span><br><span class=\"line\">            SecretKeySpec keySpec = <span class=\"keyword\">new</span> SecretKeySpec(key, <span class=\"string\">\"AES\"</span>);<span class=\"comment\">//AES加密方式</span></span><br><span class=\"line\">            IvParameterSpec ivSpec = <span class=\"keyword\">new</span> IvParameterSpec(vi);</span><br><span class=\"line\">            cipher.init(mode == MODE_ENC ? Cipher.ENCRYPT_MODE : Cipher.DECRYPT_MODE, keySpec, ivSpec);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> cipher.doFinal(content);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (NoSuchAlgorithmException | NoSuchPaddingException |</span><br><span class=\"line\">                InvalidKeyException | IllegalBlockSizeException |</span><br><span class=\"line\">                BadPaddingException | InvalidAlgorithmParameterException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            Log.e(TAG, <span class=\"string\">\"encryption failed... err: \"</span> + e.getMessage());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            Log.e(TAG, <span class=\"string\">\"encryption1 failed ...err: \"</span> + e.getMessage());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 加密: 返回Base64密文</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">enc</span><span class=\"params\">(String text)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[] data = encryption(MODE_ENC, AES_KEY, AES_VI, text.getBytes());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Base64.encodeToString(data, Base64.NO_WRAP);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 解密: 传入Base64密文</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">dec</span><span class=\"params\">(String text)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[] data = encryption(MODE_DEC, AES_KEY, AES_VI, Base64.decode(text, Base64.NO_WRAP));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> String(data);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","categories":["Android"],"tags":["字符串","UUID"]},{"title":"系统信息","url":"/2020/02/16/Android/系统/系统信息/","content":"<h2 id=\"系统信息\"><a href=\"#系统信息\" class=\"headerlink\" title=\"系统信息\"></a>系统信息</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">String <span class=\"title\">getDeviceInfo</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    StringBuffer sb = <span class=\"keyword\">new</span> StringBuffer();</span><br><span class=\"line\">    sb.append(<span class=\"string\">\"主板： \"</span> + Build.BOARD);</span><br><span class=\"line\">    sb.append(<span class=\"string\">\"\\n系统启动程序版本号： \"</span> + Build.BOOTLOADER);</span><br><span class=\"line\">    sb.append(<span class=\"string\">\"\\n系统定制商： \"</span> + Build.BRAND);</span><br><span class=\"line\">    sb.append(<span class=\"string\">\"\\ncpu指令集： \"</span> + Build.CPU_ABI);</span><br><span class=\"line\">    sb.append(<span class=\"string\">\"\\ncpu指令集2 \"</span> + Build.CPU_ABI2);</span><br><span class=\"line\">    sb.append(<span class=\"string\">\"\\n设置参数： \"</span> + Build.DEVICE);</span><br><span class=\"line\">    sb.append(<span class=\"string\">\"\\n显示屏参数：\"</span> + Build.DISPLAY);</span><br><span class=\"line\">    sb.append(<span class=\"string\">\"\\n无线电固件版本：\"</span> + Build.getRadioVersion());</span><br><span class=\"line\">    sb.append(<span class=\"string\">\"\\n硬件识别码： \"</span> + Build.FINGERPRINT);</span><br><span class=\"line\">    sb.append(<span class=\"string\">\"\\n硬件名称： \"</span> + Build.HARDWARE);</span><br><span class=\"line\">    sb.append(<span class=\"string\">\"\\nHOST: \"</span> + Build.HOST);</span><br><span class=\"line\">    sb.append(<span class=\"string\">\"\\n版本号);\"</span> + Build.ID);</span><br><span class=\"line\">    sb.append(<span class=\"string\">\"\\n硬件制造商： \"</span> + Build.MANUFACTURER);</span><br><span class=\"line\">    sb.append(<span class=\"string\">\"\\n型号： \"</span> + Build.MODEL);</span><br><span class=\"line\">    sb.append(<span class=\"string\">\"\\n硬件序列号： \"</span> + Build.SERIAL);</span><br><span class=\"line\">    sb.append(<span class=\"string\">\"\\n手机制造商： \"</span> + Build.PRODUCT);</span><br><span class=\"line\">    sb.append(<span class=\"string\">\"\\n描述Build的标签： \"</span> + Build.TAGS);</span><br><span class=\"line\">    sb.append(<span class=\"string\">\"\\nTIME: \"</span> + Build.TIME);</span><br><span class=\"line\">    sb.append(<span class=\"string\">\"\\nbuilder类型\"</span> + Build.TYPE);</span><br><span class=\"line\">    sb.append(<span class=\"string\">\"\\nUSER: \"</span> + Build.USER);</span><br><span class=\"line\">    sb.append(<span class=\"string\">\"\\nSDK: \"</span> + Build.VERSION.SDK);</span><br><span class=\"line\">    sb.append(<span class=\"string\">\"\\nAndroid版本: \"</span> + Build.VERSION.RELEASE);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sb.toString();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"唯一ID\"><a href=\"#唯一ID\" class=\"headerlink\" title=\"唯一ID\"></a>唯一ID</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ANDROID_ID是Android系统第一次启动时产生的一个64bit（16BYTES）数，如果设备被wipe还原后，该ID将被重置（变化）</span></span><br><span class=\"line\">String str = Settings.Secure.getString(getContentResolver(), Settings.Secure.ANDROID_ID);</span><br></pre></td></tr></table></figure>\n\n","categories":["Android"],"tags":["系统信息"]},{"title":"字符串","url":"/2020/02/15/PHP/字符串/","content":"<h2 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h2><figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 把字符串 \"Hello world!\" 中的字符 \"world\" 替换为 \"Shanghai\"</span></span><br><span class=\"line\"><span class=\"comment\">// str_replace(find,replace,string,count)</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> str_replace(<span class=\"string\">\"world\"</span>,<span class=\"string\">\"Shanghai\"</span>,<span class=\"string\">\"Hello world!\"</span>);</span><br></pre></td></tr></table></figure>\n\n","categories":["PHP"],"tags":["字符串"]},{"title":"数据结构","url":"/2020/02/15/Android/数据结构/","content":"<h2 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i: <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[] &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;)</span><br><span class=\"line\">    System.out.println(i);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"List\"><a href=\"#List\" class=\"headerlink\" title=\"List\"></a>List</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">List&lt;<span class=\"keyword\">int</span>&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;<span class=\"keyword\">int</span>&gt;(</span><br><span class=\"line\">        Arrays.asList(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">ArrayList&lt;Object&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;Object&gt;()&#123;&#123;add(<span class=\"number\">1</span>); add(<span class=\"string\">\"2\"</span>);&#125;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (Object v : list)</span><br><span class=\"line\">    System.out.println(v);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"set\"><a href=\"#set\" class=\"headerlink\" title=\"set\"></a>set</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 遍历</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(Integer i: <span class=\"keyword\">new</span> HashSet&lt;Integer&gt;() &#123;&#123;add(<span class=\"number\">1</span>); add(<span class=\"number\">2</span>);&#125;&#125;)</span><br><span class=\"line\">    System.out.println(i);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 自定义排序</span></span><br><span class=\"line\">Set&lt;String&gt; set = <span class=\"keyword\">new</span> TreeSet&lt;String&gt;(<span class=\"keyword\">new</span> MyComparator());</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyComparator</span> <span class=\"keyword\">implements</span> <span class=\"title\">Comparator</span>&lt;<span class=\"title\">String</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(String o1, String o2)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> o2.compareTo(o1);<span class=\"comment\">// 降序排列</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Map\"><a href=\"#Map\" class=\"headerlink\" title=\"Map\"></a>Map</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// HashMap</span></span><br><span class=\"line\"><span class=\"comment\">// 定义</span></span><br><span class=\"line\">HashMap&lt;String, String&gt; mHashMap = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\"><span class=\"comment\">// 初始化赋值</span></span><br><span class=\"line\">HashMap&lt;String, String&gt; mHashMap = <span class=\"keyword\">new</span> HashMap&lt;String, String&gt;() &#123;&#123;put(<span class=\"string\">\"a\"</span>, <span class=\"string\">\"1\"</span>);&#125;&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 添加</span></span><br><span class=\"line\">mHashMap.put(<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>);</span><br><span class=\"line\"><span class=\"comment\">// 查找</span></span><br><span class=\"line\">mHashMap.containsKey(<span class=\"string\">\"a\"</span>);</span><br><span class=\"line\"><span class=\"comment\">// 获取</span></span><br><span class=\"line\">mHashMap.get(<span class=\"string\">\"a\"</span>);</span><br><span class=\"line\"><span class=\"comment\">// 遍历</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (Entry&lt;String, String&gt; entry: map.entrySet()) &#123;</span><br><span class=\"line\">    entry.getKey();</span><br><span class=\"line\">    entry.getValue();</span><br><span class=\"line\">    <span class=\"comment\">// 这种方式不适用于删除元素</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (String key : map.keySet()) &#123;</span><br><span class=\"line\"><span class=\"comment\">// key process</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 安全删除</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (Iterator&lt;Map.entry&lt;String, String&gt;&gt; it = myHashMap.entrySet().iterator; it.hasNext();)&#123;</span><br><span class=\"line\">    Map.Entry&lt;K, V&gt; item = it.next();</span><br><span class=\"line\">    K key = item.getKey();</span><br><span class=\"line\">    V val = item.getValue();</span><br><span class=\"line\">    <span class=\"comment\">//可以安全删除元素:\"it.remove();\"</span></span><br><span class=\"line\">    <span class=\"comment\">//Iterator方法通用于其他容器</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// int做主键的map: 基于二分查找, 适用于主键数量较少情况</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.util.SparseIntArray;  <span class=\"comment\">// int-&gt;int</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 支持基于index的操作, 也支持基于key的操作</span></span><br><span class=\"line\">SparseArray&lt;String&gt; sparseArray = <span class=\"keyword\">new</span> SparseArray&lt;String&gt;();  <span class=\"comment\">// int-&gt;string</span></span><br><span class=\"line\"><span class=\"comment\">//向sparseArray存入元素value，key为index</span></span><br><span class=\"line\">sparseArray.put(key, value);</span><br><span class=\"line\"><span class=\"comment\">//这个方法本质也是利用put(key, value)去存入数据</span></span><br><span class=\"line\">sparseArray.append(key, value);</span><br><span class=\"line\"><span class=\"comment\">//查找key所在的位置，如果不存在，则返回-1</span></span><br><span class=\"line\">sparseArray.indexOfKey(key);</span><br><span class=\"line\"><span class=\"comment\">//查找value所在的位置，如果不存在，则返回-1</span></span><br><span class=\"line\">sparseArray.indexOfValue(value);</span><br><span class=\"line\"><span class=\"comment\">//更新某个key的值</span></span><br><span class=\"line\">sparseArray.setValueAt(index, value);</span><br><span class=\"line\"><span class=\"comment\">//获取index所对应的值，没有则返回null</span></span><br><span class=\"line\">sparseArray.get(index);</span><br><span class=\"line\"><span class=\"comment\">//获取index所对应的值，没有则返回自定义的默认值\"default-value\"</span></span><br><span class=\"line\">sparseArray.get(index,<span class=\"string\">\"default-value\"</span>);</span><br><span class=\"line\"><span class=\"comment\">//删除index对应的元素</span></span><br><span class=\"line\">sparseArray.delete(index);</span><br><span class=\"line\"><span class=\"comment\">//移除，本质也是调用delete(int)方法</span></span><br><span class=\"line\">sparseArray.remove(index);</span><br><span class=\"line\"><span class=\"comment\">//清空所有数据</span></span><br><span class=\"line\">sparseArray.clear();</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"模式\"><a href=\"#模式\" class=\"headerlink\" title=\"模式\"></a>模式</h2><h3 id=\"单例模式\"><a href=\"#单例模式\" class=\"headerlink\" title=\"单例模式\"></a>单例模式</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> MyClass instance;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> MyClass <span class=\"title\">createInstance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> == instance) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (MyClass<span class=\"class\">.<span class=\"keyword\">class</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> == instance) &#123;</span><br><span class=\"line\">                instance = <span class=\"keyword\">new</span> MyClass();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","categories":["Android"],"tags":["数据结构","List","Map"]},{"title":"AndroidManifest","url":"/2020/02/14/Android/AndroidManifest/","content":"<h2 id=\"权限\"><a href=\"#权限\" class=\"headerlink\" title=\"权限\"></a>权限</h2><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">manifest</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- NFC权限 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">uses-permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.permission.NFC\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 声明所依赖的外部的硬件，并指定为必须 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">uses-feature</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.hardware.nfc\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:required</span>=<span class=\"string\">\"true\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 网络权限 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">uses-permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.permission.INTERNET\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">uses-permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.permission.ACCESS_WIFI_STATE\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">uses-permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.permission.ACCESS_NETWORK_STATE\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">application</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"权限动态申请\"><a href=\"#权限动态申请\" class=\"headerlink\" title=\"权限动态申请\"></a>权限动态申请</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 方式1</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (ContextCompat.checkSelfPermission(<span class=\"keyword\">this</span>, Manifest.permission.CAMERA) != PackageManager.PERMISSION_GRANTED) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 申请权限</span></span><br><span class=\"line\">    ActivityCompat.requestPermissions(MainActivity.<span class=\"keyword\">this</span>, <span class=\"keyword\">new</span> String[]&#123;Manifest.permission.CAMERA&#125;, Constant.REQ_PERM_CAMERA);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 方式2</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">requestPermissions</span><span class=\"params\">(<span class=\"keyword\">int</span> requestCode, String permission)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (permission != <span class=\"keyword\">null</span> &amp;&amp; permission.length() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &gt;= <span class=\"number\">23</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 检查是否有权限</span></span><br><span class=\"line\">                <span class=\"keyword\">int</span> hasPer = checkSelfPermission(permission);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (hasPer != PackageManager.PERMISSION_GRANTED) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 显示权限请求</span></span><br><span class=\"line\">                    shouldShowRequestPermissionRationale(permission);</span><br><span class=\"line\">                    requestPermissions(<span class=\"keyword\">new</span> String[]&#123;permission&#125;, requestCode);</span><br><span class=\"line\">                    Log.e(TAG, <span class=\"string\">\"requestPermissions: \"</span> + permission);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception ex) &#123;</span><br><span class=\"line\">            ex.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 99是指用户点击取消后继续提醒次数</span></span><br><span class=\"line\">requestPermissions(<span class=\"number\">99</span>, Manifest.permission.CAMERA);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 申请结果通知函数</span></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onRequestPermissionsResult</span><span class=\"params\">(<span class=\"keyword\">int</span> requestCode, @NonNull String[] permissions, @NonNull <span class=\"keyword\">int</span>[] grantResults)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onRequestPermissionsResult(requestCode, permissions, grantResults);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (grantResults.length &gt; <span class=\"number\">0</span> &amp;&amp; grantResults[<span class=\"number\">0</span>]==PackageManager.PERMISSION_GRANTED)&#123;</span><br><span class=\"line\">        <span class=\"comment\">// TODO：权限申请成功</span></span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        Toast.makeText(<span class=\"keyword\">this</span>, <span class=\"string\">\"系统权限申请失败，功能无法使用\"</span>, Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"debug状态\"><a href=\"#debug状态\" class=\"headerlink\" title=\"debug状态\"></a>debug状态</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">isDebug</span><span class=\"params\">(Context context)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        ApplicationInfo info = context.getApplicationInfo();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (info.flags &amp; ApplicationInfo.FLAG_DEBUGGABLE) != <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","categories":["Android"],"tags":["AndroidManifest"]},{"title":"多进程","url":"/2020/02/11/Android/系统/进程/","content":"<h2 id=\"简单延迟\"><a href=\"#简单延迟\" class=\"headerlink\" title=\"简单延迟\"></a>简单延迟</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Handler().postDelayed(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;, <span class=\"number\">2000</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"多进程\"><a href=\"#多进程\" class=\"headerlink\" title=\"多进程\"></a>多进程</h2><h2 id=\"多线程\"><a href=\"#多线程\" class=\"headerlink\" title=\"多线程\"></a>多线程</h2>","categories":["Android"],"tags":["多进程","延迟"]},{"title":"网络","url":"/2020/02/11/Android/系统/Net/","content":"<h2 id=\"简单GET\"><a href=\"#简单GET\" class=\"headerlink\" title=\"简单GET\"></a>简单GET</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.io.IOUtils;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.URL;</span><br><span class=\"line\"></span><br><span class=\"line\">String re = IOUtils.toString(<span class=\"keyword\">new</span> URL(<span class=\"string\">\"https://www.baidu.com/\"</span>), StandardCharsets.UTF_8);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"无法访问HTTP问题\"><a href=\"#无法访问HTTP问题\" class=\"headerlink\" title=\"无法访问HTTP问题\"></a>无法访问HTTP问题</h3><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--AndroidManifest.xml</span></span><br><span class=\"line\"><span class=\"comment\">补充 android:networkSecurityConfig</span></span><br><span class=\"line\"><span class=\"comment\">--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">application</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:networkSecurityConfig</span>=<span class=\"string\">\"@xml/network_security_config\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">application</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!--network_security_config.xml--&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">network-security-config</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">base-config</span> <span class=\"attr\">cleartextTrafficPermitted</span>=<span class=\"string\">\"true\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">network-security-config</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"android-async-http-httpclient\"><a href=\"#android-async-http-httpclient\" class=\"headerlink\" title=\"android-async-http / httpclient\"></a>android-async-http / httpclient</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> cz.msebera.android.httpclient.Header;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.loopj.android.http.AsyncHttpClient;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.loopj.android.http.AsyncHttpResponseHandler;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.loopj.android.http.RequestParams;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// http post</span></span><br><span class=\"line\">    RequestParams requestParams = <span class=\"keyword\">new</span> RequestParams();</span><br><span class=\"line\">    requestParams.put(<span class=\"string\">\"username\"</span>, <span class=\"string\">\"abc\"</span>);</span><br><span class=\"line\">    requestParams.put(<span class=\"string\">\"password\"</span>, <span class=\"string\">\"123\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    AsyncHttpClient client = <span class=\"keyword\">new</span> AsyncHttpClient();</span><br><span class=\"line\">    client.post(<span class=\"string\">\"https://*/test.php\"</span>, requestParams, <span class=\"keyword\">new</span> AsyncHttpResponseHandler() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onSuccess</span><span class=\"params\">(<span class=\"keyword\">int</span> statusCode, Header[] headers, <span class=\"keyword\">byte</span>[] responseBody)</span> </span>&#123;</span><br><span class=\"line\">            Log.d(TAG, <span class=\"keyword\">new</span> String(responseBody));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onFailure</span><span class=\"params\">(<span class=\"keyword\">int</span> statusCode, Header[] headers, <span class=\"keyword\">byte</span>[] responseBytes, Throwable throwable)</span> </span>&#123;</span><br><span class=\"line\">            Log.d(TAG, <span class=\"string\">\"onFailure\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onFinish</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">super</span>.onFinish();</span><br><span class=\"line\">            Log.d(TAG, <span class=\"string\">\"onFinish\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// get</span></span><br><span class=\"line\">RequestParams requestParams = <span class=\"keyword\">new</span> RequestParams();</span><br><span class=\"line\">    requestParams.put(<span class=\"string\">\"username\"</span>, <span class=\"string\">\"abc\"</span>);</span><br><span class=\"line\">    requestParams.put(<span class=\"string\">\"password\"</span>, <span class=\"string\">\"123\"</span>);</span><br><span class=\"line\">    client.get(url, requestParams, jsonHttpResponseHandler );</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 请求参数定义1：</span></span><br><span class=\"line\">RequestParams params=<span class=\"keyword\">new</span> RequestParams(<span class=\"string\">\"single\"</span>,<span class=\"string\">\"value\"</span>);</span><br><span class=\"line\"><span class=\"comment\">// 请求参数定义2：</span></span><br><span class=\"line\">HashMap&lt;String,String&gt; paramMap=<span class=\"keyword\">new</span> HashMap&lt;String,String&gt;();</span><br><span class=\"line\">paramMap.put(<span class=\"string\">\"key\"</span>,<span class=\"string\">\"value\"</span>);</span><br><span class=\"line\">RequestParams params=<span class=\"keyword\">new</span> RequestParams(paramMap);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"android-async-http-上传文件\"><a href=\"#android-async-http-上传文件\" class=\"headerlink\" title=\"android-async-http / 上传文件\"></a>android-async-http / 上传文件</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 文件流</span></span><br><span class=\"line\">InputStream myInputStream = <span class=\"keyword\">new</span> ByteArrayInputStream(<span class=\"string\">\"asdf\"</span>.getBytes());</span><br><span class=\"line\">RequestParams params=<span class=\"keyword\">new</span> RequestParams();</span><br><span class=\"line\">params.put(<span class=\"string\">\"secret_passwords\"</span>, myInputStream, <span class=\"string\">\"password.txt\"</span>);</span><br><span class=\"line\">params.put(<span class=\"string\">\"secret_passwords\"</span>, myInputStream, <span class=\"string\">\"test.jpg\"</span>, <span class=\"string\">\"image/jpeg\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 文件对象</span></span><br><span class=\"line\">RequestParams params=<span class=\"keyword\">new</span> RequestParams();</span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    params.put(<span class=\"string\">\"timg.jpg\"</span>, <span class=\"keyword\">new</span> File(path));</span><br><span class=\"line\">    params.put(<span class=\"string\">\"timg.jpg\"</span>, <span class=\"keyword\">new</span> File(path), <span class=\"string\">\"image/jpeg\"</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (FileNotFoundException e) &#123;</span><br><span class=\"line\">    e.printStackTrace();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 文本数据</span></span><br><span class=\"line\"><span class=\"comment\">// JsonHttpResponseHandler, TextHttpResponseHandler</span></span><br><span class=\"line\">client.post(<span class=\"string\">\"https://*/test.php\"</span>, requestParams, <span class=\"keyword\">new</span> AsyncHttpResponseHandler() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onSuccess</span><span class=\"params\">(<span class=\"keyword\">int</span> statusCode, Header[] headers, <span class=\"keyword\">byte</span>[] responseBody)</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onFailure</span><span class=\"params\">(<span class=\"keyword\">int</span> statusCode, Header[] headers, <span class=\"keyword\">byte</span>[] responseBytes, Throwable throwable)</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 文件下载</span></span><br><span class=\"line\">client.post(<span class=\"string\">\"https://**\"</span>, requestParams, <span class=\"keyword\">new</span> FileAsyncHttpResponseHandler(<span class=\"keyword\">new</span> File(path)) &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onSuccess</span><span class=\"params\">(<span class=\"keyword\">int</span> statusCode, Header[] headers, File file)</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onFailure</span><span class=\"params\">(<span class=\"keyword\">int</span> statusCode, Header[] headers,Throwable throwable, File file)</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"APP升级\"><a href=\"#APP升级\" class=\"headerlink\" title=\"APP升级\"></a>APP升级</h2><ul>\n<li><a href=\"https://weiku.co/article/318/\" target=\"_blank\" rel=\"noopener\">自动升级组件</a></li>\n<li><a href=\"https://github.com/MZCretin/AutoUpdateProject\" target=\"_blank\" rel=\"noopener\">AutoUpdateProject</a></li>\n</ul>\n","categories":["Android"],"tags":["网络"]},{"title":"文件","url":"/2020/02/11/Android/系统/文件/","content":"<h2 id=\"用户配置\"><a href=\"#用户配置\" class=\"headerlink\" title=\"用户配置\"></a>用户配置</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 映射为xml配置文件</span></span><br><span class=\"line\">context.getSharedPreferences(<span class=\"string\">\"debug\"</span>, <span class=\"number\">0</span>).edit().putString(<span class=\"string\">\"test\"</span>, deviceId).apply();</span><br><span class=\"line\">String deviceId = context.getSharedPreferences(<span class=\"string\">\"debug\"</span>, <span class=\"number\">0</span>).getString(<span class=\"string\">\"test\"</span>, <span class=\"keyword\">null</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"常规操作\"><a href=\"#常规操作\" class=\"headerlink\" title=\"常规操作\"></a>常规操作</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 百度 FileUtils</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> com.baidu.idl.face.platform.utils;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.text.TextUtils;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.webkit.MimeTypeMap;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.ByteArrayInputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.File;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileFilter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileInputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FilenameFilter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.InputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.OutputStreamWriter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.channels.Channels;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.channels.FileChannel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.channels.ReadableByteChannel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.regex.Pattern;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FileUtils</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> S_IRWXU = <span class=\"number\">00700</span>; <span class=\"comment\">// rwx u</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> S_IRUSR = <span class=\"number\">00400</span>; <span class=\"comment\">// r-- u</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> S_IWUSR = <span class=\"number\">00200</span>; <span class=\"comment\">// -w- u</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> S_IXUSR = <span class=\"number\">00100</span>; <span class=\"comment\">// --x u</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> S_IRWXG = <span class=\"number\">00070</span>; <span class=\"comment\">// rwx g</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> S_IRGRP = <span class=\"number\">00040</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> S_IWGRP = <span class=\"number\">00020</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> S_IXGRP = <span class=\"number\">00010</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> S_IRWXO = <span class=\"number\">00007</span>; <span class=\"comment\">// rwx o</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> S_IROTH = <span class=\"number\">00004</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> S_IWOTH = <span class=\"number\">00002</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> S_IXOTH = <span class=\"number\">00001</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Regular expression for safe filenames: no spaces or metacharacters</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Pattern SAFE_FILENAME_PATTERN = Pattern.compile(<span class=\"string\">\"[\\\\w%+,./=_-]+\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Pattern RESERVED_CHARS_PATTERN = Pattern.compile(<span class=\"string\">\"[\\\\\\\\/:\\\\*\\\\?\\\\\\\"&lt;&gt;|]\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">FileUtils</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Check if a filename is \"safe\" (no metacharacters or spaces).</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> file The file to check</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isFilenameSafe</span><span class=\"params\">(File file)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> SAFE_FILENAME_PATTERN.matcher(file.getPath()).matches();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 判断文件名是否有效，检测是否包含非法字符,文件名不能包含 \\/:*?\"&lt;&gt;|</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> name</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isFilenameValid</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (TextUtils.isEmpty(name)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> !RESERVED_CHARS_PATTERN.matcher(name).find();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 复制文件</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> src</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> dest</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">copyFile</span><span class=\"params\">(String src, String dest)</span> </span>&#123;</span><br><span class=\"line\">        FileInputStream fis = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            fis = <span class=\"keyword\">new</span> FileInputStream(src);</span><br><span class=\"line\">            IoUtils.copyStream(fis, <span class=\"keyword\">new</span> File(dest));</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            IoUtils.closeQuietly(fis);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 复制文件,使用nio以提高性能</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> src  - 源文件</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> dest - 目标文件</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">copyFile</span><span class=\"params\">(File src, File dest)</span> </span>&#123;</span><br><span class=\"line\">        FileInputStream fis = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        FileOutputStream fos = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        FileChannel in = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        FileChannel out = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            fis = <span class=\"keyword\">new</span> FileInputStream(src);</span><br><span class=\"line\">            fos = <span class=\"keyword\">new</span> FileOutputStream(dest);</span><br><span class=\"line\">            in = fis.getChannel(); <span class=\"comment\">// 得到对应的文件通道</span></span><br><span class=\"line\">            out = fos.getChannel(); <span class=\"comment\">// 得到对应的文件通道</span></span><br><span class=\"line\">            in.transferTo(<span class=\"number\">0</span>, in.size(), out); <span class=\"comment\">// 连接两个通道，并且从in通道读取，然后写入out通道</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            IoUtils.closeQuietly(fis);</span><br><span class=\"line\">            IoUtils.closeQuietly(in);</span><br><span class=\"line\">            IoUtils.closeQuietly(fos);</span><br><span class=\"line\">            IoUtils.closeQuietly(out);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 复制文件夹</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> src</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> dest</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> IOException</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">copyDirectory</span><span class=\"params\">(File src, File dest)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (src.exists()) &#123;</span><br><span class=\"line\">            dest.mkdirs();</span><br><span class=\"line\">            File[] files = src.listFiles();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (files == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (File file : files) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (file.isDirectory()) &#123;</span><br><span class=\"line\">                    copyDirectory(file, <span class=\"keyword\">new</span> File(dest, file.getName()));</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    copyFile(file, <span class=\"keyword\">new</span> File(dest, file.getName()));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Ensure directory exists</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> file</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">ensureDir</span><span class=\"params\">(File file)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (file.exists()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (file.isFile()) &#123;</span><br><span class=\"line\">                file.delete();</span><br><span class=\"line\">                file.mkdirs();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            file.mkdirs();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Ensure make directory, 如果存在同名文件夹，则添加上数字后缀</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> dir</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">ensureMkdir</span><span class=\"params\">(<span class=\"keyword\">final</span> File dir)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (dir == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        File tempDir = dir;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (tempDir.exists()) &#123;</span><br><span class=\"line\">            tempDir = <span class=\"keyword\">new</span> File(dir.getParent(), dir.getName() + <span class=\"string\">\"(\"</span> + i + <span class=\"string\">\")\"</span>);</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> tempDir.mkdir();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Ensure parent</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> file</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">ensureParent</span><span class=\"params\">(<span class=\"keyword\">final</span> File file)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != file) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> File parentFile = file.getParentFile();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != parentFile &amp;&amp; !parentFile.exists()) &#123;</span><br><span class=\"line\">                parentFile.mkdirs();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Clean a specified directory.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> dir the directory to clean.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">cleanDir</span><span class=\"params\">(<span class=\"keyword\">final</span> File dir)</span> </span>&#123;</span><br><span class=\"line\">        deleteDir(dir, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Clean a specified directory.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> dir    the directory to clean.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> filter the filter to determine which file or directory to delete.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">cleanDir</span><span class=\"params\">(<span class=\"keyword\">final</span> File dir, <span class=\"keyword\">final</span> FilenameFilter filter)</span> </span>&#123;</span><br><span class=\"line\">        deleteDir(dir, <span class=\"keyword\">false</span>, filter);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Clean a specified directory.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> dir    the directory to clean.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> filter the filter to determine which file or directory to delete.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">cleanDir</span><span class=\"params\">(<span class=\"keyword\">final</span> File dir, <span class=\"keyword\">final</span> FileFilter filter)</span> </span>&#123;</span><br><span class=\"line\">        deleteDir(dir, <span class=\"keyword\">false</span>, filter);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">deleteDir</span><span class=\"params\">(<span class=\"keyword\">final</span> String dir)</span> </span>&#123;</span><br><span class=\"line\">        deleteDir(<span class=\"keyword\">new</span> File(dir));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Delete a specified directory.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> dir the directory to clean.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">deleteDir</span><span class=\"params\">(<span class=\"keyword\">final</span> File dir)</span> </span>&#123;</span><br><span class=\"line\">        deleteDir(dir, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Delete a specified directory.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> dir    the directory to clean.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> filter the filter to determine which file or directory to delete.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">deleteDir</span><span class=\"params\">(<span class=\"keyword\">final</span> File dir, <span class=\"keyword\">final</span> FileFilter filter)</span> </span>&#123;</span><br><span class=\"line\">        deleteDir(dir, <span class=\"keyword\">true</span>, filter);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Delete a specified directory.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> dir    the directory to clean.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> filter the filter to determine which file or directory to delete.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">deleteDir</span><span class=\"params\">(<span class=\"keyword\">final</span> File dir, <span class=\"keyword\">final</span> FilenameFilter filter)</span> </span>&#123;</span><br><span class=\"line\">        deleteDir(dir, <span class=\"keyword\">true</span>, filter);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Delete a specified directory.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> dir       the directory to clean.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> removeDir true to remove the &#123;<span class=\"doctag\">@code</span> dir&#125;.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">deleteDir</span><span class=\"params\">(<span class=\"keyword\">final</span> File dir, <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> removeDir)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (dir != <span class=\"keyword\">null</span> &amp;&amp; dir.isDirectory()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> File[] files = dir.listFiles();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (files != <span class=\"keyword\">null</span> &amp;&amp; files.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">final</span> File file : files) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (file.isDirectory()) &#123;</span><br><span class=\"line\">                        deleteDir(file, removeDir);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        file.delete();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (removeDir) &#123;</span><br><span class=\"line\">                dir.delete();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Delete a specified directory.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> dir       the directory to clean.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> removeDir true to remove the &#123;<span class=\"doctag\">@code</span> dir&#125;.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> filter    the filter to determine which file or directory to delete.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">deleteDir</span><span class=\"params\">(<span class=\"keyword\">final</span> File dir, <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> removeDir, <span class=\"keyword\">final</span> FileFilter filter)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (dir != <span class=\"keyword\">null</span> &amp;&amp; dir.isDirectory()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> File[] files = dir.listFiles(filter);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (files != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">final</span> File file : files) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (file.isDirectory()) &#123;</span><br><span class=\"line\">                        deleteDir(file, removeDir, filter);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        file.delete();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (removeDir) &#123;</span><br><span class=\"line\">                dir.delete();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Delete a specified directory.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> dir       the directory to clean.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> removeDir true to remove the &#123;<span class=\"doctag\">@code</span> dir&#125;.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> filter    the filter to determine which file or directory to delete.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">deleteDir</span><span class=\"params\">(<span class=\"keyword\">final</span> File dir, <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> removeDir, <span class=\"keyword\">final</span> FilenameFilter filter)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (dir != <span class=\"keyword\">null</span> &amp;&amp; dir.isDirectory()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> File[] files = dir.listFiles(filter);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (files != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">final</span> File file : files) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (file.isDirectory()) &#123;</span><br><span class=\"line\">                        deleteDir(file, removeDir, filter);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        file.delete();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (removeDir) &#123;</span><br><span class=\"line\">                dir.delete();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * compute the size of one folder</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> dir</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> the byte length for the folder</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">long</span> <span class=\"title\">computeFolderSize</span><span class=\"params\">(<span class=\"keyword\">final</span> File dir)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (dir == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> dirSize = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> File[] files = dir.listFiles();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != files) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; files.length; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">final</span> File file = files[i];</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (file.isFile()) &#123;</span><br><span class=\"line\">                    dirSize += file.length();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (file.isDirectory()) &#123;</span><br><span class=\"line\">                    dirSize += file.length();</span><br><span class=\"line\">                    dirSize += computeFolderSize(file);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dirSize;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Retrieve the main file name.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> path the file name.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> the main file name without the extension.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">getFileNameWithoutExtensionByPath</span><span class=\"params\">(String path)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (TextUtils.isEmpty(path)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> getFileNameWithoutExtension(<span class=\"keyword\">new</span> File(path));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Helper method to get a filename without its extension</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> fileName String</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> String</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">getFileNameWithoutExtension</span><span class=\"params\">(String fileName)</span> </span>&#123;</span><br><span class=\"line\">        String name = fileName;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> index = fileName.lastIndexOf(<span class=\"string\">'.'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            name = fileName.substring(<span class=\"number\">0</span>, index);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Retrieve the main file name.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> file the file.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> the main file name without the extension.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">getFileNameWithoutExtension</span><span class=\"params\">(<span class=\"keyword\">final</span> File file)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> == file) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        String fileName = file.getName();</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> index = fileName.lastIndexOf(<span class=\"string\">'.'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            fileName = fileName.substring(<span class=\"number\">0</span>, index);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> fileName;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Retrieve the main file name.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> path the file name.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> the extension of the file.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">getExtension</span><span class=\"params\">(<span class=\"keyword\">final</span> String path)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (TextUtils.isEmpty(path)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> getExtension(<span class=\"keyword\">new</span> File(path));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Retrieve the extension of the file.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> file the file.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> the extension of the file.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">getExtension</span><span class=\"params\">(<span class=\"keyword\">final</span> File file)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> == file) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> String fileName = file.getName();</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> index = fileName.lastIndexOf(<span class=\"string\">'.'</span>);</span><br><span class=\"line\">        String extension = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            extension = fileName.substring(index + <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> extension;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 判断文件是否存在</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> path</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">existsFile</span><span class=\"params\">(String path)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (TextUtils.isEmpty(path)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> existsFile(<span class=\"keyword\">new</span> File(path));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 判断文件是否存在</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> file</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">existsFile</span><span class=\"params\">(File file)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> file != <span class=\"keyword\">null</span> &amp;&amp; file.exists() &amp;&amp; file.isFile();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Delete file if exist path</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> path the path</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> true if this file was deleted, false otherwise.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">deleteFileIfExist</span><span class=\"params\">(String path)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (TextUtils.isEmpty(path)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        File file = <span class=\"keyword\">new</span> File(path);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (file.exists()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> file.delete();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Delete file if exist file</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> file the file</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> true if this file was deleted, false otherwise.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">deleteFileIfExist</span><span class=\"params\">(File file)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (file == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (file.exists()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> file.delete();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Write the specified content to an specified file.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> file</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> content</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">writeToFile</span><span class=\"params\">(File file, String content)</span> </span>&#123;</span><br><span class=\"line\">        writeToFile(file, content, <span class=\"keyword\">false</span>, <span class=\"string\">\"utf-8\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Write the specified content to an specified file.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> file</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> content</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> append</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">writeToFile</span><span class=\"params\">(File file, String content, <span class=\"keyword\">boolean</span> append)</span> </span>&#123;</span><br><span class=\"line\">        writeToFile(file, content, append, <span class=\"string\">\"utf-8\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Write the specified content to an specified file.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> file</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> content</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> encoding</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">writeToFile</span><span class=\"params\">(File file, String content, String encoding)</span> </span>&#123;</span><br><span class=\"line\">        writeToFile(file, content, <span class=\"keyword\">false</span>, encoding);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Write the specified content to an specified file.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> file</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> content</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> append</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> encoding</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">writeToFile</span><span class=\"params\">(File file, String content, <span class=\"keyword\">boolean</span> append, String encoding)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (file == <span class=\"keyword\">null</span> || TextUtils.isEmpty(content)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ensureParent(file);</span><br><span class=\"line\">        OutputStreamWriter writer = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            writer = <span class=\"keyword\">new</span> OutputStreamWriter(<span class=\"keyword\">new</span> FileOutputStream(file, append), encoding);</span><br><span class=\"line\">            writer.write(content);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            IoUtils.closeQuietly(writer);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Write the specified data to an specified file.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> file The file to write into.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> data The data to write. May be null.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">writeToFile</span><span class=\"params\">(File file, <span class=\"keyword\">byte</span>[] data)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (file == <span class=\"keyword\">null</span> || data == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ensureParent(file);</span><br><span class=\"line\">        FileOutputStream fos = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            fos = <span class=\"keyword\">new</span> FileOutputStream(file);</span><br><span class=\"line\">            fos.write(data);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            IoUtils.closeQuietly(fos);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Write the specified input stream to an specified file. Use NIO</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> is</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> target</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">writeToFileNio</span><span class=\"params\">(InputStream is, File target)</span> </span>&#123;</span><br><span class=\"line\">        FileOutputStream fo = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        ReadableByteChannel src = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        FileChannel out = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> len = is.available();</span><br><span class=\"line\">            src = Channels.newChannel(is);</span><br><span class=\"line\">            fo = <span class=\"keyword\">new</span> FileOutputStream(target);</span><br><span class=\"line\">            out = fo.getChannel();</span><br><span class=\"line\">            out.transferFrom(src, <span class=\"number\">0</span>, len);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            IoUtils.closeQuietly(fo);</span><br><span class=\"line\">            IoUtils.closeQuietly(src);</span><br><span class=\"line\">            IoUtils.closeQuietly(out);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Write the specified data to an specified file.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> target</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> data</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">writeToFileNio</span><span class=\"params\">(File target, <span class=\"keyword\">byte</span>[] data)</span> </span>&#123;</span><br><span class=\"line\">        FileOutputStream fo = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        ReadableByteChannel src = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        FileChannel out = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            src = Channels.newChannel(<span class=\"keyword\">new</span> ByteArrayInputStream(data));</span><br><span class=\"line\">            fo = <span class=\"keyword\">new</span> FileOutputStream(target);</span><br><span class=\"line\">            out = fo.getChannel();</span><br><span class=\"line\">            out.transferFrom(src, <span class=\"number\">0</span>, data.length);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            IoUtils.closeQuietly(fo);</span><br><span class=\"line\">            IoUtils.closeQuietly(src);</span><br><span class=\"line\">            IoUtils.closeQuietly(out);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Read text file</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> path</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">readFileText</span><span class=\"params\">(String path)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (TextUtils.isEmpty(path)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> readFileText(<span class=\"keyword\">new</span> File(path));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Read text file</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> file</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">readFileText</span><span class=\"params\">(File file)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (existsFile(file)) &#123;</span><br><span class=\"line\">            FileInputStream fis = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                fis = <span class=\"keyword\">new</span> FileInputStream(file);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> IoUtils.loadContent(fis);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                IoUtils.closeQuietly(fis);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Read text file</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> path</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> charsetName</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">readFileText</span><span class=\"params\">(String path, String charsetName)</span> </span>&#123;</span><br><span class=\"line\">        FileInputStream fis = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            fis = <span class=\"keyword\">new</span> FileInputStream(path);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> IoUtils.loadContent(fis, charsetName);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            IoUtils.closeQuietly(fis);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Read file</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> file</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">byte</span>[] readFileBytes(File file) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (existsFile(file)) &#123;</span><br><span class=\"line\">            FileInputStream fis = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                fis = <span class=\"keyword\">new</span> FileInputStream(file);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> IoUtils.loadBytes(fis);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                IoUtils.closeQuietly(fis);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Read config file</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> file</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Map&lt;String, String&gt; <span class=\"title\">readConfig</span><span class=\"params\">(File file)</span> </span>&#123;</span><br><span class=\"line\">        Map&lt;String, String&gt; map = <span class=\"keyword\">new</span> HashMap&lt;String, String&gt;();</span><br><span class=\"line\">        String text = readFileText(file);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (TextUtils.isEmpty(text)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> map;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        String[] lines = text.split(<span class=\"string\">\"\\n\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String line : lines) &#123;</span><br><span class=\"line\">            line = line.trim();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (TextUtils.isEmpty(line)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (line.startsWith(<span class=\"string\">\"#\"</span>)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            String[] array = line.split(<span class=\"string\">\"=\"</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">            map.put(array[<span class=\"number\">0</span>].trim(), array[<span class=\"number\">1</span>].trim());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> map;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Open new file out put</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> file</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> IOException</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> FileOutputStream <span class=\"title\">openNewFileOutput</span><span class=\"params\">(File file)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        deleteFileIfExist(file);</span><br><span class=\"line\">        ensureParent(file);</span><br><span class=\"line\">        file.createNewFile();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> FileOutputStream(file);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Get user directory</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> File <span class=\"title\">getUserDir</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        String path = System.getProperty(<span class=\"string\">\"user.dir\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> File(path);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Get user home directory</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> File <span class=\"title\">getUserHome</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        String path = System.getProperty(<span class=\"string\">\"user.home\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> File(path);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","categories":["Android"],"tags":["文件"]},{"title":"模块","url":"/2020/02/09/Android/模块/","content":"<h2 id=\"通用模块\"><a href=\"#通用模块\" class=\"headerlink\" title=\"通用模块\"></a>通用模块</h2><figure class=\"highlight gradle\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// build.gradle(app)</span></span><br><span class=\"line\"><span class=\"keyword\">dependencies</span> &#123;</span><br><span class=\"line\">    implementation <span class=\"keyword\">fileTree</span>(dir: <span class=\"string\">'libs'</span>, <span class=\"keyword\">include</span>: [<span class=\"string\">'*.jar'</span>])</span><br><span class=\"line\">    implementation <span class=\"string\">'androidx.appcompat:appcompat:1.1.0'</span></span><br><span class=\"line\">    implementation <span class=\"string\">'androidx.constraintlayout:constraintlayout:1.1.3'</span></span><br><span class=\"line\"></span><br><span class=\"line\">    implementation <span class=\"keyword\">group</span>: <span class=\"string\">'org.apache.commons'</span>, name: <span class=\"string\">'commons-collections4'</span>, version: <span class=\"string\">'4.4'</span></span><br><span class=\"line\">    implementation <span class=\"keyword\">group</span>: <span class=\"string\">'commons-io'</span>, name: <span class=\"string\">'commons-io'</span>, version: <span class=\"string\">'2.6'</span></span><br><span class=\"line\">    implementation <span class=\"keyword\">group</span>: <span class=\"string\">'com.google.code.gson'</span>, name: <span class=\"string\">'gson'</span>, version: <span class=\"string\">'2.8.6'</span></span><br><span class=\"line\"></span><br><span class=\"line\">    implementation(<span class=\"keyword\">project</span>(<span class=\"string\">':picture_library'</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">exclude</span> <span class=\"keyword\">group</span>: <span class=\"string\">'com.xxx.xxx.Test.java'</span>, module: <span class=\"string\">'testModule'</span>    <span class=\"comment\">// 排除</span></span><br><span class=\"line\">        transitive = <span class=\"keyword\">false</span>      <span class=\"comment\">// 禁止依赖传递</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"第三方SO模块加载\"><a href=\"#第三方SO模块加载\" class=\"headerlink\" title=\"第三方SO模块加载\"></a>第三方SO模块加载</h2><ul>\n<li>新建工程默认带有Libs路径<ul>\n<li>Project：Android-&gt;app-&gt;jniLibs</li>\n<li>右键打开文件夹位置，新建armeabi或armeabi-v7a把so文件复制进去就行<ul>\n<li>libs\\armeabi*.so</li>\n<li>libs\\armeabi-v7a*.so</li>\n</ul>\n</li>\n<li>如果是jar或者aar直接放目录下即可</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"SO加载路径配置\"><a href=\"#SO加载路径配置\" class=\"headerlink\" title=\"SO加载路径配置\"></a>SO加载路径配置</h3><figure class=\"highlight gradle\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// build.gradle(app)</span></span><br><span class=\"line\">android &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"comment\">// SO 加载路径</span></span><br><span class=\"line\">    <span class=\"keyword\">sourceSets</span> &#123;</span><br><span class=\"line\">        main &#123;</span><br><span class=\"line\">            <span class=\"comment\">// jniLibs.srcDirs = ['libs', \"src/main/jniLibs\"]</span></span><br><span class=\"line\">            jniLibs.srcDirs = [<span class=\"string\">'libs'</span>]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// jar|aar 加载路径</span></span><br><span class=\"line\">    <span class=\"keyword\">repositories</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">flatDir</span> &#123;</span><br><span class=\"line\">            dirs <span class=\"string\">'libs'</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">dependencies</span> &#123;</span><br><span class=\"line\">    implementation <span class=\"keyword\">fileTree</span>(dir: <span class=\"string\">'libs'</span>, <span class=\"keyword\">include</span>: [<span class=\"string\">'*.jar'</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 第三方aar</span></span><br><span class=\"line\">    api(name: <span class=\"string\">'mytest-debug'</span>, ext: <span class=\"string\">'aar'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 自己的aar项目，可以直接饮用</span></span><br><span class=\"line\">    api <span class=\"keyword\">project</span>(path: <span class=\"string\">':myarr'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// implementation: 表示依赖，但打包时不打包进来</span></span><br><span class=\"line\">    <span class=\"comment\">// api: 表示打包，即 不仅依赖还打包进来，这样上层就不用重复依赖</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"SO加载\"><a href=\"#SO加载\" class=\"headerlink\" title=\"SO加载\"></a>SO加载</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// MyTest.java</span></span><br><span class=\"line\"><span class=\"comment\">// 一般SO提供方会明确package 和接口声明</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> com.my.test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">native</span> <span class=\"keyword\">void</span> <span class=\"title\">test1</span><span class=\"params\">(<span class=\"keyword\">byte</span>[] paramArrayOfbyte, <span class=\"keyword\">int</span> paramInt)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">native</span> <span class=\"keyword\">void</span> <span class=\"title\">test2</span><span class=\"params\">(<span class=\"keyword\">byte</span>[] paramArrayOfbyte, <span class=\"keyword\">int</span> paramInt)</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        System.loadLibrary(<span class=\"string\">\"MyTest\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"混淆\"><a href=\"#混淆\" class=\"headerlink\" title=\"混淆\"></a>混淆</h3><figure class=\"highlight gradle\"><table><tr><td class=\"code\"><pre><span class=\"line\"># build.gradle(app)</span><br><span class=\"line\">android &#123;</span><br><span class=\"line\">    # 编译配置</span><br><span class=\"line\">    buildTypes &#123;</span><br><span class=\"line\">        release &#123;</span><br><span class=\"line\">            minifyEnabled <span class=\"keyword\">true</span></span><br><span class=\"line\">            proguardFiles getDefaultProguardFile(<span class=\"string\">'proguard-android-optimize.txt'</span>), <span class=\"string\">'proguard-rules.pro'</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">-keep class com.es.idcardsdk.MYSdk &#123;</span><br><span class=\"line\">    public *;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"># 去掉日志</span><br><span class=\"line\">-assumenosideeffects class android.util.Log&#123;</span><br><span class=\"line\">    public static *** v(...);</span><br><span class=\"line\">    public static *** i(...);</span><br><span class=\"line\">    public static *** d(...);</span><br><span class=\"line\">    public static *** w(...);</span><br><span class=\"line\">    public static *** e(...);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"># 第三方公共库</span><br><span class=\"line\">-keep class org.apache.commons.** &#123;*;&#125;</span><br><span class=\"line\">-keep class com.google.** &#123;*;&#125;</span><br><span class=\"line\">-keep class cz.msebera.** &#123;*;&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">## 复制于百度Demo：proguard-rules.pro</span><br><span class=\"line\"></span><br><span class=\"line\">## ==========================================</span><br><span class=\"line\">## 通用设置</span><br><span class=\"line\">## ==========================================</span><br><span class=\"line\">## 压缩优化算法</span><br><span class=\"line\">#-optimizations !code/simplification/arithmetic,!field/*,!class/merging/*</span><br><span class=\"line\">## 迭代优化次数</span><br><span class=\"line\">#-optimizationpasses 5</span><br><span class=\"line\">## 禁止优化</span><br><span class=\"line\">#-dontoptimize</span><br><span class=\"line\">## 禁止缩减代码</span><br><span class=\"line\">#-dontshrink</span><br><span class=\"line\">## 禁止多样化类名</span><br><span class=\"line\">#-dontusemixedcaseclassnames</span><br><span class=\"line\">## 禁止混淆公共LIB类</span><br><span class=\"line\">#-dontskipnonpubliclibraryclasses</span><br><span class=\"line\">## 禁止预先验证</span><br><span class=\"line\">#-dontpreverify</span><br><span class=\"line\">## 忽略警告信息</span><br><span class=\"line\">#-ignorewarnings</span><br><span class=\"line\">## 输出详细LOG</span><br><span class=\"line\">#-verbose</span><br><span class=\"line\">## 保持@JavascriptInterface annotations 不被混淆掉</span><br><span class=\"line\">#-keepattributes *Annotation*</span><br><span class=\"line\">#</span><br><span class=\"line\">## 禁止混淆类</span><br><span class=\"line\">#-keep public class * extends android.app.Activity</span><br><span class=\"line\">#-keep public class * extends android.app.Application</span><br><span class=\"line\">#-keep public class * extends android.app.Service</span><br><span class=\"line\">#-keep public class * extends android.content.BroadcastReceiver</span><br><span class=\"line\">#-keep public class * extends android.content.ContentProvider</span><br><span class=\"line\">#-keep public class com.android.vending.licensing.ILicensingService</span><br><span class=\"line\">#-keep public class * extends android.app.Activity</span><br><span class=\"line\">#</span><br><span class=\"line\">## 禁止混淆本地方法</span><br><span class=\"line\">#-keepclasseswithmembernames class * &#123;</span><br><span class=\"line\">#    native &lt;methods&gt;;</span><br><span class=\"line\">#&#125;</span><br><span class=\"line\">#</span><br><span class=\"line\">## 禁止混淆枚举类型</span><br><span class=\"line\">#-keepclassmembers,allowoptimization enum * &#123;</span><br><span class=\"line\">#    public static **[] values();</span><br><span class=\"line\">#    public static ** valueOf(java.lang.String);</span><br><span class=\"line\">#&#125;</span><br><span class=\"line\">#</span><br><span class=\"line\">## 禁止混淆初始化方法</span><br><span class=\"line\">#-keepclasseswithmembers class * &#123;</span><br><span class=\"line\">#    public &lt;init&gt;(android.content.Context, android.util.AttributeSet);</span><br><span class=\"line\">#&#125;</span><br><span class=\"line\">#-keepclasseswithmembers class * &#123;</span><br><span class=\"line\">#    public &lt;init&gt;(android.content.Context, android.util.AttributeSet, int);</span><br><span class=\"line\">#&#125;</span><br><span class=\"line\">#</span><br><span class=\"line\">## 禁止混淆Parcelable对象</span><br><span class=\"line\">#-keepclassmembers class * implements android.os.Parcelable &#123;</span><br><span class=\"line\">#    static android.os.Parcelable$Creator CREATOR;</span><br><span class=\"line\">#&#125;</span><br><span class=\"line\">#</span><br><span class=\"line\">## 禁止混淆Serializable对象</span><br><span class=\"line\">#-keepnames class * implements java.io.Serializable</span><br><span class=\"line\">#-keepclassmembers class * implements java.io.Serializable &#123;</span><br><span class=\"line\">#    static final long serialVersionUID;</span><br><span class=\"line\">#    private static final java.io.ObjectStreamField[] serialPersistentFields;</span><br><span class=\"line\">#    !static !transient &lt;fields&gt;;</span><br><span class=\"line\">#    private void writeObject(java.io.ObjectOutputStream);</span><br><span class=\"line\">#    private void readObject(java.io.ObjectInputStream);</span><br><span class=\"line\">#    java.lang.Object writeReplace();</span><br><span class=\"line\">#    java.lang.Object readResolve();</span><br><span class=\"line\">#&#125;</span><br><span class=\"line\">#</span><br><span class=\"line\">## 禁止混淆二维码解析SDK</span><br><span class=\"line\">##-libraryjars libs/facesdk.jar</span><br><span class=\"line\">#-dontwarn com.baidu.idl.facesdk.FaceInfo</span><br><span class=\"line\">#-dontwarn com.baidu.idl.facesdk.FaceSDK</span><br><span class=\"line\">#-dontwarn com.baidu.idl.facesdk.FaceTracker</span><br><span class=\"line\">#-dontwarn com.baidu.idl.facesdk.FaceVerifyData</span><br><span class=\"line\">#-keep class com.baidu.idl.facesdk.FaceInfo &#123; *; &#125;</span><br><span class=\"line\">#-keep class com.baidu.idl.facesdk.FaceSDK &#123; *; &#125;</span><br><span class=\"line\">#-keep class com.baidu.idl.facesdk.FaceTracker &#123; *; &#125;</span><br><span class=\"line\">#-keep class com.baidu.idl.facesdk.FaceVerifyData &#123; *; &#125;</span><br><span class=\"line\">#</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">#############################################</span><br><span class=\"line\">#</span><br><span class=\"line\"># 对于一些基本指令的添加</span><br><span class=\"line\">#</span><br><span class=\"line\">#############################################</span><br><span class=\"line\"># 代码混淆压缩比，在0~7之间，默认为5，一般不做修改</span><br><span class=\"line\">-optimizationpasses 5</span><br><span class=\"line\"></span><br><span class=\"line\"># 混合时不使用大小写混合，混合后的类名为小写</span><br><span class=\"line\">-dontusemixedcaseclassnames</span><br><span class=\"line\"></span><br><span class=\"line\"># 指定不去忽略非公共库的类</span><br><span class=\"line\">-dontskipnonpubliclibraryclasses</span><br><span class=\"line\"></span><br><span class=\"line\"># 这句话能够使我们的项目混淆后产生映射文件</span><br><span class=\"line\"># 包含有类名-&gt;混淆后类名的映射关系</span><br><span class=\"line\">-verbose</span><br><span class=\"line\"></span><br><span class=\"line\"># 指定不去忽略非公共库的类成员</span><br><span class=\"line\">-dontskipnonpubliclibraryclassmembers</span><br><span class=\"line\"></span><br><span class=\"line\"># 不做预校验，preverify是proguard的四个步骤之一，Android不需要preverify，去掉这一步能够加快混淆速度。</span><br><span class=\"line\">-dontpreverify</span><br><span class=\"line\"></span><br><span class=\"line\"># 保留Annotation不混淆</span><br><span class=\"line\">-keepattributes *Annotation*,InnerClasses</span><br><span class=\"line\"></span><br><span class=\"line\"># 避免混淆泛型</span><br><span class=\"line\">-keepattributes Signature</span><br><span class=\"line\"></span><br><span class=\"line\"># 抛出异常时保留代码行号</span><br><span class=\"line\">-keepattributes SourceFile,LineNumberTable</span><br><span class=\"line\"></span><br><span class=\"line\"># 指定混淆是采用的算法，后面的参数是一个过滤器</span><br><span class=\"line\"># 这个过滤器是谷歌推荐的算法，一般不做更改</span><br><span class=\"line\">-optimizations !code/simplification/cast,!field/*,!class/merging/*</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#############################################</span><br><span class=\"line\">#</span><br><span class=\"line\"># Android开发中一些需要保留的公共部分</span><br><span class=\"line\">#</span><br><span class=\"line\">#############################################</span><br><span class=\"line\"></span><br><span class=\"line\"># 保留我们使用的四大组件，自定义的Application等等这些类不被混淆</span><br><span class=\"line\"># 因为这些子类都有可能被外部调用</span><br><span class=\"line\">-keep public class * extends android.app.Activity</span><br><span class=\"line\">-keep public class * extends android.app.Appliction</span><br><span class=\"line\">-keep public class * extends android.app.Service</span><br><span class=\"line\">-keep public class * extends android.content.BroadcastReceiver</span><br><span class=\"line\">-keep public class * extends android.content.ContentProvider</span><br><span class=\"line\">-keep public class * extends android.app.backup.BackupAgentHelper</span><br><span class=\"line\">-keep public class * extends android.preference.Preference</span><br><span class=\"line\">-keep public class * extends android.view.View</span><br><span class=\"line\">-keep public class com.android.vending.licensing.ILicensingService</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># 保留support下的所有类及其内部类</span><br><span class=\"line\">-keep class android.support.** &#123;*;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"># 保留继承的</span><br><span class=\"line\">-keep public class * extends android.support.v4.**</span><br><span class=\"line\">-keep public class * extends android.support.v7.**</span><br><span class=\"line\">-keep public class * extends android.support.annotation.**</span><br><span class=\"line\"></span><br><span class=\"line\"># 保留R下面的资源</span><br><span class=\"line\">-keep class **.R$* &#123;*;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"># 保留本地native方法不被混淆</span><br><span class=\"line\">-keepclasseswithmembernames class * &#123;</span><br><span class=\"line\">    native &lt;methods&gt;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"># 保留在Activity中的方法参数是view的方法，</span><br><span class=\"line\"># 这样以来我们在layout中写的onClick就不会被影响</span><br><span class=\"line\">-keepclassmembers class * extends android.app.Activity&#123;</span><br><span class=\"line\">    public void *(android.view.View);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"># 保留枚举类不被混淆</span><br><span class=\"line\">-keepclassmembers enum * &#123;</span><br><span class=\"line\">    public static **[] values();</span><br><span class=\"line\">    public static ** valueOf(java.lang.String);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"># 保留我们自定义控件（继承自View）不被混淆</span><br><span class=\"line\">-keep public class * extends android.view.View&#123;</span><br><span class=\"line\">    *** get*();</span><br><span class=\"line\">    void set*(***);</span><br><span class=\"line\">    public &lt;init&gt;(android.content.Context);</span><br><span class=\"line\">    public &lt;init&gt;(android.content.Context, android.util.AttributeSet);</span><br><span class=\"line\">    public &lt;init&gt;(android.content.Context, android.util.AttributeSet, int);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"># 保留Parcelable序列化类不被混淆</span><br><span class=\"line\">-keep class * implements android.os.Parcelable &#123;</span><br><span class=\"line\">    public static final android.os.Parcelable$Creator *;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"># 保留Serializable序列化的类不被混淆</span><br><span class=\"line\">-keepclassmembers class * implements java.io.Serializable &#123;</span><br><span class=\"line\">    static final long serialVersionUID;</span><br><span class=\"line\">    private static final java.io.ObjectStreamField[] serialPersistentFields;</span><br><span class=\"line\">    !static !transient &lt;fields&gt;;</span><br><span class=\"line\">    !private &lt;fields&gt;;</span><br><span class=\"line\">    !private &lt;methods&gt;;</span><br><span class=\"line\">    private void writeObject(java.io.ObjectOutputStream);</span><br><span class=\"line\">    private void readObject(java.io.ObjectInputStream);</span><br><span class=\"line\">    java.lang.Object writeReplace();</span><br><span class=\"line\">    java.lang.Object readResolve();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"># 对于带有回调函数的onXXEvent、**On*Listener的，不能被混淆</span><br><span class=\"line\">-keepclassmembers class * &#123;</span><br><span class=\"line\">    void *(**On*Event);</span><br><span class=\"line\">    void *(**On*Listener);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"># webView处理，项目中没有使用到webView忽略即可</span><br><span class=\"line\">-keepclassmembers class fqcn.of.javascript.interface.for.webview &#123;</span><br><span class=\"line\">    public *;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">-keepclassmembers class * extends android.webkit.webViewClient &#123;</span><br><span class=\"line\">    public void *(android.webkit.WebView, java.lang.String, android.graphics.Bitmap);</span><br><span class=\"line\">    public boolean *(android.webkit.WebView, java.lang.String);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">-keepclassmembers class * extends android.webkit.webViewClient &#123;</span><br><span class=\"line\">    public void *(android.webkit.webView, jav.lang.String);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","categories":["Android"],"tags":["so"]},{"title":"Service","url":"/2020/02/08/Android/控件/Service/","content":"<h2 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h2><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--AndroidManifest.xml：&lt;activity&gt; 同级注册服务--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">service</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\".MyService\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">activity</span> <span class=\"attr\">...</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// MyService.java</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EsService</span> <span class=\"keyword\">extends</span> <span class=\"title\">Service</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Nullable</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> IBinder <span class=\"title\">onBind</span><span class=\"params\">(Intent intent)</span> </span>&#123;</span><br><span class=\"line\">        Log.e(<span class=\"string\">\"test\"</span>, <span class=\"string\">\"onBind\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Log.e(<span class=\"string\">\"test\"</span>, <span class=\"string\">\"onCreate\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">onStartCommand</span><span class=\"params\">(<span class=\"keyword\">final</span> Intent intent, <span class=\"keyword\">int</span> flags, <span class=\"keyword\">int</span> startId)</span> </span>&#123;</span><br><span class=\"line\">        Log.e(<span class=\"string\">\"test\"</span>, <span class=\"string\">\"onStartCommand\"</span>);</span><br><span class=\"line\">        Toast.makeText(<span class=\"keyword\">this</span>, <span class=\"string\">\"服务已经启动\"</span>, Toast.LENGTH_LONG).show();</span><br><span class=\"line\">        <span class=\"comment\">// 参数</span></span><br><span class=\"line\">        String action = intent.getAction();</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> debug = intent.getStringExtra(<span class=\"string\">\"DEBUG\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.onStartCommand(intent, flags, startId);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Log.e(<span class=\"string\">\"test\"</span>, <span class=\"string\">\"onDestroy\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onDestroy();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 启动</span></span><br><span class=\"line\">Intent intent = <span class=\"keyword\">new</span> Intent(<span class=\"keyword\">this</span>, MyService<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\"><span class=\"comment\">// 指令</span></span><br><span class=\"line\">intent.setAction(<span class=\"string\">\"START_READ_IDCARD\"</span>);</span><br><span class=\"line\"><span class=\"comment\">// 参数</span></span><br><span class=\"line\">intent.putExtra(<span class=\"string\">\"DEBUG\"</span>, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">startService(intent);</span><br></pre></td></tr></table></figure>\n\n","categories":["Android"],"tags":["Service"]},{"title":"图片","url":"/2020/02/07/Android/控件/图片/","content":"<h2 id=\"ImageView\"><a href=\"#ImageView\" class=\"headerlink\" title=\"ImageView\"></a>ImageView</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">byte</span>[] photoBytes;  <span class=\"comment\">// 二进制图片内存数据</span></span><br><span class=\"line\">ImageView imageView =<span class=\"keyword\">this</span>.findViewById(R.id.imageViewPhoto);</span><br><span class=\"line\">Bitmap bitmap = BitmapFactory.decodeByteArray(photoBytes, <span class=\"number\">0</span>, photoBytes.length);</span><br><span class=\"line\">imageView.setImageBitmap(bitmap);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ImageLayout</span></span><br><span class=\"line\">bmp = base64ToBitmap(strBase64);</span><br><span class=\"line\">ImageView iv = <span class=\"keyword\">new</span> ImageView(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">iv.setImageBitmap(bmp);</span><br><span class=\"line\">mImageLayout.addView(iv, <span class=\"keyword\">new</span> LinearLayout.LayoutParams(<span class=\"number\">300</span>, <span class=\"number\">300</span>));</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Bitmap\"><a href=\"#Bitmap\" class=\"headerlink\" title=\"Bitmap\"></a>Bitmap</h2><h3 id=\"图片加载\"><a href=\"#图片加载\" class=\"headerlink\" title=\"图片加载\"></a>图片加载</h3><ul>\n<li><code>implementation &#39;com.github.bumptech.glide:glide:4.10.0&#39;</code></li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// base64 图片数据</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> Bitmap <span class=\"title\">base64ToBitmap</span><span class=\"params\">(String base64Data)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">byte</span>[] bytes = Base64Utils.decode(base64Data, Base64Utils.NO_WRAP);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> BitmapFactory.decodeByteArray(bytes, <span class=\"number\">0</span>, bytes.length);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 解析图片的旋转方向</span></span><br><span class=\"line\"><span class=\"comment\">    *</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> path 图片的路径</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@return</span> 旋转角度</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> ROTATE0 = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> ROTATE90 = <span class=\"number\">90</span>;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> ROTATE180 = <span class=\"number\">180</span>;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> ROTATE270 = <span class=\"number\">270</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">decodeImageDegree</span><span class=\"params\">(String path)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> degree = ROTATE0;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        ExifInterface exifInterface = <span class=\"keyword\">new</span> ExifInterface(path);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> orientation =</span><br><span class=\"line\">                exifInterface.getAttributeInt(ExifInterface.TAG_ORIENTATION,</span><br><span class=\"line\">                        ExifInterface.ORIENTATION_NORMAL);</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (orientation) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> ExifInterface.ORIENTATION_ROTATE_90:</span><br><span class=\"line\">                degree = ROTATE90;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> ExifInterface.ORIENTATION_ROTATE_180:</span><br><span class=\"line\">                degree = ROTATE180;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> ExifInterface.ORIENTATION_ROTATE_270:</span><br><span class=\"line\">                degree = ROTATE270;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                degree = ROTATE0;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">        degree = ROTATE0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> degree;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">decodeImageDegree</span><span class=\"params\">(<span class=\"keyword\">byte</span>[] jpeg)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> degree = ImageExif.getOrientation(jpeg);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> degree;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 从文件中加载图片数据</span></span><br><span class=\"line\"><span class=\"comment\">    *</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> path 图片的本地存储路径</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@return</span> Bitmap 图片数据</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Bitmap <span class=\"title\">loadBitmapFromFile</span><span class=\"params\">(String path)</span> </span>&#123;</span><br><span class=\"line\">    Bitmap bitmap = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (path != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            bitmap = BitmapFactory.decodeFile(path);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (OutOfMemoryError e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> bitmap;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 根据从数据中读到的方向旋转图片</span></span><br><span class=\"line\"><span class=\"comment\">    *</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> orientation 图片方向</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> bitmap      要旋转的bitmap</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@return</span> 旋转后的图片</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Bitmap <span class=\"title\">rotateBitmap</span><span class=\"params\">(<span class=\"keyword\">float</span> orientation, Bitmap bitmap)</span> </span>&#123;</span><br><span class=\"line\">    Bitmap transformed;</span><br><span class=\"line\">    Matrix m = <span class=\"keyword\">new</span> Matrix();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (orientation == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        transformed = bitmap;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        m.setRotate(orientation);</span><br><span class=\"line\">        transformed = Bitmap.createBitmap(bitmap, <span class=\"number\">0</span>, <span class=\"number\">0</span>, bitmap.getWidth(), bitmap.getHeight(), m, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> transformed;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"格式转换\"><a href=\"#格式转换\" class=\"headerlink\" title=\"格式转换\"></a>格式转换</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> bitmap  图片</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> quality 生成的JPG的质量</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> maxSize 最大边像素数</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@return</span> base64编码的数据</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">bitmapToJpegBase64</span><span class=\"params\">(Bitmap bitmap, <span class=\"keyword\">int</span> quality, <span class=\"keyword\">float</span> maxSize)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">float</span> scale = maxSize / Math.max(bitmap.getWidth(), bitmap.getHeight());</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (scale &lt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            bitmap = scale(bitmap, scale);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ByteArrayOutputStream out = <span class=\"keyword\">new</span> ByteArrayOutputStream();</span><br><span class=\"line\">        bitmap.compress(CompressFormat.JPEG, quality, out);</span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[] data = out.toByteArray();</span><br><span class=\"line\">        out.close();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> Base64Utils.encodeToString(data, Base64Utils.NO_WRAP);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"图片拉伸\"><a href=\"#图片拉伸\" class=\"headerlink\" title=\"图片拉伸\"></a>图片拉伸</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 尺寸缩放</span></span><br><span class=\"line\"><span class=\"comment\">    *</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> bitmap bitmap</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> w      width</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> h      height</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@return</span> scaleBitmap</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Bitmap <span class=\"title\">scale</span><span class=\"params\">(Bitmap bitmap, <span class=\"keyword\">int</span> w, <span class=\"keyword\">int</span> h)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (bitmap == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> width = bitmap.getWidth();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> height = bitmap.getHeight();</span><br><span class=\"line\">    Matrix matrix = <span class=\"keyword\">new</span> Matrix();</span><br><span class=\"line\">    <span class=\"keyword\">float</span> scaleWidth = ((<span class=\"keyword\">float</span>) w / width);</span><br><span class=\"line\">    <span class=\"keyword\">float</span> scaleHeight = ((<span class=\"keyword\">float</span>) h / height);</span><br><span class=\"line\">    matrix.postScale(scaleWidth, scaleHeight);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Bitmap.createBitmap(bitmap, <span class=\"number\">0</span>, <span class=\"number\">0</span>, width, height, matrix, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 等比压缩图片</span></span><br><span class=\"line\"><span class=\"comment\">    *</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> resBitmap 原图</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> desWidth  压缩后图片的宽度</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> desHeight 压缩后图片的高度</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@return</span> 压缩后的图片</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Bitmap <span class=\"title\">calculateInSampleSize</span><span class=\"params\">(Bitmap resBitmap, <span class=\"keyword\">int</span> desWidth, <span class=\"keyword\">int</span> desHeight)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> resWidth = resBitmap.getWidth();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> resHeight = resBitmap.getHeight();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (resHeight &gt; desHeight || resWidth &gt; desWidth) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 计算出实际宽高和目标宽高的比率</span></span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">float</span> heightRatio = (<span class=\"keyword\">float</span>) desHeight / (<span class=\"keyword\">float</span>) resHeight;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">float</span> widthRatio = (<span class=\"keyword\">float</span>) desWidth / (<span class=\"keyword\">float</span>) resWidth;</span><br><span class=\"line\">        <span class=\"keyword\">float</span> scale = heightRatio &lt; widthRatio ? heightRatio : widthRatio;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> scale(resBitmap, scale);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> resBitmap;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"图片比例缩放-质量压缩\"><a href=\"#图片比例缩放-质量压缩\" class=\"headerlink\" title=\"图片比例缩放 / 质量压缩\"></a>图片比例缩放 / 质量压缩</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 等比压缩图片</span></span><br><span class=\"line\"><span class=\"comment\">    *</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> bitmap 原图</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> scale  压缩因子</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@return</span> 压缩后的图片</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Bitmap <span class=\"title\">scale</span><span class=\"params\">(Bitmap bitmap, <span class=\"keyword\">float</span> scale)</span> </span>&#123;</span><br><span class=\"line\">    Matrix matrix = <span class=\"keyword\">new</span> Matrix();</span><br><span class=\"line\">    matrix.postScale(scale, scale);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Bitmap.createBitmap(bitmap, <span class=\"number\">0</span>, <span class=\"number\">0</span>, bitmap.getWidth(), bitmap.getHeight(), matrix, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 质量压缩</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> bitmap 被压缩的图片</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> sizeLimit 大小限制</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@return</span> 压缩后的图片</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> Bitmap <span class=\"title\">compressBitmap</span><span class=\"params\">(Bitmap bitmap, <span class=\"keyword\">long</span> sizeLimit)</span> </span>&#123;</span><br><span class=\"line\">    ByteArrayOutputStream baos = <span class=\"keyword\">new</span> ByteArrayOutputStream();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> quality = <span class=\"number\">100</span>;</span><br><span class=\"line\">    bitmap.compress(Bitmap.CompressFormat.JPEG, quality, baos);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 循环判断压缩后图片是否超过限制大小</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(baos.toByteArray().length / <span class=\"number\">1024</span> &gt; sizeLimit) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 清空baos</span></span><br><span class=\"line\">        baos.reset();</span><br><span class=\"line\">        bitmap.compress(Bitmap.CompressFormat.JPEG, quality, baos);</span><br><span class=\"line\">        quality -= <span class=\"number\">10</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Bitmap newBitmap = BitmapFactory.decodeStream(<span class=\"keyword\">new</span> ByteArrayInputStream(baos.toByteArray()), <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> newBitmap;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 将色彩模式换成RGB_565也会比默认的ARGB8888降低一半质量</span></span><br><span class=\"line\">BitmapFactory.Options options = <span class=\"keyword\">new</span> BitmapFactory.Options();</span><br><span class=\"line\">options.inPreferredConfig = Bitmap.Config.RGB_565;</span><br><span class=\"line\">bm = BitmapFactory.decodeFile(filePath, options);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 质量压缩：百度</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> bitmap  图片</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> quality 生成的JPG的质量</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> maxSize 最大边像素数</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@return</span> base64编码的数据</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">bitmapToJpegBase64</span><span class=\"params\">(Bitmap bitmap, <span class=\"keyword\">int</span> quality, <span class=\"keyword\">float</span> maxSize)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">float</span> scale = maxSize / Math.max(bitmap.getWidth(), bitmap.getHeight());</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (scale &lt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            bitmap = scale(bitmap, scale);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ByteArrayOutputStream out = <span class=\"keyword\">new</span> ByteArrayOutputStream();</span><br><span class=\"line\">        bitmap.compress(CompressFormat.JPEG, quality, out);</span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[] data = out.toByteArray();</span><br><span class=\"line\">        out.close();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> Base64Utils.encodeToString(data, Base64Utils.NO_WRAP);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"图片裁剪\"><a href=\"#图片裁剪\" class=\"headerlink\" title=\"图片裁剪\"></a>图片裁剪</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 裁剪</span></span><br><span class=\"line\"><span class=\"comment\">    *</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> bitmap 原图</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@return</span> 裁剪后的图像</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> Bitmap <span class=\"title\">cropBitmap</span><span class=\"params\">(Bitmap bitmap)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> w = bitmap.getWidth(); <span class=\"comment\">// 得到图片的宽，高</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> h = bitmap.getHeight();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> cropWidth = w &gt;= h ? h : w;<span class=\"comment\">// 裁切后所取的正方形区域边长</span></span><br><span class=\"line\">    cropWidth /= <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> cropHeight = (<span class=\"keyword\">int</span>) (cropWidth / <span class=\"number\">1.2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Bitmap.createBitmap(bitmap, w / <span class=\"number\">3</span>, <span class=\"number\">0</span>, cropWidth, cropHeight, <span class=\"keyword\">null</span>, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"图片旋转-偏移\"><a href=\"#图片旋转-偏移\" class=\"headerlink\" title=\"图片旋转 / 偏移\"></a>图片旋转 / 偏移</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 选择变换</span></span><br><span class=\"line\"><span class=\"comment\">    *</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> origin 原图</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> alpha  旋转角度，可正可负</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@return</span> 旋转后的图片</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> Bitmap <span class=\"title\">rotateBitmap</span><span class=\"params\">(Bitmap origin, <span class=\"keyword\">float</span> alpha)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (origin == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> width = origin.getWidth();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> height = origin.getHeight();</span><br><span class=\"line\">    Matrix matrix = <span class=\"keyword\">new</span> Matrix();</span><br><span class=\"line\">    matrix.setRotate(alpha);</span><br><span class=\"line\">    <span class=\"comment\">// 围绕原地进行旋转</span></span><br><span class=\"line\">    Bitmap newBM = Bitmap.createBitmap(origin, <span class=\"number\">0</span>, <span class=\"number\">0</span>, width, height, matrix, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newBM.equals(origin)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> newBM;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    origin.recycle();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> newBM;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 偏移效果</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> origin 原图</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@return</span> 偏移后的bitmap</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> Bitmap <span class=\"title\">skewBitmap</span><span class=\"params\">(Bitmap origin)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (origin == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> width = origin.getWidth();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> height = origin.getHeight();</span><br><span class=\"line\">    Matrix matrix = <span class=\"keyword\">new</span> Matrix();</span><br><span class=\"line\">    matrix.postSkew(-<span class=\"number\">0.6f</span>, -<span class=\"number\">0.3f</span>);</span><br><span class=\"line\">    Bitmap newBM = Bitmap.createBitmap(origin, <span class=\"number\">0</span>, <span class=\"number\">0</span>, width, height, matrix, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newBM.equals(origin)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> newBM;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    origin.recycle();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> newBM;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"图片识别\"><a href=\"#图片识别\" class=\"headerlink\" title=\"图片识别\"></a>图片识别</h2><ul>\n<li>二维码识别：<ul>\n<li><a href=\"https://github.com/zxing/zxing\" target=\"_blank\" rel=\"noopener\">zxing</a><ul>\n<li><a href=\"https://github.com/ahuyangdong/QrCodeDemo4\" target=\"_blank\" rel=\"noopener\">Demo扫码识别</a></li>\n</ul>\n</li>\n<li><a href=\"https://github.com/bingoogolapple/BGAQRCode-Android\" target=\"_blank\" rel=\"noopener\">BGAQRCode</a></li>\n</ul>\n</li>\n<li>身份证识别：<ul>\n<li><a href=\"https://github.com/fanqieVip/AndroidOcrLibs\" target=\"_blank\" rel=\"noopener\">AndroidOcrLibs</a></li>\n<li><a href=\"https://github.com/XieZhiFa/IdCardOCR\" target=\"_blank\" rel=\"noopener\">IdCardOCR</a></li>\n</ul>\n</li>\n<li>识别引擎<ul>\n<li><a href=\"https://github.com/rmtheis/tess-two\" target=\"_blank\" rel=\"noopener\">tess-two</a></li>\n<li><a href=\"https://github.com/adaptech-cz/Tesseract4Android\" target=\"_blank\" rel=\"noopener\">Tesseract4Android</a></li>\n<li><a href=\"https://github.com/465857721/IDCardOCR_China\" target=\"_blank\" rel=\"noopener\">IDCardOCR_China-基于Tesseract</a></li>\n</ul>\n</li>\n</ul>\n","categories":["Android"],"tags":["Bitmap"]},{"title":"Activity","url":"/2020/02/07/Android/控件/Activity/","content":"<h2 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h2><h3 id=\"java关联xml\"><a href=\"#java关联xml\" class=\"headerlink\" title=\"java关联xml\"></a>java关联xml</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// MainActivity.java</span></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">    <span class=\"comment\">// 绑定：res/layout/activity_main.xml</span></span><br><span class=\"line\">    setContentView(R.layout.activity_main);</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h3><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--Standard-标准模式: 默认模式, 每次调用都启动一个新的activity--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">activity</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\".MainActivity\"</span> <span class=\"attr\">android:launchMode</span>=<span class=\"string\">\"standard\"</span> &gt;</span> ... <span class=\"tag\">&lt;/<span class=\"name\">activity</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--singleTop-栈顶复用模式: 如果activity处于栈顶, 则直接使用, 否则创建新的--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">activity</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\".MainActivity\"</span> <span class=\"attr\">android:launchMode</span>=<span class=\"string\">\"singleTop\"</span>&gt;</span> ... <span class=\"tag\">&lt;/<span class=\"name\">activity</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--singleTask-栈内复用模式--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">activity</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\".MainActivity\"</span> <span class=\"attr\">android:launchMode</span>=<span class=\"string\">\"singleTask\"</span> &gt;</span> ... <span class=\"tag\">&lt;/<span class=\"name\">activity</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--singleInstance-全局唯一模式--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">activity</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\".MainActivity\"</span> <span class=\"attr\">android:launchMode</span>=<span class=\"string\">\"singleInstance\"</span> &gt;</span> ... <span class=\"tag\">&lt;/<span class=\"name\">activity</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 背景图：activity_main.xml --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">androidx.constraintlayout.widget.ConstraintLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:background</span>=<span class=\"string\">\"@drawable/复制main_background\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">tools:context</span>=<span class=\"string\">\".MainActivity\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">androidx.constraintlayout.widget.ConstraintLayout</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 复制文件“main_background.png”到“res/drawable”下即可--&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 基础 Layout --&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:app</span>=<span class=\"string\">\"http://schemas.android.com/apk/res-auto\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:tools</span>=<span class=\"string\">\"http://schemas.android.com/tools\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"vertical\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">tools:context</span>=<span class=\"string\">\".MainActivity\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"生命周期\"><a href=\"#生命周期\" class=\"headerlink\" title=\"生命周期\"></a>生命周期</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 完整生存期</span></span><br><span class=\"line\">onCreate();     <span class=\"comment\">// 启动</span></span><br><span class=\"line\">onDestroy();    <span class=\"comment\">// 销毁</span></span><br><span class=\"line\"><span class=\"comment\">// 可见生存期</span></span><br><span class=\"line\">onStart();      <span class=\"comment\">// 对用户可见</span></span><br><span class=\"line\">onStop();       <span class=\"comment\">// 对用户不可见</span></span><br><span class=\"line\"><span class=\"comment\">// 前台生存期</span></span><br><span class=\"line\">onPause();      <span class=\"comment\">// 暂停, 离开前台</span></span><br><span class=\"line\">onResume()      <span class=\"comment\">// 继续, 进入前台</span></span><br><span class=\"line\"><span class=\"comment\">// 其他</span></span><br><span class=\"line\">onRestart()     <span class=\"comment\">// 停止(onStop)-&gt;运行(onStart), 该函数在onStart之前调用</span></span><br><span class=\"line\">onBackPressed() <span class=\"comment\">// 回退键处理, 可以当做用户强制退出</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 终止生命周期</span></span><br><span class=\"line\">Activity.finish();      <span class=\"comment\">// 将最上面的Activity移出栈, 占用资源并不即时释放. 系统会在必要时调用onDestroy()完全销毁.</span></span><br><span class=\"line\">Activity.onDestory()    <span class=\"comment\">// 系统销毁这个Activity的实例在内存中占据的空间. onDestory是activity生命周期的最后一步.</span></span><br><span class=\"line\">System.exit(<span class=\"number\">0</span>)          <span class=\"comment\">// 退出整个应用程序</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"通讯\"><a href=\"#通讯\" class=\"headerlink\" title=\"通讯\"></a>通讯</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 调用Activity</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">start</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 当前Activity.this, 目标Activity.class</span></span><br><span class=\"line\">    Intent intent = <span class=\"keyword\">new</span> Intent(MainActivity.<span class=\"keyword\">this</span>, CheatActivity<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">    intent.putExtra(key, value);</span><br><span class=\"line\">    <span class=\"comment\">// 无回调方式调用</span></span><br><span class=\"line\">    startActivity(intent);</span><br><span class=\"line\">    <span class=\"comment\">// 该函数非阻塞: 标记返回值标识</span></span><br><span class=\"line\">    startActivityForResult(intent, REQUEST_CODE_CHEAT);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 接收Activity</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">    String value = getIntent().getStringExtra(key);</span><br><span class=\"line\">    <span class=\"comment\">// 设置返回值</span></span><br><span class=\"line\">    Intent result = <span class=\"keyword\">new</span> Intent(<span class=\"keyword\">this</span>, ThisActivity<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">    result.putExtra(key, value);</span><br><span class=\"line\">    setResult(RESULT_OK, result);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 调用方Activity接收返回值</span></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onActivityResult</span><span class=\"params\">(<span class=\"keyword\">int</span> requestCode, <span class=\"keyword\">int</span> resultCode, Intent intent)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onActivityResult(requestCode, resultCode, intent);</span><br><span class=\"line\">    <span class=\"comment\">// REQUEST_CODE_CHEAT 对应startActivityForResult 第二个参数</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(REQUEST_CODE_CHEAT == requestCode) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(resultCode == Activity.RESULT_OK)</span><br><span class=\"line\">            Sting value = intent.getStringExtra(key));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"翻转\"><a href=\"#翻转\" class=\"headerlink\" title=\"翻转\"></a>翻转</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">+ activity: 屏幕翻转会完全销毁activity,并重建</span><br><span class=\"line\">+ layout: 系统自动匹配最佳layout并加载, 默认加载layout, 横屏自动加载layout-land</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 禁止横版</span></span><br><span class=\"line\"><span class=\"number\">1</span>. onCreate()中增加:</span><br><span class=\"line\">setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2</span>，Manifest.xml文件中为所有Activity加上配置属性android:screenOrientation=<span class=\"string\">\"portrait\"</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// activity 回收前数据存储</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String KEY_INDEX = <span class=\"string\">\"index\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mCurrentIndex = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">    if(savedInstanceState != null)  # 首次启动为空</span><br><span class=\"line\">        mCurrentIndex = savedInstanceState.getInt(KEY_INDEX);</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onSaveInstanceState</span><span class=\"params\">(Bundle outState)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onSaveInstanceState(outState);</span><br><span class=\"line\">    outState.putInt(KEY_INDEX, mCurrentIndex);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"手动创建控件\"><a href=\"#手动创建控件\" class=\"headerlink\" title=\"手动创建控件\"></a>手动创建控件</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// xml中指定id，最外层Layout也可以指定id</span></span><br><span class=\"line\">LinearLayout linearLayout = <span class=\"keyword\">this</span>.findViewById(R.id.layoutNFC);</span><br><span class=\"line\"><span class=\"comment\">// 创建TextView，并指定控件参数</span></span><br><span class=\"line\">TextView tv = <span class=\"keyword\">new</span> TextView(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">LinearLayout.LayoutParams layoutParams =   <span class=\"keyword\">new</span> LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT, LinearLayout.LayoutParams.WRAP_CONTENT);</span><br><span class=\"line\">tv.setLayoutParams(<span class=\"keyword\">new</span> LinearLayout.LayoutParams(layoutParams));</span><br><span class=\"line\">tv.setText(<span class=\"string\">\"test\"</span>);</span><br><span class=\"line\"><span class=\"comment\">// TextView添加到linearLayout</span></span><br><span class=\"line\">linearLayout.addView(tv);</span><br></pre></td></tr></table></figure>\n\n","categories":["Android"],"tags":["Activity"]},{"title":"WebView","url":"/2020/02/07/Android/控件/WebView/","content":"<h2 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h2><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--AndroidManifest.xml：联网权限--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">uses-permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.permission.INTERNET\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Activity.java</span></span><br><span class=\"line\">mWebView.setWebViewClient(<span class=\"keyword\">new</span> WebViewClient() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 设置在webView点击打开的新网页在当前界面显示,而不跳转到新的浏览器中</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">shouldOverrideUrlLoading</span><span class=\"params\">(WebView view, String url)</span> </span>&#123;</span><br><span class=\"line\">        view.loadUrl(url);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">shouldOverrideUrlLoading</span><span class=\"params\">(WebView view, WebResourceRequest request)</span> </span>&#123;</span><br><span class=\"line\">        view.loadUrl(request.getUrl().toString());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 页面加载完成事件</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onPageFinished</span><span class=\"params\">(WebView view, String url)</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置WebView属性,运行执行js脚本</span></span><br><span class=\"line\">mWebView.getSettings().setJavaScriptEnabled(<span class=\"keyword\">true</span>);</span><br><span class=\"line\"><span class=\"comment\">// 调用loadUrl方法为WebView加入链接</span></span><br><span class=\"line\">mWebView.loadUrl(<span class=\"string\">\"https://www.baidu.com/\"</span>);</span><br><span class=\"line\">mWebView.loadUrl(<span class=\"string\">\"file:///android_asset/html/idcard.html\"</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"常用API\"><a href=\"#常用API\" class=\"headerlink\" title=\"常用API\"></a>常用API</h2><ul>\n<li><code>WebViewClient</code> 常用方法</li>\n<li><code>WebChromeClient</code> 常用方法</li>\n</ul>\n<h3 id=\"设置\"><a href=\"#设置\" class=\"headerlink\" title=\"设置\"></a>设置</h3><ul>\n<li><code>setAllowFileAccess</code> 启用或禁止WebView访问文件数据</li>\n<li><code>setBlockNetworkImage</code> 是否显示网络图像</li>\n<li><code>setBuiltInZoomControls</code> 设置是否支持缩放</li>\n<li><code>setCacheMode</code> 设置缓冲的模式</li>\n<li><code>setDefaultFontSize</code> 设置默认的字体大小</li>\n<li><code>setDefaultTextEncodingName</code> 设置在解码时使用的默认编码</li>\n<li><code>setFixedFontFamily</code> 设置固定使用的字体</li>\n<li><code>setJavaSciptEnabled</code> 设置是否支持Javascript</li>\n<li><code>setLayoutAlgorithm</code> 设置布局方式</li>\n<li><code>setLightTouchEnabled</code> 设置用鼠标激活被选项</li>\n<li><code>setSupportZoom</code> 设置是否支持缩放</li>\n<li><a href=\"https://www.jianshu.com/p/0d7d429bd216\" target=\"_blank\" rel=\"noopener\">WebView控件之WebSettings详解</a></li>\n</ul>\n<h3 id=\"事件\"><a href=\"#事件\" class=\"headerlink\" title=\"事件\"></a>事件</h3><ul>\n<li><code>doUpdate</code> VisitedHistory 更新历史记录</li>\n<li><code>onFormResubmission</code> 应用程序重新请求网页数据</li>\n<li><code>onLoadResource</code> 加载指定地址提供的资源</li>\n<li><code>onPageFinished</code> 网页加载完毕</li>\n<li><code>onPageStarted</code> 网页开始加载</li>\n<li><code>onReceivedError</code> 报告错误信息</li>\n<li><code>onScaleChanged</code> WebView发生改变</li>\n<li><code>shouldOverrideUrlLoading</code> 控制新的连接在当前WebView中打开</li>\n<li><code>onCloseWindow</code> 关闭WebView</li>\n<li><code>onCreateWindow</code> 创建WebView</li>\n<li><code>onJsAlert</code> 处理Javascript中的Alert对话框</li>\n<li><code>onJsConfirm</code> 处理Javascript中的Confirm对话框</li>\n<li><code>onJsPrompt</code> 处理Javascript中的Prompt对话框</li>\n<li><code>onProgressChanged</code> 加载进度条改变</li>\n<li><code>onReceivedlcon</code> 网页图标更改</li>\n<li><code>onReceivedTitle</code> 网页Title更改</li>\n<li><code>onRequestFocus</code> WebView显示焦点</li>\n</ul>\n<h2 id=\"交互\"><a href=\"#交互\" class=\"headerlink\" title=\"交互\"></a>交互</h2><p><a href=\"https://blog.csdn.net/carson_ho/article/details/64904691/\" target=\"_blank\" rel=\"noopener\">WebView与JS交互</a></p>\n<h3 id=\"Android调用JS\"><a href=\"#Android调用JS\" class=\"headerlink\" title=\"Android调用JS\"></a>Android调用JS</h3><ul>\n<li>通过WebView的loadUrl（）</li>\n<li>通过WebView的evaluateJavascript（）</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span></span><br><span class=\"line\">  // 使用安卓注入对象，发送消息到安卓，并接收返回值</span><br><span class=\"line\">  function sendToAndroid(msg) &#123;</span><br><span class=\"line\">    document.getElementById(\"text\").innerHTML = androidObject.send(msg);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  // 安卓可直接调用JS函数，并反馈</span><br><span class=\"line\">  function androidCall(msg) &#123;</span><br><span class=\"line\">    document.getElementById(\"text\").innerHTML = msg;</span><br><span class=\"line\">    return 'ok';</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"InWebView!\"</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"sendToAndroid('In Android land')\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"text\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 安卓调用JS androidCall函数，并接收返回值</span></span><br><span class=\"line\">mWebView.evaluateJavascript(<span class=\"string\">\"javascript:androidCall('androidCall')\"</span>, <span class=\"keyword\">new</span> ValueCallback&lt;String&gt;() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onReceiveValue</span><span class=\"params\">(String value)</span> </span>&#123;</span><br><span class=\"line\">        Log.e(<span class=\"string\">\"test\"</span>, <span class=\"string\">\"onReceiveValue: \"</span> + value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 注入JS对象，提供JS调用接口</span></span><br><span class=\"line\">mWebView.addJavascriptInterface(<span class=\"keyword\">new</span> Object() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@JavascriptInterface</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">send</span><span class=\"params\">(String msg)</span> </span>&#123;</span><br><span class=\"line\">        Log.e(<span class=\"string\">\"test\"</span>, <span class=\"string\">\"js send: \"</span> + msg);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"send\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;, <span class=\"string\">\"androidObject\"</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"JS调用Android\"><a href=\"#JS调用Android\" class=\"headerlink\" title=\"JS调用Android\"></a>JS调用Android</h3><ul>\n<li>通过<code>WebView</code>的<code>addJavascriptInterface()</code>进行对象映射</li>\n<li>通过<code>WebViewClient</code>的<code>shouldOverrideUrlLoading()</code>方法回调拦截 url</li>\n<li>通过<code>WebChromeClient</code>的<code>onJsAlert()</code>、<code>onJsConfirm()</code>、<code>onJsPrompt()</code>方法回调拦截JS对话框<code>alert()</code>、<code>confirm()</code>、<code>prompt()</code>消息</li>\n</ul>\n<h2 id=\"AgentWeb\"><a href=\"#AgentWeb\" class=\"headerlink\" title=\"AgentWeb\"></a>AgentWeb</h2><p><a href=\"https://github.com/Justson/AgentWeb\" target=\"_blank\" rel=\"noopener\">github:AgentWeb</a></p>\n<h3 id=\"基础应用\"><a href=\"#基础应用\" class=\"headerlink\" title=\"基础应用\"></a>基础应用</h3>","categories":["Android"],"tags":["WebView"]},{"title":"图片","url":"/2020/02/07/Android/控件/BitmapUtil/","content":"<h2 id=\"baidu-BitmapUtil\"><a href=\"#baidu-BitmapUtil\" class=\"headerlink\" title=\"baidu BitmapUtil\"></a>baidu BitmapUtil</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Copyright (C) 2017 Baidu Inc. All rights reserved.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> com.baidu.idl.face.platform.utils;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.content.Context;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.graphics.Bitmap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.graphics.Bitmap.CompressFormat;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.graphics.BitmapFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.graphics.Matrix;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.graphics.Rect;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.media.ExifInterface;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.net.Uri;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.os.Environment;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.text.TextUtils;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.util.Log;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.ByteArrayOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.File;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 这个类提供一些操作Bitmap的方法</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BitmapUtils</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Log TAG</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TAG = <span class=\"string\">\"ImageUtils\"</span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 保存图片的质量：100</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> QUALITY = <span class=\"number\">100</span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 图像的旋转方向是0</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> ROTATE0 = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 图像的旋转方向是90</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> ROTATE90 = <span class=\"number\">90</span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 图像的旋转方向是180</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> ROTATE180 = <span class=\"number\">180</span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 图像的旋转方向是270</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> ROTATE270 = <span class=\"number\">270</span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 图像的旋转方向是360</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> ROTATE360 = <span class=\"number\">360</span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 图片太大内存溢出后压缩的比例</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> PIC_COMPRESS_SIZE = <span class=\"number\">4</span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 图像压缩边界</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> IMAGEBOUND = <span class=\"number\">128</span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 图片显示最大边的像素</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> MAXLENTH = <span class=\"number\">1024</span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 默认的最大尺寸</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> DEFAULT_MAX_SIZE_CELL_NETWORK = <span class=\"number\">600</span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 题编辑wifi环境下压缩的最大尺寸</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> QUESTION_MAX_SIZE_CELL_NETWORK = <span class=\"number\">1024</span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 图片压缩的质量</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> QUESTION_IMAGE_JPG_QUALITY = <span class=\"number\">75</span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 默认的图片压缩的质量</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> DEFAULT_IMAGE_JPG_QUALITY = <span class=\"number\">50</span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 网络请求超时时间</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> CONNECTTIMEOUT = <span class=\"number\">3000</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String IMAGE_KEY_SUFFIX = <span class=\"string\">\"jpg\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> DEFAULT_JPEG_QUALITY = <span class=\"number\">90</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Private constructor to prohibit nonsense instance creation.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">BitmapUtils</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 得到要显示的图片数据</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> context     Context</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> data        拍照保存的图片数据byte[]类型</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> orientation 图片方向</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> Bitmap 返回显示的图片bitmap</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Bitmap <span class=\"title\">createBitmap</span><span class=\"params\">(Context context, <span class=\"keyword\">byte</span>[] data, <span class=\"keyword\">float</span> orientation)</span> </span>&#123;</span><br><span class=\"line\">        Bitmap bitmap = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        Bitmap transformed = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        BitmapFactory.Options opts = <span class=\"keyword\">new</span> BitmapFactory.Options();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">int</span> width = DensityUtils.getDisplayWidth(context);</span><br><span class=\"line\">            <span class=\"keyword\">int</span> hight = DensityUtils.getDisplayHeight(context);</span><br><span class=\"line\">            <span class=\"keyword\">int</span> min = Math.min(width, hight);</span><br><span class=\"line\">            opts.inJustDecodeBounds = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            BitmapFactory.decodeByteArray(data, <span class=\"number\">0</span>, data.length, opts);</span><br><span class=\"line\">            opts.inSampleSize =</span><br><span class=\"line\">                    BitmapUtils.computeSampleSize(opts, min, BitmapUtils.MAXLENTH * BitmapUtils.MAXLENTH);</span><br><span class=\"line\">            opts.inJustDecodeBounds = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            bitmap = BitmapFactory.decodeByteArray(data, <span class=\"number\">0</span>, data.length, opts);</span><br><span class=\"line\">            transformed = BitmapUtils.rotateBitmap(orientation, bitmap);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (OutOfMemoryError e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (bitmap != <span class=\"keyword\">null</span> &amp;&amp; !bitmap.isRecycled()) &#123;</span><br><span class=\"line\">                bitmap.recycle();</span><br><span class=\"line\">                bitmap = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (transformed != <span class=\"keyword\">null</span> &amp;&amp; !transformed.isRecycled()) &#123;</span><br><span class=\"line\">                transformed.recycle();</span><br><span class=\"line\">                transformed = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            opts.inJustDecodeBounds = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            BitmapFactory.decodeByteArray(data, <span class=\"number\">0</span>, data.length, opts);</span><br><span class=\"line\">            opts.inSampleSize =</span><br><span class=\"line\">                    BitmapUtils.computeSampleSize(opts, -<span class=\"number\">1</span>, opts.outWidth * opts.outHeight</span><br><span class=\"line\">                            / BitmapUtils.PIC_COMPRESS_SIZE);</span><br><span class=\"line\">            opts.inJustDecodeBounds = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            bitmap = BitmapFactory.decodeByteArray(data, <span class=\"number\">0</span>, data.length, opts);</span><br><span class=\"line\">            transformed = BitmapUtils.rotateBitmap(orientation, bitmap);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (transformed != bitmap &amp;&amp; bitmap != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            bitmap.recycle();</span><br><span class=\"line\">            bitmap = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> transformed;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 根据从数据中读到的方向旋转图片</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> orientation 图片方向</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> bitmap      要旋转的bitmap</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 旋转后的图片</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Bitmap <span class=\"title\">rotateBitmap</span><span class=\"params\">(<span class=\"keyword\">float</span> orientation, Bitmap bitmap)</span> </span>&#123;</span><br><span class=\"line\">        Bitmap transformed;</span><br><span class=\"line\">        Matrix m = <span class=\"keyword\">new</span> Matrix();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (orientation == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            transformed = bitmap;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            m.setRotate(orientation);</span><br><span class=\"line\">            transformed = Bitmap.createBitmap(bitmap, <span class=\"number\">0</span>, <span class=\"number\">0</span>, bitmap.getWidth(), bitmap.getHeight(), m, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> transformed;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取无损压缩图片合适的压缩比例</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> options        图片的一些设置项</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> minSideLength  最小边长</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> maxNumOfPixels 最大的像素数目</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 返回合适的压缩值</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">computeSampleSize</span><span class=\"params\">(BitmapFactory.Options options, <span class=\"keyword\">int</span> minSideLength, <span class=\"keyword\">int</span> maxNumOfPixels)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> initialSize = BitmapUtils.computeInitialSampleSize(options, minSideLength, maxNumOfPixels);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> roundedSize;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (initialSize &lt;= <span class=\"number\">8</span>) &#123; <span class=\"comment\">// SUPPRESS CHECKSTYLE</span></span><br><span class=\"line\">            roundedSize = <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (roundedSize &lt; initialSize) &#123;</span><br><span class=\"line\">                roundedSize &lt;&lt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            roundedSize = (initialSize + <span class=\"number\">7</span>) / <span class=\"number\">8</span> * <span class=\"number\">8</span>; <span class=\"comment\">// SUPPRESS CHECKSTYLE</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> roundedSize;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取无损压缩图片的压缩比</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> options        图片的一些设置项</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> minSideLength  最小边长</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> maxNumOfPixels 最大的像素数目</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 返回合适的压缩值</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">computeInitialSampleSize</span><span class=\"params\">(BitmapFactory.Options options, <span class=\"keyword\">int</span> minSideLength,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                               <span class=\"keyword\">int</span> maxNumOfPixels)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">double</span> w = options.outWidth;</span><br><span class=\"line\">        <span class=\"keyword\">double</span> h = options.outHeight;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> lowerBound = (maxNumOfPixels == -<span class=\"number\">1</span>) ? <span class=\"number\">1</span> : (<span class=\"keyword\">int</span>) Math.ceil(Math.sqrt(w * h / maxNumOfPixels));</span><br><span class=\"line\">        <span class=\"keyword\">int</span> upperBound =</span><br><span class=\"line\">                (minSideLength == -<span class=\"number\">1</span>) ? BitmapUtils.IMAGEBOUND : (<span class=\"keyword\">int</span>) Math.min(</span><br><span class=\"line\">                        Math.floor(w / minSideLength), Math.floor(h / minSideLength));</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (upperBound &lt; lowerBound) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> lowerBound;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((maxNumOfPixels == -<span class=\"number\">1</span>) &amp;&amp; (minSideLength == -<span class=\"number\">1</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (minSideLength == -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> lowerBound;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> upperBound;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 解析图片的旋转方向</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> path 图片的路径</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 旋转角度</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">decodeImageDegree</span><span class=\"params\">(String path)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> degree = ROTATE0;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            ExifInterface exifInterface = <span class=\"keyword\">new</span> ExifInterface(path);</span><br><span class=\"line\">            <span class=\"keyword\">int</span> orientation =</span><br><span class=\"line\">                    exifInterface.getAttributeInt(ExifInterface.TAG_ORIENTATION,</span><br><span class=\"line\">                            ExifInterface.ORIENTATION_NORMAL);</span><br><span class=\"line\">            <span class=\"keyword\">switch</span> (orientation) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> ExifInterface.ORIENTATION_ROTATE_90:</span><br><span class=\"line\">                    degree = ROTATE90;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> ExifInterface.ORIENTATION_ROTATE_180:</span><br><span class=\"line\">                    degree = ROTATE180;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> ExifInterface.ORIENTATION_ROTATE_270:</span><br><span class=\"line\">                    degree = ROTATE270;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                    degree = ROTATE0;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            degree = ROTATE0;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> degree;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> bitmap  图片</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> quality 生成的JPG的质量</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> maxSize 最大边像素数</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> base64编码的数据</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">bitmapToJpegBase64</span><span class=\"params\">(Bitmap bitmap, <span class=\"keyword\">int</span> quality, <span class=\"keyword\">float</span> maxSize)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">float</span> scale = maxSize / Math.max(bitmap.getWidth(), bitmap.getHeight());</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (scale &lt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                bitmap = scale(bitmap, scale);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            ByteArrayOutputStream out = <span class=\"keyword\">new</span> ByteArrayOutputStream();</span><br><span class=\"line\">            bitmap.compress(CompressFormat.JPEG, quality, out);</span><br><span class=\"line\">            <span class=\"keyword\">byte</span>[] data = out.toByteArray();</span><br><span class=\"line\">            out.close();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> Base64Utils.encodeToString(data, Base64Utils.NO_WRAP);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 根据图片类别设置图片最大SIZE和图片压缩质量</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> context Context对象</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> type    界面类型</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> bitmap  图片</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> base64编码的数据</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">bitmapToJpegBase64</span><span class=\"params\">(Context context, String type, Bitmap bitmap)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 图片最大SIZE</span></span><br><span class=\"line\">        <span class=\"keyword\">float</span> maxSize = getSizeParams(context, type) * <span class=\"number\">1.0f</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 图片压缩质量</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> quality = getQuealityParams(context, type);</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">float</span> scale = maxSize / Math.max(bitmap.getWidth(), bitmap.getHeight());</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (scale &lt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                bitmap = scale(bitmap, scale);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            ByteArrayOutputStream out = <span class=\"keyword\">new</span> ByteArrayOutputStream();</span><br><span class=\"line\">            bitmap.compress(CompressFormat.JPEG, quality, out);</span><br><span class=\"line\">            <span class=\"keyword\">byte</span>[] data = out.toByteArray();</span><br><span class=\"line\">            out.close();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> Base64Utils.encodeToString(data, Base64Utils.NO_WRAP);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 设置图片大小</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> context Context对象</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> type    Category对象</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 压缩的图片大小</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getSizeParams</span><span class=\"params\">(Context context, String type)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> maxSize = DEFAULT_MAX_SIZE_CELL_NETWORK;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (type == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> maxSize;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        maxSize = DEFAULT_MAX_SIZE_CELL_NETWORK;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> maxSize;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 设置图片压缩质量</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> context Context对象</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> type    Category对象</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 压缩的质量</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getQuealityParams</span><span class=\"params\">(Context context, String type)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> quality = DEFAULT_IMAGE_JPG_QUALITY;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (type == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> quality;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> quality;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 等比压缩图片</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> bitmap 原图</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> scale  压缩因子</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 压缩后的图片</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Bitmap <span class=\"title\">scale</span><span class=\"params\">(Bitmap bitmap, <span class=\"keyword\">float</span> scale)</span> </span>&#123;</span><br><span class=\"line\">        Matrix matrix = <span class=\"keyword\">new</span> Matrix();</span><br><span class=\"line\">        matrix.postScale(scale, scale);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Bitmap.createBitmap(bitmap, <span class=\"number\">0</span>, <span class=\"number\">0</span>, bitmap.getWidth(), bitmap.getHeight(), matrix, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 尺寸缩放</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> bitmap bitmap</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> w      width</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> h      height</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> scaleBitmap</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Bitmap <span class=\"title\">scale</span><span class=\"params\">(Bitmap bitmap, <span class=\"keyword\">int</span> w, <span class=\"keyword\">int</span> h)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (bitmap == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> width = bitmap.getWidth();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> height = bitmap.getHeight();</span><br><span class=\"line\">        Matrix matrix = <span class=\"keyword\">new</span> Matrix();</span><br><span class=\"line\">        <span class=\"keyword\">float</span> scaleWidth = ((<span class=\"keyword\">float</span>) w / width);</span><br><span class=\"line\">        <span class=\"keyword\">float</span> scaleHeight = ((<span class=\"keyword\">float</span>) h / height);</span><br><span class=\"line\">        matrix.postScale(scaleWidth, scaleHeight);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Bitmap.createBitmap(bitmap, <span class=\"number\">0</span>, <span class=\"number\">0</span>, width, height, matrix, <span class=\"keyword\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 等比压缩图片</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> resBitmap 原图</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> desWidth  压缩后图片的宽度</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> desHeight 压缩后图片的高度</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 压缩后的图片</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Bitmap <span class=\"title\">calculateInSampleSize</span><span class=\"params\">(Bitmap resBitmap, <span class=\"keyword\">int</span> desWidth, <span class=\"keyword\">int</span> desHeight)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> resWidth = resBitmap.getWidth();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> resHeight = resBitmap.getHeight();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (resHeight &gt; desHeight || resWidth &gt; desWidth) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 计算出实际宽高和目标宽高的比率</span></span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">float</span> heightRatio = (<span class=\"keyword\">float</span>) desHeight / (<span class=\"keyword\">float</span>) resHeight;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">float</span> widthRatio = (<span class=\"keyword\">float</span>) desWidth / (<span class=\"keyword\">float</span>) resWidth;</span><br><span class=\"line\">            <span class=\"keyword\">float</span> scale = heightRatio &lt; widthRatio ? heightRatio : widthRatio;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> scale(resBitmap, scale);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> resBitmap;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 解析图片的旋转方向</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> jpeg 图片数据</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 旋转角度</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">decodeImageDegree</span><span class=\"params\">(<span class=\"keyword\">byte</span>[] jpeg)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> degree = ImageExif.getOrientation(jpeg);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> degree;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 得到要显示的图片数据</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> filename 图片文件</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> Bitmap 返回显示的图片bitmap</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Bitmap <span class=\"title\">createBitmap</span><span class=\"params\">(Context context, String filename, <span class=\"keyword\">int</span> orientatoin)</span> </span>&#123;</span><br><span class=\"line\">        Bitmap bitmap = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        Bitmap transformed = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        BitmapFactory.Options opts = <span class=\"keyword\">new</span> BitmapFactory.Options();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> width = DensityUtils.getDisplayWidth(context);</span><br><span class=\"line\">            <span class=\"keyword\">int</span> hight = DensityUtils.getDisplayHeight(context);</span><br><span class=\"line\">            <span class=\"keyword\">int</span> min = Math.min(width, hight);</span><br><span class=\"line\">            opts.inJustDecodeBounds = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            BitmapFactory.decodeFile(filename, opts);</span><br><span class=\"line\">            opts.inSampleSize =</span><br><span class=\"line\">                    BitmapUtils.computeSampleSize(opts, min, BitmapUtils.MAXLENTH * BitmapUtils.MAXLENTH);</span><br><span class=\"line\">            opts.inJustDecodeBounds = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            bitmap = BitmapFactory.decodeFile(filename, opts);</span><br><span class=\"line\">            transformed = BitmapUtils.rotateBitmap(orientatoin, bitmap);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (OutOfMemoryError e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (bitmap != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                bitmap.recycle();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            opts.inJustDecodeBounds = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            BitmapFactory.decodeFile(filename, opts);</span><br><span class=\"line\">            opts.inSampleSize =</span><br><span class=\"line\">                    BitmapUtils.computeSampleSize(opts, -<span class=\"number\">1</span>, opts.outWidth * opts.outHeight</span><br><span class=\"line\">                            / BitmapUtils.PIC_COMPRESS_SIZE);</span><br><span class=\"line\">            opts.inJustDecodeBounds = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            bitmap = BitmapFactory.decodeFile(filename, opts);</span><br><span class=\"line\">            transformed = BitmapUtils.rotateBitmap(orientatoin, bitmap);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (transformed != bitmap &amp;&amp; bitmap != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            bitmap.recycle();</span><br><span class=\"line\">            bitmap = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> transformed;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Bitmap <span class=\"title\">createBitmap</span><span class=\"params\">(Context context, <span class=\"keyword\">byte</span>[] imageByte, <span class=\"keyword\">int</span> orientatoin)</span> </span>&#123;</span><br><span class=\"line\">        Bitmap bitmap = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        Bitmap transformed = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        BitmapFactory.Options opts = <span class=\"keyword\">new</span> BitmapFactory.Options();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> width = DensityUtils.getDisplayWidth(context);</span><br><span class=\"line\">            <span class=\"keyword\">int</span> hight = DensityUtils.getDisplayHeight(context);</span><br><span class=\"line\">            <span class=\"keyword\">int</span> min = Math.min(width, hight);</span><br><span class=\"line\">            opts.inJustDecodeBounds = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            bitmap = BitmapFactory.decodeByteArray(imageByte, <span class=\"number\">0</span>, imageByte.length);</span><br><span class=\"line\">            transformed = BitmapUtils.rotateBitmap(orientatoin, bitmap);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (OutOfMemoryError e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (bitmap != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                bitmap.recycle();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            opts.inJustDecodeBounds = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            BitmapFactory.decodeByteArray(imageByte, <span class=\"number\">0</span>, imageByte.length, opts);</span><br><span class=\"line\">            opts.inSampleSize =</span><br><span class=\"line\">                    BitmapUtils.computeSampleSize(opts, -<span class=\"number\">1</span>, opts.outWidth * opts.outHeight</span><br><span class=\"line\">                            / BitmapUtils.PIC_COMPRESS_SIZE);</span><br><span class=\"line\">            opts.inJustDecodeBounds = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            bitmap = BitmapFactory.decodeByteArray(imageByte, <span class=\"number\">0</span>, imageByte.length, opts);</span><br><span class=\"line\">            transformed = BitmapUtils.rotateBitmap(orientatoin, bitmap);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (transformed != bitmap &amp;&amp; bitmap != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            bitmap.recycle();</span><br><span class=\"line\">            bitmap = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> transformed;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Bitmap <span class=\"title\">createBitmap</span><span class=\"params\">(Context context, <span class=\"keyword\">int</span>[] argbByte, Rect roundRect, Rect cropRect, <span class=\"keyword\">int</span> orientatoin)</span> </span>&#123;</span><br><span class=\"line\">        Bitmap bitmap = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        Bitmap transformed = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        BitmapFactory.Options opts = <span class=\"keyword\">new</span> BitmapFactory.Options();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\"><span class=\"comment\">//            int width = DensityUtils.getDisplayWidth(context);</span></span><br><span class=\"line\"><span class=\"comment\">//            int hight = DensityUtils.getDisplayHeight(context);</span></span><br><span class=\"line\"><span class=\"comment\">//            int min = Math.min(width, hight);</span></span><br><span class=\"line\">            opts.inJustDecodeBounds = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            bitmap = Bitmap.createBitmap(argbByte, roundRect.width(), roundRect.height(), Bitmap.Config.ARGB_8888);</span><br><span class=\"line\"><span class=\"comment\">//            bitmap = Bitmap.createBitmap(roundRect.width(), roundRect.height(), Bitmap.Config.ARGB_8888);</span></span><br><span class=\"line\"><span class=\"comment\">//            bitmap.setPixels(argbByte, 0, roundRect.width(), 0, 0, roundRect.width(), roundRect.height());</span></span><br><span class=\"line\">            bitmap = Bitmap.createBitmap(bitmap, cropRect.left, cropRect.top, cropRect.width(), cropRect.height());</span><br><span class=\"line\"></span><br><span class=\"line\">            transformed = BitmapUtils.rotateBitmap(orientatoin, bitmap);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (OutOfMemoryError e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (bitmap != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                bitmap.recycle();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (transformed != bitmap &amp;&amp; bitmap != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            bitmap.recycle();</span><br><span class=\"line\">            bitmap = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> transformed;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Bitmap <span class=\"title\">createBitmap</span><span class=\"params\">(Context context, <span class=\"keyword\">int</span> pw, <span class=\"keyword\">int</span> ph, <span class=\"keyword\">int</span>[] argbByte)</span> </span>&#123;</span><br><span class=\"line\">        Bitmap bitmap = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        Bitmap transformed = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        BitmapFactory.Options opts = <span class=\"keyword\">new</span> BitmapFactory.Options();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> width = DensityUtils.getDisplayWidth(context);</span><br><span class=\"line\">            <span class=\"keyword\">int</span> hight = DensityUtils.getDisplayHeight(context);</span><br><span class=\"line\">            <span class=\"keyword\">int</span> min = Math.min(width, hight);</span><br><span class=\"line\">            opts.inJustDecodeBounds = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            bitmap = Bitmap.createBitmap(argbByte, pw, ph, Bitmap.Config.RGB_565);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (OutOfMemoryError e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (bitmap != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                bitmap.recycle();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (transformed != bitmap &amp;&amp; bitmap != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            bitmap.recycle();</span><br><span class=\"line\">            bitmap = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> transformed;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 图片转换为base64</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> bitmap  图片</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> quality 压缩质量</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> base64编码的数据</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">bitmapToJpegBase64</span><span class=\"params\">(Bitmap bitmap, <span class=\"keyword\">int</span> quality)</span> </span>&#123;</span><br><span class=\"line\">        ByteArrayOutputStream out = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            out = <span class=\"keyword\">new</span> ByteArrayOutputStream();</span><br><span class=\"line\">            bitmap.compress(CompressFormat.JPEG, quality, out);</span><br><span class=\"line\">            <span class=\"keyword\">byte</span>[] data = out.toByteArray();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Base64Utils.encodeToString(data, Base64Utils.NO_WRAP);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (out != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    out.close();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 从文件中加载图片数据</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> path 图片的本地存储路径</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> Bitmap 图片数据</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Bitmap <span class=\"title\">loadBitmapFromFile</span><span class=\"params\">(String path)</span> </span>&#123;</span><br><span class=\"line\">        Bitmap bitmap = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (path != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                bitmap = BitmapFactory.decodeFile(path);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (OutOfMemoryError e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> bitmap;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 从文件中加载图片数据</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> path 图片的本地存储路径</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> Bitmap 图片数据</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Bitmap <span class=\"title\">loadBitmapFromFile</span><span class=\"params\">(Context context, String path)</span> </span>&#123;</span><br><span class=\"line\">        Bitmap bitmap = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (path != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> orientatoin = decodeImageDegree(path);</span><br><span class=\"line\">                bitmap = createBitmap(context, path, orientatoin);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (OutOfMemoryError e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> bitmap;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">saveTakePictureResult</span><span class=\"params\">(<span class=\"keyword\">final</span> Context context, String folderName, Bitmap image)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> flag = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        File file = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 取得图片保存目录</span></span><br><span class=\"line\">        String dir = getTakePictureCacheDir(context);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!TextUtils.isEmpty(dir)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 取得图片文件夹名称</span></span><br><span class=\"line\">            dir = dir + File.separator + folderName;</span><br><span class=\"line\">            file = <span class=\"keyword\">new</span> File(dir);</span><br><span class=\"line\">            <span class=\"comment\">// 判断保存图片文件夹是否存在</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ensureDirectoryExist(file)) &#123;</span><br><span class=\"line\">                String imageFileName = String.format(<span class=\"string\">\"B%s.%s\"</span>,</span><br><span class=\"line\">                        System.currentTimeMillis() / <span class=\"number\">1000</span>, IMAGE_KEY_SUFFIX);</span><br><span class=\"line\">                file = <span class=\"keyword\">new</span> File(folderName + File.separator + imageFileName);</span><br><span class=\"line\">                <span class=\"keyword\">boolean</span> fileFlag = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (!file.exists()) &#123;</span><br><span class=\"line\">                        fileFlag = file.createNewFile();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                    fileFlag = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (fileFlag) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 保存图片数据</span></span><br><span class=\"line\">                    compressToFile(image, <span class=\"number\">100</span>, dir + File.separator + imageFileName);</span><br><span class=\"line\">                    flag = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 保存目录不可使用</span></span><br><span class=\"line\">                flag = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 保存目录不可使用</span></span><br><span class=\"line\">            flag = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> flag;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">getTakePictureCacheDir</span><span class=\"params\">(Context context)</span> </span>&#123;</span><br><span class=\"line\">        File cacheDir = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 如果SDCard可写，得到SDCard路径</span></span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> sdcardWriteable = TextUtils.equals(Environment.MEDIA_MOUNTED, Environment.getExternalStorageState());</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (sdcardWriteable) &#123;</span><br><span class=\"line\">            cacheDir = Environment.getExternalStorageDirectory();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"keyword\">null</span> != cacheDir) ? cacheDir.getAbsolutePath() : <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Uri <span class=\"title\">saveTakePictureImage</span><span class=\"params\">(<span class=\"keyword\">byte</span>[] data, String dir, String filename)</span> </span>&#123;</span><br><span class=\"line\">        File file = <span class=\"keyword\">new</span> File(dir, filename);</span><br><span class=\"line\">        FileOutputStream fout = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            fout = <span class=\"keyword\">new</span> FileOutputStream(file);</span><br><span class=\"line\">            fout.write(data);</span><br><span class=\"line\">            fout.flush();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 异常时删除保存失败的文件</span></span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (file != <span class=\"keyword\">null</span> &amp;&amp; file.exists() &amp;&amp; file.isFile()) &#123;</span><br><span class=\"line\">                    file.delete();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Exception ex) &#123;</span><br><span class=\"line\">                ex.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (fout != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    fout.close();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Uri.fromFile(file);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">ensureDirectoryExist</span><span class=\"params\">(<span class=\"keyword\">final</span> File dir)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (dir == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!dir.exists()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                dir.mkdirs();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (SecurityException e) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">compressToFile</span><span class=\"params\">(Bitmap bitmap, String path)</span> </span>&#123;</span><br><span class=\"line\">        compressToFile(bitmap, DEFAULT_JPEG_QUALITY, path);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">compressToFile</span><span class=\"params\">(Bitmap bitmap, <span class=\"keyword\">int</span> quality, String path)</span> </span>&#123;</span><br><span class=\"line\">        compressToFile(bitmap, CompressFormat.JPEG, quality, path);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">compressToFile</span><span class=\"params\">(Bitmap bitmap, CompressFormat format, <span class=\"keyword\">int</span> quality, String path)</span> </span>&#123;</span><br><span class=\"line\">        File f = <span class=\"keyword\">new</span> File(path);</span><br><span class=\"line\">        FileOutputStream fos = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            fos = <span class=\"keyword\">new</span> FileOutputStream(f);</span><br><span class=\"line\">            bitmap.compress(format, quality, fos);</span><br><span class=\"line\">            fos.flush();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            <span class=\"comment\">// 异常时删除保存失败的文件</span></span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (f != <span class=\"keyword\">null</span> &amp;&amp; f.exists() &amp;&amp; f.isFile()) &#123;</span><br><span class=\"line\">                    f.delete();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Exception ex) &#123;</span><br><span class=\"line\">                ex.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception ex) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (f != <span class=\"keyword\">null</span> &amp;&amp; f.exists() &amp;&amp; f.isFile()) &#123;</span><br><span class=\"line\">                    f.delete();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            IoUtils.closeQuietly(fos);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Bitmap <span class=\"title\">createLivenessBitmap</span><span class=\"params\">(Context context, <span class=\"keyword\">int</span>[] argbByte, Rect roundRect, Rect cropRect, <span class=\"keyword\">int</span> orientatoin)</span> </span>&#123;</span><br><span class=\"line\">        Bitmap bitmap = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        Bitmap transformed = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        BitmapFactory.Options opts = <span class=\"keyword\">new</span> BitmapFactory.Options();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\"><span class=\"comment\">//            int width = DensityUtils.getDisplayWidth(context);</span></span><br><span class=\"line\"><span class=\"comment\">//            int hight = DensityUtils.getDisplayHeight(context);</span></span><br><span class=\"line\"><span class=\"comment\">//            int min = Math.min(width, hight);</span></span><br><span class=\"line\">            opts.inJustDecodeBounds = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            bitmap = Bitmap.createBitmap(argbByte, roundRect.width(), roundRect.height(), Bitmap.Config.ARGB_8888);</span><br><span class=\"line\"><span class=\"comment\">//            bitmap = Bitmap.createBitmap(roundRect.width(), roundRect.height(), Bitmap.Config.ARGB_8888);</span></span><br><span class=\"line\"><span class=\"comment\">//            bitmap.setPixels(argbByte, 0, roundRect.width(), 0, 0, roundRect.width(), roundRect.height());</span></span><br><span class=\"line\">            bitmap = Bitmap.createBitmap(bitmap, cropRect.left, cropRect.top, cropRect.width(), cropRect.height());</span><br><span class=\"line\"></span><br><span class=\"line\">            transformed = BitmapUtils.rotateBitmap(orientatoin, bitmap);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (OutOfMemoryError e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (bitmap != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                bitmap.recycle();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (transformed != bitmap &amp;&amp; bitmap != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            bitmap.recycle();</span><br><span class=\"line\">            bitmap = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> transformed;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Bitmap <span class=\"title\">createLivenessBitmap</span><span class=\"params\">(Context context, <span class=\"keyword\">int</span>[] argbByte, Rect roundRect)</span> </span>&#123;</span><br><span class=\"line\">        Bitmap transformed = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            transformed = Bitmap.createBitmap(argbByte,</span><br><span class=\"line\">                    roundRect.width(), roundRect.height(),</span><br><span class=\"line\">                    Bitmap.Config.ARGB_8888);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (OutOfMemoryError e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (transformed != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                transformed.recycle();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> transformed;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","categories":["Android"],"tags":["BitmapUtil"]},{"title":"NFC","url":"/2020/02/03/Android/系统/NFC/","content":"<h2 id=\"权限\"><a href=\"#权限\" class=\"headerlink\" title=\"权限\"></a>权限</h2><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">--AndroidManifest.xml--</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">application</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">activity</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\".MainActivity\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">intent-filter</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.action.MAIN\"</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">category</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.category.LAUNCHER\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">intent-filter</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--绑定事件--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">intent-filter</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.nfc.action.TECH_DISCOVERED\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">intent-filter</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--NFC数据过滤，仅捕获指定数据类型事件--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta-data</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.nfc.action.TECH_DISCOVERED\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">android:resource</span>=<span class=\"string\">\"@xml/nfc_tech_filter\"</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">activity</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">application</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--NFC权限--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">uses-permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.permission.NFC\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 声明所依赖的外部的硬件，并指定为必须 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">uses-feature</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.hardware.nfc\"</span> <span class=\"attr\">android:required</span>=<span class=\"string\">\"true\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--nfc_tech_filter.xml--&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">tech-list</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">tech</span>&gt;</span>android.nfc.tech.NfcB<span class=\"tag\">&lt;/<span class=\"name\">tech</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">tech-list</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">tech-list</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">tech</span>&gt;</span>android.nfc.tech.IsoDep<span class=\"tag\">&lt;/<span class=\"name\">tech</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">tech-list</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"事件\"><a href=\"#事件\" class=\"headerlink\" title=\"事件\"></a>事件</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">NfcAdapter m_nfcAdapter;</span><br><span class=\"line\">PendingIntent m_nfcPi;</span><br><span class=\"line\">IntentFilter[] m_nfcIfs;</span><br><span class=\"line\">String[][] m_techLists;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    m_nfcAdapter = NfcAdapter.getDefaultAdapter(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> == m_nfcAdapter) &#123;</span><br><span class=\"line\">        m_textDes.setText(<span class=\"string\">\"设备不支持NFC功能\"</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!m_nfcAdapter.isEnabled()) &#123;</span><br><span class=\"line\">        m_textDes.setText(<span class=\"string\">\"请先开启设备NFC功能\"</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        m_textDes.setText(<span class=\"string\">\"请放置身份证到设备背面\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 用于页面绑定：仅软件启动时绑定NFC事件</span></span><br><span class=\"line\">    m_nfcPi = PendingIntent.getActivity(<span class=\"keyword\">this</span>, <span class=\"number\">0</span>, <span class=\"keyword\">new</span> Intent(<span class=\"keyword\">this</span>, getClass()).addFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP), PendingIntent.FLAG_UPDATE_CURRENT);</span><br><span class=\"line\">    m_nfcIfs = <span class=\"keyword\">new</span> IntentFilter[]&#123;<span class=\"keyword\">new</span> IntentFilter(NfcAdapter.ACTION_TECH_DISCOVERED)&#125;;</span><br><span class=\"line\">    m_techLists = new String[][]&#123;new String[]&#123;NfcB.class.getName()&#125;, new String[]&#123;IsoDep.class.getName()&#125;&#125;;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onResume</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onResume();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (m_nfcAdapter != <span class=\"keyword\">null</span>) <span class=\"comment\">// 绑定NFC事件</span></span><br><span class=\"line\">        m_nfcAdapter.enableForegroundDispatch(<span class=\"keyword\">this</span>, m_nfcPi, m_nfcIfs, m_techLists);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onPause</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onPause();</span><br><span class=\"line\">    Log.e(<span class=\"string\">\"test\"</span>, <span class=\"string\">\"onPause\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (m_nfcAdapter != <span class=\"keyword\">null</span>) <span class=\"comment\">// 解绑NFC</span></span><br><span class=\"line\">        m_nfcAdapter.disableForegroundDispatch(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onNewIntent</span><span class=\"params\">(Intent intent)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onNewIntent(intent);</span><br><span class=\"line\">    <span class=\"comment\">//获取到Tag标签对象</span></span><br><span class=\"line\">    Tag mTag = intent.getParcelableExtra(NfcAdapter.EXTRA_TAG);</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        String[] techList = mTag.getTechList();</span><br><span class=\"line\">        Log.w(<span class=\"string\">\"test\"</span>, <span class=\"string\">\"标签支持的tachnology类型：\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String tech : techList) &#123;</span><br><span class=\"line\">            Log.w(<span class=\"string\">\"test\"</span>, tech);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (NullPointerException e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onSetting</span><span class=\"params\">(View view)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 根据包名打开对应的设置界面：开关NFC位置</span></span><br><span class=\"line\">    Intent intent = <span class=\"keyword\">new</span> Intent(Settings.ACTION_NFC_SETTINGS);</span><br><span class=\"line\">    startActivity(intent);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// enableReaderMode 设置NFC读事件回调</span></span><br><span class=\"line\">NfcAdapter m_nfcAdapter;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> READER_FLAGS = NfcAdapter.FLAG_READER_NFC_A | NfcAdapter.FLAG_READER_NFC_B;</span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">    setContentView(R.layout.activity_main);</span><br><span class=\"line\">    m_nfcAdapter = NfcAdapter.getDefaultAdapter(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span> NfcAdapter.ReaderCallback mReaderCallback = <span class=\"keyword\">new</span> NfcAdapter.ReaderCallback() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onTagDiscovered</span><span class=\"params\">(Tag tag)</span> </span>&#123;</span><br><span class=\"line\">        Log.d(<span class=\"string\">\"test\"</span>, <span class=\"string\">\"onTagDiscovered: \"</span> + Arrays.toString(tag.getTechList()));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onResume</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onResume();</span><br><span class=\"line\">    Log.e(<span class=\"string\">\"test\"</span>, <span class=\"string\">\"onResume\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (m_nfcAdapter != <span class=\"keyword\">null</span>) <span class=\"comment\">// 绑定NFC事件</span></span><br><span class=\"line\">        m_nfcAdapter.enableReaderMode(<span class=\"keyword\">this</span>, mReaderCallback, READER_FLAGS, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onPause</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onPause();</span><br><span class=\"line\">    Log.e(<span class=\"string\">\"test\"</span>, <span class=\"string\">\"onPause\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (m_nfcAdapter != <span class=\"keyword\">null</span>) <span class=\"comment\">// 解绑NFC</span></span><br><span class=\"line\">        m_nfcAdapter.disableReaderMode(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","categories":["Android"],"tags":["NFC"]},{"title":"UI优化","url":"/2020/02/02/Android/界面美化/","content":"<h2 id=\"沉浸式状态栏\"><a href=\"#沉浸式状态栏\" class=\"headerlink\" title=\"沉浸式状态栏\"></a>沉浸式状态栏</h2><p><a href=\"https://github.com/laobie/StatusBarUtil\" target=\"_blank\" rel=\"noopener\">StatusBarUtil</a></p>\n<h3 id=\"代码方式\"><a href=\"#代码方式\" class=\"headerlink\" title=\"代码方式\"></a>代码方式</h3><ul>\n<li>getWindow().addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);<ul>\n<li>隐藏状态栏 + 全屏</li>\n<li>等价于<code>SYSTEM_UI_FLAG_LAYOUT_STABLE | SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN</code></li>\n<li>也可以在<code>theme</code>中设置属性<code>windowTranslucentStatus</code></li>\n<li>自己绘制状态栏即可</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 清除全屏，指定状态栏颜色</span></span><br><span class=\"line\">getWindow().addFlags(WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS);</span><br><span class=\"line\"><span class=\"comment\">//注意要清除 FLAG_TRANSLUCENT_STATUS flag</span></span><br><span class=\"line\">getWindow().clearFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);</span><br><span class=\"line\">getWindow().setStatusBarColor(getResources().getColor(android.R.color.holo_red_light));</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"xml配置方式\"><a href=\"#xml配置方式\" class=\"headerlink\" title=\"xml配置方式\"></a>xml配置方式</h3><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- res/values/styles.xml --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">name</span>=<span class=\"string\">\"Theme.AppCompat.NoActionBar\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"comment\">&lt;!-- 隐藏系统标题栏 --&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"windowActionBar\"</span>&gt;</span>false<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"comment\">&lt;!-- 隐藏项目标题栏 --&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"windowNoTitle\"</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"comment\">&lt;!-- 隐藏状态栏 --&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"comment\">&lt;!-- item name=\"android:windowFullscreen\"&gt;true&lt;/item --&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"comment\">&lt;!-- 透明状态栏 --&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"android:windowTranslucentStatus\"</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--隐藏标题栏--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">name</span>=<span class=\"string\">\"Theme_NoTitle\"</span> <span class=\"attr\">parent</span>=<span class=\"string\">\"android:style/Theme.NoTitleBar.Fullscreen\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"android:windowFrame\"</span>&gt;</span>@null<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"android:windowContentOverlay\"</span>&gt;</span>@null<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"android:backgroundDimEnabled\"</span>&gt;</span>false<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"android:windowNoTitle\"</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"android:windowFullscreen\"</span>&gt;</span>false<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--透明元素--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">name</span>=<span class=\"string\">\"Theme_Translucent\"</span> <span class=\"attr\">parent</span>=<span class=\"string\">\"android:style/Theme.NoTitleBar.Fullscreen\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"android:windowBackground\"</span>&gt;</span>@android:color/transparent<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"android:windowFrame\"</span>&gt;</span>@null<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"android:windowContentOverlay\"</span>&gt;</span>@null<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"android:windowIsFloating\"</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"android:backgroundDimEnabled\"</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"android:windowIsTranslucent\"</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"android:windowNoTitle\"</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"android:windowAnimationStyle\"</span>&gt;</span>@android:style/Animation.Dialog<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"android:windowFullscreen\"</span>&gt;</span>false<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--全屏--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">name</span>=<span class=\"string\">\"Theme_Fullscreen\"</span> <span class=\"attr\">parent</span>=<span class=\"string\">\"android:style/Theme.NoTitleBar.Fullscreen\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"android:windowBackground\"</span>&gt;</span>@android:color/transparent<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"android:windowFrame\"</span>&gt;</span>@null<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"android:windowContentOverlay\"</span>&gt;</span>@null<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"android:windowIsFloating\"</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"android:backgroundDimEnabled\"</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"android:windowIsTranslucent\"</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"android:windowNoTitle\"</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"android:windowAnimationStyle\"</span>&gt;</span>@android:style/Animation.Dialog<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"android:windowFullscreen\"</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- </span></span><br><span class=\"line\"><span class=\"comment\">    AndroidManifest.xml</span></span><br><span class=\"line\"><span class=\"comment\">    挂在 application 下是全局有效</span></span><br><span class=\"line\"><span class=\"comment\">    也可挂在 activity 上，指定页面有效</span></span><br><span class=\"line\"><span class=\"comment\"> --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">application</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:theme</span>=<span class=\"string\">\"@style/AppTheme\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">activity</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:name</span>=<span class=\"string\">\".MainActivity\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:theme</span>=<span class=\"string\">\"@style/Theme.AppCompat.NoActionBar\"</span></span></span><br><span class=\"line\">    &lt;/activity&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">application</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"手机属性\"><a href=\"#手机属性\" class=\"headerlink\" title=\"手机属性\"></a>手机属性</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 顶部状态栏高度</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getStatusBarHeight</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    Resources resources = app.getResources();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> resourceId = resources.getIdentifier(<span class=\"string\">\"status_bar_height\"</span>, <span class=\"string\">\"dimen\"</span>, <span class=\"string\">\"android\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> resources.getDimensionPixelSize(resourceId);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 底部功能按钮栏</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getNavigationBarHeight</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    Resources resources = app.getResources();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> resourceId = resources.getIdentifier(<span class=\"string\">\"navigation_bar_height\"</span>,<span class=\"string\">\"dimen\"</span>, <span class=\"string\">\"android\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> resources.getDimensionPixelSize(resourceId);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 屏幕高度</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getScreenHeight</span><span class=\"params\">(Context context)</span> </span>&#123;</span><br><span class=\"line\">     DisplayMetrics dm = context.getResources().getDisplayMetrics();</span><br><span class=\"line\">     <span class=\"keyword\">return</span> dm.heightPixels;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 屏幕宽度</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getScreenWidth</span><span class=\"params\">(Context context)</span> </span>&#123;</span><br><span class=\"line\">     DisplayMetrics dm = context.getResources().getDisplayMetrics();</span><br><span class=\"line\">     <span class=\"keyword\">return</span> dm.widthPixels;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","categories":["Android"],"tags":["UI优化"]},{"title":"文件","url":"/2020/02/02/Windows/文件/","content":"<h2 id=\"文件操作\"><a href=\"#文件操作\" class=\"headerlink\" title=\"文件操作\"></a>文件操作</h2><h3 id=\"文件拷贝\"><a href=\"#文件拷贝\" class=\"headerlink\" title=\"文件拷贝\"></a>文件拷贝</h3><h4 id=\"强健文件拷贝\"><a href=\"#强健文件拷贝\" class=\"headerlink\" title=\"强健文件拷贝\"></a>强健文件拷贝</h4><p><code>robocopy &quot;C:\\Users&quot; &quot;D:\\Users&quot; /E /COPYALL /XJ /XD &quot;C:\\Users\\Administrator&quot;</code><br><code>robocopy &quot;C:\\Users&quot; &quot;D:\\Users&quot; /E /COPYALL /MOVE</code></p>\n<ul>\n<li>/E 表示拷贝文件时包含子目录（包括空目录）</li>\n<li>/S 复制子目录，但不复制空的子目录。</li>\n<li>/COPYALL 表示拷贝所有文件信息</li>\n<li>/XJ 表示不包括Junction points（默认是包括的）</li>\n<li>/XD 表示不包括指定的目录，此处指定目录为”C:\\Users\\Administrator”</li>\n<li>/MOVE 表示移动</li>\n</ul>\n<figure class=\"highlight bat\"><table><tr><td class=\"code\"><pre><span class=\"line\">:: 复制指定文件，支持通配符</span><br><span class=\"line\">robocopy d:\\work e:\\back *.txt *.doc *.bmp *.tif /e</span><br><span class=\"line\">:: 只复制两级目录</span><br><span class=\"line\">robocopy d:\\work e:\\back /e /lev:<span class=\"number\">2</span></span><br><span class=\"line\">:: 不包含指定类型文件</span><br><span class=\"line\">robocopy d:\\work e:\\back /e /xf *.tmp *.bak</span><br><span class=\"line\">:: 大文件限制，单位byte</span><br><span class=\"line\">robocopy d:\\work e:\\back /e /max:<span class=\"number\">6000000</span></span><br><span class=\"line\">:: 日期限制：<span class=\"number\">1</span>天&lt;修改日期&lt;<span class=\"number\">7</span>天，也可以用YYYYMMDD来表示具体的日期</span><br><span class=\"line\">robocopy d:\\work e:\\look /s *.txt *.doc *.xls *.ppt /maxage:<span class=\"number\">7</span> /minage:<span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">:: 完全克隆：删除源目录不存在的文件</span><br><span class=\"line\">robcopy d:\\work e:\\look /mir</span><br><span class=\"line\"></span><br><span class=\"line\">:: 监视，自动备份。每<span class=\"number\">1</span>分钟检查一次，被修改的次数&gt;=<span class=\"number\">2</span>才备份</span><br><span class=\"line\">robocopy d:\\work e:\\back/e /copyall /mot:<span class=\"number\">1</span> /mon:<span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"删除\"><a href=\"#删除\" class=\"headerlink\" title=\"删除\"></a>删除</h3><p>删除指定目录：<code>rmdir /s /q E:\\test</code></p>\n<ul>\n<li>/S 删除指定目录及其中的所有文件,用于删除目录树。</li>\n<li>/Q 安静模式。删除时不询问。`</li>\n</ul>\n<h4 id=\"顽固文件强删除\"><a href=\"#顽固文件强删除\" class=\"headerlink\" title=\"顽固文件强删除\"></a>顽固文件强删除</h4><figure class=\"highlight bat\"><table><tr><td class=\"code\"><pre><span class=\"line\">:: 新建bat文件，然后把文件/文件夹拖到bat即可</span><br><span class=\"line\"><span class=\"built_in\">DEL</span> /F /A /Q \\\\?\\%<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"built_in\">RD</span> /S /Q \\\\?\\%<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"硬链接\"><a href=\"#硬链接\" class=\"headerlink\" title=\"硬链接\"></a>硬链接</h2><p><code>mklink /D &quot;C:\\Users&quot; &quot;D:\\Users&quot;</code></p>\n<ul>\n<li>/D 符号链接</li>\n<li>/J 软连接</li>\n<li>目标位置”C:\\Users”必须不存在</li>\n</ul>\n","categories":["windows"],"tags":["文件"]},{"title":"基础","url":"/2020/02/01/Android/基础/","content":"<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><ul>\n<li><a href=\"https://developer.android.google.cn/\" target=\"_blank\" rel=\"noopener\">官网</a>下载安装包</li>\n<li>新建工程，下载默认gradle</li>\n</ul>\n<h3 id=\"gradle\"><a href=\"#gradle\" class=\"headerlink\" title=\"gradle\"></a>gradle</h3><figure class=\"highlight gradle\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 依赖包下载镜像</span></span><br><span class=\"line\"><span class=\"keyword\">allprojects</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">repositories</span> &#123;</span><br><span class=\"line\">        jcenter()</span><br><span class=\"line\">        google()</span><br><span class=\"line\">        mavenCentral()</span><br><span class=\"line\">        maven &#123; url <span class=\"string\">'https://maven.aliyun.com/repository/google'</span>&#125;</span><br><span class=\"line\">        maven &#123; url <span class=\"string\">'https://maven.aliyun.com/repository/jcenter'</span>&#125;</span><br><span class=\"line\">        maven &#123; url <span class=\"string\">'http://maven.aliyun.com/nexus/content/groups/public'</span>&#125;</span><br><span class=\"line\">        maven &#123; url <span class=\"string\">'https://jitpack.io'</span> &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://services.gradle.org/distributions/\" target=\"_blank\" rel=\"noopener\">gradle手动下载路径</a><br><a href=\"https://developer.android.google.cn/studio/releases/gradle-plugin#revisions\" target=\"_blank\" rel=\"noopener\">gradle版本号对应</a></p>\n<ul>\n<li>打开项目的时候有时候会卡在”refreshing gradle project”</li>\n<li>打开工程文件”gradle\\wrapper\\gradle-wrapper.properties”, 里面指明了gradle的版本</li>\n<li>本地路径<code>C:\\Users\\lfx\\.gradle\\wrapper\\dists\\gradle-5.4.1-all\\3221gyojl5jsh0helicew7rwx</code><ul>\n<li>gradle-5.4.1-all.zip</li>\n<li>gradle-5.4.1<ul>\n<li>bin</li>\n<li>docs</li>\n<li>lib</li>\n<li>samples</li>\n<li>getting-started.html</li>\n<li>…</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><ul>\n<li>旧工程，建议先升级gradle版本号为最新<ul>\n<li>避免下载半天包下载完了编译失败</li>\n</ul>\n</li>\n<li>gradle版本号: 工程编译失败时，通常都是gradle配置问题<ul>\n<li>新建一个空工程</li>\n<li>确认build.gradle配置内容</li>\n<li>确认gradle\\wrapper\\gradle-wrapper.properties</li>\n</ul>\n</li>\n<li>备注<ul>\n<li>build.gradle中的版本：gradle插件版本</li>\n<li>gradle-wrapper.properties中的版本：才是gradle版本</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"编译\"><a href=\"#编译\" class=\"headerlink\" title=\"编译\"></a>编译</h3><figure class=\"highlight gradle\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// build.gradle(:app)</span></span><br><span class=\"line\"><span class=\"comment\">// 指定so位置</span></span><br><span class=\"line\">android &#123;</span><br><span class=\"line\">    defaultConfig &#123;</span><br><span class=\"line\">        applicationId <span class=\"string\">\"com.esdemo.tools\"</span></span><br><span class=\"line\">        ...</span><br><span class=\"line\"></span><br><span class=\"line\">        testInstrumentationRunner <span class=\"string\">\"androidx.test.runner.AndroidJUnitRunner\"</span></span><br><span class=\"line\">        ndk &#123;</span><br><span class=\"line\">            abiFilters <span class=\"string\">'armeabi-v7a'</span></span><br><span class=\"line\">            moduleName <span class=\"string\">\"app\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"签名\"><a href=\"#签名\" class=\"headerlink\" title=\"签名\"></a>签名</h2><figure class=\"highlight bat\"><table><tr><td class=\"code\"><pre><span class=\"line\">:: 生成签名包</span><br><span class=\"line\">keytool -genkey -storepass \"pwd1\" -alias \"es.authentication\" -keypass \"pwd2\" -keystore release.keystore -keyalg RSA -keysize <span class=\"number\">2048</span> -validity <span class=\"number\">10000</span></span><br><span class=\"line\"></span><br><span class=\"line\">:: 查看包MD5</span><br><span class=\"line\">keytool -list -v -keystore release.keystore</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 权限注解</span></span><br><span class=\"line\"><span class=\"meta\">@RequiresPermission</span>(allOf=&#123;Manifest.permission.READ_PHONE_STATE, Manifest.permission.INTERNET&#125;)</span><br><span class=\"line\"><span class=\"meta\">@RequiresPermission</span>(anyOf=&#123;Manifest.permission.READ_PHONE_STATE, Manifest.permission.INTERNET&#125;)</span><br><span class=\"line\"><span class=\"meta\">@RequiresPermission</span>(Manifest.permission.INTERNET)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">myFunc</span><span class=\"params\">(@NonNull String std)</span> </span>&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"虚拟机调试\"><a href=\"#虚拟机调试\" class=\"headerlink\" title=\"虚拟机调试\"></a>虚拟机调试</h2><h3 id=\"INSTALL-FAILED-NO-MATCHING-ABIS\"><a href=\"#INSTALL-FAILED-NO-MATCHING-ABIS\" class=\"headerlink\" title=\"INSTALL_FAILED_NO_MATCHING_ABIS\"></a>INSTALL_FAILED_NO_MATCHING_ABIS</h3><figure class=\"highlight gradle\"><table><tr><td class=\"code\"><pre><span class=\"line\"># build.gradle 文件中添加以下代码</span><br><span class=\"line\">android &#123;</span><br><span class=\"line\">    splits &#123;</span><br><span class=\"line\">        abi &#123;</span><br><span class=\"line\">            enable <span class=\"keyword\">true</span></span><br><span class=\"line\">            reset()</span><br><span class=\"line\">            <span class=\"keyword\">include</span> <span class=\"string\">'x86'</span>, <span class=\"string\">'armeabi-v7a'</span>,<span class=\"string\">'x86_64'</span></span><br><span class=\"line\">            universalApk <span class=\"keyword\">true</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","categories":["Android"],"tags":["基础"]},{"title":"网络","url":"/2020/01/16/Windows/网络/","content":"<h2 id=\"网络联通\"><a href=\"#网络联通\" class=\"headerlink\" title=\"网络联通\"></a>网络联通</h2><figure class=\"highlight bat\"><table><tr><td class=\"code\"><pre><span class=\"line\">:: 获取IP已经网络状况</span><br><span class=\"line\"><span class=\"built_in\">ping</span> www.baidu.com</span><br><span class=\"line\">:: 路由跟踪,用于确定IP数据包访问目标时所选择的路径</span><br><span class=\"line\">tracert <span class=\"number\">139</span>.<span class=\"number\">224</span>.<span class=\"number\">170</span>.<span class=\"number\">31</span></span><br></pre></td></tr></table></figure>\n\n","categories":["windows"],"tags":["网络"]},{"title":"命令行","url":"/2020/01/06/Python/系统/命令行/","content":"<h2 id=\"CMD交互\"><a href=\"#CMD交互\" class=\"headerlink\" title=\"CMD交互\"></a>CMD交互</h2><figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding:gbk -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run_cmd</span><span class=\"params\">(cmd, path=None)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> cmd:</span><br><span class=\"line\">        eslogger.info(<span class=\"string\">'your cmd is null'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">'Your cmd is null'</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;<span class=\"string\">'exec'</span>: <span class=\"literal\">False</span>, <span class=\"string\">'data'</span>: <span class=\"literal\">None</span>&#125;</span><br><span class=\"line\">    work_path = os.getcwd()</span><br><span class=\"line\">    cmd += <span class=\"string\">\" 2&gt;&amp;1\"</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> path:</span><br><span class=\"line\">        os.chdir(path)</span><br><span class=\"line\">    p_cmd = os.popen(cmd)</span><br><span class=\"line\">    data = p_cmd.read()</span><br><span class=\"line\">    is_success = p_cmd.close()</span><br><span class=\"line\">    os.chdir(work_path)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;<span class=\"string\">'exec'</span>: is_success, <span class=\"string\">'data'</span>: data&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    re = run_cmd(<span class=\"string\">\"dir\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">print</span> re[<span class=\"string\">'exec'</span>]</span><br><span class=\"line\">    <span class=\"keyword\">print</span> re[<span class=\"string\">'data'</span>]</span><br></pre></td></tr></table></figure>\n\n","categories":["Python"],"tags":["命令行"]},{"title":"防火墙","url":"/2020/01/06/Windows/防火墙/","content":"<h2 id=\"Windows防火墙命令行\"><a href=\"#Windows防火墙命令行\" class=\"headerlink\" title=\"Windows防火墙命令行\"></a>Windows防火墙命令行</h2><figure class=\"highlight bat\"><table><tr><td class=\"code\"><pre><span class=\"line\">::开启服务</span><br><span class=\"line\"><span class=\"built_in\">net</span> <span class=\"built_in\">start</span> MpsSvc</span><br><span class=\"line\"></span><br><span class=\"line\">::开机启动</span><br><span class=\"line\">sc config MpsSvc <span class=\"built_in\">start</span>= auto</span><br><span class=\"line\"></span><br><span class=\"line\">::启用/禁用防火墙</span><br><span class=\"line\">netsh advfirewall <span class=\"built_in\">set</span> allprofiles state on|off</span><br><span class=\"line\">:: <span class=\"built_in\">set</span> global     - 设置全局属性。</span><br><span class=\"line\">:: <span class=\"built_in\">set</span> allprofiles - 在所有配置文件中设置属性。</span><br><span class=\"line\">:: <span class=\"built_in\">set</span> currentprofile - 在活动配置文件中设置属性。</span><br><span class=\"line\">:: <span class=\"built_in\">set</span> domainprofile - 在域配置文件中设置属性。</span><br><span class=\"line\">:: <span class=\"built_in\">set</span> privateprofile - 在专用配置文件中设置属性。</span><br><span class=\"line\">:: <span class=\"built_in\">set</span> publicprofile - 在公用配置文件中设置属性。</span><br><span class=\"line\"></span><br><span class=\"line\">:: 添加规则 - action: allow(放行)|block(拦截)</span><br><span class=\"line\">:: add(添加新项)|delete(删除)|<span class=\"built_in\">set</span>(修改现有项)|show(显示)</span><br><span class=\"line\">netsh advfirewall firewall add rule name=\"HTTP\" protocol=TCP <span class=\"built_in\">dir</span>=<span class=\"keyword\">in</span> localport=<span class=\"number\">80</span> action=allow</span><br><span class=\"line\">:: 端口段 - localport=<span class=\"number\">111</span>-<span class=\"number\">222</span></span><br><span class=\"line\"></span><br><span class=\"line\">:: 使用说明</span><br><span class=\"line\">netsh advfirewall firewall add rule <span class=\"built_in\">help</span></span><br><span class=\"line\">netsh advfirewall firewall <span class=\"built_in\">set</span> rule <span class=\"built_in\">help</span></span><br><span class=\"line\"></span><br><span class=\"line\">:: 查看</span><br><span class=\"line\">netsh advfirewall firewall show rule name=\"HTTP\" <span class=\"built_in\">dir</span>=<span class=\"keyword\">in</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"远程桌面\"><a href=\"#远程桌面\" class=\"headerlink\" title=\"远程桌面\"></a>远程桌面</h3><figure class=\"highlight bat\"><table><tr><td class=\"code\"><pre><span class=\"line\">@<span class=\"built_in\">echo</span> off</span><br><span class=\"line\">::开启服务</span><br><span class=\"line\"><span class=\"built_in\">net</span> <span class=\"built_in\">start</span> SessionEnv</span><br><span class=\"line\"><span class=\"built_in\">net</span> <span class=\"built_in\">start</span> TermService</span><br><span class=\"line\">::开机手动启动</span><br><span class=\"line\">::sc config SessionEnv <span class=\"built_in\">start</span>=demand</span><br><span class=\"line\">::sc config TermService <span class=\"built_in\">start</span>=demand</span><br><span class=\"line\">:: 启用远程桌面连接 - 重启生效</span><br><span class=\"line\">REG ADD \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\" /v fDenyTSConnections /t REG_DWORD /d <span class=\"number\">0</span> /f</span><br><span class=\"line\">::开启<span class=\"number\">3389</span>端口</span><br><span class=\"line\">netsh advfirewall firewall add rule name=\"Remote Desktop\" protocol=TCP <span class=\"built_in\">dir</span>=<span class=\"keyword\">in</span> localport=<span class=\"number\">3389</span> action=allow</span><br></pre></td></tr></table></figure>\n\n","categories":["windows"],"tags":["防火墙"]},{"title":"服务","url":"/2020/01/06/Windows/服务/","content":"<h2 id=\"Windows服务命令行\"><a href=\"#Windows服务命令行\" class=\"headerlink\" title=\"Windows服务命令行\"></a>Windows服务命令行</h2><figure class=\"highlight bat\"><table><tr><td class=\"code\"><pre><span class=\"line\">:: <span class=\"built_in\">net</span> 开/关, 仅支持未禁止的服务</span><br><span class=\"line\"><span class=\"built_in\">net</span> <span class=\"built_in\">start</span> 服务名</span><br><span class=\"line\"><span class=\"built_in\">net</span> stop 服务名</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bat\"><table><tr><td class=\"code\"><pre><span class=\"line\">:: SC 指令</span><br><span class=\"line\">:: 调整启动形式：手动 | 自动 | 禁用</span><br><span class=\"line\">sc config 服务名 <span class=\"built_in\">start</span>=demand</span><br><span class=\"line\">sc config 服务名 <span class=\"built_in\">start</span>=auto</span><br><span class=\"line\">sc config 服务名 <span class=\"built_in\">start</span>=disabled</span><br><span class=\"line\">:: 开/关</span><br><span class=\"line\">sc <span class=\"built_in\">start</span> 服务名</span><br><span class=\"line\">sc stop 服务名</span><br><span class=\"line\">sc query 服务名</span><br><span class=\"line\">sc delete 服务名</span><br><span class=\"line\">sc qc 服务名</span><br><span class=\"line\">:: 创建服务</span><br><span class=\"line\">sc create 服务名 binPath=xxx.exe</span><br></pre></td></tr></table></figure>\n\n","categories":["windows"],"tags":["服务"]},{"title":"文件","url":"/2020/01/04/VC/文件/","content":"<h2 id=\"Demo\"><a href=\"#Demo\" class=\"headerlink\" title=\"Demo\"></a>Demo</h2><ul>\n<li><a href=\"https://github.com/fxliu/VCDemo/tree/master/File/Log\" target=\"_blank\" rel=\"noopener\">内存日志</a></li>\n<li><a href=\"https://github.com/fxliu/VCDemo/tree/master/NET/ProductUpdate/module/Log\" target=\"_blank\" rel=\"noopener\">日志模块</a></li>\n</ul>\n","categories":["VC"],"tags":["文件"]},{"title":"USBHID","url":"/2019/12/23/VCSystem/USBHID/","content":"<h2 id=\"工具\"><a href=\"#工具\" class=\"headerlink\" title=\"工具\"></a>工具</h2><ul>\n<li>抓包工具：<code>Bus Hound</code></li>\n<li>开源封装：<a href=\"https://github.com/libusb/libusb\" target=\"_blank\" rel=\"noopener\">libusb</a></li>\n</ul>\n<h2 id=\"简单使用\"><a href=\"#简单使用\" class=\"headerlink\" title=\"简单使用\"></a>简单使用</h2><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\">BOOL CMyUsbHid::Init()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (m_devHandle)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> TRUE;</span><br><span class=\"line\">  <span class=\"function\">CriticalSectionManager <span class=\"title\">csm</span><span class=\"params\">(m_cs)</span></span>;</span><br><span class=\"line\">  CUsbHidConfig cfg;</span><br><span class=\"line\">  m_vid = <span class=\"number\">0x0400</span>;     <span class=\"comment\">// 未知的话，可以使用遍历函数，遍历所有</span></span><br><span class=\"line\">  m_pid = <span class=\"number\">0x9666</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (libusb_init(<span class=\"literal\">NULL</span>) &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    LOG_HID_ERROR(TEXT(<span class=\"string\">\"SDK初始化失败\"</span>));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> FALSE;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  m_devHandle = libusb_open_device_with_vid_pid(<span class=\"literal\">NULL</span>, m_vid, m_pid);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (m_devHandle == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">    LOG_HID_ERROR(TEXT(<span class=\"string\">\"设备连接失败\"</span>));</span><br><span class=\"line\">    libusb_exit(<span class=\"literal\">NULL</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> FALSE;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!IsModule())</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (libusb_set_configuration(m_devHandle, <span class=\"number\">1</span>) &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      LOG_HID_ERROR(TEXT(<span class=\"string\">\"设备配置失败\"</span>));</span><br><span class=\"line\">      libusb_exit(<span class=\"literal\">NULL</span>);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> FALSE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (libusb_claim_interface(m_devHandle, <span class=\"number\">0</span>) &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      LOG_HID_ERROR(TEXT(<span class=\"string\">\"设备接口打开失败\"</span>));</span><br><span class=\"line\">      libusb_exit(<span class=\"literal\">NULL</span>);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> FALSE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//PrintInfo();</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> TRUE;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">BOOL CMyUsbHid::CheckInit()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> m_devHandle != <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"keyword\">void</span> CMyUsbHid::Release()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (m_devHandle)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"function\">CriticalSectionManager <span class=\"title\">csm</span><span class=\"params\">(m_cs)</span></span>;</span><br><span class=\"line\">    libusb_close(m_devHandle);</span><br><span class=\"line\">    libusb_exit(<span class=\"literal\">NULL</span>);</span><br><span class=\"line\">    m_devHandle = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">void</span> CMyUsbHid::PrintInfo()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  libusb_device *dev = libusb_get_device(m_devHandle);</span><br><span class=\"line\">  <span class=\"comment\">// 读取设备属性 Device properties</span></span><br><span class=\"line\">  <span class=\"keyword\">uint8_t</span> bus = libusb_get_bus_number(dev);</span><br><span class=\"line\">  <span class=\"keyword\">uint8_t</span> port_path[<span class=\"number\">8</span>];</span><br><span class=\"line\">  <span class=\"keyword\">int</span> port_numbers = libusb_get_port_numbers(dev, port_path, <span class=\"keyword\">sizeof</span>(port_path));</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (port_numbers &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    LOG_HID_DEBUG(TEXT(<span class=\"string\">\"Device properties:\"</span>));</span><br><span class=\"line\">    LOG_HID_DEBUG(TEXT(<span class=\"string\">\"\\tbus number: %d\"</span>), bus);</span><br><span class=\"line\">    CString strPortPath;</span><br><span class=\"line\">    strPortPath.Format(TEXT(<span class=\"string\">\"\\tport path: %d\"</span>), port_path[<span class=\"number\">0</span>]);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; port_numbers; i++) &#123;</span><br><span class=\"line\">      CString strTmp;</span><br><span class=\"line\">      strTmp.Format(TEXT(<span class=\"string\">\"-&gt;%d\"</span>), port_path[i]);</span><br><span class=\"line\">      strPortPath += strTmp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    LOG_HID_DEBUG(strPortPath);</span><br><span class=\"line\">    <span class=\"comment\">//LOG_HID_DEBUG(TEXT(\" (from root hub)\"));</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> speed = libusb_get_device_speed(dev);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ((speed &lt; <span class=\"number\">0</span>) || (speed &gt; <span class=\"number\">4</span>))</span><br><span class=\"line\">    speed = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> TCHAR *speed_name[<span class=\"number\">5</span>] = &#123; <span class=\"string\">L\"Unknown\"</span>, <span class=\"string\">L\"1.5 Mbit/s (USB LowSpeed)\"</span>, <span class=\"string\">L\"12 Mbit/s (USB FullSpeed)\"</span>,</span><br><span class=\"line\">    <span class=\"string\">L\"480 Mbit/s (USB HighSpeed)\"</span>, <span class=\"string\">L\"5000 Mbit/s (USB SuperSpeed)\"</span> &#125;;</span><br><span class=\"line\">  LOG_HID_DEBUG(<span class=\"string\">L\"\\tspeed: %s\"</span>, speed_name[speed]);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 读取设备描述 Reading device descriptor</span></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">libusb_device_descriptor</span> <span class=\"title\">dev_desc</span>;</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (libusb_get_device_descriptor(dev, &amp;dev_desc) &gt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    LOG_HID_DEBUG(TEXT(<span class=\"string\">\"Reading device descriptor:\"</span>));</span><br><span class=\"line\">    LOG_HID_DEBUG(<span class=\"string\">L\"\\tlength: %d\"</span>, dev_desc.bLength);</span><br><span class=\"line\">    LOG_HID_DEBUG(<span class=\"string\">L\"\\tdevice class: %d\"</span>, dev_desc.bDeviceClass);</span><br><span class=\"line\">    LOG_HID_DEBUG(<span class=\"string\">L\"\\tS/N: %d\"</span>, dev_desc.iSerialNumber);</span><br><span class=\"line\">    LOG_HID_DEBUG(<span class=\"string\">L\"\\tVID:PID: %04X:%04X\"</span>, dev_desc.idVendor, dev_desc.idProduct);</span><br><span class=\"line\">    LOG_HID_DEBUG(<span class=\"string\">L\"\\tbcdDevice: %04X\"</span>, dev_desc.bcdDevice);</span><br><span class=\"line\">    LOG_HID_DEBUG(<span class=\"string\">L\"\\tiMan:iProd:iSer: %d:%d:%d\"</span>, dev_desc.iManufacturer, dev_desc.iProduct, dev_desc.iSerialNumber);</span><br><span class=\"line\">    LOG_HID_DEBUG(<span class=\"string\">L\"\\tnb confs: %d\"</span>, dev_desc.bNumConfigurations);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 读取配置描述 Reading configuration descriptor</span></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">libusb_config_descriptor</span> *<span class=\"title\">conf_desc</span>;</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (libusb_get_config_descriptor(dev, <span class=\"number\">0</span>, &amp;conf_desc) &gt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">uint8_t</span> nb_ifaces = conf_desc-&gt;bNumInterfaces;</span><br><span class=\"line\">    LOG_HID_DEBUG(<span class=\"string\">L\"\\tnb interfaces : %d\"</span>, nb_ifaces);</span><br><span class=\"line\">    LOG_HID_DEBUG(<span class=\"string\">L\"\\tMaxPower : %d (milliamps)\"</span>, (conf_desc-&gt;MaxPower) * <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">uint8_t</span> endpoint_in = <span class=\"number\">0</span>, endpoint_out = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nb_ifaces; i++) &#123;</span><br><span class=\"line\">      LOG_HID_DEBUG(<span class=\"string\">L\"\\tinterface[%d]: id = %d\"</span>, i, conf_desc-&gt;interface[i].altsetting[<span class=\"number\">0</span>].bInterfaceNumber);</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; conf_desc-&gt;interface[i].num_altsetting; j++) &#123;</span><br><span class=\"line\">        LOG_HID_DEBUG(<span class=\"string\">L\"\\t\\tinterface[%d].altsetting[%d]: num endpoints = %d\"</span>,</span><br><span class=\"line\">          i, j, conf_desc-&gt;interface[i].altsetting[j].bNumEndpoints);</span><br><span class=\"line\">        LOG_HID_DEBUG(<span class=\"string\">L\"\\t\\tClass.SubClass.Protocol: %02X.%02X.%02X\"</span>,</span><br><span class=\"line\">          conf_desc-&gt;interface[i].altsetting[j].bInterfaceClass,</span><br><span class=\"line\">          conf_desc-&gt;interface[i].altsetting[j].bInterfaceSubClass,</span><br><span class=\"line\">          conf_desc-&gt;interface[i].altsetting[j].bInterfaceProtocol);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((conf_desc-&gt;interface[i].altsetting[j].bInterfaceClass == LIBUSB_CLASS_MASS_STORAGE)</span><br><span class=\"line\">          &amp;&amp; ((conf_desc-&gt;interface[i].altsetting[j].bInterfaceSubClass == <span class=\"number\">0x01</span>)</span><br><span class=\"line\">            || (conf_desc-&gt;interface[i].altsetting[j].bInterfaceSubClass == <span class=\"number\">0x06</span>))</span><br><span class=\"line\">          &amp;&amp; (conf_desc-&gt;interface[i].altsetting[j].bInterfaceProtocol == <span class=\"number\">0x50</span>)) &#123;</span><br><span class=\"line\">          <span class=\"comment\">// Mass storage devices that can use basic SCSI commands</span></span><br><span class=\"line\">          test_mode = USE_SCSI;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt; conf_desc-&gt;interface[i].altsetting[j].bNumEndpoints; k++) &#123;</span><br><span class=\"line\">          <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">libusb_ss_endpoint_companion_descriptor</span> *<span class=\"title\">ep_comp</span> = <span class=\"title\">NULL</span>;</span></span><br><span class=\"line\">          <span class=\"keyword\">const</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">libusb_endpoint_descriptor</span> *<span class=\"title\">endpoint</span>;</span></span><br><span class=\"line\">          endpoint = &amp;conf_desc-&gt;interface[i].altsetting[j].endpoint[k];</span><br><span class=\"line\">          LOG_HID_DEBUG(<span class=\"string\">L\"\\t\\tendpoint[%d].address: %02X\"</span>, k, endpoint-&gt;bEndpointAddress);</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"comment\">// Use the first interrupt or bulk IN/OUT endpoints as default for testing</span></span><br><span class=\"line\">          <span class=\"keyword\">if</span> ((endpoint-&gt;bmAttributes &amp; LIBUSB_TRANSFER_TYPE_MASK) &amp; (LIBUSB_TRANSFER_TYPE_BULK | LIBUSB_TRANSFER_TYPE_INTERRUPT)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (endpoint-&gt;bEndpointAddress &amp; LIBUSB_ENDPOINT_IN) &#123;</span><br><span class=\"line\">              <span class=\"keyword\">if</span> (!endpoint_in)</span><br><span class=\"line\">                endpoint_in = endpoint-&gt;bEndpointAddress;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">              <span class=\"keyword\">if</span> (!endpoint_out)</span><br><span class=\"line\">                endpoint_out = endpoint-&gt;bEndpointAddress;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (!((endpoint-&gt;bmAttributes &amp; LIBUSB_TRANSFER_TYPE_MASK) ^ (LIBUSB_TRANSFER_TYPE_BULK))) &#123;</span><br><span class=\"line\">            LOG_HID_DEBUG(<span class=\"string\">L\"\\t\\ttransfer type: %s\"</span>, <span class=\"string\">L\"bulk\"</span>);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (!((endpoint-&gt;bmAttributes &amp; LIBUSB_TRANSFER_TYPE_MASK) ^ (LIBUSB_TRANSFER_TYPE_INTERRUPT))) &#123;</span><br><span class=\"line\">            LOG_HID_DEBUG(<span class=\"string\">L\"\\t\\ttransfer type: %s\"</span>, <span class=\"string\">L\"interrupt\"</span>);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (!((endpoint-&gt;bmAttributes &amp; LIBUSB_TRANSFER_TYPE_MASK) ^ (LIBUSB_TRANSFER_TYPE_ISOCHRONOUS))) &#123;</span><br><span class=\"line\">            LOG_HID_DEBUG(<span class=\"string\">L\"\\t\\ttransfer type: %s\"</span>, <span class=\"string\">L\"isochronous\"</span>);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">          LOG_HID_DEBUG(<span class=\"string\">L\"\\t\\tmax packet size: %04X\"</span>, endpoint-&gt;wMaxPacketSize);</span><br><span class=\"line\">          LOG_HID_DEBUG(<span class=\"string\">L\"\\t\\tpolling interval: %02X\"</span>, endpoint-&gt;bInterval);</span><br><span class=\"line\"></span><br><span class=\"line\">          libusb_get_ss_endpoint_companion_descriptor(<span class=\"literal\">NULL</span>, endpoint, &amp;ep_comp);</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (ep_comp) &#123;</span><br><span class=\"line\">            LOG_HID_DEBUG(<span class=\"string\">L\"\\t\\tmax burst: %02X   (USB 3.0)\"</span>, ep_comp-&gt;bMaxBurst);</span><br><span class=\"line\">            LOG_HID_DEBUG(<span class=\"string\">L\"\\t\\t  bytes per interval: %04X (USB 3.0)\"</span>, ep_comp-&gt;wBytesPerInterval);</span><br><span class=\"line\">            libusb_free_ss_endpoint_companion_descriptor(ep_comp);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// LOG_HID_DEBUG(L\"----------------------------------------------\");</span></span><br><span class=\"line\">    <span class=\"comment\">// for (int iface = 0; iface &lt; nb_ifaces; iface++)</span></span><br><span class=\"line\">    <span class=\"comment\">// &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//   LOG_HID_DEBUG(L\"Claiming interface %d...\", iface);</span></span><br><span class=\"line\">    <span class=\"comment\">//   int r = libusb_claim_interface(m_devHandle, iface);</span></span><br><span class=\"line\">    <span class=\"comment\">//   if (r != LIBUSB_SUCCESS) &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//     LOG_HID_DEBUG(L\"libusb_set_auto_detach_kernel_driver Failed.\");</span></span><br><span class=\"line\">    <span class=\"comment\">//   &#125;</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  libusb_free_config_descriptor(conf_desc);</span><br><span class=\"line\">  libusb_set_auto_detach_kernel_driver(m_devHandle, <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 命令字方式读取</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> CMyUsbHid::ReadModule(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span>* szData)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 指令</span></span><br><span class=\"line\">  <span class=\"keyword\">uint8_t</span> request_type = <span class=\"number\">0xA1</span>;  <span class=\"comment\">// 161</span></span><br><span class=\"line\">  <span class=\"keyword\">uint8_t</span> bRequest = <span class=\"number\">0x01</span>;</span><br><span class=\"line\">  <span class=\"keyword\">uint16_t</span> wValue = <span class=\"number\">0x0100</span>;     <span class=\"comment\">// 256</span></span><br><span class=\"line\">  <span class=\"keyword\">uint16_t</span> wIndex = <span class=\"number\">0x0000</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\">CriticalSectionManager <span class=\"title\">csm</span><span class=\"params\">(m_cs)</span></span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> libusb_control_transfer(m_devHandle, request_type, bRequest, wValue, wIndex, szData, <span class=\"number\">64</span>, <span class=\"number\">500</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span>* CMyUsbHid::Read(<span class=\"keyword\">int</span> &amp;len)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  ZeroMemory(m_szData, <span class=\"keyword\">sizeof</span>(m_szData));</span><br><span class=\"line\">  <span class=\"comment\">// <span class=\"doctag\">TODO:</span> 在此添加控件通知处理程序代码</span></span><br><span class=\"line\">  <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> epIn = <span class=\"number\">0x84</span>;  <span class=\"comment\">// 常规读终端地址, 可查询接口属性获取 endpoint_in</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> packLen = <span class=\"number\">0x0040</span>;       <span class=\"comment\">// 64，包长度</span></span><br><span class=\"line\">  <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> *szTmp = m_szData;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (TRUE)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!m_devHandle)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      len = <span class=\"number\">-1</span>;</span><br><span class=\"line\">      LOG_HID_ERROR(<span class=\"string\">L\"单片机读失败: need init\"</span>);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// transfer type: interrupt</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> tmpLen = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> re = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (IsModule())</span><br><span class=\"line\">      re = tmpLen = ReadModule(szTmp);</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">      re = libusb_interrupt_transfer(m_devHandle, epIn, szTmp, packLen, &amp;tmpLen, <span class=\"number\">500</span>);</span><br><span class=\"line\">    <span class=\"comment\">// transfer type: bulk</span></span><br><span class=\"line\">    <span class=\"comment\">//int re = libusb_interrupt_transfer(m_devHandle, epIn, szTmp, packLen, &amp;tmpLen, 2000);</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (re &lt; <span class=\"number\">0</span> &amp;&amp; re != LIBUSB_ERROR_TIMEOUT) &#123;</span><br><span class=\"line\">      len = <span class=\"number\">-1</span>;</span><br><span class=\"line\">      LOG_HID_ERROR(<span class=\"string\">L\"单片机读失败: %d, need init\"</span>, re);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (tmpLen == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (len == <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 当前帧数据长度</span></span><br><span class=\"line\">      len = szTmp[<span class=\"number\">4</span>];</span><br><span class=\"line\">      len &lt;&lt;= <span class=\"number\">8</span>;</span><br><span class=\"line\">      len += szTmp[<span class=\"number\">5</span>];</span><br><span class=\"line\">      len += <span class=\"number\">8</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (len &lt; packLen)</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    szTmp += packLen;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (szTmp - m_szData &gt; len)</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> m_szData;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">int</span> CMyUsbHid::WriteModule(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> *szData, <span class=\"keyword\">int</span> len)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 控制字写</span></span><br><span class=\"line\">  <span class=\"keyword\">uint8_t</span> request_type = <span class=\"number\">0x21</span>;  <span class=\"comment\">// 33</span></span><br><span class=\"line\">  <span class=\"keyword\">uint8_t</span> bRequest = <span class=\"number\">0x09</span>;</span><br><span class=\"line\">  <span class=\"keyword\">uint16_t</span> wValue = <span class=\"number\">0x0200</span>;     <span class=\"comment\">// 512</span></span><br><span class=\"line\">  <span class=\"keyword\">uint16_t</span> wIndex = <span class=\"number\">0x0000</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> libusb_control_transfer(m_devHandle, request_type, bRequest, wValue, wIndex, szData, len, <span class=\"number\">3000</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">BOOL CMyUsbHid::Write(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> *szData, <span class=\"keyword\">int</span> len)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"function\">CriticalSectionManager <span class=\"title\">csm</span><span class=\"params\">(m_cs)</span></span>;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> lenTmp = len;</span><br><span class=\"line\">  <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> *szDataTmp = szData;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> packLen = <span class=\"number\">0x0040</span>;         <span class=\"comment\">// 64</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span>(lenTmp &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!m_devHandle)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> FALSE;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> epOut = <span class=\"number\">0x03</span>;  <span class=\"comment\">// 常规写终端地址，可查询接口属性获取 endpoint_out</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> actual_length = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> re = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (IsModule())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      re = WriteModule(szDataTmp, packLen);</span><br><span class=\"line\">      actual_length = packLen + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">      re = libusb_interrupt_transfer(m_devHandle, epOut, szDataTmp, packLen, &amp;actual_length, <span class=\"number\">1000</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((re &lt; <span class=\"number\">0</span>) || (actual_length != packLen+<span class=\"number\">1</span>))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      LOG_HID_ERROR(TEXT(<span class=\"string\">\"单片机写失败:re=%d, packLen=%d, actual_length=%d\"</span>), re, packLen, actual_length);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> FALSE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"comment\">//LOG_HID_DEBUG(TEXT(\"单片机写成功:re=%d, packLen=%d\"), re, packLen);</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    lenTmp -= packLen;</span><br><span class=\"line\">    szDataTmp += packLen;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (len &gt; <span class=\"number\">1000</span>)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    LOG_HID_DEBUG(TEXT(<span class=\"string\">\"大包解析延迟5ms\"</span>));</span><br><span class=\"line\">    Sleep(<span class=\"number\">5</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> TRUE;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","categories":["VC"],"tags":["USBHID"]},{"title":"CURL","url":"/2019/12/18/VCNet/CURL/","content":"<h2 id=\"设置\"><a href=\"#设置\" class=\"headerlink\" title=\"设置\"></a>设置</h2><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl_easy_setopt(curl, CURLOPT_CONNECTTIMEOUT, <span class=\"number\">2L</span>); <span class=\"comment\">// 连接超时</span></span><br><span class=\"line\">curl_easy_setopt(curl, CURLOPT_TIMEOUT, <span class=\"number\">5L</span>);  <span class=\"comment\">// 下载超时</span></span><br><span class=\"line\">curl_easy_setopt(curl, CURLOPT_NOSIGNAL, <span class=\"number\">1L</span>); <span class=\"comment\">// DNS相关优化</span></span><br><span class=\"line\">curl_easy_setopt(curl, CURLOPT_LOW_SPEED_LIMIT, <span class=\"number\">10L</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// CURL启动SSL参数后，执行curl_easy_perform动作时，会对本线程中TCP Socket造成干扰</span></span><br><span class=\"line\"><span class=\"comment\">// 可以通过使用单独的CURL线程避免</span></span><br><span class=\"line\">curl_easy_setopt(curl, CURLOPT_SSL_VERIFYPEER, <span class=\"number\">0L</span>); <span class=\"comment\">// 关闭SSL证书校验</span></span><br><span class=\"line\">curl_easy_setopt(curl, CURLOPT_SSL_VERIFYHOST, <span class=\"number\">0L</span>);</span><br></pre></td></tr></table></figure>\n\n","categories":["VC"],"tags":["CURL"]},{"title":"sqlite","url":"/2019/12/18/VCTools/sqlite/","content":"<h2 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h2><ul>\n<li><a href=\"https://www.sqlite.org/download.html\" target=\"_blank\" rel=\"noopener\">官网下载</a><ul>\n<li>sqlite-snapshot-*.tar</li>\n<li>sqlite-dll-win32-x86-*.zip</li>\n</ul>\n</li>\n<li>[DLL环境]<ul>\n<li>解压<code>sqlite-dll-win32-x86-*.zip</code>得到<code>sqlite3.dll</code>+<code>sqlite3.def</code></li>\n<li>DLL同级目录执行如下指令得到lib：<ul>\n<li><code>VS_PATH\\bin\\lib.exe /out:sqlite3.lib /MACHINE:IX86 /DEF:sqlite3.def</code></li>\n</ul>\n</li>\n<li>加压<code>sqlite-snapshot-*.tar</code>得到<code>sqlite3.h</code></li>\n<li>复制<code>sqlite3.lib</code>+<code>sqlite3.h</code>到工程即可</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"简单案例\"><a href=\"#简单案例\" class=\"headerlink\" title=\"简单案例\"></a>简单案例</h2><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 打开本地缓存库</span></span><br><span class=\"line\">CStringA strDB = CStringA(CW2A(GetRunPath()).m_psz) + <span class=\"string\">\"\\\\usbhid.db\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (SQLITE_OK != sqlite3_open(strDB, &amp;m_sql))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  LOG_HID_ERROR(TEXT(<span class=\"string\">\"sqlite3打开失败，删除本地缓存，并重新创建\"</span>));</span><br><span class=\"line\">  DeleteFileA(strDB);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (SQLITE_OK != sqlite3_open(strDB, &amp;m_sql))</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    LOG_HID_ERROR(TEXT(<span class=\"string\">\"本地缓存库创建失败\"</span>));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> FALSE;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 检查表，不存在则创建</span></span><br><span class=\"line\"><span class=\"keyword\">char</span>* errmsg = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (sqlite3_exec(m_sql, R<span class=\"string\">\"(</span></span><br><span class=\"line\"><span class=\"string\">  CREATE TABLE IF NOT EXISTS `idcard` (</span></span><br><span class=\"line\"><span class=\"string\">    `uuid` varchar(16) NOT NULL,</span></span><br><span class=\"line\"><span class=\"string\">    `info` varchar(320) NOT NULL,</span></span><br><span class=\"line\"><span class=\"string\">    `uptm` datetime DEFAULT CURRENT_TIMESTAMP,</span></span><br><span class=\"line\"><span class=\"string\">    PRIMARY KEY (`uuid`)); )\"</span>, <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>, &amp;errmsg) != SQLITE_OK)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  LOG_HID_ERROR(TEXT(<span class=\"string\">\"本地缓存表创建失败： %s\"</span>), CA2W(errmsg));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 清理1个月前缓存</span></span><br><span class=\"line\">  CString strTime = (CTime::GetCurrentTime() - CTimeSpan(<span class=\"number\">365</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>)).Format(_T(<span class=\"string\">\"%Y-%m-%d\"</span>));</span><br><span class=\"line\">  CString strSql;</span><br><span class=\"line\">  strSql.Format(TEXT(<span class=\"string\">\"DELETE FROM idcard WHERE uptm&lt;'%s'\"</span>), strTime);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (sqlite3_exec(m_sql, CW2A(strSql).m_psz, <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>, &amp;errmsg) != SQLITE_OK)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    LOG_HID_ERROR(TEXT(<span class=\"string\">\"本地缓存表清理失败： %s\"</span>), CA2W(errmsg));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 回调</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">ExecCallback</span><span class=\"params\">(<span class=\"keyword\">void</span>* lpParam, <span class=\"keyword\">int</span> nCount, <span class=\"keyword\">char</span>** pValue, <span class=\"keyword\">char</span>** pName)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  CStringA &amp;strResult = *(CStringA*)(lpParam);</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> index = <span class=\"number\">0</span>; index &lt; nCount; index++)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    strResult += pValue[index];</span><br><span class=\"line\">    strResult += <span class=\"string\">\",\"</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  strResult += <span class=\"string\">\";\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">BOOL ******::Exec(CString strSql)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">char</span>* errmsg = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">  CStringA strResult;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (sqlite3_exec(m_sql, CW2A(strSql).m_psz, ExecCallback, &amp;strResult, &amp;errmsg) != SQLITE_OK)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    LOG_HID_ERROR(TEXT(<span class=\"string\">\"指令执行失败： %s\"</span>), errmsg);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> FALSE;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  LOG_HID_INFO(TEXT(<span class=\"string\">\"指令执行成功： %s\"</span>), CA2W(strResult));</span><br><span class=\"line\">  <span class=\"keyword\">return</span> TRUE;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","categories":["VC"],"tags":["sqlite"]},{"title":"socket","url":"/2019/12/14/Python/网络/Socket/","content":"<h2 id=\"TCP\"><a href=\"#TCP\" class=\"headerlink\" title=\"TCP\"></a>TCP</h2><figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># coding=gbk</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> socket</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">tcp_server_start</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># socket.AF_INET (IPV4)</span></span><br><span class=\"line\">    <span class=\"comment\"># socket.SOCK_STREAM (TCP)</span></span><br><span class=\"line\">    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 获取本地主机名</span></span><br><span class=\"line\">    host = socket.gethostname()</span><br><span class=\"line\">    <span class=\"comment\"># 绑定端口 IP:port</span></span><br><span class=\"line\">    s.bind((<span class=\"string\">''</span>, <span class=\"number\">8080</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 最大允许连接数量</span></span><br><span class=\"line\">    s.listen(<span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 死循环，重复的处理着每个客户端的请求</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">        <span class=\"comment\"># 阻塞 每当有客户端的请求过来开始执行</span></span><br><span class=\"line\">        <span class=\"comment\"># 连接处理 （已完成三次握手）并获取资源对象 | conn 请求对象 | addr 客户端地址 ip: port</span></span><br><span class=\"line\">        conn, addr = s.accept()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 请求处理 | 读取客户端发送过来的数据 | recv(1024) 指定每次读取 1024 字节，当数据较长时可以通过 while 循环读取</span></span><br><span class=\"line\">        data = conn.recv(<span class=\"number\">1024</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">print</span> data</span><br><span class=\"line\">        conn.send(data)</span><br><span class=\"line\">        conn.close()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">tcp_client</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class=\"line\">    s.connect((<span class=\"string\">'127.0.0.1'</span>, <span class=\"number\">8080</span>))</span><br><span class=\"line\">    s.send(<span class=\"string\">\"test\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">print</span> s.recv(<span class=\"number\">1024</span>)</span><br><span class=\"line\">    s.close()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    tcp_server_start()</span><br><span class=\"line\">    <span class=\"comment\"># tcp_client()</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"SocketServer\"><a href=\"#SocketServer\" class=\"headerlink\" title=\"SocketServer\"></a>SocketServer</h2><figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># coding=gbk</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> SocketServer</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 必须继承socketserver基类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyTcpHandler</span><span class=\"params\">(SocketServer.BaseRequestHandler)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">setup</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">'setup'</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 重写基类里的handler()方法，在这个方法里处理接收、发送请求</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">handle</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">            data = self.request.recv(<span class=\"number\">1024</span>)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> data:</span><br><span class=\"line\">                print(<span class=\"string\">\"客户端退出！\"</span>)</span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">            print(data)</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\"># 发送转换小写的数据给客户端，然后进入到下一个循环</span></span><br><span class=\"line\">            self.request.send(data)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">finish</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">'finish'</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    <span class=\"comment\"># 实例化socketserver，并传送服务器ip、port和子类</span></span><br><span class=\"line\">    <span class=\"comment\"># 单进程，单线程</span></span><br><span class=\"line\">    <span class=\"comment\"># my_server = SocketServer.TCPServer(('127.0.0.1', 8080), MyTcpHandler)</span></span><br><span class=\"line\">    <span class=\"comment\"># 单进程，多线程</span></span><br><span class=\"line\">    my_server = SocketServer.ThreadingTCPServer((<span class=\"string\">'127.0.0.1'</span>, <span class=\"number\">8080</span>), MyTcpHandler)</span><br><span class=\"line\">    <span class=\"comment\"># 多进程：linux</span></span><br><span class=\"line\">    <span class=\"comment\"># my_server = SocketServer.ForkingTCPServer(('127.0.0.1', 8080), MyTcpHandler)</span></span><br><span class=\"line\">    my_server.serve_forever()</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"tornado-TcpServer\"><a href=\"#tornado-TcpServer\" class=\"headerlink\" title=\"tornado TcpServer\"></a>tornado TcpServer</h2><p><a href=\"https://www.tornadoweb.org/en/stable/\" target=\"_blank\" rel=\"noopener\">官网</a>看Demo吧<br>tornado的多进程都是基于fork，仅支持Linux</p>\n<p><a href=\"https://tornado-zh.readthedocs.io/zh/latest/index.html\" target=\"_blank\" rel=\"noopener\">中文版</a></p>\n<ul>\n<li>tornado.tcpserver</li>\n<li>tornado.tcpclient</li>\n</ul>\n","categories":["Python"],"tags":["socket"]},{"title":"时间","url":"/2019/12/12/VC/Time/","content":"<h2 id=\"常规\"><a href=\"#常规\" class=\"headerlink\" title=\"常规\"></a>常规</h2><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 当前时间</span></span><br><span class=\"line\">CTime tNow = CTime::GetCurrentTime(); <span class=\"comment\">// 当前系统时间（北京时间）</span></span><br><span class=\"line\">CString tNow = CTime::GetCurrentTime().Format(_T(<span class=\"string\">\"%Y-%m-%d %H:%M:%S\"</span>));</span><br><span class=\"line\">CString strYesterday = (tNow - CTimeSpan(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>)).Format(_T(<span class=\"string\">\"%Y-%m-%d %H:%M:%S\"</span>));  <span class=\"comment\">// 时间差：昨天</span></span><br><span class=\"line\"><span class=\"comment\">// COM: 当前时间</span></span><br><span class=\"line\">COleDateTime oleTime;</span><br><span class=\"line\">oleTime.ParseDateTime(<span class=\"string\">\"2012-02-10 12:20:20\"</span>);</span><br><span class=\"line\">COleDateTime tNow = COleDateTime::GetCurrentTime();</span><br><span class=\"line\">COleDateTimeSpan span = tNow - oleTime;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 当前时间：精确到毫秒</span></span><br><span class=\"line\"><span class=\"function\">CString <span class=\"title\">GetTime</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  CString strTime;</span><br><span class=\"line\">  SYSTEMTIME st;</span><br><span class=\"line\">  GetLocalTime(&amp;st);</span><br><span class=\"line\">  strTime.Format(TEXT(<span class=\"string\">\"[%04d-%02d-%02d %02d:%02d:%02d.%03d]\"</span>),</span><br><span class=\"line\">    st.wYear, st.wMonth, st.wDay, st.wHour, st.wMinute, st.wSecond, st.wMilliseconds);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> strTime;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置时间</span></span><br><span class=\"line\">SYSTEMTIME st;</span><br><span class=\"line\">oleTime.GetAsSystemTime(st);</span><br><span class=\"line\">SetLocalTime(&amp;st);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 系统启动时长，单位：毫秒</span></span><br><span class=\"line\"><span class=\"function\">DWORD <span class=\"title\">GetTickCount</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"><span class=\"function\">ULONGLONG <span class=\"title\">GetTickCount64</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"><span class=\"comment\">// 程序运行时长(CPU占用时间)，单位：毫秒</span></span><br><span class=\"line\"><span class=\"comment\">// 备注：真实单位：1/CLOCKS_PER_SEC 秒, Windows 下 CLOCKS_PER_SEC=1000，相当于1ms</span></span><br><span class=\"line\"><span class=\"keyword\">clock_t</span> clock();</span><br></pre></td></tr></table></figure>\n\n","categories":["VC"],"tags":["time"]},{"title":"CURL","url":"/2019/12/12/VCTools/curl/","content":"<h2 id=\"Demo\"><a href=\"#Demo\" class=\"headerlink\" title=\"Demo\"></a>Demo</h2><ul>\n<li><a href=\"https://github.com/fxliu/VCDemo/tree/master/NET/CUrl\" target=\"_blank\" rel=\"noopener\">CURL</a></li>\n</ul>\n<h2 id=\"简单案例\"><a href=\"#简单案例\" class=\"headerlink\" title=\"简单案例\"></a>简单案例</h2><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"OpenSSL\"><a href=\"#OpenSSL\" class=\"headerlink\" title=\"OpenSSL\"></a>OpenSSL</h2><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n","categories":["VC"],"tags":["CURL"]},{"title":"USB-HID","url":"/2019/12/03/VCTools/libusb/","content":"<h2 id=\"开源库\"><a href=\"#开源库\" class=\"headerlink\" title=\"开源库\"></a>开源库</h2><ul>\n<li><a href=\"https://github.com/libusb/libusb\" target=\"_blank\" rel=\"noopener\">libusb</a></li>\n</ul>\n<h2 id=\"基础使用\"><a href=\"#基础使用\" class=\"headerlink\" title=\"基础使用\"></a>基础使用</h2><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\">BOOL CMyUsbHid::Init()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (libusb_init(<span class=\"literal\">NULL</span>) &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"SDK初始化失败\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> FALSE;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  m_devHandle = libusb_open_device_with_vid_pid(<span class=\"literal\">NULL</span>, m_vid, m_pid);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (m_devHandle == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"设备连接失败\"</span>);</span><br><span class=\"line\">    libusb_exit(<span class=\"literal\">NULL</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> FALSE;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> TRUE;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">void</span> CMyUsbHid::Release()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (m_devHandle)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    libusb_close(m_devHandle);</span><br><span class=\"line\">    libusb_exit(<span class=\"literal\">NULL</span>);</span><br><span class=\"line\">    m_devHandle = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span>* CMyUsbHid::Read(<span class=\"keyword\">int</span> &amp;len)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  ZeroMemory(m_szData, <span class=\"keyword\">sizeof</span>(m_szData));</span><br><span class=\"line\">  <span class=\"keyword\">uint8_t</span> request_type = <span class=\"number\">0xA1</span>;  <span class=\"comment\">// 161</span></span><br><span class=\"line\">  <span class=\"keyword\">uint8_t</span> bRequest = <span class=\"number\">0x01</span>;</span><br><span class=\"line\">  <span class=\"keyword\">uint16_t</span> wValue = <span class=\"number\">0x0100</span>;     <span class=\"comment\">// 256</span></span><br><span class=\"line\">  <span class=\"keyword\">uint16_t</span> wIndex = <span class=\"number\">0x0000</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    len = libusb_control_transfer(m_devHandle, request_type, bRequest, wValue, wIndex, m_szData, <span class=\"number\">64</span>, <span class=\"number\">500</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (len &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      Log(TEXT(<span class=\"string\">\"单片机读失败\"</span>));</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (len &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    Sleep(<span class=\"number\">100</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> m_szData;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">BOOL CMyUsbHid::Write(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> *szData, <span class=\"keyword\">int</span> &amp;len)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">uint8_t</span> request_type = <span class=\"number\">0x21</span>;  <span class=\"comment\">// 33</span></span><br><span class=\"line\">  <span class=\"keyword\">uint8_t</span> bRequest = <span class=\"number\">0x09</span>;</span><br><span class=\"line\">  <span class=\"keyword\">uint16_t</span> wValue = <span class=\"number\">0x0200</span>;     <span class=\"comment\">// 512</span></span><br><span class=\"line\">  <span class=\"keyword\">uint16_t</span> wIndex = <span class=\"number\">0x0000</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span>(len &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 这里接口有问题，只能是64，使用len会写失败</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> re = libusb_control_transfer(m_devHandle, request_type, bRequest, wValue, wIndex, szData, <span class=\"number\">64</span>, <span class=\"number\">3000</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (re &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      Log(TEXT(<span class=\"string\">\"单片机写失败\"</span>));</span><br><span class=\"line\">      <span class=\"keyword\">return</span> FALSE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    len -= <span class=\"number\">64</span>;</span><br><span class=\"line\">    szData += <span class=\"number\">64</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> TRUE;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Windows-HID-API-备记\"><a href=\"#Windows-HID-API-备记\" class=\"headerlink\" title=\"Windows HID API 备记\"></a>Windows HID API 备记</h2><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">1.获取设备信息，在建立连接时</span><br><span class=\"line\">HidD_GetAttributes</span><br><span class=\"line\">HidD_GetHidGuid</span><br><span class=\"line\">HidD_GetIndexedString</span><br><span class=\"line\">HidD_GetManufacturerString</span><br><span class=\"line\">HidD_GetPhysicalDescriptor</span><br><span class=\"line\">HidD_GetPreparsedData</span><br><span class=\"line\">HidD_GetProductString</span><br><span class=\"line\">HidD_GetSerialNumberString</span><br><span class=\"line\"></span><br><span class=\"line\">2.设置输入缓冲大小</span><br><span class=\"line\">HidD_GetNumInputBuffers</span><br><span class=\"line\">HidD_SetNumInputBuffers</span><br><span class=\"line\"></span><br><span class=\"line\">3.读数据</span><br><span class=\"line\">HidD_GetInputReport</span><br><span class=\"line\">ReadFile</span><br><span class=\"line\"></span><br><span class=\"line\">4.写数据</span><br><span class=\"line\">HidD_SetOutputReport</span><br><span class=\"line\">ReadFile</span><br><span class=\"line\">HidD_SetFeature</span><br><span class=\"line\"></span><br><span class=\"line\">5.HID语法信息</span><br><span class=\"line\">HidP_GetButtonCaps</span><br><span class=\"line\">HidP_GetButtons</span><br><span class=\"line\">HidP_GetButtonsEx</span><br><span class=\"line\">HidP_GetCaps</span><br><span class=\"line\">HidP_GetData</span><br><span class=\"line\">HidP_GetExtendedAttributes</span><br><span class=\"line\">HidP_GetLinkCollectionNodes</span><br><span class=\"line\">HidP_GetScaledUsageValue</span><br><span class=\"line\">HidP_GetSpecificButtonCaps</span><br><span class=\"line\">HidP_GetSpecificValueCaps</span><br><span class=\"line\">HidP_GetUsages</span><br><span class=\"line\">HidP_GetUsagesEx</span><br><span class=\"line\">HidP_GetUsageValue</span><br><span class=\"line\">HidP_GetUsageValueArray</span><br><span class=\"line\">HidP_GetValueCaps</span><br><span class=\"line\">HidP_InitializeReportForID</span><br><span class=\"line\">HidP_IsSameUsageAndPage</span><br><span class=\"line\">HidP_MaxDataListLength</span><br><span class=\"line\">HidP_MaxUsageListLength</span><br><span class=\"line\">HidP_SetButtons</span><br><span class=\"line\">HidP_SetData</span><br><span class=\"line\">HidP_SetScaledUsageValue</span><br><span class=\"line\">HidP_SetUsages</span><br><span class=\"line\">HidP_SetUsageValue</span><br><span class=\"line\">HidP_SetUsageValueArray</span><br><span class=\"line\">HidP_UnsetButtons</span><br><span class=\"line\">HidP_UnsetUsages</span><br><span class=\"line\">HidP_UsageAndPageListDifference</span><br><span class=\"line\">HidP_UsageListDifference</span><br><span class=\"line\"></span><br><span class=\"line\">6.注意事项</span><br><span class=\"line\">读写数据的时候，数据大小必须是HidP_GetCaps获得的HIDP_CAPS的 InputReportByteLength/OutputReportByteLength</span><br></pre></td></tr></table></figure>\n\n","categories":["VC"],"tags":["USB","HID"]},{"title":"Vue","url":"/2019/12/02/Html/Vue/","content":"<h2 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h2><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 嵌套: 三元表达式 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">:class</span>=<span class=\"string\">\"[isActive ? 'active' : '', ...]\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"绑定-class-style\"><a href=\"#绑定-class-style\" class=\"headerlink\" title=\"绑定(class | style)\"></a>绑定(class | style)</h2><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">class</span>=<span class=\"string\">\"static\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">v-bind:class</span>=<span class=\"string\">\"&#123; active: isActive, 'text-danger': hasError &#125;\"</span></span></span><br><span class=\"line\"><span class=\"tag\">&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"comment\">// HTML对象形式</span></span></span><br><span class=\"line\">data: &#123;</span><br><span class=\"line\"><span class=\"javascript\">  isActive: <span class=\"literal\">true</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">  hasError: <span class=\"literal\">false</span></span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">class</span>=<span class=\"string\">\"static\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">v-bind:class</span>=<span class=\"string\">\"classObject\"</span></span></span><br><span class=\"line\"><span class=\"tag\">&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"comment\">// JS对象形式</span></span></span><br><span class=\"line\">data: &#123;</span><br><span class=\"line\">  classObject: &#123;</span><br><span class=\"line\"><span class=\"javascript\">    active: <span class=\"literal\">true</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"string\">'text-danger'</span>: <span class=\"literal\">false</span></span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:class</span>=<span class=\"string\">\"[active, error]\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"comment\">// 数组形式</span></span></span><br><span class=\"line\">data: &#123;</span><br><span class=\"line\"><span class=\"javascript\">  active: <span class=\"string\">'active'</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">  isActive: <span class=\"literal\">true</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">  error: <span class=\"string\">'text-danger'</span></span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-bind:class</span>=<span class=\"string\">\"[&#123; active: isActive &#125;, error]\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"comment\">// 数组对象交叉</span></span></span><br><span class=\"line\">data: &#123;</span><br><span class=\"line\"><span class=\"javascript\">  isActive: <span class=\"literal\">true</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">  error: <span class=\"string\">'text-danger'</span></span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n","categories":["JS"],"tags":["Vue"]},{"title":"二维码","url":"/2019/11/30/Python/文件/二维码/","content":"<h2 id=\"二维码\"><a href=\"#二维码\" class=\"headerlink\" title=\"二维码\"></a>二维码</h2><h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p><code>pip install qrcode pillow image zxing</code></p>\n<h3 id=\"简单应用\"><a href=\"#简单应用\" class=\"headerlink\" title=\"简单应用\"></a>简单应用</h3><figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding:gbk -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> qrcode</span><br><span class=\"line\"><span class=\"keyword\">import</span> zxing</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> PIL <span class=\"keyword\">import</span> Image, ImageDraw, ImageFont</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test_create1</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 二维码内容</span></span><br><span class=\"line\">    data = <span class=\"string\">\"https://www.baidu.com\"</span></span><br><span class=\"line\">    <span class=\"comment\"># 生成二维码</span></span><br><span class=\"line\">    img = qrcode.make(data=data)</span><br><span class=\"line\">    <span class=\"comment\"># 直接显示二维码</span></span><br><span class=\"line\">    img.show()</span><br><span class=\"line\">    <span class=\"comment\"># 保存二维码为文件</span></span><br><span class=\"line\">    <span class=\"comment\"># img.save(\"baidu.jpg\")</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test_create2</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 实例化二维码生成类</span></span><br><span class=\"line\">    qr = qrcode.QRCode(</span><br><span class=\"line\">        version=<span class=\"number\">1</span>,</span><br><span class=\"line\">        error_correction=qrcode.constants.ERROR_CORRECT_L,</span><br><span class=\"line\">        box_size=<span class=\"number\">10</span>,</span><br><span class=\"line\">        border=<span class=\"number\">4</span>,</span><br><span class=\"line\">    )</span><br><span class=\"line\">    <span class=\"comment\"># 设置二维码数据</span></span><br><span class=\"line\">    data = <span class=\"string\">\"https://www.baidu.com\"</span></span><br><span class=\"line\">    qr.add_data(data=data)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 启用二维码颜色设置</span></span><br><span class=\"line\">    qr.make(fit=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    img = qr.make_image(fill_color=<span class=\"string\">\"green\"</span>, back_color=<span class=\"string\">\"white\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># PIL修改图片</span></span><br><span class=\"line\">    img = img.convert(<span class=\"string\">\"RGBA\"</span>)   <span class=\"comment\"># 需要转码</span></span><br><span class=\"line\">    draw = ImageDraw.Draw(img)</span><br><span class=\"line\">    font = ImageFont.truetype(<span class=\"string\">'C:/windows/fonts/Dengl.ttf'</span>, <span class=\"number\">20</span>)</span><br><span class=\"line\">    color = <span class=\"string\">\"#0000ff\"</span>  <span class=\"comment\"># 蓝色</span></span><br><span class=\"line\">    draw.text((<span class=\"number\">10</span>, <span class=\"number\">10</span>), <span class=\"string\">'蓝色文字'</span>, font=font, fill=color, fill=(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 显示二维码</span></span><br><span class=\"line\">    <span class=\"comment\"># img.show()</span></span><br><span class=\"line\">    img.save(<span class=\"string\">\"bd.jpg\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test_read_content</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    reader = zxing.BarCodeReader()</span><br><span class=\"line\">    barcode = reader.decode(<span class=\"string\">\"bd.jpg\"</span>)</span><br><span class=\"line\">    print(barcode.parsed)</span><br></pre></td></tr></table></figure>\n\n","categories":["Python"],"tags":["二维码"]},{"title":"小技巧 / 高级应用","url":"/2019/11/30/Python/高级应用/","content":"<h2 id=\"小技巧\"><a href=\"#小技巧\" class=\"headerlink\" title=\"小技巧\"></a>小技巧</h2><figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># for else</span></span><br><span class=\"line\"><span class=\"comment\"># 正常for循环结束，会执行else；break跳出for循环，else不会执行</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">0</span>, <span class=\"number\">10</span>):</span><br><span class=\"line\">  <span class=\"keyword\">print</span> i</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">  <span class=\"keyword\">print</span> i</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"高级应用\"><a href=\"#高级应用\" class=\"headerlink\" title=\"高级应用\"></a>高级应用</h2><ul>\n<li>重试机制<ul>\n<li><a href=\"https://github.com/invl/retry/\" target=\"_blank\" rel=\"noopener\">retry</a></li>\n<li><a href=\"https://github.com/rholder/retrying\" target=\"_blank\" rel=\"noopener\">retrying</a></li>\n</ul>\n</li>\n<li>脚本编译成可执行文件<ul>\n<li>pyinstaller: <code>pip install pyinstaller</code><ul>\n<li>编译成单个文件<ul>\n<li><code>pyinstaller -F t.py</code></li>\n</ul>\n</li>\n<li>编译到目录，公共模块会提取成dll<ul>\n<li><code>pyinstaller t.py</code></li>\n<li><code>pyinstaller -D t.py</code></li>\n</ul>\n</li>\n<li>其他参数<ul>\n<li>-p：指定python安装包路径</li>\n<li>-i：指定图标</li>\n<li>–noconsole，就是无窗口运行</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>HTML解析<ul>\n<li>PyQuery</li>\n<li>BeautifulSoup</li>\n</ul>\n</li>\n<li>Web框架<ul>\n<li>web2py: 小巧灵活但功能强大<ul>\n<li>全栈框架</li>\n<li><a href=\"http://www.web2py.com/books/default/chapter/35\" target=\"_blank\" rel=\"noopener\">中文文档</a></li>\n</ul>\n</li>\n<li>web.py<ul>\n<li><a href=\"http://webpy.org/cookbook/index.zh-cn\" target=\"_blank\" rel=\"noopener\">中文文档</a></li>\n</ul>\n</li>\n<li>Django</li>\n</ul>\n</li>\n<li>fabric: 服务器管理+应用发布<ul>\n<li>命令行集合</li>\n</ul>\n</li>\n</ul>\n","categories":["Python"],"tags":["小技巧","高级应用"]},{"title":"命令行","url":"/2019/11/26/VCSystem/命令行/","content":"<h2 id=\"API\"><a href=\"#API\" class=\"headerlink\" title=\"API\"></a>API</h2><ul>\n<li><a href=\"https://github.com/fxliu/VCDemo/tree/master/Process/命令行-输入输出\" target=\"_blank\" rel=\"noopener\">封装Demo</a><ul>\n<li>支持持续通讯</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">BOOL <span class=\"title\">GetInfoByCmd</span><span class=\"params\">(CString &amp;strResult, CString strCmd)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  BOOL bret = FALSE;</span><br><span class=\"line\"></span><br><span class=\"line\">  HANDLE hOutRead, hOutWrite, hInRead, hInWrite;</span><br><span class=\"line\">  hOutRead = hOutWrite = hInRead = hInWrite = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">  SECURITY_ATTRIBUTES sa;</span><br><span class=\"line\">  sa.nLength = <span class=\"keyword\">sizeof</span>(SECURITY_ATTRIBUTES);</span><br><span class=\"line\">  sa.lpSecurityDescriptor = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">  sa.bInheritHandle = TRUE;</span><br><span class=\"line\">  <span class=\"comment\">//创建管道</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!CreatePipe(&amp;hOutRead, &amp;hOutWrite, &amp;sa, <span class=\"number\">0</span>))</span><br><span class=\"line\">    <span class=\"keyword\">goto</span> _end;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!CreatePipe(&amp;hInRead, &amp;hInWrite, &amp;sa, <span class=\"number\">0</span>))</span><br><span class=\"line\">    <span class=\"keyword\">goto</span> _end;</span><br><span class=\"line\">  <span class=\"comment\">//控制命令行窗口信息</span></span><br><span class=\"line\">  STARTUPINFO si;</span><br><span class=\"line\">  ZeroMemory(&amp;si, <span class=\"keyword\">sizeof</span>(si));</span><br><span class=\"line\">  si.cb = <span class=\"keyword\">sizeof</span>(STARTUPINFO);</span><br><span class=\"line\">  GetStartupInfo(&amp;si);</span><br><span class=\"line\">  si.hStdInput = hInRead;</span><br><span class=\"line\">  si.hStdError = hOutWrite;</span><br><span class=\"line\">  si.hStdOutput = hOutWrite;</span><br><span class=\"line\">  si.wShowWindow = SW_HIDE; <span class=\"comment\">//隐藏命令行窗口</span></span><br><span class=\"line\">  si.dwFlags = STARTF_USESHOWWINDOW | STARTF_USESTDHANDLES;</span><br><span class=\"line\">  <span class=\"comment\">//进程信息</span></span><br><span class=\"line\">  PROCESS_INFORMATION pi;</span><br><span class=\"line\">  ZeroMemory(&amp;pi, <span class=\"keyword\">sizeof</span>(pi));</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//创建获取命令行进程</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (strCmd.Find(<span class=\"string\">'\\n'</span>) == <span class=\"number\">-1</span>)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 单行指令</span></span><br><span class=\"line\">    TCHAR szCmd[<span class=\"number\">256</span>] = TEXT(<span class=\"string\">\"cmd.exe /c\"</span>);   <span class=\"comment\">// 必须单独申请变量，直接CreateProcess会崩溃，BUG？？</span></span><br><span class=\"line\">    StrCat(szCmd, strCmd);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!CreateProcess(<span class=\"literal\">NULL</span>, szCmd, <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>, TRUE, <span class=\"number\">0</span>, <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>, &amp;si, &amp;pi))</span><br><span class=\"line\">      <span class=\"keyword\">goto</span> _end;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 多行指令 - 最后一条指令必须是exit，否则进程无法退出</span></span><br><span class=\"line\">    <span class=\"comment\">// strCmd = TEXT(\"@echo off\\ndir\\nexit\\n\");</span></span><br><span class=\"line\">    TCHAR szCmd[<span class=\"number\">32</span>] = TEXT(<span class=\"string\">\"cmd.exe\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!CreateProcess(<span class=\"literal\">NULL</span>, szCmd, <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>, TRUE, <span class=\"number\">0</span>, <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>, &amp;si, &amp;pi))</span><br><span class=\"line\">      <span class=\"keyword\">goto</span> _end;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (strCmd.Right(<span class=\"number\">1</span>) != TEXT(<span class=\"string\">\"\\n\"</span>))</span><br><span class=\"line\">      strCmd += TEXT(<span class=\"string\">\"\\n\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!WriteFile(hInWrite, CW2A(strCmd).m_psz, strCmd.GetLength(), <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>))</span><br><span class=\"line\">      <span class=\"keyword\">goto</span> _end;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 等待进程结束</span></span><br><span class=\"line\">  WaitForSingleObject(pi.hProcess, INFINITE);</span><br><span class=\"line\">  CloseHandle(hOutWrite);   <span class=\"comment\">// 关闭Write，避免缓存数据读完后read阻塞</span></span><br><span class=\"line\">  hOutWrite = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 缓冲区数据读取</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"keyword\">long</span> MAX_OUT_SIZE = <span class=\"number\">1024</span>;</span><br><span class=\"line\">  <span class=\"keyword\">char</span> szBuffer[MAX_OUT_SIZE + <span class=\"number\">1</span>];</span><br><span class=\"line\">  <span class=\"built_in\">memset</span>(szBuffer, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(szBuffer));</span><br><span class=\"line\">  DWORD dwRead = <span class=\"number\">0</span>; <span class=\"comment\">// 该参数必须存在，否则某些机器上会崩溃</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (ReadFile(hOutRead, szBuffer, MAX_OUT_SIZE, &amp;dwRead, <span class=\"number\">0</span>))</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    strResult += CA2W(szBuffer);</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(szBuffer, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(szBuffer));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  bret = TRUE;</span><br><span class=\"line\"></span><br><span class=\"line\">  _end:</span><br><span class=\"line\">  <span class=\"comment\">//关闭所有的句柄</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (hOutRead)</span><br><span class=\"line\">    CloseHandle(hOutRead);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (hOutWrite)</span><br><span class=\"line\">    CloseHandle(hOutWrite);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (hInRead)</span><br><span class=\"line\">    CloseHandle(hInRead);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (hInWrite)</span><br><span class=\"line\">    CloseHandle(hInWrite);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (pi.hProcess)</span><br><span class=\"line\">    CloseHandle(pi.hProcess);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (pi.hThread)</span><br><span class=\"line\">    CloseHandle(pi.hThread);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> bret;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"命令执行\"><a href=\"#命令执行\" class=\"headerlink\" title=\"命令执行\"></a>命令执行</h2><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 常规指令</span></span><br><span class=\"line\">UINT re = WinExec(cmd, SW_HIDE);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (re &lt;= <span class=\"number\">31</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  CString strError;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (re)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> ERROR_BAD_FORMAT:      strError = cmd + TEXT(<span class=\"string\">\":ERROR_BAD_FORMAT\"</span>); <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> ERROR_FILE_NOT_FOUND:  strError = cmd + TEXT(<span class=\"string\">\":ERROR_FILE_NOT_FOUND\"</span>); <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> ERROR_PATH_NOT_FOUND:  strError = cmd + TEXT(<span class=\"string\">\":ERROR_PATH_NOT_FOUND\"</span>); <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"number\">0</span>:                     strError = cmd + TEXT(<span class=\"string\">\":系统内存或资源已耗尽\"</span>); <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  <span class=\"keyword\">default</span>:                    strError = cmd + TEXT(<span class=\"string\">\":ERROR\"</span>); <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 32位程序启动64位程序</span></span><br><span class=\"line\">ShellExecute(<span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>, GetRunPath() + TEXT(<span class=\"string\">\"\\\\SystemInit64.exe\"</span>), <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>, FALSE);</span><br><span class=\"line\"><span class=\"comment\">// 常规指令</span></span><br><span class=\"line\">ShellExecute(<span class=\"literal\">NULL</span>, TEXT(<span class=\"string\">\"open\"</span>), TEXT(<span class=\"string\">\"net\"</span>), TEXT(<span class=\"string\">\"stop IDReader\"</span>), <span class=\"literal\">NULL</span>, FALSE);</span><br></pre></td></tr></table></figure>\n\n","categories":["VC"],"tags":["管道","命令行"]},{"title":"Web服务","url":"/2019/11/25/Linux/Web服务/","content":"<h2 id=\"APACHE-部署\"><a href=\"#APACHE-部署\" class=\"headerlink\" title=\"APACHE 部署\"></a>APACHE 部署</h2><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># yum封装</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">yumInstall</span></span>()&#123;</span><br><span class=\"line\">    install_name=<span class=\"variable\">$1</span></span><br><span class=\"line\">    local_fn=./install/<span class=\"variable\">$2</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> [ -f <span class=\"string\">\"<span class=\"variable\">$local_fn</span>\"</span> ]</span><br><span class=\"line\">    <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">\"yum localinstall <span class=\"variable\">$local_fn</span> -y\"</span></span><br><span class=\"line\">        yum localinstall <span class=\"variable\">$local_fn</span> -y</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">\"yum install <span class=\"variable\">$install_name</span> -y\"</span></span><br><span class=\"line\">        yum install <span class=\"variable\">$install_name</span> -y</span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">set</span> -e</span><br><span class=\"line\"><span class=\"built_in\">set</span> -u</span><br><span class=\"line\"><span class=\"built_in\">set</span> -v</span><br><span class=\"line\"><span class=\"comment\"># 引入yum便捷安装脚本, 把已有rpm安装包复制到install子目录</span></span><br><span class=\"line\">../yum-install.sh</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># wget升级</span></span><br><span class=\"line\">yum install openssl-devel -y</span><br><span class=\"line\">tar -zxvf wget-1.19.2.tar.gz</span><br><span class=\"line\"><span class=\"built_in\">cd</span> wget-1.19.2</span><br><span class=\"line\">./configure --prefix=/usr --sysconfdir=/etc --with-ssl=openssl</span><br><span class=\"line\">make</span><br><span class=\"line\">make install</span><br><span class=\"line\"><span class=\"built_in\">cd</span> ..</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># apache</span></span><br><span class=\"line\">yumInstall httpd httpd-2.4.6-67.el7.centos.6.x86_64.rpm</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装 epel 安装源</span></span><br><span class=\"line\">rpm -Uvh https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm</span><br><span class=\"line\"><span class=\"comment\"># 安装 webtatic 安装源</span></span><br><span class=\"line\">wget https://mirror.webtatic.com/yum/el7/webtatic-release.rpm --no-check-certificate</span><br><span class=\"line\">rpm -Uvh webtatic-release.rpm</span><br><span class=\"line\"><span class=\"comment\"># 更新yum缓存</span></span><br><span class=\"line\">yum makecache fast</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装PHP7.2</span></span><br><span class=\"line\">yumInstall php72w mod_php72w-7.2.2-1.w7.x86_64.rpm</span><br><span class=\"line\">yumInstall php72w-cli php72w-cli-7.2.2-1.w7.x86_64.rpm</span><br><span class=\"line\"><span class=\"comment\"># 支持mysql</span></span><br><span class=\"line\">yumInstall php72w-mysql.x86_64 php72w-mysql-7.2.2-1.w7.x86_64.rpm</span><br><span class=\"line\"></span><br><span class=\"line\">yum install php72w-gd</span><br><span class=\"line\"><span class=\"comment\">#=======================================================================================================</span></span><br><span class=\"line\"><span class=\"comment\"># apache配置: 关闭test页</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"#\"</span> &gt; /etc/httpd/conf.d/welcome.conf</span><br><span class=\"line\">sed -i <span class=\"string\">'s/Options Indexes FollowSymLinks/Options FollowSymLinks/g'</span> /etc/httpd/conf/httpd.conf</span><br><span class=\"line\">sed -i <span class=\"string\">'s@ErrorLog \"logs/error_log\"@ErrorLog \"|/usr/sbin/rotatelogs -l /var/log/httpd/error_log-%Y-%m-%d 86400\"@g'</span> /etc/httpd/conf/httpd.conf</span><br><span class=\"line\">sed -i <span class=\"string\">'/CustomLog \"logs\\/access_log\" combined/a\\    CustomLog \"|\\/usr\\/sbin\\/rotatelogs -l \\/var\\/log\\/httpd\\/access_log-%Y-%m-%d 86400\" combined env=!paichu'</span> /etc/httpd/conf/httpd.conf</span><br><span class=\"line\">sed -i <span class=\"string\">'s@CustomLog \"logs/access_log\" combined@SetEnvIf Request_URI \"\\.(html)$\" paichu@g'</span> /etc/httpd/conf/httpd.conf</span><br><span class=\"line\">sed -i <span class=\"string\">'s@LogFormat \"%h %l %u %t \\\\\"%r\\\\\" %&gt;s %b \\\\\"%&#123;Referer&#125;i\\\\\" \\\\\"%&#123;User-Agent&#125;i\\\\\"\" combined@LogFormat \"%&#123;X-Forwarded-For&#125;i %h %l %u %t \\\\\"%m %U %q %H\\\\\" %&gt;s %b \\\\\"%&#123;Referer&#125;i\\\\\" \\\\\"%&#123;User-Agent&#125;i\\\\\"\" combined@g'</span> /etc/httpd/conf/httpd.conf</span><br><span class=\"line\"><span class=\"comment\"># PHP 时间策略调整</span></span><br><span class=\"line\">sed -i <span class=\"string\">'s@;date.timezone.*@date.timezone=PRC@g'</span> /etc/php.ini</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># PHP 使用内存大小</span></span><br><span class=\"line\">sed -i <span class=\"string\">'s@memory_limit.*@memory_limit = 512M@g'</span> /etc/php.ini</span><br><span class=\"line\"><span class=\"comment\"># 执行优化</span></span><br><span class=\"line\">yumInstall php72w-opcache php72w-opcache-7.2.2-1.w7.x86_64.rpm</span><br><span class=\"line\"><span class=\"comment\"># 优化配置项: /etc/php.d/opcache.ini</span></span><br><span class=\"line\">sed -i <span class=\"string\">'s/;\\?opcache.memory_consumption=[0-9]*/opcache.memory_consumption=512/g'</span> /etc/php.d/opcache.ini</span><br><span class=\"line\">sed -i <span class=\"string\">'s/;\\?opcache.validate_timestamps=[0-9]*/opcache.validate_timestamps=1/g'</span> /etc/php.d/opcache.ini</span><br><span class=\"line\">sed -i <span class=\"string\">'s/;\\?opcache.revalidate_freq=[0-9]*/date.revalidate_freq=600/g'</span> /etc/php.d/opcache.ini</span><br><span class=\"line\">sed -i <span class=\"string\">'s/;\\?opcache.save_comments=[0-9]*/date.save_comments=1/g'</span> /etc/php.d/opcache.ini</span><br><span class=\"line\">sed -i <span class=\"string\">'s/;\\?opcache.load_comments=[0-9]*/date.load_comments=1/g'</span> /etc/php.d/opcache.ini</span><br><span class=\"line\"><span class=\"comment\"># PHP优化</span></span><br><span class=\"line\"><span class=\"comment\"># 手动配置: sysctl vm.nr_hugepages=512</span></span><br><span class=\"line\"><span class=\"comment\"># sysctl vm.nr_hugepages: 查看配置值</span></span><br><span class=\"line\"><span class=\"comment\"># 查看分页情况: cat /proc/meminfo  | grep Huge</span></span><br><span class=\"line\">sed -i <span class=\"string\">'/vm.nr_hugepages=.*/d'</span> /etc/sysctl.conf</span><br><span class=\"line\">sed -i <span class=\"string\">'$a\\vm.nr_hugepages=512'</span> /etc/sysctl.conf</span><br><span class=\"line\">sysctl -p</span><br><span class=\"line\">sed -i <span class=\"string\">'/opcache.enable=1/a\\opcache.huge_code_pages=1'</span> /etc/php.d/opcache.ini</span><br><span class=\"line\">sed -i <span class=\"string\">'/opcache.enable=1/a\\opcache.file_cache=/tmp'</span> /etc/php.d/opcache.ini</span><br><span class=\"line\"><span class=\"comment\">#=======================================================================================================</span></span><br><span class=\"line\"><span class=\"comment\"># SSL支持 - 走负载均衡</span></span><br><span class=\"line\"><span class=\"comment\"># yum install mod_ssl -y</span></span><br><span class=\"line\"><span class=\"comment\"># sed -i 's/#DocumentRoot/DocumentRoot/g' /etc/httpd/conf/httpd.conf</span></span><br><span class=\"line\"><span class=\"comment\">#=======================================================================================================</span></span><br><span class=\"line\"><span class=\"comment\"># 防火墙</span></span><br><span class=\"line\">systemctl start firewalld</span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> firewalld.service</span><br><span class=\"line\">firewall-cmd --add-port=80/tcp --permanent</span><br><span class=\"line\"><span class=\"comment\"># 启用新配置</span></span><br><span class=\"line\">firewall-cmd --reload</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 启动httpd</span></span><br><span class=\"line\">systemctl start httpd</span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> httpd.service</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看端口</span></span><br><span class=\"line\"><span class=\"comment\"># netstat -lntp</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"NGINX-部署\"><a href=\"#NGINX-部署\" class=\"headerlink\" title=\"NGINX 部署\"></a>NGINX 部署</h2><ul>\n<li>环境: Centos6.5</li>\n<li>软件: <a href=\"http://nginx.org/en/download.html\" target=\"_blank\" rel=\"noopener\">nginx-1.6.0</a></li>\n<li>位置: /usr/local/nginx</li>\n<li>方式: 源码编译安装</li>\n</ul>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 编译环境</span></span><br><span class=\"line\">yum -y install gcc-c++</span><br><span class=\"line\">yum -y install zlib zlib-devel openssl openssl-devel pcre pcre-devel</span><br><span class=\"line\"><span class=\"comment\"># 卸载旧版本</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span></span><br><span class=\"line\">find -name nginx</span><br><span class=\"line\">yum remove nginx</span><br><span class=\"line\"><span class=\"comment\"># 安装</span></span><br><span class=\"line\">tar -zxv -f nginx-1.6.0.tar.gz</span><br><span class=\"line\"><span class=\"built_in\">cd</span> nginx-1.6.0</span><br><span class=\"line\">./configure --prefix=/usr/<span class=\"built_in\">local</span>/nginx</span><br><span class=\"line\">make</span><br><span class=\"line\">make install</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"configure-参数\"><a href=\"#configure-参数\" class=\"headerlink\" title=\"configure 参数\"></a>configure 参数</h4><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>–with-http_gzip_static_module</td>\n<td>启用HTTPGzip模块</td>\n</tr>\n<tr>\n<td>–with-http_stub_status_module</td>\n<td>启用Nginxtatus功能，可以用来监控Nginx的当前状态</td>\n</tr>\n<tr>\n<td>–with-http_realip_module</td>\n<td>获取真实IP</td>\n</tr>\n<tr>\n<td>–with-http_addition_module</td>\n<td>向响应内容中追加内容</td>\n</tr>\n<tr>\n<td>–with-http_sub_module</td>\n<td>替换相应内容（过滤器）</td>\n</tr>\n<tr>\n<td>–with-http_dav_module</td>\n<td>HTTP扩展动作支持（PUT, DELETE, MKCOL, COPY和MOVE）</td>\n</tr>\n<tr>\n<td>–with-http_flv_module</td>\n<td>FLV点播</td>\n</tr>\n<tr>\n<td>–with-http_mp4_module</td>\n<td>mp4点播</td>\n</tr>\n<tr>\n<td>–with-http_gunzip_module –with-http_gzip_static_module</td>\n<td>Gz压缩支持</td>\n</tr>\n<tr>\n<td>–with-http_random_index_module</td>\n<td>随机首页配置</td>\n</tr>\n<tr>\n<td>–with-http_secure_link_module</td>\n<td>安全连接检查</td>\n</tr>\n<tr>\n<td>–with-mail –with-mail_ssl_module</td>\n<td>邮箱协议</td>\n</tr>\n</tbody></table>\n<h4 id=\"维护\"><a href=\"#维护\" class=\"headerlink\" title=\"维护\"></a>维护</h4><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#版本信息</span></span><br><span class=\"line\">/usr/<span class=\"built_in\">local</span>/nginx/sbin/nginx -V</span><br><span class=\"line\"><span class=\"comment\">#-t检查配置正确性</span></span><br><span class=\"line\">/usr/<span class=\"built_in\">local</span>/nginx/sbin/nginx -t</span><br><span class=\"line\"><span class=\"comment\">#-c指定配置文件位置</span></span><br><span class=\"line\">/usr/<span class=\"built_in\">local</span>/nginx/sbin/nginx -t -c /usr/<span class=\"built_in\">local</span>/nginx/conf/nginx.conf</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"配置-nginx-conf\"><a href=\"#配置-nginx-conf\" class=\"headerlink\" title=\"配置 nginx.conf\"></a>配置 nginx.conf</h3><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Linux最大连接数调整</span></span><br><span class=\"line\"><span class=\"built_in\">ulimit</span> -n 65536</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">#运行用户，默认是nobody</span><br><span class=\"line\">user nobody nobody;</span><br><span class=\"line\">#指定Nginx要开启的进程数</span><br><span class=\"line\">#worker_processes auto;</span><br><span class=\"line\">worker_processes 4;</span><br><span class=\"line\">#日志。日志输出级别：debug、info、notice、warn、error、crit</span><br><span class=\"line\">#error_log logs/error.log notice;</span><br><span class=\"line\">#pid</span><br><span class=\"line\">#pid logs/nginx.pid</span><br><span class=\"line\">#更改worker进程的最大打开文件数限制。如果没设置的话，这个值为操作系统的限制。</span><br><span class=\"line\">#设置后你的操作系统和Nginx可以处理比“ulimit -a”更多的文件，</span><br><span class=\"line\">#所以把这个值设高，这样nginx就不会有“too many open files”问题了。</span><br><span class=\"line\">worker_rlimit_nofile 65535;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#events模块中包含nginx中所有处理连接的设置</span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">    #设置可由一个worker进程同时打开的最大连接数。默认1024</span><br><span class=\"line\">    #最大客户数也由系统的可用socket连接数限制（~ 64K），所以设置不切实际的高没什么好处。</span><br><span class=\"line\">    worker_connections 2048;</span><br><span class=\"line\">    #告诉nginx收到一个新连接通知后接受尽可能多的连接</span><br><span class=\"line\">    multi_accept on;</span><br><span class=\"line\">    #设置用于复用客户端线程的轮询方法：epoll、select、poll、kqueue、rtsig、/dev/poll</span><br><span class=\"line\">    use epoll;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">  #包含其他配置选项，一般要包含Nginx默认配置</span><br><span class=\"line\">  include       mime.types;</span><br><span class=\"line\">  #指定默认为二进制流</span><br><span class=\"line\">  default_type  application/octet-stream;</span><br><span class=\"line\">  #开启搞笑文件传输模式。将tcp_nopush和tcp_nodelay两个命令设置为“on”防止网络阻塞</span><br><span class=\"line\">  sendfile        on;</span><br><span class=\"line\">  tcp_nopush      on;</span><br><span class=\"line\">  tcp_nodelay     on;</span><br><span class=\"line\">  #客户端连接保持活动的超时时间</span><br><span class=\"line\">  keepalive_timeout     60;</span><br><span class=\"line\">  #客户端请求头读取超时时间</span><br><span class=\"line\">  client_header_timeout 10;</span><br><span class=\"line\">  #客户端请求主体读取超时时间</span><br><span class=\"line\">  client_body_timeout   10;</span><br><span class=\"line\">  #相应客户端的超时时间</span><br><span class=\"line\">  send_timeout          10;</span><br><span class=\"line\">  #是否启用gzip模块</span><br><span class=\"line\">  #gzip  on;</span><br><span class=\"line\"></span><br><span class=\"line\">  #虚拟主机</span><br><span class=\"line\">  server &#123;</span><br><span class=\"line\">      #端口</span><br><span class=\"line\">      listen       80;</span><br><span class=\"line\">      #IP或域名，多个域名之间用空格分开</span><br><span class=\"line\">      server_name  localhost;</span><br><span class=\"line\">      #设置网页的默认编码格式: gb2312</span><br><span class=\"line\">      #charset koi8-r;</span><br><span class=\"line\">      #访问日志存放路径</span><br><span class=\"line\">      #access_log  logs/host.access.log  main;</span><br><span class=\"line\"></span><br><span class=\"line\">      #默认访问的首页地址</span><br><span class=\"line\">      index index.html index.htm index.jsp</span><br><span class=\"line\">      #网页根目录</span><br><span class=\"line\">      root /web/wwwroot/www.ixdba.net</span><br><span class=\"line\"></span><br><span class=\"line\">      #地址匹配，支持正则</span><br><span class=\"line\">      location / &#123;</span><br><span class=\"line\">          #对应网页根目录</span><br><span class=\"line\">          root   html;</span><br><span class=\"line\">          #默认首页</span><br><span class=\"line\">          index  index.html index.htm;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">location /NginxStatus&#123;</span><br><span class=\"line\">  #启用StubStatus的工作状态统计功能</span><br><span class=\"line\">  stub_status        on;</span><br><span class=\"line\">  #StubStatus日志</span><br><span class=\"line\">  access_log           logs/NginxStatus.log;</span><br><span class=\"line\">  #Nginx的一种认证机制（htpasswd命令）</span><br><span class=\"line\">  auth_basic           &quot;NginxStatus&quot;</span><br><span class=\"line\">  #用来制定认证的密码文件</span><br><span class=\"line\">  auth_basic_user_file ../htpasswd;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"># 各种错误信息返回页面</span><br><span class=\"line\">error_page  404              /404.html;</span><br><span class=\"line\">error_page  500 502 503 504  /50x.html;</span><br><span class=\"line\">location = /50x.html &#123;</span><br><span class=\"line\">  root   html;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"反向代理\"><a href=\"#反向代理\" class=\"headerlink\" title=\"反向代理\"></a>反向代理</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">http &#123;</span><br><span class=\"line\">  server &#123;</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">      proxy_pass http://localhost:8000/;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"路径配置\"><a href=\"#路径配置\" class=\"headerlink\" title=\"路径配置\"></a>路径配置</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># /i/logo.gif &lt;==&gt; /var/www/html/images/logo.gif</span><br><span class=\"line\">location /i &#123;</span><br><span class=\"line\">  # 相对路径</span><br><span class=\"line\">  alias /var/www/html/images/;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"># /download/ebook.tar.gz &lt;==&gt; /home/webdata/www/ebook.tar.gz</span><br><span class=\"line\">location ~ ^/download/(.*)$ &#123;</span><br><span class=\"line\">  # 根路径</span><br><span class=\"line\">  root /home/webdata/www/$1</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"># 正则</span><br><span class=\"line\">#只匹配对/目录的额查询</span><br><span class=\"line\">location = / &#123;...&#125;</span><br><span class=\"line\">#匹配所有/开始的查询</span><br><span class=\"line\">location / &#123;...&#125;</span><br><span class=\"line\">#匹配已/images/开头的查询</span><br><span class=\"line\">location ^~ /images/ &#123;...&#125;</span><br><span class=\"line\">#匹配以gif、jpg、jpeg、swf结尾的文件</span><br><span class=\"line\">location ~* \\.(gif|jpg|jpeg|swf)$ &#123;...&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Location [=|~\\~*|^~|@] /uri/&#123;</span><br><span class=\"line\">  ..</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"># = ：完全匹配</span><br><span class=\"line\"># ~ ：字母大小写敏感</span><br><span class=\"line\"># ~*：忽略字母大小写</span><br><span class=\"line\"># ^~：只匹配前半部分</span><br><span class=\"line\"># @ ：内部重定向</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"权限\"><a href=\"#权限\" class=\"headerlink\" title=\"权限\"></a>权限</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">location /images &#123;</span><br><span class=\"line\">  root /var/....</span><br><span class=\"line\">  #允许目录遍历</span><br><span class=\"line\">  autoindex on；</span><br><span class=\"line\">  #显示文件字节数</span><br><span class=\"line\">  autoindex_exact_size off;</span><br><span class=\"line\">  #显示文件时间为服务器时间</span><br><span class=\"line\">  autoindex_localtime on;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"># IP访问控制：依次匹配检查</span><br><span class=\"line\">location / &#123;</span><br><span class=\"line\">  deny 192.168.66.80;</span><br><span class=\"line\">  allow 192.168.66.0/24;</span><br><span class=\"line\">  allow 192.16.88.0/16;</span><br><span class=\"line\">  deny all;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"># 禁止访问某目录</span><br><span class=\"line\">location ~ ^/(WEB-INF)/ &#123;</span><br><span class=\"line\">  deny all;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"># 禁止访问某文件</span><br><span class=\"line\">location ~* \\.(txt|doc)$ &#123;</span><br><span class=\"line\">  root /data/www/wwwroot</span><br><span class=\"line\">  deny all</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">#限制GET请求：GET、POST、PUT、HEAD、OPTIONS...</span><br><span class=\"line\">limit_except GET&#123;</span><br><span class=\"line\">  deny all;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"SSL硬件加速\"><a href=\"#SSL硬件加速\" class=\"headerlink\" title=\"SSL硬件加速\"></a>SSL硬件加速</h4><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">ssl_engine device;</span><br><span class=\"line\"><span class=\"comment\">#测试是否支持</span></span><br><span class=\"line\">openssl engine -t</span><br></pre></td></tr></table></figure>\n\n","categories":["linux"],"tags":["Web服务"]},{"title":"服务","url":"/2019/11/25/Linux/服务/","content":"<h2 id=\"Python工具\"><a href=\"#Python工具\" class=\"headerlink\" title=\"Python工具\"></a>Python工具</h2><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf8 -*-</span></span><br><span class=\"line\"><span class=\"string\">\"\"</span><span class=\"string\">\"</span></span><br><span class=\"line\"><span class=\"string\">Centos7 下注册为自启动服务机制</span></span><br><span class=\"line\"><span class=\"string\">支持start, restart, stop命令：systemctl start|restart|stop my_test_server</span></span><br><span class=\"line\"><span class=\"string\">1. 在工作路径下生成sh</span></span><br><span class=\"line\"><span class=\"string\">2. 把sh注册为服务</span></span><br><span class=\"line\"><span class=\"string\">3. 通过sh控制python</span></span><br><span class=\"line\"><span class=\"string\">\"</span><span class=\"string\">\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">import os</span><br><span class=\"line\">import sys</span><br><span class=\"line\">import time</span><br><span class=\"line\">import subprocess</span><br><span class=\"line\"></span><br><span class=\"line\">version = <span class=\"string\">'0.0.2'</span></span><br><span class=\"line\"></span><br><span class=\"line\">server_content = <span class=\"string\">''</span><span class=\"string\">'[Unit]</span></span><br><span class=\"line\"><span class=\"string\">Description=%(description)s</span></span><br><span class=\"line\"><span class=\"string\">After=network.target sshd.service</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">[Service]</span></span><br><span class=\"line\"><span class=\"string\">Type=simple</span></span><br><span class=\"line\"><span class=\"string\">ExecStart=%(sh)s start &amp;</span></span><br><span class=\"line\"><span class=\"string\">ExecReload=%(sh)s restart &amp;</span></span><br><span class=\"line\"><span class=\"string\">ExecStop=%(sh)s stop</span></span><br><span class=\"line\"><span class=\"string\">Restart=always</span></span><br><span class=\"line\"><span class=\"string\">RestartSec=10s</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">[Install]</span></span><br><span class=\"line\"><span class=\"string\">WantedBy=multi-user.target</span></span><br><span class=\"line\"><span class=\"string\">'</span><span class=\"string\">''</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def on_cmd(cmd):</span><br><span class=\"line\">    p = subprocess.Popen(cmd, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)</span><br><span class=\"line\">    d = p.stdout.read()</span><br><span class=\"line\">    <span class=\"keyword\">if</span> p.wait() != 0:</span><br><span class=\"line\">        <span class=\"comment\"># logging.error(\"cmd error: %s, returncode: %d\", cmd, p.returncode)</span></span><br><span class=\"line\">        <span class=\"built_in\">return</span> None</span><br><span class=\"line\">    <span class=\"built_in\">return</span> d</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def get_py_cmd(args):</span><br><span class=\"line\">    cmd = <span class=\"string\">''</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> arg <span class=\"keyword\">in</span> args:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> arg:</span><br><span class=\"line\">            cmd += <span class=\"string\">' '</span> + arg</span><br><span class=\"line\">    <span class=\"built_in\">return</span> cmd</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def install_sh(name, fn, work_path, args, python_args=None):</span><br><span class=\"line\">    with open(os.path.join(os.path.dirname(__file__), <span class=\"string\">'service.sh'</span>), <span class=\"string\">'r'</span>) as f:</span><br><span class=\"line\">        content = f.read()</span><br><span class=\"line\">        content = content % &#123;<span class=\"string\">'cmd'</span>: get_py_cmd([<span class=\"string\">'python'</span>, python_args, fn, args])&#125;</span><br><span class=\"line\">        fn_sh = os.path.join(work_path, name + <span class=\"string\">'.service.sh'</span>)</span><br><span class=\"line\">        with open(fn_sh, <span class=\"string\">'w'</span>) as sf:</span><br><span class=\"line\">            sf.write(content)</span><br><span class=\"line\">            <span class=\"built_in\">return</span> fn_sh</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def install(name, fn, args=None, work_path=None, description=None, python_args=None):</span><br><span class=\"line\">    <span class=\"comment\"># fn是相对路径</span></span><br><span class=\"line\">    <span class=\"comment\"># dir是工作路径: 默认fn所在位置</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> not work_path:</span><br><span class=\"line\">        work_path = os.path.dirname(fn)</span><br><span class=\"line\">    work_path = os.path.abspath(work_path)</span><br><span class=\"line\">    fn_sh = install_sh(name, fn, work_path, args, python_args)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> not fn_sh:</span><br><span class=\"line\">        <span class=\"built_in\">return</span> False</span><br><span class=\"line\">    with open(<span class=\"string\">'/usr/lib/systemd/system/%s.service'</span> % name, <span class=\"string\">'w'</span>) as f:</span><br><span class=\"line\">        d = &#123;</span><br><span class=\"line\">            <span class=\"string\">'name'</span>: name,</span><br><span class=\"line\">            <span class=\"string\">'sh'</span>: fn_sh,</span><br><span class=\"line\">            <span class=\"string\">'description'</span>: description</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        f.write(server_content % d)</span><br><span class=\"line\">        on_cmd(<span class=\"string\">\"chmod +x %s\"</span> % fn_sh)</span><br><span class=\"line\">        <span class=\"built_in\">return</span> True</span><br><span class=\"line\">    <span class=\"built_in\">return</span> False</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def uninstall(name):</span><br><span class=\"line\">    fn_service = <span class=\"string\">'/usr/lib/systemd/system/%s.service'</span> % name</span><br><span class=\"line\">    on_cmd(<span class=\"string\">\"rm -rf %s\"</span> % fn_service)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def check_exist(name):</span><br><span class=\"line\">    d = on_cmd(<span class=\"string\">\"ls /usr/lib/systemd/system/\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> d.find(<span class=\"string\">\"%s.service\"</span> % name) != -1:</span><br><span class=\"line\">        <span class=\"built_in\">return</span> True</span><br><span class=\"line\">    <span class=\"built_in\">return</span> False</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def <span class=\"built_in\">test</span>():</span><br><span class=\"line\">    name = <span class=\"string\">'my_test_server'</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> len(sys.argv) == 2:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> sys.argv[1] == <span class=\"string\">'install'</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> not check_exist(name):</span><br><span class=\"line\">                fn = __file__</span><br><span class=\"line\">                fn = os.path.split(fn)</span><br><span class=\"line\">                work_path = os.path.dirname(fn[0])  <span class=\"comment\"># 上级路径</span></span><br><span class=\"line\">                fn = os.path.basename(fn[0]) + <span class=\"string\">'.'</span> + os.path.splitext(fn[1])[0]  <span class=\"comment\"># 模块名称</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> install(name, fn, args=<span class=\"string\">\"test\"</span>, work_path=work_path,</span><br><span class=\"line\">                           description=<span class=\"string\">\"my_startup test\"</span>, python_args=<span class=\"string\">'-m'</span>):</span><br><span class=\"line\">                    <span class=\"built_in\">print</span> <span class=\"string\">'install success'</span></span><br><span class=\"line\">                <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                    <span class=\"built_in\">print</span> <span class=\"string\">'install fail'</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"built_in\">print</span> <span class=\"string\">'is install'</span></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> sys.argv[1] == <span class=\"string\">'uninstall'</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> check_exist(name):</span><br><span class=\"line\">                on_cmd(<span class=\"string\">\"rm -rf /usr/lib/systemd/system/%s.service\"</span> % name)</span><br><span class=\"line\">                <span class=\"built_in\">print</span> <span class=\"string\">'uninstall success'</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"built_in\">print</span> <span class=\"string\">'is uninstall'</span></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> sys.argv[1] == <span class=\"string\">'test'</span>:</span><br><span class=\"line\">            <span class=\"keyword\">while</span> 1:</span><br><span class=\"line\">                <span class=\"built_in\">print</span> <span class=\"string\">'test'</span></span><br><span class=\"line\">                time.sleep(10)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span> <span class=\"string\">\"arg: install/uninstall\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    <span class=\"built_in\">test</span>()</span><br></pre></td></tr></table></figure>\n\n","categories":["linux"],"tags":["服务"]},{"title":"RabbitMQ","url":"/2019/11/25/DB/RabbitMQ/","content":"<h2 id=\"常用\"><a href=\"#常用\" class=\"headerlink\" title=\"常用\"></a>常用</h2><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 队列数据量</span></span><br><span class=\"line\">rabbitmqctl list_queues</span><br><span class=\"line\">rabbitmqctl list_queues | awk <span class=\"string\">'&#123;if($2!=0) &#123;print $0&#125;&#125;'</span></span><br><span class=\"line\">rabbitmqctl list_queues | grep 3701028953</span><br><span class=\"line\">rabbitmqctl list_connections | awk <span class=\"string\">'&#123;if($1==\"weixin_new\") &#123;print $0&#125;&#125;'</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p><code>pip install pika</code></p>\n<ul>\n<li>Broker：简单来说就是消息队列服务器实体。</li>\n<li>Exchange：消息交换机，它指定消息按什么规则，路由到哪个队列。</li>\n<li>Queue：消息队列载体，每个消息都会被投入到一个或多个队列。</li>\n<li>Binding：绑定，它的作用就是把exchange和queue按照路由规则绑定起来。</li>\n<li>Routing Key：路由关键字，exchange根据这个关键字进行消息投递。</li>\n<li>vhost：虚拟主机，一个broker里可以开设多个vhost，用作不同用户的权限分离。</li>\n<li>producer：消息生产者，就是投递消息的程序。</li>\n<li>consumer：消息消费者，就是接受消息的程序。</li>\n<li>channel：消息通道，在客户端的每个连接里，可建立多个channel，每个channel代表一个会话任务</li>\n</ul>\n<h3 id=\"Windows配置\"><a href=\"#Windows配置\" class=\"headerlink\" title=\"Windows配置\"></a>Windows配置</h3><p>rabbitmq自带管理后台，安装后需要配置开启</p>\n<ul>\n<li>进入rabbitmq安装目录中的sbin目录执行<code>rabbitmq-plugins enable rabbitmq_management</code><ul>\n<li>重启 <code>systemctl restart rabbitmq-server.service</code></li>\n<li>配置远程rabbit访问：修改 <code>ebin/rabbit.app</code></li>\n<li>找到loopback_users里的&lt;&lt;”guest”&gt;&gt;并删除。</li>\n<li>重启 <code>systemctl restart rabbitmq-server.service</code></li>\n</ul>\n</li>\n<li>常用指令<ul>\n<li>停止 <code>net stop RabbitMQ</code></li>\n<li>启动 <code>net start RabbitMQ</code></li>\n<li>如果上面的重启命令不起作用，使用 net stop RabbitMQ &amp;&amp; net start RabbitMQ</li>\n</ul>\n</li>\n<li>设置远程访问<ul>\n<li>配置之前需要先添加用户，用于外网的访问</li>\n<li>通过web管理页面来添加用户和密码，使用<code>guest</code>登录web管理页面<ul>\n<li><code>http://localhost:15672</code></li>\n<li>进入<code>admin</code>标签页，然后点击<code>Add a user</code></li>\n<li>输入新建的帐号密码，然后选择用户角色tags（选admin）;</li>\n</ul>\n</li>\n<li>授权<ul>\n<li>在Admin标签页下点击新增的用户 “用户名”，进入授权页面(默认直接点击”set permission”即可)</li>\n</ul>\n</li>\n<li>用户以及授权添加完成之后，在etc/rabbitmq.config.example文件中，添加以下内容<ul>\n<li>{tcp_listeners, [5672]},</li>\n<li>{loopback_users, [“admin”]},<ul>\n<li><code>admin</code>为用户名</li>\n</ul>\n</li>\n<li>保存后重启RabbitMQ服务<ul>\n<li>如果不能保存，请先停止rabbitmq服务</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>在浏览器中输入<code>http://127.0.0.1:15672</code>实现通过IP地址访问，成功登录<ul>\n<li>如不能访问 请检查防火墙</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Centos7安装\"><a href=\"#Centos7安装\" class=\"headerlink\" title=\"Centos7安装\"></a>Centos7安装</h3><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 本地文件存在则使用安装包，否则下载安装</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">yumInstall</span></span>()&#123;</span><br><span class=\"line\">    install_name=<span class=\"variable\">$1</span></span><br><span class=\"line\">    local_fn=./install/<span class=\"variable\">$2</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> [ -f <span class=\"string\">\"<span class=\"variable\">$local_fn</span>\"</span> ]</span><br><span class=\"line\">    <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">\"yum localinstall <span class=\"variable\">$local_fn</span> -y\"</span></span><br><span class=\"line\">        yum localinstall <span class=\"variable\">$local_fn</span> -y</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">\"yum install <span class=\"variable\">$install_name</span> -y\"</span></span><br><span class=\"line\">        yum install <span class=\"variable\">$install_name</span> -y</span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">set</span> -e</span><br><span class=\"line\"><span class=\"built_in\">set</span> -u</span><br><span class=\"line\"><span class=\"built_in\">set</span> -v</span><br><span class=\"line\">. ./yum-install.sh</span><br><span class=\"line\"><span class=\"comment\">#==============================================</span></span><br><span class=\"line\"><span class=\"comment\"># rabbitmq服务</span></span><br><span class=\"line\">yumInstall erlang erlang-R16B-03.18.el7.x86_64.rpm</span><br><span class=\"line\">yumInstall rabbitmq-server.noarch rabbitmq-server-3.3.5-34.el7.noarch.rpm</span><br><span class=\"line\"><span class=\"comment\">#==============================================</span></span><br><span class=\"line\"><span class=\"comment\"># amqp支持</span></span><br><span class=\"line\">yumInstall php72w-devel.x86_64 php72w-devel-7.2.2-1.w7.x86_64.rpm     <span class=\"comment\">#目的是准备phpize命令</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># wget -c https://github.com/alanxz/rabbitmq-c/releases/download/v0.8.0/rabbitmq-c-0.8.0.tar.gz</span></span><br><span class=\"line\">tar zxvf rabbitmq-c-0.8.0.tar.gz</span><br><span class=\"line\"><span class=\"built_in\">cd</span> rabbitmq-c-0.8.0</span><br><span class=\"line\">./configure --prefix=/usr/<span class=\"built_in\">local</span>/rabbitmq-c-0.8.0    <span class=\"comment\"># 指定安装目录</span></span><br><span class=\"line\">make &amp;&amp; make install</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># wget -c http://pecl.php.net/get/amqp-1.7.0.tgz     # pecl install amqp-1.7.0.tgz</span></span><br><span class=\"line\">tar zxf amqp-1.7.0.tgz</span><br><span class=\"line\"><span class=\"built_in\">cd</span> amqp-1.7.0</span><br><span class=\"line\">phpize</span><br><span class=\"line\">./configure --with-php-config=/usr/bin/php-config --with-amqp --with-librabbitmq-dir=/usr/<span class=\"built_in\">local</span>/rabbitmq-c-0.8.0/</span><br><span class=\"line\">make &amp;&amp; make install</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 修改php.ini 加入：extension=amqp.so</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> extension=amqp.so &gt; /etc/php.d/amqp.ini</span><br><span class=\"line\"><span class=\"comment\">#==============================================</span></span><br><span class=\"line\">systemctl start rabbitmq-server.service</span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> rabbitmq-server.service</span><br><span class=\"line\"></span><br><span class=\"line\">rabbitmq-plugins <span class=\"built_in\">enable</span> rabbitmq_management <span class=\"comment\"># 启用Web控制台</span></span><br><span class=\"line\">systemctl restart rabbitmq-server.service</span><br><span class=\"line\"></span><br><span class=\"line\">rabbitmqctl delete_user guest</span><br><span class=\"line\"></span><br><span class=\"line\">systemctl restart rabbitmq-server.service</span><br><span class=\"line\">rabbitmqctl set_policy policy <span class=\"string\">\"^\"</span> <span class=\"string\">'&#123;\"ha-mode\":\"all\"&#125;'</span></span><br><span class=\"line\"><span class=\"comment\">#==============================================</span></span><br><span class=\"line\"><span class=\"comment\"># 调整防火墙</span></span><br><span class=\"line\"><span class=\"comment\"># rabbitmq - Web</span></span><br><span class=\"line\"><span class=\"comment\"># firewall-cmd --permanent --add-rich-rule 'rule family=ipv4 source address=172.19.0.0/16 port port=15672 protocol=tcp accept'</span></span><br><span class=\"line\">firewall-cmd --add-port=15672/tcp --permanent</span><br><span class=\"line\"><span class=\"comment\"># rabbitmq</span></span><br><span class=\"line\">firewall-cmd --add-port=5672/tcp --permanent</span><br><span class=\"line\"><span class=\"comment\"># rabbitmq 集群</span></span><br><span class=\"line\">firewall-cmd --permanent --add-rich-rule <span class=\"string\">'rule family=ipv4 source address=172.19.0.0/16 port port=4369 protocol=tcp accept'</span></span><br><span class=\"line\">firewall-cmd --permanent --add-rich-rule <span class=\"string\">'rule family=ipv4 source address=172.19.0.0/16 port port=25672 protocol=tcp accept'</span></span><br><span class=\"line\">firewall-cmd --reload</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Centos7集群\"><a href=\"#Centos7集群\" class=\"headerlink\" title=\"Centos7集群\"></a>Centos7集群</h3><ul>\n<li>集群 =&gt; join_cluster 需要根据域名配置</li>\n<li>修改hostname, N调整为对应数字<ul>\n<li><code>hostnamectl set-hostname dianduweixin-ecsN</code></li>\n</ul>\n</li>\n<li>集群所有机器配置调整: 内网IP 与 hostname对应<ul>\n<li><code>vi /etc/hosts</code></li>\n</ul>\n</li>\n<li>复制主节点cookie到所有子节点, 并重启服务<ul>\n<li><code>scp /var/lib/rabbitmq/.erlang.cookie root@ip:/var/lib/rabbitmq/.erlang.cookie.1</code></li>\n<li><code>systemctl restart rabbitmq-server.service</code></li>\n</ul>\n</li>\n<li>登录子节点, cookies改名, 并调整权限<ul>\n<li><code>mv /var/lib/rabbitmq/.erlang.cookie /var/lib/rabbitmq/.erlang.cookie.bak</code></li>\n<li><code>mv /var/lib/rabbitmq/.erlang.cookie.1 /var/lib/rabbitmq/.erlang.cookie</code></li>\n<li><code>chown rabbitmq /var/lib/rabbitmq/.erlang.cookie</code></li>\n<li><code>chgrp rabbitmq /var/lib/rabbitmq/.erlang.cookie</code></li>\n<li><code>chmod 400 /var/lib/rabbitmq/.erlang.cookie</code></li>\n<li><code>systemctl restart rabbitmq-server.service</code></li>\n<li>备注：一定要调整为指定权限，否则cookie文件不生效</li>\n</ul>\n</li>\n<li>子节点 添加到集群<ul>\n<li><code>rabbitmqctl stop_app</code></li>\n<li><code>rabbitmqctl reset</code></li>\n<li><code>rabbitmqctl join_cluster rabbit@dianduweixin-ecs1</code></li>\n<li><code>rabbitmqctl start_app</code></li>\n</ul>\n</li>\n<li>确认节点添加成功<ul>\n<li><code>rabbitmqctl cluster_status</code></li>\n</ul>\n</li>\n<li>确认用户名<ul>\n<li><code>rabbitmqctl list_users</code></li>\n</ul>\n</li>\n<li>确认镜像策略(WEB)<ul>\n<li>删除guest <code>rabbitmqctl delete_user guest</code></li>\n<li>追加用户 <code>rabbitmqctl add_user (用户名) (密码)</code></li>\n<li>调整权限<ul>\n<li><code>rabbitmqctl set_user_tags (用户名) administrator</code></li>\n<li><code>rabbitmqctl set_permissions -p / (用户名) &quot;.*&quot; &quot;.*&quot; &quot;.*&quot;</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>文件连接数<ul>\n<li>查看: <code>rabbitmqctl status</code><ul>\n<li>{total_limit,19900},</li>\n<li>{total_used,394},</li>\n<li>{sockets_limit,17908},</li>\n<li>{sockets_used,392},</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>最大内存占用 <code>/etc/rabbitmq/rabbitmq.config</code><ul>\n<li><code>vm_memory_high_watermark</code> 改为 <code>0.8</code></li>\n<li><code>heartbeat</code> 改为 <code>600</code></li>\n<li><code>rabbitmqctl set_vm_memory_high_watermark 0.8</code>: 命令行即时生效, 不写入配置文件，重启就无效了</li>\n</ul>\n</li>\n<li>通过修改sysctl配置，提高系统的打开文件数量<ul>\n<li><code>vi /etc/sysctl.conf</code> 添加 <code>fs.file-max = 65535</code></li>\n<li>系统配置重载 <code>sysctl -p</code></li>\n</ul>\n</li>\n<li>修改rabbitmq配置<ul>\n<li><code>vi /etc/systemd/system/multi-user.target.wants/rabbitmq-server.service</code></li>\n<li>在[Service]中，增加 <code>LimitNOFILE=20000</code></li>\n</ul>\n</li>\n<li>重启rabbitmq<ul>\n<li><code>systemctl daemon-reload</code></li>\n<li><code>systemctl restart rabbitmq-server</code></li>\n</ul>\n</li>\n</ul>\n","categories":["RabbitMQ"],"tags":["RabbitMQ"]},{"title":"系统","url":"/2019/11/22/Linux/系统/","content":"<h2 id=\"磁盘\"><a href=\"#磁盘\" class=\"headerlink\" title=\"磁盘\"></a>磁盘</h2><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 磁盘容量</span></span><br><span class=\"line\">df -lh</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看当前目录总共占的容量。而不单独列出各子项占用的容量</span></span><br><span class=\"line\">du -sh</span><br><span class=\"line\"><span class=\"comment\"># 查看当前目录下一级子文件和子目录占用的磁盘容量</span></span><br><span class=\"line\">du -lh --max-depth=1</span><br><span class=\"line\"><span class=\"comment\"># 统计当前文件夹(目录)大小，并按文件大小排序</span></span><br><span class=\"line\">du -sh * | sort -n</span><br><span class=\"line\"><span class=\"comment\"># 查看指定文件大小</span></span><br><span class=\"line\">du -sk filename</span><br></pre></td></tr></table></figure>\n\n","categories":["linux"],"tags":["磁盘"]},{"title":"MySQL-优化","url":"/2019/11/22/DB/MySQL-优化/","content":"<h2 id=\"SELECT优化\"><a href=\"#SELECT优化\" class=\"headerlink\" title=\"SELECT优化\"></a>SELECT优化</h2><p>频繁操作的库不适合开启查询缓存</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 当你查询表的有些时候，你已经知道结果只会有一条结果，但因为你可能需要去fetch游标，或是你也许会去检查返回的记录数。</span></span><br><span class=\"line\"><span class=\"comment\">-- 在这种情况下，加上 LIMIT 1 可以增加性能。这样一样，MySQL数据库引擎会在找到一条数据后停止搜索，而不是继续往后查少下一条符合记录的数据。</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> tn <span class=\"keyword\">where</span> <span class=\"keyword\">id</span> = <span class=\"number\">1</span> <span class=\"keyword\">LIMIT</span> <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"表优化\"><a href=\"#表优化\" class=\"headerlink\" title=\"表优化\"></a>表优化</h2><ul>\n<li>VARCHAR -&gt; ENUM<ul>\n<li>ENUM 类型是非常快和紧凑的。在实际上，其保存的是 TINYINT，但其外表上显示为字符串。</li>\n<li>这样一来，用这个字段来做一些选项列表变得相当的完美; 比如“性别”，“国家”，“民族”，“状态”或“部门”，字段的取值是有限而且固定的</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"查询缓存检查是否开启\"><a href=\"#查询缓存检查是否开启\" class=\"headerlink\" title=\"查询缓存检查是否开启\"></a>查询缓存检查是否开启</h3><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">variables</span> <span class=\"keyword\">like</span> <span class=\"string\">'%cache%'</span>;</span><br><span class=\"line\"><span class=\"comment\">-- query_cache_size</span></span><br><span class=\"line\"><span class=\"comment\">-- query_cache_type = 0/1</span></span><br><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">variables</span> <span class=\"keyword\">like</span> <span class=\"string\">'%qcache%'</span>;        <span class=\"comment\">-- 命中情况</span></span><br><span class=\"line\"><span class=\"comment\">-- Qcache_hits</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 0: 关闭, 1: 开启</span></span><br><span class=\"line\"><span class=\"comment\">-- 临时关闭</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> <span class=\"keyword\">global</span> query_cache_size=<span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> <span class=\"keyword\">global</span> query_cache_type=<span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"comment\">-- 永久关闭: 修改配置文件my.cnf</span></span><br><span class=\"line\">query_cache_type=<span class=\"number\">0</span></span><br><span class=\"line\">query_cache_size=<span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 语句指定</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> sql_no_cache <span class=\"keyword\">count</span>(*) <span class=\"keyword\">from</span> <span class=\"keyword\">users</span>;    <span class=\"comment\">-- 无缓存</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">sql_cache</span> <span class=\"keyword\">count</span>(*) <span class=\"keyword\">from</span> <span class=\"keyword\">users</span>;       <span class=\"comment\">-- 缓存</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 单条大数据</span></span><br><span class=\"line\"><span class=\"comment\">-- 默认1M, 改为10M</span></span><br><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">variables</span> <span class=\"keyword\">like</span> <span class=\"string\">'max_allowed_packet'</span>;</span><br><span class=\"line\"><span class=\"keyword\">set</span> <span class=\"keyword\">global</span> max_allowed_packet = <span class=\"number\">10</span>*<span class=\"number\">1024</span>*<span class=\"number\">1024</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 特定函数导致不缓存</span></span><br><span class=\"line\"><span class=\"comment\">-- 某些查询语句会让MySQL不使用缓存。请看下面的示例：</span></span><br><span class=\"line\"><span class=\"comment\">-- 查询缓存不开启</span></span><br><span class=\"line\">$r = mysql_query(<span class=\"string\">\"SELECT username FROM user WHERE signup_date &gt;= CURDATE()\"</span>);</span><br><span class=\"line\"><span class=\"comment\">-- 开启查询缓存</span></span><br><span class=\"line\">$today = date(\"Y-m-d\");</span><br><span class=\"line\">$r = mysql_query(\"<span class=\"keyword\">SELECT</span> username <span class=\"keyword\">FROM</span> <span class=\"keyword\">user</span> <span class=\"keyword\">WHERE</span> signup_date &gt;= <span class=\"string\">'$today'</span><span class=\"string\">\");</span></span><br><span class=\"line\"><span class=\"string\">-- 上面两条SQL语句的差别就是 CURDATE() ，MySQL的查询缓存对这个函数不起作用。</span></span><br><span class=\"line\"><span class=\"string\">-- 所以，像 NOW() 和 RAND() 或是其它的诸如此类的SQL函数都不会开启查询缓存，因为这些函数的返回是会不定的易变的。</span></span><br><span class=\"line\"><span class=\"string\">-- 所以，你所需要的就是用一个变量来代替MySQL的函数，从而开启缓存。</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">-- 无缓冲查询</span></span><br><span class=\"line\"><span class=\"string\">-- 并不像mysql_query()一样去自动fethch和缓存结果。这会相当节约很多可观的内存，尤其是那些会产生大量结果的查询语句</span></span><br><span class=\"line\"><span class=\"string\">-- 你不需要等到所有的结果都返回，只需要第一行数据返回的时候，你就可以开始马上开始工作于查询结果了。</span></span><br><span class=\"line\"><span class=\"string\">mysql_unbuffered_query()</span></span><br><span class=\"line\"><span class=\"string\">-- 限制：你要么把所有行都读走，或是你要在进行下一次的查询前调用mysql_free_result() 清除结果</span></span><br><span class=\"line\"><span class=\"string\">-- 而且， mysql_num_rows() 或 mysql_data_seek() 将无法使用。</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"索引优化\"><a href=\"#索引优化\" class=\"headerlink\" title=\"索引优化\"></a>索引优化</h2><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">EXPLAIN</span> <span class=\"keyword\">SELECT</span> <span class=\"keyword\">COUNT</span>(*) <span class=\"keyword\">FROM</span> shengyibao.icafe_services <span class=\"keyword\">WHERE</span> <span class=\"keyword\">id</span>=<span class=\"string\">\"1\"</span>;</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>项</th>\n<th>值</th>\n<th>描述</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>id</td>\n<td></td>\n<td>如果多条的话, 代表该语句分多次运行, id顺序代表执行顺序</td>\n<td></td>\n</tr>\n<tr>\n<td>select_type</td>\n<td>simple</td>\n<td>表示简单查询</td>\n<td>查询类型</td>\n</tr>\n<tr>\n<td></td>\n<td>primary</td>\n<td>最外层的 select 查询</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>DEPENDENT SUBQUERY</td>\n<td>子查询中的第一个 select 查询,依赖于外部 查询的结果集</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>DERIVED</td>\n<td>用于 from 子句里有子查询的情况。 MySQL 会 递归执行这些子查询, 把结果放在临时表里。</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>UNCACHEABLE SUBQUERY</td>\n<td>结果集不能被缓存的子查询,必须重新为外 层查询的每一行进行评估。</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>UNCACHEABLE UNION</td>\n<td>UNION 中的第二个或随后的 select 查询,属 于不可缓存的子查询</td>\n<td></td>\n</tr>\n<tr>\n<td>type</td>\n<td>system</td>\n<td>表仅有一行, const的特例</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>const</td>\n<td>const 用于用常数值比较 PRIMARY KEY 时。当 查询的表仅有一行时,使用 System。</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>eq_ref</td>\n<td>关联表 - 最多匹配一行, 除const外最优</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>ref</td>\n<td>关联表 - 所有内容都是索引关联</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>ref_or_null</td>\n<td>等同于ref+NULL判断</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>ref_or_null</td>\n<td>等同于ref+NULL判断</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>index_merge</td>\n<td>索引合并优化方法 - 查询中使用多个索引</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>key</td>\n<td>列包含了使用的索引的清单</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>unique_subquery</td>\n<td>子查询, 不建议使用</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>index_subquery</td>\n<td>子查询, 使用非唯一性索引</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>range</td>\n<td>范围查询</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>index</td>\n<td>索引全表扫描</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>all</td>\n<td>行全表扫描</td>\n<td></td>\n</tr>\n<tr>\n<td>possible_keys</td>\n<td></td>\n<td>指出 MySQL 能在该表中使用哪些索引有助于 查询。如果为空,说明没有可用的索引。</td>\n<td></td>\n</tr>\n<tr>\n<td>key</td>\n<td></td>\n<td>MySQL 实际从 possible_key 选择使用的索引。 如果为 NULL,则没有使用索引。</td>\n<td></td>\n</tr>\n<tr>\n<td>key_length</td>\n<td></td>\n<td>使用的索引长度, 越小也好</td>\n<td></td>\n</tr>\n<tr>\n<td>ref</td>\n<td></td>\n<td>显示索引的哪一列被使用了</td>\n<td></td>\n</tr>\n<tr>\n<td>rows</td>\n<td></td>\n<td>检查行数, 越小越好</td>\n<td></td>\n</tr>\n<tr>\n<td>Extra</td>\n<td>Using Index</td>\n<td>使用索引</td>\n<td>解决查询的详细信息</td>\n</tr>\n<tr>\n<td></td>\n<td>using filesort</td>\n<td>外部排序</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>Using temporary</td>\n<td>使用到临时表</td>\n<td></td>\n</tr>\n</tbody></table>\n<h2 id=\"配置优化\"><a href=\"#配置优化\" class=\"headerlink\" title=\"配置优化\"></a>配置优化</h2><ul>\n<li>table_open_cache<ul>\n<li>该值比较大时, 占用内存较多</li>\n<li>建议值: max_connections * 表数目, 一段时间内可能打开的表对象总和</li>\n<li>释放规则:<ul>\n<li>当缓冲已满，而连接想要打开一个不在缓冲中的表时。</li>\n<li>当缓冲数目已经超过了table_open_cache设置的值，mysql开始使用LRU算法释放表对象。</li>\n<li>当你用flush tables;语句时。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SHOW</span> <span class=\"keyword\">GLOBAL</span> <span class=\"keyword\">STATUS</span> <span class=\"keyword\">LIKE</span> <span class=\"string\">'Open%tables'</span></span><br><span class=\"line\"><span class=\"comment\">-- Open_tables: 当前打开的table对象数量</span></span><br><span class=\"line\"><span class=\"comment\">-- Opened_tables: 打开过的表的数量总和</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- MYSQL运行时长</span></span><br><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">global</span> <span class=\"keyword\">status</span> <span class=\"keyword\">like</span> <span class=\"string\">'uptime'</span>;</span><br><span class=\"line\"><span class=\"comment\">-- Opened_tables/Uptime的值过大说明table_open_cache过小，</span></span><br><span class=\"line\">  <span class=\"comment\">-- 导致一些table对象（即下文说的table对象）经常会刷出server层，需要的时候再创建，最终导致此计数过大。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 当前打开的表</span></span><br><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">open</span> <span class=\"keyword\">tables</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"碎片整理\"><a href=\"#碎片整理\" class=\"headerlink\" title=\"碎片整理\"></a>碎片整理</h2><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 在OPTIMIZE TABLE运行过程中，MySQL会锁定表</span></span><br><span class=\"line\"><span class=\"comment\">-- delete 操作不能够直接回收被删除数据占用的数据文件空间</span></span><br><span class=\"line\"><span class=\"keyword\">OPTIMIZE</span> [<span class=\"keyword\">LOCAL</span> | <span class=\"keyword\">NO_WRITE_TO_BINLOG</span>] <span class=\"keyword\">TABLE</span> tbl_name [, tbl_name] ...</span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> 表名 <span class=\"keyword\">ENGINE</span> = <span class=\"keyword\">Innodb</span>; <span class=\"comment\">-- 空alter语句，但是也会达到优化的效果，它会重建整个表</span></span><br><span class=\"line\"><span class=\"comment\">-- 表数据状态</span></span><br><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">table</span> <span class=\"keyword\">status</span>;</span><br><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">table</span> <span class=\"keyword\">STATUS</span> <span class=\"keyword\">like</span> <span class=\"string\">'表名'</span>;</span><br><span class=\"line\"><span class=\"comment\">-- 分析表</span></span><br><span class=\"line\"><span class=\"keyword\">ANALYZE</span> <span class=\"keyword\">TABLE</span> 表名;    <span class=\"comment\">-- 分析表, 关键字分布等，确保show查询的表状态是正确的</span></span><br><span class=\"line\"><span class=\"comment\">-- 备记</span></span><br><span class=\"line\"><span class=\"comment\">-- 优化表+重组数据，并不会完全释放剩余空间(Data_free)，根据表当前数据量可能会保留一部分(通常是默认值1-4M，压缩表2M，非压缩表4M)</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"状态检查\"><a href=\"#状态检查\" class=\"headerlink\" title=\"状态检查\"></a>状态检查</h2><h3 id=\"磁盘占用\"><a href=\"#磁盘占用\" class=\"headerlink\" title=\"磁盘占用\"></a>磁盘占用</h3><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 重新统计: 否则磁盘占用分析可能不准</span></span><br><span class=\"line\"><span class=\"keyword\">ANALYZE</span> <span class=\"keyword\">TABLE</span> 表名;    <span class=\"comment\">-- 分析表, 关键字分布等</span></span><br><span class=\"line\"><span class=\"keyword\">OPTIMIZE</span> <span class=\"keyword\">TABLE</span> 表名;   <span class=\"comment\">-- 优化表, 索引碎片等(重建索引)</span></span><br><span class=\"line\"><span class=\"comment\">-- 遍历库大小</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span></span><br><span class=\"line\">  table_schema,</span><br><span class=\"line\">  <span class=\"keyword\">sum</span>(data_length + index_length + data_free) / <span class=\"number\">1024</span> / <span class=\"number\">1024</span> <span class=\"keyword\">AS</span> total_mb,</span><br><span class=\"line\">  <span class=\"keyword\">sum</span>(data_length) / <span class=\"number\">1024</span> / <span class=\"number\">1024</span> <span class=\"keyword\">AS</span> data_mb,</span><br><span class=\"line\">  <span class=\"keyword\">sum</span>(index_length) / <span class=\"number\">1024</span> / <span class=\"number\">1024</span> <span class=\"keyword\">AS</span> index_mb,</span><br><span class=\"line\">  <span class=\"keyword\">sum</span>(data_free) / <span class=\"number\">1024</span> / <span class=\"number\">1024</span> <span class=\"keyword\">AS</span> free_mb,</span><br><span class=\"line\">  <span class=\"keyword\">count</span>(*) <span class=\"keyword\">AS</span> <span class=\"keyword\">TABLES</span>,</span><br><span class=\"line\">  <span class=\"keyword\">curdate</span>() <span class=\"keyword\">AS</span> today</span><br><span class=\"line\"><span class=\"keyword\">FROM</span></span><br><span class=\"line\">  information_schema. <span class=\"keyword\">TABLES</span></span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span></span><br><span class=\"line\">  table_schema</span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> total_mb <span class=\"keyword\">DESC</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 指定库 表大小</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span></span><br><span class=\"line\">  table_name,</span><br><span class=\"line\">  (data_length / <span class=\"number\">1024</span> / <span class=\"number\">1024</span>) <span class=\"keyword\">AS</span> data_mb,</span><br><span class=\"line\">  (index_length / <span class=\"number\">1024</span> / <span class=\"number\">1024</span>) <span class=\"keyword\">AS</span> index_mb,</span><br><span class=\"line\">  (data_free / <span class=\"number\">1024</span> / <span class=\"number\">1024</span>) <span class=\"keyword\">AS</span> free_mb,</span><br><span class=\"line\">  ((data_length + index_length + data_free) / <span class=\"number\">1024</span> / <span class=\"number\">1024</span>) <span class=\"keyword\">AS</span> all_mb,</span><br><span class=\"line\">  table_rows</span><br><span class=\"line\"><span class=\"keyword\">FROM</span></span><br><span class=\"line\">  information_schema.TABLES</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span></span><br><span class=\"line\">  table_schema = <span class=\"string\">'netbaropt'</span></span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> all_mb <span class=\"keyword\">DESC</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 实际磁盘占用: 要包含空洞 data_free</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">sum</span>(data_length + index_length + data_free) / <span class=\"number\">1024</span> / <span class=\"number\">1024</span> <span class=\"keyword\">from</span> information_schema.tables;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"内存占用\"><a href=\"#内存占用\" class=\"headerlink\" title=\"内存占用\"></a>内存占用</h3><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FLUSH</span> <span class=\"keyword\">TABLES</span>;</span><br><span class=\"line\"><span class=\"keyword\">FLUSH</span> <span class=\"keyword\">STATUS</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 清理: FLUSH, 缓慢释放已占用内存</span></span><br><span class=\"line\"><span class=\"keyword\">FLUSH</span> flush_option [,flush_option]</span><br><span class=\"line\"><span class=\"comment\">-- HOSTS: 清空主机缓存表</span></span><br><span class=\"line\"><span class=\"comment\">-- LOGS:  关闭当前的二进制日志文件并创建一个新文件</span></span><br><span class=\"line\"><span class=\"comment\">-- TABLES: 关闭所有打开的表，同时该操作将会清空查询缓存中的内容。</span></span><br><span class=\"line\">        <span class=\"comment\">-- FLUSH TABLES WITH READ LOCK  关闭所有打开的表，同时对于所有数据库中的表都加一个读锁</span></span><br><span class=\"line\">        <span class=\"comment\">-- 直到显示地执行unlock tables，该操作常常用于数据备份的时候。</span></span><br><span class=\"line\"><span class=\"comment\">-- STATUS: 重置大多数状态变量到0。</span></span><br><span class=\"line\"><span class=\"comment\">-- QUERY CACHE: 重整查询缓存，消除其中的碎片，提高性能，但是并不影响查询缓存中现有的数据，</span></span><br><span class=\"line\">             <span class=\"comment\">-- 这点和Flush table 和Reset Query  Cache（将会清空查询缓存的内容）不一样的。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 各种内存空间配置项</span></span><br><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">variables</span> <span class=\"keyword\">where</span> variable_name <span class=\"keyword\">in</span> (</span><br><span class=\"line\"><span class=\"string\">'innodb_buffer_pool_size'</span>,<span class=\"string\">'innodb_log_buffer_size'</span>,<span class=\"string\">'innodb_additional_mem_pool_size'</span>,<span class=\"string\">'key_buffer_size'</span>,<span class=\"string\">'query_cache_size'</span></span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">variables</span> <span class=\"keyword\">where</span> variable_name <span class=\"keyword\">in</span> (</span><br><span class=\"line\"><span class=\"string\">'read_buffer_size'</span>,<span class=\"string\">'read_rnd_buffer_size'</span>,<span class=\"string\">'sort_buffer_size'</span>,<span class=\"string\">'join_buffer_size'</span>,<span class=\"string\">'binlog_cache_size'</span>,<span class=\"string\">'tmp_table_size'</span></span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\">used_Mem = key_buffer_size + query_cache_size + innodb_buffer_pool_size</span><br><span class=\"line\">used_Mem += innodb_log_buffer_size</span><br><span class=\"line\">used_Mem += 210 * (</span><br><span class=\"line\">    read_buffer_size</span><br><span class=\"line\">    + read_rnd_buffer_size</span><br><span class=\"line\">    + sort_buffer_size</span><br><span class=\"line\">    + join_buffer_size</span><br><span class=\"line\">    + binlog_cache_size</span><br><span class=\"line\">    + tmp_table_size</span><br><span class=\"line\">    + thread_stack</span><br><span class=\"line\">    + thread_cache_size</span><br><span class=\"line\">    + net_buffer_length</span><br><span class=\"line\">    + bulk_insert_buffer_size</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"未提交事务\"><a href=\"#未提交事务\" class=\"headerlink\" title=\"未提交事务\"></a>未提交事务</h3><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> t.trx_mysql_thread_id <span class=\"keyword\">from</span> information_schema.innodb_trx t;</span><br><span class=\"line\"><span class=\"comment\">-- kill 3836183;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 查询 正在执行的事务：</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> information_schema.INNODB_TRX;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 查看正在锁的事务</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> INFORMATION_SCHEMA.INNODB_LOCKS; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 查看等待锁的事务</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> INFORMATION_SCHEMA.INNODB_LOCK_WAITS;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 长时间未结束的查询</span></span><br><span class=\"line\"><span class=\"comment\">-- COMMAND='Query' AND INFO IS NOT NULL</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> information_schema.<span class=\"string\">`PROCESSLIST`</span> <span class=\"keyword\">where</span> <span class=\"keyword\">id</span> &lt;&gt; CONNECTION_ID() <span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> <span class=\"built_in\">time</span> <span class=\"keyword\">desc</span>;</span><br><span class=\"line\"><span class=\"comment\">-- 长时间执行的查询(1小时), 可以直接kill掉返回的id</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> information_schema.processlist</span><br><span class=\"line\"><span class=\"keyword\">where</span> <span class=\"built_in\">time</span> &gt;= <span class=\"number\">3600</span> <span class=\"keyword\">and</span> command <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> (<span class=\"string\">'sleep'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">and</span> <span class=\"keyword\">user</span> <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> (<span class=\"string\">'system user'</span>, <span class=\"string\">'replicator'</span>, <span class=\"string\">'aurora'</span>, <span class=\"string\">'event_scheduler'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">and</span> state <span class=\"keyword\">not</span> <span class=\"keyword\">like</span> (<span class=\"string\">'waiting for table%lock'</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"锁等待\"><a href=\"#锁等待\" class=\"headerlink\" title=\"锁等待\"></a>锁等待</h3><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> l.* <span class=\"keyword\">FROM</span></span><br><span class=\"line\">  (</span><br><span class=\"line\">    <span class=\"keyword\">SELECT</span> <span class=\"string\">'Blocker'</span> <span class=\"keyword\">role</span>, p.id, p.USER,</span><br><span class=\"line\">      <span class=\"keyword\">LEFT</span> ( p.HOST, <span class=\"keyword\">locate</span>(<span class=\"string\">':'</span>, p.HOST) - <span class=\"number\">1</span> ) HOST,</span><br><span class=\"line\">      tx.trx_id, tx.trx_state, tx.trx_started,</span><br><span class=\"line\">      <span class=\"keyword\">timestampdiff</span>( <span class=\"keyword\">SECOND</span>, tx.trx_started, <span class=\"keyword\">now</span>() ) <span class=\"keyword\">duration</span>,</span><br><span class=\"line\">      lo.lock_mode, lo.lock_type, lo.lock_table, lo.lock_index, tx.trx_query, lw.requesting_trx_id Blockee_trx</span><br><span class=\"line\">    <span class=\"keyword\">FROM</span></span><br><span class=\"line\">      information_schema.innodb_trx tx,</span><br><span class=\"line\">      information_schema.innodb_lock_waits lw,</span><br><span class=\"line\">      information_schema.innodb_locks lo,</span><br><span class=\"line\">      information_schema. <span class=\"keyword\">PROCESSLIST</span> p</span><br><span class=\"line\">    <span class=\"keyword\">WHERE</span></span><br><span class=\"line\">      lw.blocking_trx_id = tx.trx_id <span class=\"keyword\">AND</span> p.id = tx.trx_mysql_thread_id <span class=\"keyword\">AND</span> lo.lock_id = lw.blocking_lock_id</span><br><span class=\"line\">    <span class=\"keyword\">UNION</span></span><br><span class=\"line\">      <span class=\"keyword\">SELECT</span></span><br><span class=\"line\">        <span class=\"string\">'Blockee'</span> <span class=\"keyword\">role</span>, p.id, p.USER, <span class=\"keyword\">LEFT</span> ( p.HOST, <span class=\"keyword\">locate</span>(<span class=\"string\">':'</span>, p.HOST) - <span class=\"number\">1</span> ) HOST,</span><br><span class=\"line\">        tx.trx_id, tx.trx_state, tx.trx_started,</span><br><span class=\"line\">        <span class=\"keyword\">timestampdiff</span>( <span class=\"keyword\">SECOND</span>, tx.trx_started, <span class=\"keyword\">now</span>() ) <span class=\"keyword\">duration</span>,</span><br><span class=\"line\">        lo.lock_mode, lo.lock_type, lo.lock_table, lo.lock_index, tx.trx_query, <span class=\"literal\">NULL</span></span><br><span class=\"line\">      <span class=\"keyword\">FROM</span></span><br><span class=\"line\">        information_schema.innodb_trx tx,</span><br><span class=\"line\">        information_schema.innodb_lock_waits lw,</span><br><span class=\"line\">        information_schema.innodb_locks lo,</span><br><span class=\"line\">        information_schema. <span class=\"keyword\">PROCESSLIST</span> p</span><br><span class=\"line\">      <span class=\"keyword\">WHERE</span></span><br><span class=\"line\">        lw.requesting_trx_id = tx.trx_id <span class=\"keyword\">AND</span> p.id = tx.trx_mysql_thread_id <span class=\"keyword\">AND</span> lo.lock_id = lw.requested_lock_id</span><br><span class=\"line\">  ) l</span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span></span><br><span class=\"line\">  <span class=\"keyword\">role</span> <span class=\"keyword\">DESC</span>,</span><br><span class=\"line\">  trx_state <span class=\"keyword\">DESC</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"日志\"><a href=\"#日志\" class=\"headerlink\" title=\"日志\"></a>日志</h3><figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">master</span> <span class=\"keyword\">logs</span>;</span><br><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"built_in\">binary</span> <span class=\"keyword\">logs</span>;</span><br><span class=\"line\"><span class=\"comment\">-- 远程提取: 下载后可直接cat查看</span></span><br><span class=\"line\">mysqlbinlog  -u** -p -h***.mysql.rds.aliyuncs.com --read-from-remote-server mysql-bin.000497 &gt;a.sql</span><br></pre></td></tr></table></figure>\n\n","categories":["MySQL"],"tags":["SQL","优化"]},{"title":"MySQL-存储过程","url":"/2019/11/22/DB/MySQL-存储过程/","content":"<h2 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h2><ul>\n<li>不支持打印输出</li>\n<li>不支持SQL语句输出</li>\n<li>支持参数传入传出</li>\n<li>批量数据只能创建临时表, 存储过程中保存数据到临时表, 存储过程外从临时表提取输出</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 同名存储过程存在则删除</span></span><br><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">PROCEDURE</span> <span class=\"keyword\">IF</span> <span class=\"keyword\">EXISTS</span> <span class=\"string\">`proc_adder`</span>;</span><br><span class=\"line\"><span class=\"comment\">-- 重置语句结束符</span></span><br><span class=\"line\">DELIMITER ;;</span><br><span class=\"line\"><span class=\"comment\">-- 创建存储过程：一个加法器</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">PROCEDURE</span> proc_adder(<span class=\"keyword\">IN</span> a <span class=\"built_in\">int</span>, <span class=\"keyword\">IN</span> b <span class=\"built_in\">int</span>, <span class=\"keyword\">OUT</span> <span class=\"keyword\">sum</span> <span class=\"built_in\">int</span>)</span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">    <span class=\"keyword\">DECLARE</span> c <span class=\"built_in\">int</span>;</span><br><span class=\"line\">    if a is null then <span class=\"keyword\">set</span> a = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">end</span> <span class=\"keyword\">if</span>;</span><br><span class=\"line\">    if b is null then <span class=\"keyword\">set</span> b = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">end</span> <span class=\"keyword\">if</span>;</span><br><span class=\"line\">    <span class=\"keyword\">set</span> <span class=\"keyword\">sum</span> = a + b;</span><br><span class=\"line\"><span class=\"keyword\">END</span></span><br><span class=\"line\">;;</span><br><span class=\"line\">DELIMITER ;    <span class=\"comment\">-- 还原默认语句结束符</span></span><br><span class=\"line\"><span class=\"comment\">-- 调用</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> @b=<span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"keyword\">call</span> proc_adder(<span class=\"number\">2</span>,@b,@s);</span><br><span class=\"line\"><span class=\"keyword\">select</span> @s <span class=\"keyword\">as</span> <span class=\"keyword\">sum</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"语句返回值接收\"><a href=\"#语句返回值接收\" class=\"headerlink\" title=\"语句返回值接收\"></a>语句返回值接收</h3><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">count</span>(*) <span class=\"keyword\">into</span> @c <span class=\"keyword\">FROM</span> shengyibao.area;</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> @c;</span><br><span class=\"line\"><span class=\"comment\">-- ----------------------------------------</span></span><br><span class=\"line\"><span class=\"keyword\">SET</span> @STMT = <span class=\"keyword\">CONCAT</span>(<span class=\"string\">\"SELECT count(*) into @c FROM shengyibao.area;\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">PREPARE</span> STMT <span class=\"keyword\">FROM</span> @STMT;</span><br><span class=\"line\"><span class=\"keyword\">EXECUTE</span> STMT;</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> @c;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"重建索引\"><a href=\"#重建索引\" class=\"headerlink\" title=\"重建索引\"></a>重建索引</h3><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- SQL不支持直接使用IF语句，所以只能使用负载均衡</span></span><br><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">PROCEDURE</span> <span class=\"keyword\">IF</span> <span class=\"keyword\">EXISTS</span> <span class=\"keyword\">test</span>;</span><br><span class=\"line\">DELIMITER ;;</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">PROCEDURE</span> <span class=\"keyword\">test</span> (<span class=\"keyword\">OUT</span> pv <span class=\"built_in\">TEXT</span>) <span class=\"keyword\">DETERMINISTIC</span></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">  <span class=\"keyword\">IF</span> <span class=\"keyword\">NOT</span> <span class=\"keyword\">EXISTS</span>(<span class=\"keyword\">SELECT</span> INDEX_NAME <span class=\"keyword\">FROM</span> information_schema.statistics <span class=\"keyword\">WHERE</span> table_schema=<span class=\"string\">'table_name'</span> <span class=\"keyword\">AND</span> table_name = <span class=\"string\">'index_name'</span> <span class=\"keyword\">AND</span> index_name = <span class=\"string\">'idx_test'</span>) <span class=\"keyword\">THEN</span></span><br><span class=\"line\">    <span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> netbar_2308052252.<span class=\"string\">`duty`</span> <span class=\"keyword\">ADD</span> <span class=\"keyword\">INDEX</span> <span class=\"string\">`idx_tmbegin`</span> (<span class=\"string\">`tmbegin`</span>);</span><br><span class=\"line\">  <span class=\"keyword\">END</span> <span class=\"keyword\">IF</span>;</span><br><span class=\"line\"><span class=\"keyword\">END</span>;;</span><br><span class=\"line\">DELIMITER ;</span><br><span class=\"line\"><span class=\"comment\">-- 调用</span></span><br><span class=\"line\"><span class=\"keyword\">call</span> <span class=\"keyword\">test</span>(@pv);</span><br><span class=\"line\"><span class=\"keyword\">select</span> @pv;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"案例\"><a href=\"#案例\" class=\"headerlink\" title=\"案例\"></a>案例</h2><h3 id=\"修改列\"><a href=\"#修改列\" class=\"headerlink\" title=\"修改列\"></a>修改列</h3><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 遍历库，对库中指定表进行操作 */</span></span><br><span class=\"line\"><span class=\"comment\">-- 同名存储过程存在则删除</span></span><br><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">PROCEDURE</span> <span class=\"keyword\">IF</span> <span class=\"keyword\">EXISTS</span> <span class=\"keyword\">test</span>;</span><br><span class=\"line\"><span class=\"comment\">-- 置存储过程标记符号\";;\"</span></span><br><span class=\"line\">DELIMITER ;;</span><br><span class=\"line\"><span class=\"comment\">-- 创建存储过程\"test\"</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">PROCEDURE</span> <span class=\"keyword\">test</span> (<span class=\"keyword\">OUT</span> pv <span class=\"built_in\">TEXT</span>) <span class=\"keyword\">DETERMINISTIC</span></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">  <span class=\"keyword\">DECLARE</span> time_b <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">64</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"string\">'2018-04-14 8:00:00'</span>;  <span class=\"comment\">-- 自定义变量</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">DECLARE</span> done <span class=\"built_in\">tinyint</span> <span class=\"keyword\">default</span> <span class=\"number\">0</span>;   <span class=\"comment\">-- 游标结束判定符</span></span><br><span class=\"line\">  <span class=\"keyword\">DECLARE</span> db <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">64</span>);           <span class=\"comment\">-- 游标数据接收变量</span></span><br><span class=\"line\">  <span class=\"comment\">-- 创建游标</span></span><br><span class=\"line\">  <span class=\"keyword\">DECLARE</span> cur <span class=\"keyword\">CURSOR</span> <span class=\"keyword\">FOR</span></span><br><span class=\"line\">    <span class=\"keyword\">SELECT</span> SCHEMA_NAME <span class=\"keyword\">FROM</span> information_schema.SCHEMATA <span class=\"keyword\">WHERE</span> SCHEMA_NAME REGEXP <span class=\"string\">\"^testdb_[0-9]&#123;10&#125;$\"</span>;</span><br><span class=\"line\">  <span class=\"comment\">-- 设定游标结束标记</span></span><br><span class=\"line\">  <span class=\"keyword\">DECLARE</span> continue <span class=\"keyword\">handler</span> <span class=\"keyword\">for</span> <span class=\"keyword\">sqlstate</span> <span class=\"string\">'02000'</span> <span class=\"keyword\">SET</span> done=<span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"comment\">-- 打开游标</span></span><br><span class=\"line\">  OPEN cur;</span><br><span class=\"line\">  <span class=\"comment\">-- 提取游标值</span></span><br><span class=\"line\">  FETCH cur INTO db;</span><br><span class=\"line\">  <span class=\"comment\">-- 循环检查游标</span></span><br><span class=\"line\">  WHILE done&lt;&gt;1 DO</span><br><span class=\"line\">    <span class=\"keyword\">SET</span> @db = db;</span><br><span class=\"line\">    <span class=\"comment\">-- ---------------------------------------------------------------------------------------------</span></span><br><span class=\"line\">    <span class=\"comment\">-- 不需要IF，如果列未发生变化，语句会很快结束</span></span><br><span class=\"line\">    <span class=\"comment\">-- AFTER用于指定调整列位置</span></span><br><span class=\"line\">    <span class=\"keyword\">SET</span> @STMT = <span class=\"keyword\">CONCAT</span>(<span class=\"string\">'</span></span><br><span class=\"line\"><span class=\"string\">      ALTER TABLE '</span>, @db, <span class=\"string\">'.`member`</span></span><br><span class=\"line\"><span class=\"string\">      MODIFY COLUMN `col_name1`  datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT \\'创建时间\\' AFTER `col_name2`;'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">PREPARE</span> STMT <span class=\"keyword\">FROM</span> @STMT;</span><br><span class=\"line\">    <span class=\"keyword\">EXECUTE</span> STMT;</span><br><span class=\"line\">    <span class=\"comment\">-- -----------------------------------------------------------------------------------------------</span></span><br><span class=\"line\">    <span class=\"comment\">-- 下一个游标</span></span><br><span class=\"line\">    FETCH cur INTO db;</span><br><span class=\"line\">  <span class=\"keyword\">END</span> <span class=\"keyword\">WHILE</span>;</span><br><span class=\"line\">  <span class=\"comment\">-- 关闭游标</span></span><br><span class=\"line\">  CLOSE cur;</span><br><span class=\"line\"><span class=\"keyword\">END</span>;;   <span class=\"comment\">-- 存储过程结束标记</span></span><br><span class=\"line\">DELIMITER ; <span class=\"comment\">-- 重置存储过程结束标记为默认值</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 调用该存储过程，注意：输出参数必须是一个带@符号的变量，支持多参数传入传出</span></span><br><span class=\"line\"><span class=\"keyword\">CALL</span> <span class=\"keyword\">test</span> (@pv);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 显示</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> @pv;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"添加列\"><a href=\"#添加列\" class=\"headerlink\" title=\"添加列\"></a>添加列</h3><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">PROCEDURE</span> <span class=\"keyword\">IF</span> <span class=\"keyword\">EXISTS</span> <span class=\"keyword\">test</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">DELIMITER ;;</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">PROCEDURE</span> <span class=\"keyword\">test</span> (<span class=\"keyword\">OUT</span> pv <span class=\"built_in\">TEXT</span>) <span class=\"keyword\">DETERMINISTIC</span></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">  <span class=\"keyword\">SET</span> pv = <span class=\"string\">'0'</span>;</span><br><span class=\"line\">  <span class=\"comment\">-- 检查列是否存在</span></span><br><span class=\"line\">  IF NOT EXISTS(<span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> information_schema.<span class=\"string\">`COLUMNS`</span> <span class=\"keyword\">WHERE</span> TABLE_SCHEMA=<span class=\"string\">'NetbarOpt'</span> <span class=\"keyword\">AND</span> TABLE_NAME=<span class=\"string\">'table_name'</span> <span class=\"keyword\">AND</span> COLUMN_NAME=<span class=\"string\">'col_name'</span>)</span><br><span class=\"line\">  <span class=\"keyword\">THEN</span></span><br><span class=\"line\">    <span class=\"comment\">-- 不存在则创建</span></span><br><span class=\"line\">    <span class=\"keyword\">SET</span> @bar_tn = <span class=\"string\">'table_name'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">SET</span> @STMT = <span class=\"keyword\">CONCAT</span>(<span class=\"string\">\"ALTER TABLE `\"</span>, @bar_tn,<span class=\"string\">\"` ADD COLUMN `col_name` VARCHAR (50) NULL AFTER `opt_time`;\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">PREPARE</span> STMT <span class=\"keyword\">FROM</span> @STMT;</span><br><span class=\"line\">    <span class=\"keyword\">EXECUTE</span> STMT;</span><br><span class=\"line\">    <span class=\"keyword\">SET</span> pv = @STMT;</span><br><span class=\"line\">  <span class=\"keyword\">END</span> <span class=\"keyword\">IF</span>;</span><br><span class=\"line\"><span class=\"keyword\">END</span>;;</span><br><span class=\"line\">DELIMITER ;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 调用该存储过程，注意：输出参数必须是一个带@符号的变量 */</span></span><br><span class=\"line\"><span class=\"keyword\">CALL</span> <span class=\"keyword\">test</span> (@pv);</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> @pv;</span><br></pre></td></tr></table></figure>\n\n","categories":["MySQL"],"tags":["SQL","存储过程"]},{"title":"环境","url":"/2019/11/20/PHP/IDE/","content":"<h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><ul>\n<li><a href=\"https://www.xp.cn/\" target=\"_blank\" rel=\"noopener\">phpStudy</a></li>\n</ul>\n<h2 id=\"PHPStorm\"><a href=\"#PHPStorm\" class=\"headerlink\" title=\"PHPStorm\"></a>PHPStorm</h2><ul>\n<li>注册码: <a href=\"http://idea.lanyus.com/\" target=\"_blank\" rel=\"noopener\">http://idea.lanyus.com/</a><ul>\n<li>也可以到<a href=\"http://www.php.cn/\" target=\"_blank\" rel=\"noopener\">PHP中文网</a>找</li>\n<li><a href=\"http://medeming.com/\" target=\"_blank\" rel=\"noopener\">http://medeming.com/</a></li>\n</ul>\n</li>\n<li>配置<ul>\n<li><code>Appearance</code>-&gt;<code>Theme</code>-&gt;选择<code>Darcula</code>，暗色调看着比较舒服<ul>\n<li>字体 -&gt; 微软雅黑，14</li>\n</ul>\n</li>\n<li><code>Editor</code>-&gt;<code>font</code>  首先Scheme save自己的方案，然后字体改 Consolas|Courier|Source Code Pro等宽字体，16<ul>\n<li><code>General</code>-&gt;<code>Appearance</code>-&gt;<code>Show line numbers</code> &amp;&amp; <code>Show whitespace</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>其他<ul>\n<li><code>Editor</code>-&gt;<code>Code Style</code>-&gt;<code>PHP</code>：空行 空格</li>\n<li><code>Editor</code>-&gt;<code>Inspections</code>-&gt;<code>Spelling</code>: 取消选中(单词检查)</li>\n<li><code>File Encodings</code>-&gt; IDE Encoding: UTF-8;</li>\n<li><code>File Encodings</code>-&gt; Project Encoding: UTF-8;</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"快捷键\"><a href=\"#快捷键\" class=\"headerlink\" title=\"快捷键\"></a>快捷键</h3><ul>\n<li><p>查找 / 选中</p>\n<ul>\n<li><p><code>Alt+左键</code>: 多选</p>\n</li>\n<li><p><code>Ctrl+Alt+Shift+左键</code>: 选中多行</p>\n</li>\n<li><p><code>Alt+J</code>: 搜索并选中</p>\n</li>\n<li><p><code>CTRL+F</code>: 在当前窗口查找文本</p>\n</li>\n<li><p><code>CTRL+SHIFT+F</code>: 在指定路径查找文本</p>\n</li>\n<li><p><code>CTRL+R</code>: 当前窗口替换文本</p>\n</li>\n<li><p><code>CTRL+SHIFT+R</code>: 在指定路径替换文本</p>\n</li>\n<li><p><code>CTRL+SHIFT+V</code>: 可以复制多个文本</p>\n</li>\n<li><p><code>CTRL+D</code>: 复制行</p>\n</li>\n<li><p><code>CTRL+SHIFT+[]</code>: 选中块代码，可以快速复制</p>\n</li>\n<li><p><code>CTRL+E</code>: 最近打开的文件</p>\n</li>\n</ul>\n</li>\n<li><p>结构化查找</p>\n<ul>\n<li><code>Ctrl+F12</code>: 文件结构</li>\n<li><code>alt+&#39;7&#39;</code>: 显示当前的类/函数结构</li>\n<li><code>Ctrl+Shift+A</code>: 查找快捷键</li>\n<li><code>CTRL+N</code>: 查找类</li>\n<li><code>CTRL+SHIFT+N</code>: 查找文件，打开工程中的文件(类似于eclipse中的ctrl+shift+R)，目的是打开当前工程下任意目录的文件</li>\n<li><code>CTRL+SHIFT+ALT+N</code>: 查找类中的方法或变量(JS)</li>\n<li><code>SHIFT+F6</code>  重命名,重构 当前区域内变量重命名/重构</li>\n</ul>\n</li>\n<li><p>跳转 / 定位</p>\n<ul>\n<li><code>F2</code>: 高亮错误或警告快速定位</li>\n<li><code>F4</code>: 查找变量来源</li>\n<li><code>Ctrl+左键</code>: 跳转到定义</li>\n<li><code>CTRL+G</code>: 定位行，跳转行</li>\n<li><code>Ctrl+Shift+Backspace</code>: 键导航到最后编辑的位置</li>\n<li><code>CTRL+[]</code>: 光标移动到{}[]开头或结尾位置，python跳转到函数头</li>\n<li><code>CTRL+ALT+ ←/→</code>: 返回上次编辑的位置</li>\n<li><code>ALT+ ↑/↓</code>: 在方法间快速移动定位</li>\n</ul>\n</li>\n<li><p>书签</p>\n<ul>\n<li><code>ALT+ ←/→</code>: 切换代码视图，标签切换</li>\n<li><code>F11</code>: 书签助记符</li>\n<li><code>Shift+F11</code>: 显示书签</li>\n<li><code>Ctrl+Shift+[0-9]</code>: 创建编号书签</li>\n<li><code>Ctrl+[0-9]</code>: 转到编号书签</li>\n</ul>\n</li>\n<li><p>折叠</p>\n<ul>\n<li><code>ctrl+&#39;-/+&#39;</code>: 可以折叠代码块</li>\n<li><code>ctrl+&#39;.&#39;</code>: 折叠选中代码所属代码块</li>\n<li><code>Ctrl+Shift+小键盘+</code>：展开全部</li>\n<li><code>Ctrl+Shift+小键盘-</code>：关闭全部</li>\n</ul>\n</li>\n<li><p>美化 / 优化</p>\n<ul>\n<li><code>CTRL+ALT+L</code>: 格式化代码</li>\n<li><code>CTRL+ALT+I</code>: 自动缩进</li>\n<li><code>CTRL+ALT+O</code>: 优化导入的类和包(冲突：QQ截屏识字)</li>\n</ul>\n</li>\n<li><p>提示 / 快捷输入</p>\n<ul>\n<li><code>CTRL+P</code>: 方法参数提示，显示默认参数</li>\n<li><code>CTRL+ALT+T</code>:  把选中的代码放在 TRY{} IF{} ELSE{} 里</li>\n<li><code>Ctrl+Shift+U</code>: 选中的字符大小写转换</li>\n</ul>\n</li>\n<li><p>本地历史VCS/SVN</p>\n<ul>\n<li><code>Alt+反引号</code>: 快速弹出VCS菜单</li>\n<li><code>Ctrl+K</code>: 提交项目VCS</li>\n<li><code>Ctrl+T</code>: 更新项目从VCS</li>\n<li><code>Alt+Shift+C</code>: 查看最近发生的变化</li>\n</ul>\n</li>\n</ul>\n","categories":["PHP"],"tags":["PHPStorm","phpStudy"]},{"title":"加解密","url":"/2019/11/18/Python/加解密/","content":"<h2 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h2><h3 id=\"base64\"><a href=\"#base64\" class=\"headerlink\" title=\"base64\"></a>base64</h3><figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># python2</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'我们'</span>.encode(<span class=\"string\">'base64'</span>)</span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'ztLDxw=='</span>.decode(<span class=\"string\">'base64'</span>)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># python2</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> base64</span><br><span class=\"line\"></span><br><span class=\"line\">s = <span class=\"string\">'我是字符串'</span></span><br><span class=\"line\">a = base64.b64encode(s)</span><br><span class=\"line\"><span class=\"keyword\">print</span> base64.b64decode(a)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: gbk -*-</span></span><br><span class=\"line\"><span class=\"comment\"># pyton3</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">P3</span>:</span></span><br><span class=\"line\"><span class=\"meta\">    @staticmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">b2s</span><span class=\"params\">(b)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> b.decode(<span class=\"string\">'gbk'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @staticmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">s2b</span><span class=\"params\">(s, s16=False)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :param s:</span></span><br><span class=\"line\"><span class=\"string\">        :param s16: 是否是16进制字符串, 比如：616263646566</span></span><br><span class=\"line\"><span class=\"string\">        :return:</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> s16:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> bytes.fromhex(s)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> s.encode(<span class=\"string\">'gbk'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">encode</span><span class=\"params\">(self, s, s16=False)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 注意bytes和str之间的转化</span></span><br><span class=\"line\">        s = self.s2b(s, s16)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> base64.b64encode(s)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @staticmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">decode</span><span class=\"params\">(s, out_hex=False)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># python3: b64decode -&gt; bytes -&gt; hex()</span></span><br><span class=\"line\">        re = base64.b64decode(s)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> out_hex:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> re.hex()</span><br><span class=\"line\">        <span class=\"keyword\">return</span> re</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"AES\"><a href=\"#AES\" class=\"headerlink\" title=\"AES\"></a>AES</h2><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">pip install crypto</span><br><span class=\"line\"><span class=\"comment\"># 如果提示找不到Crypto.Cipher，近Python第三方安装包目录，把crypto 改为 Crypto 即可</span></span><br><span class=\"line\"><span class=\"comment\"># 如果还提示找不到，更换模块：pycrypto -&gt; pycryptodome</span></span><br><span class=\"line\">pip uninstall pycrypto</span><br><span class=\"line\">pip install pycryptodome</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"CBC\"><a href=\"#CBC\" class=\"headerlink\" title=\"CBC\"></a>CBC</h3><figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># coding=utf8</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">AES/CBC/PKCS7Padding</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> Crypto.Cipher <span class=\"keyword\">import</span> AES</span><br><span class=\"line\"><span class=\"keyword\">import</span> copy</span><br><span class=\"line\"><span class=\"keyword\">import</span> base64</span><br><span class=\"line\"><span class=\"keyword\">import</span> estools</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ESCBC</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self.cfg = estools.get_cfg()</span><br><span class=\"line\">        self.mode = AES.MODE_CBC</span><br><span class=\"line\"></span><br><span class=\"line\">        self.key = self.cfg[<span class=\"string\">'cbc'</span>][<span class=\"string\">'key'</span>]  <span class=\"comment\"># type: str</span></span><br><span class=\"line\">        self.vi = self.cfg[<span class=\"string\">'cbc'</span>][<span class=\"string\">'vi'</span>]  <span class=\"comment\"># type: str</span></span><br><span class=\"line\">        self.key = self.key.decode(<span class=\"string\">\"hex\"</span>)</span><br><span class=\"line\">        self.vi = self.vi.decode(<span class=\"string\">\"hex\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @staticmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">pkcs7padding</span><span class=\"params\">(data)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># AES.block_size 16位</span></span><br><span class=\"line\">        bs = AES.block_size</span><br><span class=\"line\">        padding = bs - len(data) % bs</span><br><span class=\"line\">        padding_text = chr(padding) * padding</span><br><span class=\"line\">        <span class=\"keyword\">return</span> data + padding_text</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @staticmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">pkcs7unpadding</span><span class=\"params\">(data)</span>:</span></span><br><span class=\"line\">        lengt = len(data)</span><br><span class=\"line\">        unpadding = ord(data[lengt - <span class=\"number\">1</span>])</span><br><span class=\"line\">        <span class=\"keyword\">return</span> data[<span class=\"number\">0</span>:lengt - unpadding]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">encrypt</span><span class=\"params\">(self, s)</span>:</span></span><br><span class=\"line\">        s = copy.deepcopy(s)</span><br><span class=\"line\">        cipher = AES.new(self.key, self.mode, self.vi)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> cipher.encrypt(self.pkcs7padding(s))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">decrypt</span><span class=\"params\">(self, s)</span>:</span></span><br><span class=\"line\">        s = copy.deepcopy(s)</span><br><span class=\"line\">        cipher = AES.new(self.key, self.mode, self.vi)</span><br><span class=\"line\">        decrypted = cipher.decrypt(s)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.pkcs7unpadding(decrypted)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @staticmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">b64encode</span><span class=\"params\">(s)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> base64.b64encode(s)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @staticmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">b64decode</span><span class=\"params\">(s)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> base64.b64decode(s)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    cbc = ESCBC()</span><br><span class=\"line\">    text = <span class=\"string\">'abcdeft'</span></span><br><span class=\"line\">    encrypted = cbc.encrypt(text)</span><br><span class=\"line\">    <span class=\"keyword\">print</span> base64.b64encode(encrypted)</span><br><span class=\"line\">    <span class=\"keyword\">print</span> cbc.decrypt(encrypted)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    test()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"CFB\"><a href=\"#CFB\" class=\"headerlink\" title=\"CFB\"></a>CFB</h3><figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># coding=utf8</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">AES/CFB/NOPADDING加解密</span></span><br><span class=\"line\"><span class=\"string\">等价于PHP: AES-128-CFB+OPENSSL_ZERO_PADDING</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> Crypto.Cipher <span class=\"keyword\">import</span> AES</span><br><span class=\"line\"><span class=\"keyword\">import</span> copy</span><br><span class=\"line\"><span class=\"keyword\">import</span> base64</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ESCFB</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self.mode = AES.MODE_CFB</span><br><span class=\"line\"></span><br><span class=\"line\">        self.key = <span class=\"string\">'ba0d1eba1b5aa3dc6f465f0d03d1a1f3'</span>  <span class=\"comment\"># type: str</span></span><br><span class=\"line\">        self.vi = <span class=\"string\">'15b32d0a12b89b7857c75556ff8176aa'</span>  <span class=\"comment\"># type: str</span></span><br><span class=\"line\">        self.key = self.key.decode(<span class=\"string\">\"hex\"</span>)</span><br><span class=\"line\">        self.vi = self.vi.decode(<span class=\"string\">\"hex\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @staticmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">zero_padding</span><span class=\"params\">(data)</span>:</span></span><br><span class=\"line\">        bs = AES.block_size</span><br><span class=\"line\">        num = bs - len(data) % bs</span><br><span class=\"line\">        padding_text = <span class=\"string\">'\\0'</span> * num</span><br><span class=\"line\">        <span class=\"keyword\">return</span> data + padding_text, num</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">encrypt</span><span class=\"params\">(self, s)</span>:</span></span><br><span class=\"line\">        s = copy.deepcopy(s)</span><br><span class=\"line\">        cipher = AES.new(self.key, self.mode, self.vi, segment_size=<span class=\"number\">128</span>)</span><br><span class=\"line\">        s, n = self.zero_padding(s)</span><br><span class=\"line\">        s = cipher.encrypt(s)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> n == <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> s</span><br><span class=\"line\">        <span class=\"keyword\">return</span> s[<span class=\"number\">0</span>:-n]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">decrypt</span><span class=\"params\">(self, s)</span>:</span></span><br><span class=\"line\">        s = copy.deepcopy(s)</span><br><span class=\"line\">        cipher = AES.new(self.key, self.mode, self.vi, segment_size=<span class=\"number\">128</span>)</span><br><span class=\"line\">        s, n = self.zero_padding(s)</span><br><span class=\"line\">        s = cipher.decrypt(s)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> n == <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> s</span><br><span class=\"line\">        <span class=\"keyword\">return</span> s[<span class=\"number\">0</span>:-n]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @staticmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">b64encode</span><span class=\"params\">(s)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> base64.b64encode(s)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @staticmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">b64decode</span><span class=\"params\">(s)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> base64.b64decode(s)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    cbc = ESCFB()</span><br><span class=\"line\">    text = <span class=\"string\">'1ffedd4c51506214a1a196f4128c4267b3c9911wD'</span></span><br><span class=\"line\">    encrypted = cbc.encrypt(text)</span><br><span class=\"line\">    <span class=\"keyword\">print</span> base64.b64encode(encrypted)</span><br><span class=\"line\">    <span class=\"keyword\">print</span> cbc.decrypt(encrypted)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    test()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"DES\"><a href=\"#DES\" class=\"headerlink\" title=\"DES\"></a>DES</h3><figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">简单应用</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> Crypto.Cipher <span class=\"keyword\">import</span> DES</span><br><span class=\"line\"></span><br><span class=\"line\">mode = DES.MODE_CBC</span><br><span class=\"line\">key = <span class=\"string\">'01234567'</span></span><br><span class=\"line\">vi = <span class=\"string\">'01234567'</span></span><br><span class=\"line\">text = <span class=\"string\">'12345678123456789'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">encrypt</span><span class=\"params\">(text)</span>:</span></span><br><span class=\"line\">    cipher = DES.new(key, mode, vi)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> cipher.encrypt(text + <span class=\"string\">'\\0'</span> * (<span class=\"number\">8</span> - len(text) % <span class=\"number\">8</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">encrypted = encrypt(text)</span><br><span class=\"line\"><span class=\"keyword\">print</span> encrypted.encode(<span class=\"string\">'hex'</span>)</span><br><span class=\"line\"><span class=\"comment\"># MODE_CBC must reset vi</span></span><br><span class=\"line\">cipher = DES.new(key, mode, vi)</span><br><span class=\"line\">decrypted = cipher.decrypt(encrypted)</span><br><span class=\"line\"><span class=\"keyword\">print</span> decrypted.rstrip(<span class=\"string\">'\\0'</span>)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># coding=gbk</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">文件加解密封装</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> Crypto.Cipher <span class=\"keyword\">import</span> DES</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EsCBC</span>:</span></span><br><span class=\"line\">    mode = DES.MODE_CBC</span><br><span class=\"line\">    key = <span class=\"string\">'01234567'</span></span><br><span class=\"line\">    vi = <span class=\"string\">'01234567'</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self.cipher = <span class=\"literal\">None</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @staticmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">inttobytes</span><span class=\"params\">(i)</span>:</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">itoc</span><span class=\"params\">(v)</span>:</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> chr(v)</span><br><span class=\"line\"></span><br><span class=\"line\">        b = bytearray()</span><br><span class=\"line\">        b.append(itoc(i &amp; <span class=\"number\">0xFF</span>))</span><br><span class=\"line\">        b.append(itoc((i &gt;&gt; <span class=\"number\">8</span>) &amp; <span class=\"number\">0xFF</span>))</span><br><span class=\"line\">        b.append(itoc((i &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0xFF</span>))</span><br><span class=\"line\">        b.append(itoc((i &gt;&gt; <span class=\"number\">24</span>) &amp; <span class=\"number\">0xFF</span>))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> b</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @staticmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">bytestoint</span><span class=\"params\">(b)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> ord(b[<span class=\"number\">0</span>]) + (ord(b[<span class=\"number\">1</span>]) &lt;&lt; <span class=\"number\">8</span>) + (ord(b[<span class=\"number\">2</span>]) &lt;&lt; <span class=\"number\">16</span>) + (ord(b[<span class=\"number\">3</span>]) &lt;&lt; <span class=\"number\">24</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 加密</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">encrypt</span><span class=\"params\">(self, fn, new_fn)</span>:</span></span><br><span class=\"line\">        self.cipher = DES.new(EsCBC.key, EsCBC.mode, EsCBC.vi)</span><br><span class=\"line\">        <span class=\"keyword\">with</span> open(fn, <span class=\"string\">'rb'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">            data = f.read()</span><br><span class=\"line\">            data = bytearray(data)</span><br><span class=\"line\">            data.extend(inttobytes(len(data)))                 <span class=\"comment\"># 追加长度</span></span><br><span class=\"line\">            data.extend(bytearray([<span class=\"string\">'A'</span>, <span class=\"string\">'B'</span>, <span class=\"string\">'C'</span>, <span class=\"string\">'D'</span>]))       <span class=\"comment\"># 追加尾部标示</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> len(data) % <span class=\"number\">8</span>:</span><br><span class=\"line\">                data.extend(bytearray(<span class=\"number\">8</span> - len(data) % <span class=\"number\">8</span>))      <span class=\"comment\"># 长度补全</span></span><br><span class=\"line\">            new_data = self.cipher.encrypt(str(data))</span><br><span class=\"line\">            <span class=\"keyword\">with</span> open(new_fn, <span class=\"string\">'wb'</span>) <span class=\"keyword\">as</span> new_f:</span><br><span class=\"line\">                new_f.write(new_data)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 解密</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">decrypt</span><span class=\"params\">(self, fn, new_fn)</span>:</span></span><br><span class=\"line\">        self.cipher = DES.new(EsCBC.key, EsCBC.mode, EsCBC.vi)</span><br><span class=\"line\">        <span class=\"keyword\">with</span> open(fn, <span class=\"string\">'rb'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">            data = f.read()</span><br><span class=\"line\">            new_data = self.cipher.decrypt(data)</span><br><span class=\"line\">            new_data = bytearray(new_data)</span><br><span class=\"line\">            new_data = new_data.rstrip(<span class=\"string\">b'\\x00'</span>)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (chr(new_data[<span class=\"number\">-4</span>]), chr(new_data[<span class=\"number\">-3</span>]), chr(new_data[<span class=\"number\">-2</span>]), chr(new_data[<span class=\"number\">-1</span>])) != (<span class=\"string\">'A'</span>, <span class=\"string\">'B'</span>, <span class=\"string\">'C'</span>, <span class=\"string\">'D'</span>):</span><br><span class=\"line\">                <span class=\"keyword\">raise</span> SyntaxError, <span class=\"string\">'zip error'</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span></span><br><span class=\"line\">            new_data = str(new_data[:<span class=\"number\">-4</span>])</span><br><span class=\"line\">            new_datalen = EsCBC.bytestoint(new_data[<span class=\"number\">-4</span>:])</span><br><span class=\"line\">            new_data = str(new_data[:<span class=\"number\">-4</span>])</span><br><span class=\"line\">            <span class=\"comment\"># print new_datalen</span></span><br><span class=\"line\">            <span class=\"comment\"># print new_data.encode('hex')</span></span><br><span class=\"line\">            <span class=\"keyword\">with</span> open(new_fn, <span class=\"string\">'wb'</span>) <span class=\"keyword\">as</span> new_f:</span><br><span class=\"line\">                new_f.write(new_data)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    cbc = EsCBC()</span><br><span class=\"line\">    cbc.encrypt(<span class=\"string\">'1.txt'</span>, <span class=\"string\">'2.txt'</span>)</span><br><span class=\"line\">    cbc.decrypt(<span class=\"string\">'2.txt'</span>, <span class=\"string\">'3.txt'</span>)</span><br></pre></td></tr></table></figure>\n\n","categories":["Python"],"tags":["AES, CBC, CFB"]},{"title":"Session","url":"/2019/11/16/PHP/SESSION/","content":"<h2 id=\"登陆\"><a href=\"#登陆\" class=\"headerlink\" title=\"登陆\"></a>登陆</h2><figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\">check();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">check</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(substr($_SERVER[<span class=\"string\">'REMOTE_ADDR'</span>], <span class=\"number\">0</span>, <span class=\"number\">10</span>) == <span class=\"string\">'192.168.1.'</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 内网放行</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!$_SESSION[<span class=\"string\">'is_login'</span>] == <span class=\"string\">'1'</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 已经登陆: 调整Session过期时间</span></span><br><span class=\"line\">        ini_set(<span class=\"string\">'session.gc_maxlifetime'</span>, <span class=\"string\">\"86400\"</span>); <span class=\"comment\">// 秒</span></span><br><span class=\"line\">        ini_set(<span class=\"string\">\"session.cookie_lifetime\"</span>,<span class=\"string\">\"86400\"</span>); <span class=\"comment\">// 秒</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 强制跳转到login</span></span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">'&lt;script&gt;window.location.href=\"./login.html\";&lt;/script&gt;'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">die</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> ($_REQUEST[<span class=\"string\">'name'</span>] == <span class=\"string\">'...'</span> &amp;&amp; $_REQUEST[<span class=\"string\">'pwd'</span>] == <span class=\"string\">'***'</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 标记登陆</span></span><br><span class=\"line\">    $_SESSION[<span class=\"string\">'is_login'</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","categories":["PHP"],"tags":["Session"]},{"title":"JQuery","url":"/2019/11/14/Html/JQuery/","content":"<h2 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ajaxGet</span>(<span class=\"params\">url, data</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> _this = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    $.<span class=\"keyword\">get</span>(url, data, function (data, status) &#123;</span><br><span class=\"line\">        myPrint(<span class=\"string\">\"状态：\"</span> + status);</span><br><span class=\"line\">        myPrint(<span class=\"string\">\"数据：\"</span> + data);</span><br><span class=\"line\">        <span class=\"comment\">// 这里的this是ajax的this, 要使用外层this需要自己定义变量保存</span></span><br><span class=\"line\">        _this.content = data;</span><br><span class=\"line\">    &#125;, <span class=\"string\">\"json\"</span>)  <span class=\"comment\">// 指定 dataType: \"json\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ajaxPost</span>(<span class=\"params\">url, data, param=&#123;&#125;</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(param)</span><br><span class=\"line\">        url += <span class=\"string\">\"?\"</span> + $.param(param);</span><br><span class=\"line\">    $.post(url, data, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data, status</span>) </span>&#123;</span><br><span class=\"line\">        myPrint(<span class=\"string\">\"状态：\"</span> + status);</span><br><span class=\"line\">        myPrint(<span class=\"string\">\"数据：\"</span> + data);</span><br><span class=\"line\">    &#125;, <span class=\"string\">\"json\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> d = &#123;</span><br><span class=\"line\">    a: <span class=\"string\">\"1\"</span>,</span><br><span class=\"line\">    b: <span class=\"string\">\"2\"</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">ajaxGet(<span class=\"string\">'/uri'</span>, d);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 重写，达到事件拦截的效果</span></span><br><span class=\"line\"><span class=\"comment\">/** 简单封装: 仅失败处理</span></span><br><span class=\"line\"><span class=\"comment\"> * 成功: 打印顺序 -&gt; success -&gt; done</span></span><br><span class=\"line\"><span class=\"comment\"> * 失败: 打印顺序 -&gt; error -&gt; --fail-- -&gt; fail</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">$</span>) </span>&#123;</span><br><span class=\"line\">    $._ajax = $.ajax;    <span class=\"comment\">// 备份</span></span><br><span class=\"line\">    $.ajax = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">    $.ajax = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">url, options</span>) </span>&#123;    <span class=\"comment\">// 重写</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> $._ajax(url, options).fail( <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"--fail--\"</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;)(jQuery);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** 事件封装</span></span><br><span class=\"line\"><span class=\"comment\"> * 成功顺序: _beforeSend -&gt; _success -&gt; success -&gt; done -&gt; _complete</span></span><br><span class=\"line\"><span class=\"comment\"> * 失败顺序: _beforeSend -&gt; _error -&gt; error -&gt; fail -&gt; _complete</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">$</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//首先备份下jquery的ajax方法</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> _ajax = $.ajax;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//重写jquery的ajax方法</span></span><br><span class=\"line\">    $.ajax = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">opt</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> success = opt.success;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> error = opt.error;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> _opt = $.extend(opt, &#123;</span><br><span class=\"line\">            error: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">XMLHttpRequest, textStatus, errorThrown</span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">'_error'</span>);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (error)</span><br><span class=\"line\">                    error(XMLHttpRequest, textStatus, errorThrown);</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            success: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data, textStatus</span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">'_success'</span>);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (success)</span><br><span class=\"line\">                    success(data, textStatus);</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            beforeSend: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">XHR</span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">// 提交前回调方法</span></span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">'_beforeSend'</span>);</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            complete: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">XHR, TS</span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">// 请求完成后回调函数 (请求成功或失败之后均调用)。</span></span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">'_complete'</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> _ajax(_opt);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;)(jQuery);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * ajax 事件处理</span></span><br><span class=\"line\"><span class=\"comment\"> * 失败顺序: fail -&gt; document -&gt; window</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">$(<span class=\"built_in\">window</span>).ajaxError(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event, XMLHttpRequest, ajaxOptions</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'ajaxError this === window'</span>, <span class=\"keyword\">this</span> === <span class=\"built_in\">window</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">$(<span class=\"built_in\">document</span>).ajaxError(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event, XMLHttpRequest, ajaxOptions</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'ajaxError this === document'</span>, <span class=\"keyword\">this</span> === <span class=\"built_in\">document</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">$.ajax(<span class=\"string\">'test.php'</span>).fail(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"fail\"</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">$.ajax(&#123;</span><br><span class=\"line\">    url: <span class=\"string\">\"../test.php\"</span>,</span><br><span class=\"line\">    type: <span class=\"string\">\"GET\"</span>,</span><br><span class=\"line\">    success: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'success'</span>);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    error: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'error'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;).done(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'done'</span>);</span><br><span class=\"line\">&#125;).fail(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'fail'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n","categories":["JS"],"tags":["JQuery"]},{"title":"JS基础","url":"/2019/11/14/Html/JS基础/","content":"<h2 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 模板字符串</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"string\">'hello'</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"string\">`<span class=\"subst\">$&#123;a&#125;</span> world`</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// json字符串 -&gt; js对象</span></span><br><span class=\"line\">js_obj = <span class=\"built_in\">JSON</span>.parse(json_str);</span><br><span class=\"line\"><span class=\"comment\">// json对象 -&gt; js字符串</span></span><br><span class=\"line\">json_str = <span class=\"built_in\">JSON</span>. stringify(js_obj);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// encodeUrl</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">urlEncode</span>(<span class=\"params\">param</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> paramStr = <span class=\"string\">''</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> k <span class=\"keyword\">in</span> param) &#123;</span><br><span class=\"line\">        paramStr += paramStr ? <span class=\"string\">'&amp;'</span>:<span class=\"string\">''</span>;</span><br><span class=\"line\">        paramStr += <span class=\"built_in\">encodeURIComponent</span>(k) + <span class=\"string\">'='</span> + <span class=\"built_in\">encodeURIComponent</span>(param[k]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> paramStr;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 日期</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> d1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"string\">'2010-02-12'</span>);</span><br><span class=\"line\">d1.setFullYear(d.getFullYear()+<span class=\"number\">10</span>);</span><br><span class=\"line\"><span class=\"comment\">// 毫秒</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(date, date.getMilliseconds());</span><br><span class=\"line\"><span class=\"comment\">// vux的日期格式化</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;dateFormat&#125; <span class=\"keyword\">from</span> <span class=\"string\">'vux'</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> d2 = dateFormat(d, <span class=\"string\">'YYYY-MM-DD'</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 遍历</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>,len=arr.length; j &lt; len; j++) &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 清空</span></span><br><span class=\"line\">arr.splice(<span class=\"number\">0</span>,arr.length);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"对象\"><a href=\"#对象\" class=\"headerlink\" title=\"对象\"></a>对象</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;<span class=\"string\">'0'</span>:<span class=\"string\">'a'</span>,<span class=\"string\">'1'</span>:<span class=\"string\">'b'</span>,<span class=\"string\">'2'</span>:<span class=\"string\">'c'</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">     <span class=\"built_in\">console</span>.log(i,<span class=\"string\">\":\"</span>,obj[i]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","categories":["JS"],"tags":["基础"]},{"title":"数据库","url":"/2019/11/11/Python/数据库/mysql/","content":"<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p><code>pip install pymysql</code></p>\n<h2 id=\"常规使用\"><a href=\"#常规使用\" class=\"headerlink\" title=\"常规使用\"></a>常规使用</h2><figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pymysql</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 连接</span></span><br><span class=\"line\">conn = pymysql.connect(</span><br><span class=\"line\">  host=db_info[<span class=\"string\">'ip'</span>], user=db_info[<span class=\"string\">'user'</span>], passwd=db_info[<span class=\"string\">'password'</span>],</span><br><span class=\"line\">  port=port, db=db_info[<span class=\"string\">'dbname'</span>], charset=<span class=\"string\">'utf8'</span>)</span><br><span class=\"line\">conn.autocommit(autocommit)   <span class=\"comment\"># 是否自动提交</span></span><br><span class=\"line\">cur = conn.cursor()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 语句执行</span></span><br><span class=\"line\">cur.execute(sql)</span><br><span class=\"line\"><span class=\"comment\"># 事务提交</span></span><br><span class=\"line\">conn.commit()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Select 结果</span></span><br><span class=\"line\">cur.fetchone()</span><br><span class=\"line\">cur.fetchmany(num)</span><br><span class=\"line\">cur.fetchall()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># insert / update / delete 影响个数</span></span><br><span class=\"line\">cur.rowcount</span><br><span class=\"line\">cur.rownumber</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Demo\"><a href=\"#Demo\" class=\"headerlink\" title=\"Demo\"></a>Demo</h2><p><a href=\"https://github.com/fxliu/Python/tree/master/%E6%95%B0%E6%8D%AE%E5%BA%93\" target=\"_blank\" rel=\"noopener\">mysql</a><br><a href=\"https://github.com/fxliu/Python/tree/master/%E6%95%B0%E6%8D%AE%E5%BA%93\" target=\"_blank\" rel=\"noopener\">sqlserver</a></p>\n<h2 id=\"ORM-sqlalchemy\"><a href=\"#ORM-sqlalchemy\" class=\"headerlink\" title=\"ORM - sqlalchemy\"></a>ORM - sqlalchemy</h2><h3 id=\"sqlalchemy-安装\"><a href=\"#sqlalchemy-安装\" class=\"headerlink\" title=\"sqlalchemy 安装\"></a>sqlalchemy 安装</h3><p><code>pip3 install sqlalchemy</code></p>\n<h3 id=\"sqlalchemy-使用\"><a href=\"#sqlalchemy-使用\" class=\"headerlink\" title=\"sqlalchemy 使用\"></a>sqlalchemy 使用</h3><figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> sqlalchemy <span class=\"keyword\">import</span> create_engine</span><br><span class=\"line\"><span class=\"comment\"># 创建引擎: mysql+pymysql://&lt;username&gt;:&lt;password&gt;@&lt;host&gt;/&lt;dbname&gt;[?&lt;options&gt;]</span></span><br><span class=\"line\">egine=create_engine(<span class=\"string\">'mysql+pymysql://root@127.0.0.1/db1?charset=utf8'</span>)</span><br><span class=\"line\"><span class=\"comment\"># 执行SQL</span></span><br><span class=\"line\">egine.execute(<span class=\"string\">'create table if not EXISTS t1(id int PRIMARY KEY auto_increment,name char(32));'</span>)</span><br><span class=\"line\">cur=egine.execute(<span class=\"string\">'insert into t1 values(%s,%s);'</span>,[(<span class=\"number\">1</span>,<span class=\"string\">\"egon1\"</span>),(<span class=\"number\">2</span>,<span class=\"string\">\"egon2\"</span>),(<span class=\"number\">3</span>,<span class=\"string\">\"egon3\"</span>)])</span><br><span class=\"line\">cur=egine.execute(<span class=\"string\">'insert into t1 values(%(id)s,%(name)s);'</span>,name=<span class=\"string\">'egon4'</span>,id=<span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"comment\"># 新插入行的自增id</span></span><br><span class=\"line\">print(cur.lastrowid)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查询</span></span><br><span class=\"line\">cur=egine.execute(<span class=\"string\">'select * from t1'</span>)</span><br><span class=\"line\">cur.fetchone() <span class=\"comment\">#获取一行</span></span><br><span class=\"line\">cur.fetchmany(<span class=\"number\">2</span>) <span class=\"comment\">#获取多行</span></span><br><span class=\"line\">cur.fetchall() <span class=\"comment\">#获取所有行</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 类 &lt;==&gt; 表</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> sqlalchemy <span class=\"keyword\">import</span> create_engine</span><br><span class=\"line\"><span class=\"keyword\">from</span> sqlalchemy.ext.declarative <span class=\"keyword\">import</span> declarative_base</span><br><span class=\"line\"><span class=\"keyword\">from</span> sqlalchemy <span class=\"keyword\">import</span> Column,Integer,String,DateTime,Enum,ForeignKey,UniqueConstraint,ForeignKeyConstraint,Index</span><br><span class=\"line\"><span class=\"keyword\">from</span> sqlalchemy.orm <span class=\"keyword\">import</span> sessionmaker</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Users</span><span class=\"params\">(Base)</span>:</span></span><br><span class=\"line\">  <span class=\"comment\"># 表名</span></span><br><span class=\"line\">  __tablename__=<span class=\"string\">'users'</span></span><br><span class=\"line\">  <span class=\"comment\"># 字段：primary_key主键，autoincrement自增</span></span><br><span class=\"line\">  id=Column(Integer,primary_key=<span class=\"literal\">True</span>,autoincrement=<span class=\"literal\">True</span>)</span><br><span class=\"line\">  uname=Column(String(<span class=\"number\">32</span>),nullable=<span class=\"literal\">False</span>,index=<span class=\"literal\">True</span>)</span><br><span class=\"line\">  <span class=\"comment\"># nullable：字段是否可以为空，server_default：默认值，onupdate：行更新时值自动变化</span></span><br><span class=\"line\">  uptime = Column(TIMESTAMP(<span class=\"literal\">True</span>), nullable=<span class=\"literal\">False</span>, server_default=func.now(), onupdate=func.now())  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">  egine=create_engine(<span class=\"string\">'mysql+pymysql://root@127.0.0.1:3306/db1?charset=utf8'</span>,max_overflow=<span class=\"number\">5</span>)</span><br><span class=\"line\">  <span class=\"comment\"># 创建所有表</span></span><br><span class=\"line\">  Base.metadata.create_all(egine)</span><br><span class=\"line\">  <span class=\"comment\"># 删除所有表</span></span><br><span class=\"line\">  Base.metadata.drop_all(egine)</span><br><span class=\"line\">  <span class=\"comment\"># 操作对象</span></span><br><span class=\"line\">  Session=sessionmaker(bind=egine)</span><br><span class=\"line\">  session=Session()</span><br><span class=\"line\">  <span class=\"comment\"># 新增</span></span><br><span class=\"line\">  session.add(Users(uname=<span class=\"string\">'张三'</span>))</span><br><span class=\"line\">  session.add_all([Users(uname=<span class=\"string\">'张三'</span>), Users(uname=<span class=\"string\">'李四'</span>)])</span><br><span class=\"line\">  session.commit()</span><br><span class=\"line\">  <span class=\"comment\"># 删</span></span><br><span class=\"line\">  session.query(Users).filter(Users.id &gt; <span class=\"number\">3</span>).delete()</span><br><span class=\"line\">  session.commit()</span><br><span class=\"line\">  <span class=\"comment\"># 改</span></span><br><span class=\"line\">  session.query(Users).filter(Users.id &gt; <span class=\"number\">0</span>).update(&#123;<span class=\"string\">'uname'</span>:<span class=\"string\">'哇哈哈'</span>&#125;)</span><br><span class=\"line\">  session.commit()</span><br><span class=\"line\">  <span class=\"comment\"># 查</span></span><br><span class=\"line\">  res=session.query(Users).all()</span><br><span class=\"line\">  res=session.query(Users.uname).order_by(Users.id).all()</span><br><span class=\"line\">  res=session.query(Users.uname).first()</span><br><span class=\"line\">  res=session.query(Dep).filter(Users.id &gt; <span class=\"number\">1</span>,Users.id &lt;<span class=\"number\">1000</span>)  <span class=\"comment\"># 默认为AND</span></span><br><span class=\"line\">  print([(row.id,row.dname) <span class=\"keyword\">for</span> row <span class=\"keyword\">in</span> res])</span><br><span class=\"line\">  <span class=\"comment\"># 过滤</span></span><br><span class=\"line\">  res=session.query(Emp).filter(~Emp.id.in_([<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">99</span>,<span class=\"number\">101</span>]),Emp.ename == <span class=\"string\">'林海峰'</span>)  <span class=\"comment\">#~代表取反,转换成sql就是关键字not</span></span><br><span class=\"line\">  <span class=\"keyword\">from</span> sqlalchemy <span class=\"keyword\">import</span> and_,or_</span><br><span class=\"line\">  res=session.query(Emp).filter(and_(Emp.id &gt; <span class=\"number\">0</span>,Emp.ename==<span class=\"string\">'林海峰'</span>)).all()</span><br><span class=\"line\">  res=session.query(Emp).filter(or_(Emp.id &lt; <span class=\"number\">2</span>,Emp.ename==<span class=\"string\">'功夫熊猫'</span>)).all()</span><br><span class=\"line\">  <span class=\"comment\"># 通配符</span></span><br><span class=\"line\">  res=session.query(Emp).filter(Emp.ename.like(<span class=\"string\">'%海_%'</span>)).all()</span><br><span class=\"line\">  <span class=\"comment\"># limit</span></span><br><span class=\"line\">  res=session.query(Emp)[<span class=\"number\">0</span>:<span class=\"number\">5</span>:<span class=\"number\">2</span>]</span><br><span class=\"line\">  <span class=\"comment\"># 排序</span></span><br><span class=\"line\">  res=session.query(Emp).order_by(Emp.dep_id.desc(),Emp.id.asc()).all()</span><br><span class=\"line\">  <span class=\"comment\"># 分组</span></span><br><span class=\"line\">  <span class=\"keyword\">from</span> sqlalchemy.sql <span class=\"keyword\">import</span> func</span><br><span class=\"line\">  res=session.query(Emp.dep_id).group_by(Emp.dep_id).all()</span><br><span class=\"line\">  res=session.query(</span><br><span class=\"line\">      func.max(Emp.dep_id),</span><br><span class=\"line\">      func.min(Emp.dep_id),</span><br><span class=\"line\">      func.sum(Emp.dep_id),</span><br><span class=\"line\">      func.avg(Emp.dep_id),</span><br><span class=\"line\">      func.count(Emp.dep_id),</span><br><span class=\"line\">  ).group_by(Emp.dep_id).all()</span><br><span class=\"line\"></span><br><span class=\"line\">  res=session.query(</span><br><span class=\"line\">      Emp.dep_id,</span><br><span class=\"line\">      func.count(<span class=\"number\">1</span>),</span><br><span class=\"line\">  ).group_by(Emp.dep_id).having(func.count(<span class=\"number\">1</span>) &gt; <span class=\"number\">2</span>).all()</span><br><span class=\"line\">  <span class=\"comment\"># 连表</span></span><br><span class=\"line\">  res=session.query(Emp,Dep).all()</span><br><span class=\"line\">  res=session.query(Emp,Dep).filter(Emp.dep_id==Dep.id).all()</span><br><span class=\"line\">  <span class=\"comment\"># 内连接</span></span><br><span class=\"line\">  res=session.query(Emp).join(Dep)</span><br><span class=\"line\">  <span class=\"comment\"># 左连接</span></span><br><span class=\"line\">  res=session.query(Emp.id,Emp.ename,Emp.dep_id,Dep.dname).join(Dep,isouter=<span class=\"literal\">True</span>).all()</span><br><span class=\"line\">  <span class=\"comment\"># 组合</span></span><br><span class=\"line\">  q1=session.query(Emp.id,Emp.ename).filter(Emp.id &gt; <span class=\"number\">0</span>,Emp.id &lt; <span class=\"number\">5</span>)</span><br><span class=\"line\">  q2=session.query(Emp.id,Emp.ename).filter(</span><br><span class=\"line\">      or_(</span><br><span class=\"line\">          Emp.ename.like(<span class=\"string\">'%海%'</span>),</span><br><span class=\"line\">          Emp.ename.like(<span class=\"string\">'%昊%'</span>),</span><br><span class=\"line\">      )</span><br><span class=\"line\">  )</span><br><span class=\"line\">  res1=q1.union(q2) <span class=\"comment\">#组合+去重</span></span><br><span class=\"line\">  res2=q1.union_all(q2) <span class=\"comment\">#组合,不去重</span></span><br><span class=\"line\">  <span class=\"comment\"># 子查询</span></span><br><span class=\"line\">  res=session.query(</span><br><span class=\"line\">    session.query(Emp).filter(Emp.id &gt; <span class=\"number\">8</span>).subquery()</span><br><span class=\"line\">  ).all()</span><br></pre></td></tr></table></figure>\n\n","categories":["Python"],"tags":["pymysql"]},{"title":"数据库","url":"/2019/11/11/Python/数据库/","content":"<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p><code>pip install pymysql</code></p>\n<h2 id=\"常规使用\"><a href=\"#常规使用\" class=\"headerlink\" title=\"常规使用\"></a>常规使用</h2><figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pymysql</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 连接</span></span><br><span class=\"line\">conn = pymysql.connect(</span><br><span class=\"line\">  host=db_info[<span class=\"string\">'ip'</span>], user=db_info[<span class=\"string\">'user'</span>], passwd=db_info[<span class=\"string\">'password'</span>],</span><br><span class=\"line\">  port=port, db=db_info[<span class=\"string\">'dbname'</span>], charset=<span class=\"string\">'utf8'</span>)</span><br><span class=\"line\">conn.autocommit(autocommit)   <span class=\"comment\"># 是否自动提交</span></span><br><span class=\"line\">cur = conn.cursor()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 语句执行</span></span><br><span class=\"line\">cur.execute(sql)</span><br><span class=\"line\"><span class=\"comment\"># 事务提交</span></span><br><span class=\"line\">conn.commit()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Select 结果</span></span><br><span class=\"line\">cur.fetchone()</span><br><span class=\"line\">cur.fetchmany(num)</span><br><span class=\"line\">cur.fetchall()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># insert / update / delete 影响个数</span></span><br><span class=\"line\">cur.rowcount</span><br><span class=\"line\">cur.rownumber</span><br></pre></td></tr></table></figure>\n\n","categories":["Python"],"tags":["pymysql"]},{"title":"RabbitMQ","url":"/2019/11/11/Python/数据库/RabbitMQ/","content":"<h2 id=\"封装\"><a href=\"#封装\" class=\"headerlink\" title=\"封装\"></a>封装</h2><h3 id=\"封装-生产者\"><a href=\"#封装-生产者\" class=\"headerlink\" title=\"封装-生产者\"></a>封装-生产者</h3><figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf8 -*-</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">RabbitMQ 生产者</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> pika</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> threading</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EsPublish</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"生产者\"\"\"</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, db)</span>:</span></span><br><span class=\"line\">        self.cfg = db</span><br><span class=\"line\">        credentials = pika.PlainCredentials(self.cfg[<span class=\"string\">'user'</span>], self.cfg[<span class=\"string\">'password'</span>])</span><br><span class=\"line\">        self.conn_param = pika.ConnectionParameters(</span><br><span class=\"line\">            host=self.cfg[<span class=\"string\">'ip'</span>], port=int(self.cfg[<span class=\"string\">'port'</span>]),</span><br><span class=\"line\">            virtual_host=<span class=\"string\">'/'</span>, credentials=credentials, heartbeat=<span class=\"number\">60</span>)</span><br><span class=\"line\">        self.connection = <span class=\"literal\">None</span></span><br><span class=\"line\">        self.channel = <span class=\"literal\">None</span></span><br><span class=\"line\">        self.queue_declare = <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">blocking_connect</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self.connection = pika.BlockingConnection(self.conn_param)</span><br><span class=\"line\">        self.channel = self.connection.channel()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">check_queue</span><span class=\"params\">(self, queue, exchange)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 声明一个持久队列</span></span><br><span class=\"line\">        self.queue_declare = self.channel.queue_declare(queue=queue, durable=<span class=\"literal\">True</span>)</span><br><span class=\"line\">        self.channel.confirm_delivery()</span><br><span class=\"line\">        <span class=\"comment\"># 声明一个持久交换机</span></span><br><span class=\"line\">        self.channel.exchange_declare(exchange=exchange, exchange_type=<span class=\"string\">\"direct\"</span>, durable=<span class=\"literal\">True</span>)</span><br><span class=\"line\">        self.channel.queue_bind(queue=queue, exchange=exchange, routing_key=queue)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_length</span><span class=\"params\">(self, queue=None)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> queue <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> self.queue_declare.method.message_count</span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.queue_declare <span class=\"keyword\">and</span> (queue == self.queue_declare.method.queue):</span><br><span class=\"line\">            <span class=\"keyword\">return</span> self.queue_declare.method.message_count</span><br><span class=\"line\">        queue_declare = self.channel.queue_declare(queue=queue, durable=<span class=\"literal\">True</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> queue_declare.method.message_count</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">send</span><span class=\"params\">(self, queue, exchange, body)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 发布一条数据 - 到指定交换机</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.channel.basic_publish(exchange=exchange, routing_key=queue, body=body, mandatory=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">close</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self.connection.close()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EsConsume</span><span class=\"params\">(EsPublish)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, db, queue, callback)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"消费者\"\"\"</span></span><br><span class=\"line\">        super(EsConsume, self).__init__(db)</span><br><span class=\"line\">        self.queue = queue</span><br><span class=\"line\">        self.cb = callback</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">on_consume</span><span class=\"params\">(self, channel, method, properties, body)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"消息回调\"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.cb(channel, method, properties, body):</span><br><span class=\"line\">            <span class=\"comment\"># 消息完成标记</span></span><br><span class=\"line\">            channel.basic_ack(method.delivery_tag)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">basic_consume</span><span class=\"params\">(self, auto_stop=<span class=\"number\">0</span>)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 每次消费1条消息 - 多消费者时, 避免某个消费者一次性获取太多消息</span></span><br><span class=\"line\">        self.channel.basic_qos(prefetch_count=<span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"comment\"># 消费者标签: consumer_test - 用于明确关闭消费者</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            self.channel.basic_consume(self.on_consume, queue=self.queue, no_ack=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                       consumer_tag=<span class=\"string\">'consumer_%s'</span> % self.queue)</span><br><span class=\"line\">        <span class=\"keyword\">except</span> TypeError:</span><br><span class=\"line\">            self.channel.basic_consume(queue=self.queue, on_message_callback=self.on_consume, auto_ack=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                       consumer_tag=<span class=\"string\">'consumer_%s'</span> % self.queue)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> auto_stop &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">            tee = threading.Thread(target=self.thread_stop_consume, args=(auto_stop,))</span><br><span class=\"line\">            tee.setDaemon(<span class=\"literal\">True</span>)  <span class=\"comment\"># 设置跟随父线程</span></span><br><span class=\"line\">            tee.start()</span><br><span class=\"line\">        self.channel.start_consuming()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">stop_consume</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self.channel.stop_consuming(consumer_tag=<span class=\"string\">'consumer_%s'</span> % self.queue)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">thread_stop_consume</span><span class=\"params\">(self, auto_stop)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> auto_stop &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">            time.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\">            auto_stop -= <span class=\"number\">1</span></span><br><span class=\"line\">        self.channel.stop_consuming(consumer_tag=<span class=\"string\">'consumer_%s'</span> % self.queue)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    db = &#123;</span><br><span class=\"line\">        <span class=\"string\">'ip'</span>: <span class=\"string\">'127.0.0.1'</span>,</span><br><span class=\"line\">        <span class=\"string\">'port'</span>: <span class=\"string\">'5672'</span>,</span><br><span class=\"line\">        <span class=\"string\">'user'</span>: <span class=\"string\">'user'</span>,</span><br><span class=\"line\">        <span class=\"string\">'password'</span>: <span class=\"string\">'password'</span>,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    t = EsPublish(db)</span><br><span class=\"line\">    t.blocking_connect()</span><br><span class=\"line\">    t.check_queue(<span class=\"string\">'test_queue'</span>, <span class=\"string\">'test_exchange'</span>)</span><br><span class=\"line\">    t.send(<span class=\"string\">'test_queue'</span>, <span class=\"string\">'test_exchange'</span>, <span class=\"string\">'test_value'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">print</span> t.get_length()</span><br><span class=\"line\">    t.close()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    test()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"封装-消费者\"><a href=\"#封装-消费者\" class=\"headerlink\" title=\"封装-消费者\"></a>封装-消费者</h3><figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf8 -*-</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">rabbitmq 消费者</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">from</span> test_rabbitmq_publish <span class=\"keyword\">import</span> EsConsume</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RabbitMQRead</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, db, queue, exchange)</span>:</span></span><br><span class=\"line\">        self.queue = queue</span><br><span class=\"line\">        self.exchange = exchange</span><br><span class=\"line\">        self.time_start = int(time.time())</span><br><span class=\"line\">        self.rabbitmq = EsConsume(db, queue=queue, callback=self.on_consume)</span><br><span class=\"line\">        self.auto_stop = <span class=\"number\">3600</span>*<span class=\"number\">6</span>      <span class=\"comment\"># 每6h, 重启一次</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">on_consume</span><span class=\"params\">(self, channel, method, properties, body)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"消息回调：重写此函数即可\"\"\"</span></span><br><span class=\"line\">        <span class=\"comment\"># print channel, method, properties</span></span><br><span class=\"line\">        <span class=\"keyword\">print</span> body</span><br><span class=\"line\">        <span class=\"comment\"># 处理完成后一定要返回True，标记消息处理完成</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">connect</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self.rabbitmq.blocking_connect()</span><br><span class=\"line\">        self.rabbitmq.check_queue(self.queue, self.exchange)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.rabbitmq.get_length(self.queue)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">start</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self.rabbitmq.basic_consume(self.auto_stop)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    db = &#123;</span><br><span class=\"line\">        <span class=\"string\">'ip'</span>: <span class=\"string\">'127.0.0.1'</span>,</span><br><span class=\"line\">        <span class=\"string\">'port'</span>: <span class=\"string\">'5672'</span>,</span><br><span class=\"line\">        <span class=\"string\">'user'</span>: <span class=\"string\">'user'</span>,</span><br><span class=\"line\">        <span class=\"string\">'password'</span>: <span class=\"string\">'password'</span>,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    rr = RabbitMQRead(db, <span class=\"string\">'test_queue'</span>, <span class=\"string\">'test_exchange'</span>)</span><br><span class=\"line\">    rr.auto_stop = <span class=\"number\">3</span></span><br><span class=\"line\">    rr.connect()</span><br><span class=\"line\">    rr.start()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    test()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"HTTPAPI\"><a href=\"#HTTPAPI\" class=\"headerlink\" title=\"HTTPAPI\"></a>HTTPAPI</h3><figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># coding=utf8</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">RabbitMQ</span></span><br><span class=\"line\"><span class=\"string\">无效队列: RabbitMQ 会自动清理长时间不使用的队列</span></span><br><span class=\"line\"><span class=\"string\">    猜测：所谓的持久队列仅仅是数据持久，如果队列无数据且无消费者/生产者，还是会被自动清理掉的</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"><span class=\"keyword\">import</span> datetime</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RabbitMQHttp</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self.host = <span class=\"string\">'http://127.0.0.1:15672'</span></span><br><span class=\"line\">        self.auth = (<span class=\"string\">'***'</span>, <span class=\"string\">'***'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">request_api</span><span class=\"params\">(self, name)</span>:</span></span><br><span class=\"line\">        r = requests.get(self.host + <span class=\"string\">'/api/'</span> + name, auth=self.auth)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> json.loads(r.content)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">request_vhosts</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.request_api(<span class=\"string\">'vhosts'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">request_queues</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.request_api(<span class=\"string\">'queues'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">request_connections</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.request_api(<span class=\"string\">'connections'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EsClear</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self.rh = RabbitMQHttp()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_invalid_queues</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        d = datetime.datetime.now() - datetime.timedelta(days=<span class=\"number\">1</span>)</span><br><span class=\"line\">        d = d.strftime(<span class=\"string\">'%Y-%m-%d %H:%M:%S'</span>)</span><br><span class=\"line\">        queues = self.rh.request_queues()</span><br><span class=\"line\">        re = []</span><br><span class=\"line\">        <span class=\"keyword\">for</span> q <span class=\"keyword\">in</span> queues:</span><br><span class=\"line\">            <span class=\"comment\"># 自动清理的越过</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> q[<span class=\"string\">'auto_delete'</span>]:</span><br><span class=\"line\">                <span class=\"comment\"># print 'auto_delete', q</span></span><br><span class=\"line\">                <span class=\"keyword\">continue</span></span><br><span class=\"line\">            <span class=\"comment\"># 存在消费者的越过</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> q[<span class=\"string\">'consumers'</span>] &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">                <span class=\"comment\"># print 'consumers: name=%(name)s, consumers=%(consumers)s, messages=%(messages)s' % q</span></span><br><span class=\"line\">                <span class=\"keyword\">continue</span></span><br><span class=\"line\">            <span class=\"comment\"># 最近使用过的越过</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> q[<span class=\"string\">'idle_since'</span>] &gt; d:</span><br><span class=\"line\">                <span class=\"keyword\">print</span> <span class=\"string\">'idle_since: name=%(name)s, idle_since=%(idle_since)s, messages=%(messages)s'</span> % q</span><br><span class=\"line\">                <span class=\"keyword\">continue</span></span><br><span class=\"line\">            re.append(q)</span><br><span class=\"line\">            <span class=\"keyword\">print</span> json.dumps(q, sort_keys=<span class=\"literal\">True</span>, indent=<span class=\"number\">4</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> re</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    ec = EsClear()</span><br><span class=\"line\">    ec.get_invalid_queues()</span><br></pre></td></tr></table></figure>\n\n","categories":["Python"],"tags":["RabbitMQ"]},{"title":"web.py","url":"/2019/11/11/Python/Web/web.py/","content":"<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p><code>pip install web.py</code></p>\n<h2 id=\"hello-world\"><a href=\"#hello-world\" class=\"headerlink\" title=\"hello world\"></a>hello world</h2><ul>\n<li>端口: 默认<code>8080</code>, 可以通过命令行修改 <code>python test.py 8081</code></li>\n<li>发现HTTP请求时，创建新进程，所以<strong>脚本更新，即时生效</strong></li>\n</ul>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Hello world</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> web</span><br><span class=\"line\"></span><br><span class=\"line\">urls = (<span class=\"string\">\"/.*\"</span>, <span class=\"string\">\"hello\"</span>)   <span class=\"comment\"># 与类名相对应，大小写敏感</span></span><br><span class=\"line\">app = web.application(urls, globals())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">hello</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">GET</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'Hello, world!'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    app.run()</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"常规用法\"><a href=\"#常规用法\" class=\"headerlink\" title=\"常规用法\"></a>常规用法</h2><figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">hello</span>:</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">GET</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">    data = web.input()  <span class=\"comment\"># URL上报所有参数，包含post，get，表单</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'Hello, world!'</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>数据库</h2><figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\">db = web.database(</span><br><span class=\"line\">    dbn=<span class=\"string\">'mysql'</span>, host=<span class=\"string\">'localhost'</span>, port=<span class=\"number\">3306</span>,</span><br><span class=\"line\">    db=<span class=\"string\">'test_db'</span>, user=<span class=\"string\">'test'</span>, passwd=<span class=\"string\">'123456'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">data = db.select(<span class=\"string\">\"test_table\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> d <span class=\"keyword\">in</span> data:</span><br><span class=\"line\">    print(d[<span class=\"string\">'name'</span>])</span><br></pre></td></tr></table></figure>\n\n","categories":["Python"],"tags":["web.py"]},{"title":"代码整理","url":"/2019/11/10/VCTools/代码整理/","content":"<h2 id=\"tools\"><a href=\"#tools\" class=\"headerlink\" title=\"tools\"></a>tools</h2><ul>\n<li><a href=\"https://github.com/fxliu/base64\" target=\"_blank\" rel=\"noopener\">base64</a></li>\n<li><a href=\"https://github.com/fxliu/cpp-base64\" target=\"_blank\" rel=\"noopener\">base64_cpp</a></li>\n<li><a href=\"https://github.com/fxliu/VCDemo/tree/master/NET/ProductUpdate\" target=\"_blank\" rel=\"noopener\">curl+openssl</a></li>\n<li><a href=\"https://github.com/fxliu/VCDemo/tree/master/NET/ProductUpdate\" target=\"_blank\" rel=\"noopener\">openssl+aes</a></li>\n</ul>\n<h2 id=\"mytools\"><a href=\"#mytools\" class=\"headerlink\" title=\"mytools\"></a>mytools</h2><ul>\n<li><a href=\"https://github.com/fxliu/VCDemo/tree/master/NET/ProductUpdate\" target=\"_blank\" rel=\"noopener\">ProductUpdate</a><ul>\n<li>产品热升级机制</li>\n<li>curl+openssl</li>\n</ul>\n</li>\n</ul>\n","categories":["tools"],"tags":[]},{"title":"FFmepg(4.2)+SDL(2.0)播放器","url":"/2019/11/10/VCTools/FFmepg+SDL播放器/","content":"<h2 id=\"FFmepg环境-4-2\"><a href=\"#FFmepg环境-4-2\" class=\"headerlink\" title=\"FFmepg环境(4.2)\"></a>FFmepg环境(4.2)</h2><ul>\n<li><a href=\"http://ffmpeg.zeranoe.com/builds/\" target=\"_blank\" rel=\"noopener\">FFmepg官网</a> 下载最新的ffmpeg的dev版和share版，当前最新版是4.2<ul>\n<li>注意区分x64和x86，取决于你vs2015调试的解决方案平台用什么，如果安装了错误的版本将会出现一堆无法解析的错误</li>\n<li>包含三个版本：Static、Shared以及Dev<ul>\n<li>Static: 包含3个应用程序：ffmpeg.exe , ffplay.exe , ffprobe.exe，体积都很大，相关的DLL已经被编译到exe里面去了。</li>\n<li>Shared: 除了ffmpeg.exe , ffplay.exe , ffprobe.exe之外还有一些DLL，exe体积很小，在运行时到相应的DLL中调用功能。</li>\n<li>Dev: 开发者（developer）版本，里面包含了库文件xxx.lib以及头文件xxx.h，这个版本不含exe文件</li>\n</ul>\n</li>\n<li>把dev版本与share版本都下下来解压，dev版本文件夹中的Include和lib目录整个儿复制到VS项目目录下</li>\n<li>将share版本文件夹中bin目录下对应的所有dll复制到exe根目录</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"FFmepg引入\"><a href=\"#FFmepg引入\" class=\"headerlink\" title=\"FFmepg引入\"></a>FFmepg引入</h3><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 头文件中的函数定义在编译为 C 程序的文件中，而头文件是在 C++ 文件中不带 extern “C” 修饰符声明的。在此情况下，需要添加extern \"C\"修饰符。</span></span><br><span class=\"line\"><span class=\"comment\">// 不添加 extern “C” 修饰符 会提示 无法解析 导致编译失败</span></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"string\">\"C\"</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"libavcodec\\avcodec.h\"</span>  </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"libavformat\\avformat.h\"</span>  </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"libavutil\\channel_layout.h\"</span>  </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"libavutil\\common.h\"</span>  </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"libavutil\\imgutils.h\"</span>  </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"libswscale\\swscale.h\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"libavutil\\imgutils.h\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"libavutil\\opt.h\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"libavutil\\mathematics.h\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"libavutil\\samplefmt.h\"</span></span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> comment(lib, <span class=\"meta-string\">\"avcodec.lib\"</span>)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> comment(lib, <span class=\"meta-string\">\"avformat.lib\"</span>)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> comment(lib, <span class=\"meta-string\">\"avdevice.lib\"</span>)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> comment(lib, <span class=\"meta-string\">\"avfilter.lib\"</span>)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> comment(lib, <span class=\"meta-string\">\"avutil.lib\"</span>)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> comment(lib, <span class=\"meta-string\">\"postproc.lib\"</span>)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> comment(lib, <span class=\"meta-string\">\"swresample.lib\"</span>)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> comment(lib, <span class=\"meta-string\">\"swscale.lib\"</span>)</span></span><br><span class=\"line\"><span class=\"comment\">// 测试</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"%s\"</span>, avcodec_configuration());</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"FFmepg应用\"><a href=\"#FFmepg应用\" class=\"headerlink\" title=\"FFmepg应用\"></a>FFmepg应用</h3><p>关键函数调试不通过时，还是自己到dev版的examples搜函数使用案例吧，网上各种旧版本的说明，有些函数已经废弃了，调用逻辑也不对</p>\n<p>视频播放基本上时固定模式打开-&gt;参数设定-&gt;读取-&gt;解码-&gt;转码-&gt;显示，剩下的看Demo吧</p>\n<p>音频处理流程基本类似</p>\n<ul>\n<li><code>avformat_open_input</code>打开视频文件<ul>\n<li><code>avformat_close_input</code>关闭视频文件</li>\n</ul>\n</li>\n<li><code>av_read_frame</code>读</li>\n<li><code>avcodec_send_packet</code> -&gt; <code>avcodec_receive_frame</code>解码</li>\n<li><code>sws_scale</code>转码，Demo中时转为YUV420P格式，提供SDL播放<ul>\n<li>注意保存解码结果的缓冲区的申请，被网上旧代码各种坑，自己去examples看官方势力吧</li>\n<li>注意还有个视频/音频播放延迟提取，SDL播放时要做到音视频同步</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"备记几个FFmepg常用参数\"><a href=\"#备记几个FFmepg常用参数\" class=\"headerlink\" title=\"备记几个FFmepg常用参数\"></a>备记几个FFmepg常用参数</h3><ul>\n<li>格式转换<ul>\n<li><code>ffmpeg -i input.avi output.mp4</code></li>\n<li><code>-vcodec mpeg4</code>：指定编码格式</li>\n</ul>\n</li>\n<li>裁剪：从30秒开始到40秒<ul>\n<li><code>ffmpeg -i input.wmv -ss 30 -t 10 output.wmv</code></li>\n<li><code>ffmpeg -i input.wmv -ss 30 -to 40 output.wmv</code><ul>\n<li>把-ss, -t参数放在-i参数之后，是对输出文件执行的seek操作; 逐帧解码，直到-ss设置的时间点为止，这么操作会很慢，虽然时间点是准确的，但是很容易出现黑屏问题。</li>\n<li>将-ss，-t参数放在-i参数之前，对输入文件执行seek操作，会seek到-ss设置的时间点前面的关键帧上，时间不精确，但是不会出现黑屏。<ul>\n<li>可以补充accurate_seek 参数，让剪切时间更加精准，但seek要放在-i之前</li>\n<li><code>ffmpeg -ss 10 -t 15 -accurate_seek -i test.mp4 cut.mp4</code></li>\n<li>如果编码格式采用的copy 最好加上 -avoid_negative_ts 1参数</li>\n<li><code>ffmpeg -ss 10 -t 15 -accurate_seek -i test.mp4 -codec copy -avoid_negative_ts 1 cut.mp4</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code>-c copy</code>：复制所有的流</li>\n<li><code>-vcodec copy</code>：使用跟原视频一样的视频编解码器</li>\n<li><code>-acodec copy</code>：使用跟原视频一样的音频编解码器</li>\n<li>``</li>\n</ul>\n</li>\n<li>音量：音贝<ul>\n<li><code>.\\ffmpeg -i s1.mp4 -af &quot;volumedetect&quot; -f null /dev/null</code>：查看<code>mean_volume</code>-&gt;<code>max_volume</code></li>\n<li><code>ffmpeg  -i input.mp3 -af &quot;volume=0.5&quot; output.mp3</code>：减半</li>\n<li><code>ffmpeg  -i input.mp3 -af &quot;volume=2&quot; output.mp3</code>：加倍</li>\n<li><code>ffmpeg  -i input.mp3 -af &quot;volume=5dB&quot; output.mp3</code>：增加指定分贝数（使用负数<code>-5dB</code>则为降低分贝）</li>\n<li><code>ffmepg -i input.mp3 -filter:a &quot;loudnorm&quot; output.mp3</code>：音频标准化：削峰填谷，使整个音频的音量变化跨度降低，变得平滑</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"SDL环境-2-0\"><a href=\"#SDL环境-2-0\" class=\"headerlink\" title=\"SDL环境(2.0)\"></a>SDL环境(2.0)</h2><ul>\n<li><a href=\"http://www.libsdl.org/\" target=\"_blank\" rel=\"noopener\">SDL官网</a></li>\n</ul>\n<h3 id=\"SDL引入\"><a href=\"#SDL引入\" class=\"headerlink\" title=\"SDL引入\"></a>SDL引入</h3><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"string\">\"C\"</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"ffmpeg\\libavutil\\frame.h\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"SDL/SDL.h\"</span></span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> comment(lib, <span class=\"meta-string\">\"SDL2.lib\"</span>)</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"SDL应用\"><a href=\"#SDL应用\" class=\"headerlink\" title=\"SDL应用\"></a>SDL应用</h3><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 初始化</span></span><br><span class=\"line\">SDL_Init(SDL_INIT_EVERYTHING);</span><br><span class=\"line\"><span class=\"comment\">// 创建窗体：支持直接创建一个弹出窗，或者附加到指定窗体句柄上</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!m_hWnd)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  m_sdlWindow = SDL_CreateWindow(<span class=\"string\">\"SDL_Window\"</span>, SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED,</span><br><span class=\"line\">    w, h, SDL_WINDOW_SHOWN | SDL_WINDOW_RESIZABLE);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  m_sdlWindow = SDL_CreateWindowFrom(m_hWnd);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 渲染器</span></span><br><span class=\"line\">m_sdlRenderer = SDL_CreateRenderer(m_sdlWindow, <span class=\"number\">-1</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"comment\">// 设置Renderer按视频比例(m_videoWidth, m_videoHeight)缩放，默认按屏幕拉伸</span></span><br><span class=\"line\">SDL_RenderSetLogicalSize(m_sdlRenderer, m_videoWidth, m_videoHeight);</span><br><span class=\"line\"><span class=\"comment\">// 纹理：Texture宽高一定要对应视频宽高</span></span><br><span class=\"line\">m_sdlTexture = SDL_CreateTexture(m_sdlRenderer, SDL_PIXELFORMAT_IYUV, SDL_TEXTUREACCESS_STREAMING, m_videoWidth, m_videoHeight);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 视频播放 frame 为FFmepg解码后的数据帧</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (m_sdlTexture) SDL_UpdateTexture(m_sdlTexture, <span class=\"literal\">NULL</span>, frame-&gt;data[<span class=\"number\">0</span>], frame-&gt;linesize[<span class=\"number\">0</span>]);</span><br><span class=\"line\"><span class=\"comment\">// 遇到SDL_UpdateTexture崩溃情况的话，可以尝试直接调用SDL_UpdateYUVTexture</span></span><br><span class=\"line\"><span class=\"comment\">//if (m_sdlTexture) SDL_UpdateYUVTexture(m_sdlTexture, NULL,</span></span><br><span class=\"line\"><span class=\"comment\">//  frame-&gt;data[0], frame-&gt;linesize[0], frame-&gt;data[1], frame-&gt;linesize[1], frame-&gt;data[2], frame-&gt;linesize[2]);</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (m_sdlRenderer) SDL_RenderClear(m_sdlRenderer);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (m_sdlRenderer &amp;&amp; m_sdlTexture) SDL_RenderCopy(m_sdlRenderer, m_sdlTexture, <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (m_sdlRenderer) SDL_RenderPresent(m_sdlRenderer);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 清理</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (m_sdlTexture)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  SDL_DestroyTexture(m_sdlTexture);</span><br><span class=\"line\">  m_sdlTexture = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (m_sdlRenderer)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  SDL_DestroyRenderer(m_sdlRenderer);</span><br><span class=\"line\">  m_sdlRenderer = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (m_sdlWindowScreen)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  SDL_FreeSurface(m_sdlWindowScreen);</span><br><span class=\"line\">  m_sdlWindowScreen = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (m_sdlWindow)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  SDL_DestroyWindow(m_sdlWindow);</span><br><span class=\"line\">  m_sdlWindow = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">SDL_Quit();</span><br><span class=\"line\"><span class=\"comment\">// ----------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">// 音频播放回调</span></span><br><span class=\"line\"><span class=\"comment\">//音频设备需要更多数据的时候会调用该回调函数</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> CMyVideo::read_audio_data(<span class=\"keyword\">void</span> *udata, Uint8 *stream, <span class=\"keyword\">int</span> len)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  CMyVideo *pThis = (CMyVideo*)udata;</span><br><span class=\"line\">  <span class=\"comment\">//首先使用SDL_memset()将stream中的数据设置为0</span></span><br><span class=\"line\">  SDL_memset(stream, <span class=\"number\">0</span>, len);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (pThis-&gt;m_audio_len == <span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  len = (len &gt; (<span class=\"keyword\">int</span>)pThis-&gt;m_audio_len ? pThis-&gt;m_audio_len : len);</span><br><span class=\"line\">  <span class=\"comment\">// 最后一个参数代表音量：SDL_MIX_MAXVOLUME</span></span><br><span class=\"line\">  SDL_MixAudio(stream, pThis-&gt;m_audio_pos, len, pThis-&gt;m_volume);</span><br><span class=\"line\">  pThis-&gt;m_audio_pos += len;</span><br><span class=\"line\">  pThis-&gt;m_audio_len -= len;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 打开音频</span></span><br><span class=\"line\">BOOL CMyVideo::OpenAudio(<span class=\"keyword\">int</span> audioRate, Uint16 audioFrameSize)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 音频参数: 最好和视频参数保持一致，否则会有杂声</span></span><br><span class=\"line\">  SDL_AudioSpec spec;</span><br><span class=\"line\">  spec.freq = audioRate;        <span class=\"comment\">// 对应音频转换设置</span></span><br><span class=\"line\">  spec.format = AUDIO_S32;      <span class=\"comment\">// 对应音频转换设置</span></span><br><span class=\"line\">  spec.channels = <span class=\"number\">2</span>;</span><br><span class=\"line\">  spec.silence = <span class=\"number\">0</span>;</span><br><span class=\"line\">  spec.samples = audioFrameSize;    <span class=\"comment\">// 对应音频帧缓存大小</span></span><br><span class=\"line\">  spec.callback = read_audio_data;</span><br><span class=\"line\">  spec.userdata = <span class=\"keyword\">this</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (SDL_OpenAudio(&amp;spec, <span class=\"literal\">NULL</span>) &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> FALSE;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  SDL_PauseAudio(<span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> TRUE;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 音频播放：buf/len为FFmepg音频解析结果</span></span><br><span class=\"line\">m_audio_chunk = buf[<span class=\"number\">0</span>];</span><br><span class=\"line\">m_audio_pos = m_audio_chunk;</span><br><span class=\"line\">m_audio_len = len;</span><br><span class=\"line\"><span class=\"comment\">// 等待播放完成</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> (m_audio_len &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">  SDL_Delay(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 音频关闭</span></span><br><span class=\"line\">SDL_CloseAudio();</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"SDL扩展\"><a href=\"#SDL扩展\" class=\"headerlink\" title=\"SDL扩展\"></a>SDL扩展</h2><ul>\n<li><a href=\"http://www.libsdl.org/projects/SDL_image/\" target=\"_blank\" rel=\"noopener\">SDL_Image</a>扩展支持多种类型图片加载<ul>\n<li>SDL默认只支持加载BMP</li>\n</ul>\n</li>\n<li><a href=\"http://www.libsdl.org/projects/SDL_mixer/\" target=\"_blank\" rel=\"noopener\">SDL_mixer</a>扩展各种音乐播放</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 窗体创建：略，SDL窗体句柄：sdlWindow</span></span><br><span class=\"line\">SDL_Surface *image = SDL_LoadBMP(<span class=\"string\">\"1.bmp\"</span>);</span><br><span class=\"line\">SDL_Renderer *renderer = SDL_CreateRenderer(sdlWindow, <span class=\"number\">-1</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">SDL_Texture *texture = SDL_CreateTextureFromSurface(renderer, image);</span><br><span class=\"line\"><span class=\"comment\">// SDL_RenderClear(renderer);</span></span><br><span class=\"line\"><span class=\"comment\">// 复制到渲染器</span></span><br><span class=\"line\">SDL_RenderCopy(renderer, texture, <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\"><span class=\"comment\">// 渲染显示</span></span><br><span class=\"line\">SDL_RenderPresent(renderer);</span><br><span class=\"line\"><span class=\"comment\">// 数据释放：略</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 代码备记：未校验</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;SDL\\SDL_mixer.h&gt;</span></span></span><br><span class=\"line\">SDL_Init(SDL_INIT_EVERYTHING)</span><br><span class=\"line\">Mix_OpenAudio(<span class=\"number\">44100</span>,MIX_DEFAULT_FORMAT,<span class=\"number\">2</span>,<span class=\"number\">2048</span>);</span><br><span class=\"line\">Mix_Music *sound=Mix_LoadMUS(<span class=\"string\">\"sound.wav\"</span>);</span><br><span class=\"line\">Mix_PlayMusic(sound,<span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"备注\"><a href=\"#备注\" class=\"headerlink\" title=\"备注\"></a>备注</h2><ul>\n<li>注意FFmepg解析和SDL播放需要多线程分开，避免视频/音频播放卡顿</li>\n<li>SDL音频和视频的播放一定要多线程，不能相互等待</li>\n<li>音频和视频要注意延迟处理，Window延迟控制是达不到播放要求的，做个毫秒级的延迟同步即可，人类是感知不到这点误差的</li>\n<li>音视频同步要控制视频播放，让视频帧根据音频播放加减速，声音播放不能卡顿，很容被人耳感知的</li>\n<li>SDL核心是图像的加载，渲染，显示；而视频播放就是图片快速切换而已。</li>\n</ul>\n<h2 id=\"Demo\"><a href=\"#Demo\" class=\"headerlink\" title=\"Demo\"></a>Demo</h2><p><a href=\"https://github.com/fxliu/VCDemo/tree/master/TOOLS/ffmpeg+SDL\" target=\"_blank\" rel=\"noopener\">FFmpeg+SDL播放器</a><br><code>https://github.com/fxliu/VCDemo/tree/master/TOOLS/ffmpeg+SDL</code></p>\n","categories":["VC"],"tags":["FFmepg","SDL","UI"]},{"title":"无线网卡","url":"/2019/11/10/VCSystem/WLan/","content":"<h2 id=\"API\"><a href=\"#API\" class=\"headerlink\" title=\"API\"></a>API</h2><ul>\n<li><code>WlanOpenHandle</code>: 打开操作句柄</li>\n<li><code>WlanEnumInterfaces</code>: 遍历无线设备接口，并获取接口状态<ul>\n<li>已连接，连接中，已断开等</li>\n</ul>\n</li>\n<li><code>WlanGetAvailableNetworkList</code>: 遍历热点<ul>\n<li>包含SSID，加密方式等热点信息</li>\n</ul>\n</li>\n<li><code>WlanGetProfileList</code>: 获取机器已保存所有热点配置<ul>\n<li>Windows没连接一次热点，会自动保存一份该热点的配置文件，配置文件名一般就是热点名</li>\n<li>API操作中配置文件名可以随意指定</li>\n</ul>\n</li>\n<li><code>WlanDeleteProfile</code>: 删除指定配置文件</li>\n<li><code>WlanSetProfile</code>: 新增/重置指定配置文件</li>\n<li><code>WlanConnect</code>: WIFI连接指令，Windows会自动查找默认配置，并尝试连接<ul>\n<li>该函数指令返回时，仅说明Windows接收到该指令并开始执行，不保证能连接成功</li>\n</ul>\n</li>\n<li><code>WlanDisconnect</code>: 终止WIFI连接</li>\n</ul>\n<h2 id=\"命令行\"><a href=\"#命令行\" class=\"headerlink\" title=\"命令行\"></a>命令行</h2><ul>\n<li>查看所有配置名称: <code>netsh wlan show profile</code></li>\n<li>连接到无线WIFI: <code>wlan connect name=PROFILE</code><ul>\n<li>指定SSID: <code>netsh wlan connect ssid=SSID name=PROFILE</code></li>\n</ul>\n</li>\n<li>断开无线: <code>netsh wlan disconnect</code></li>\n<li>添加配置: <code>Netsh WLAN add profile filename=&quot;存放路径&quot;</code></li>\n<li>导出配置：<code>Netsh WLAN export profile key=clear folder=&quot;存放路径&quot;</code><ul>\n<li>导出的 XML 配置文件是明文存储，而且会导出 WIFI 连接密码</li>\n</ul>\n</li>\n<li>删除配置: <code>Netsh WLAN delete profile name=&quot;无线名称&quot;</code></li>\n<li>无线网卡配置，状态: <code>Netsh WLAN show interfaces</code></li>\n<li>查看指定网卡: <code>Netsh WLAN show interface name=&quot;网卡名称&quot;</code></li>\n<li>查看已存储密码: <code>Netsh WLAN show profile name=&quot;无线名称&quot; key=clear</code></li>\n<li>查看无线网卡信息: <code>Netsh WLAN show drivers</code></li>\n<li>无线网卡兼容/支持的功能: <code>Netsh WLAN show wirelesscapabilities</code></li>\n</ul>\n<h2 id=\"备注\"><a href=\"#备注\" class=\"headerlink\" title=\"备注\"></a>备注</h2><ul>\n<li>都是Windows标准API，懒得解释了，需要的时候直接看Demo把</li>\n<li>Demo中检查到Wifi已连接时，是通过注册表获取IP数据的，实际上这个有延迟<ul>\n<li>通常Windows先连接AP，然后在自动获取IP，而且获取IP整个动作是有延迟的，此时即使是使用ipconfig也未必能拿到正确的状态</li>\n<li>问题备记，搁置~~</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Demo\"><a href=\"#Demo\" class=\"headerlink\" title=\"Demo\"></a>Demo</h2><p><a href=\"https://github.com/fxliu/VCDemo/tree/master/SYSTEM/WLan\" target=\"_blank\" rel=\"noopener\">WLan</a></p>\n","categories":["VC"],"tags":["WLAN","无线网卡"]},{"title":"串口通讯","url":"/2019/11/10/VCSystem/CSerialPort串口通讯/","content":"<h2 id=\"API\"><a href=\"#API\" class=\"headerlink\" title=\"API\"></a>API</h2><ul>\n<li><code>CreateFile</code>: 打开串口，文件名指定为<code>COM2</code>即可</li>\n<li>参数设置：<ul>\n<li><code>SetCommTimeouts</code>: 读写超时控制</li>\n<li><code>SetCommState</code>: 设置参数<ul>\n<li><code>GetCommState</code>: 获取参数(DCB)</li>\n<li>先获取，调整需要修改的项，然后再设置</li>\n<li>注意停止位的定义：0代表1个停止位，1代表1.5个停止位，2代表2个停止位</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 常用字段</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">DCB</span> &#123;</span></span><br><span class=\"line\">    DWORD DCBlength;      <span class=\"comment\">/* sizeof(DCB)                     */</span></span><br><span class=\"line\">    DWORD BaudRate;       <span class=\"comment\">/* 波特率：115200,9600等       */</span></span><br><span class=\"line\">    DWORD fBinary: <span class=\"number\">1</span>;     <span class=\"comment\">/* 数据位：通常为8    */</span></span><br><span class=\"line\">    DWORD fParity: <span class=\"number\">1</span>;     <span class=\"comment\">/* 奇偶检验位          */</span></span><br><span class=\"line\">    BYTE StopBits;        <span class=\"comment\">/* 停止位：0,1,2 = 1, 1.5, 2        */</span></span><br><span class=\"line\">&#125; DCB, *LPDCB;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>PurgeComm</code>: 清空缓冲区<ul>\n<li>PURGE_TXABORT：中断所有写操作并立即返回，即使写操作还没有完成。</li>\n<li>PURGE_RXABORT：中断所有读操作并立即返回，即使读操作还没有完成。</li>\n<li>PURGE_TXCLEAR：清除输出缓冲区</li>\n<li>PURGE_RXCLEAR：清除输入缓冲区</li>\n</ul>\n</li>\n<li><code>ReadFile</code>: 读</li>\n<li><code>WriteFile</code>: 写</li>\n<li>串口遍历<ul>\n<li><code>SetupDiGetClassDevs</code>: 打开句柄<ul>\n<li>GUID: <code>GUID_CLASS_COMPORT</code>，在<code>WinIoCtl.h</code>文件中被定义</li>\n<li><code>SetupDiDestroyDeviceInfoList</code>：释放句柄</li>\n</ul>\n</li>\n<li><code>SetupDiEnumDeviceInterfaces</code>: 遍历</li>\n<li><code>SetupDiGetDeviceInterfaceDetail</code>: 接口路径，比如“COM2”什么的</li>\n<li><code>SetupDiGetDeviceRegistryProperty</code>：接口属性<ul>\n<li><code>SPDRP_DEVICEDESC</code>：设备描述</li>\n<li><code>SPDRP_CLASS</code>：类名</li>\n<li><code>SPDRP_MFG</code>：制造商</li>\n<li><code>SPDRP_FRIENDLYNAME</code>：设备描述(友好名称)</li>\n<li><code>SPDRP_LOCATION_INFORMATION</code>：本地环境属性</li>\n<li><code>SPDRP_PHYSICAL_DEVICE_OBJECT_NAME</code>：设备物理名称</li>\n<li><code>SPDRP_ENUMERATOR_NAME</code>：枚举类型</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Demo\"><a href=\"#Demo\" class=\"headerlink\" title=\"Demo\"></a>Demo</h2><p><a href=\"https://github.com/fxliu/VCDemo/tree/master/SYSTEM/CSerialPort\" target=\"_blank\" rel=\"noopener\">CSerialPort</a></p>\n<h2 id=\"GitHub第三方库\"><a href=\"#GitHub第三方库\" class=\"headerlink\" title=\"GitHub第三方库\"></a>GitHub第三方库</h2><ul>\n<li><a href=\"https://github.com/itas109/CSerialPort\" target=\"_blank\" rel=\"noopener\">CSerialPort</a>，支持Windows/Linux，封装比较完善</li>\n<li>直接搜索<code>CSerialPort</code>也有其他一些简单封装</li>\n</ul>\n","categories":["VC"],"tags":["串口","通讯"]},{"title":"Git","url":"/2019/11/10/Tools/github/","content":"<h2 id=\"常规指令\"><a href=\"#常规指令\" class=\"headerlink\" title=\"常规指令\"></a>常规指令</h2><ul>\n<li>恢复误删除文件(尚未提交到本地库情况)：<code>git checkout -- file</code><ul>\n<li><code>git status</code> 查看删除文件，中文会转码，但git checkout时，直接用中文使用转码文件名不好使</li>\n<li>恢复所有<ul>\n<li><code>git reset head ./</code></li>\n<li><code>git checkout ./</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>恢复误删除文件(已提交到本地库/远程库情况)<ul>\n<li><code>git reset --hard + 版本号</code>版本回溯, 再<code>git checkout -- file</code></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"gihub\"><a href=\"#gihub\" class=\"headerlink\" title=\"gihub\"></a>gihub</h2><p><a href=\"http://rogerdudler.github.io/git-guide/index.zh.html\" target=\"_blank\" rel=\"noopener\">git-简明指南</a><br><a href=\"https://backlog.com/git-tutorial/cn/\" target=\"_blank\" rel=\"noopener\">猴子都能懂得GIT入门</a></p>\n<h3 id=\"fork\"><a href=\"#fork\" class=\"headerlink\" title=\"fork\"></a>fork</h3><p>分支别人的仓库到自己仓库</p>\n<ul>\n<li>打开大佬的github，点击右上角的fork按钮</li>\n<li>然后回到自己的github-&gt;Repositories，同名的仓库已经存在了，就是这么简单</li>\n</ul>\n","categories":["Tools"],"tags":["Git","Github"]},{"title":"MarkDown","url":"/2019/11/10/Tools/MarkDown/","content":"<h2 id=\"常用规则\"><a href=\"#常用规则\" class=\"headerlink\" title=\"常用规则\"></a>常用规则</h2><h3 id=\"标题系列\"><a href=\"#标题系列\" class=\"headerlink\" title=\"标题系列\"></a>标题系列</h3><figure class=\"highlight md\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"section\"># 大标题</span></span><br><span class=\"line\"><span class=\"section\">## 二标题</span></span><br><span class=\"line\"><span class=\"section\">###### 六标题也可以</span></span><br><span class=\"line\"></span><br><span class=\"line\">主标题</span><br><span class=\"line\">======</span><br><span class=\"line\"></span><br><span class=\"line\">副标题</span><br><span class=\"line\">------</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"字体\"><a href=\"#字体\" class=\"headerlink\" title=\"字体\"></a>字体</h3><ul>\n<li><strong>这是加粗的文字</strong><code>**这是加粗的文字**</code></li>\n<li><em>这是倾斜的文字</em><code>*这是倾斜的文字*</code></li>\n<li><strong><em>这是斜体加粗的文字</em></strong><code>***这是斜体加粗的文字***</code></li>\n<li><del>这是加删除线的文字</del><code>~~这是加删除线的文字~~</code></li>\n</ul>\n<figure class=\"highlight md\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"code\">`背景色突出`</span></span><br><span class=\"line\"><span class=\"code\">`单行代码`</span></span><br><span class=\"line\">代码块</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h3><blockquote>\n<p>引用内容1</p>\n<blockquote>\n<p>引用内容2</p>\n</blockquote>\n</blockquote>\n<h3 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h3><figure class=\"highlight md\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">* </span>无序列表</span><br><span class=\"line\"><span class=\"bullet\">+ </span>无序列表</span><br><span class=\"line\"><span class=\"bullet\">- </span>无序列表</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight md\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">1. </span>有序列表，注意空格</span><br><span class=\"line\"><span class=\"bullet\">2. </span>有序列表，会自动计算序号</span><br><span class=\"line\"><span class=\"bullet\">   + </span>嵌套</span><br><span class=\"line\"><span class=\"bullet\">   + </span>列表</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight md\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">- </span>[x] 任务列表</span><br><span class=\"line\"><span class=\"bullet\">- </span>[x] 已完成</span><br><span class=\"line\"><span class=\"bullet\">- </span>[ ] 未完成</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"分割线\"><a href=\"#分割线\" class=\"headerlink\" title=\"分割线\"></a>分割线</h3><figure class=\"highlight md\"><table><tr><td class=\"code\"><pre><span class=\"line\">分割线</span><br><span class=\"line\"><span class=\"bullet\">- </span>- - （推荐）</span><br><span class=\"line\">---</span><br><span class=\"line\"><span class=\"emphasis\">***</span></span><br><span class=\"line\"><span class=\"bullet\">* </span><span class=\"emphasis\">* *</span></span><br></pre></td></tr></table></figure>\n\n<p>分割线</p>\n<hr>\n<h3 id=\"图片\"><a href=\"#图片\" class=\"headerlink\" title=\"图片\"></a>图片</h3><figure class=\"highlight md\"><table><tr><td class=\"code\"><pre><span class=\"line\">![<span class=\"string\">图片alt</span>](<span class=\"link\">图片地址 \"图片title\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">图片alt就是显示在图片下面的文字，相当于对图片内容的解释。</span><br><span class=\"line\">图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://upload-images.jianshu.io/upload_images/6860761-fd2f51090a890873.jpg\" alt=\"blockchain\" title=\"区块链\"></p>\n<h3 id=\"超链接\"><a href=\"#超链接\" class=\"headerlink\" title=\"超链接\"></a>超链接</h3><figure class=\"highlight md\"><table><tr><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">link</span>](<span class=\"link\">URL \"注释\"</span>)</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://wwww.baidu.com\" title=\"百度超链接\" target=\"_blank\" rel=\"noopener\">百度</a><br><a href=\"http://jianshu.com\" target=\"_blank\" rel=\"noopener\">简书</a><br><a href=\"https://www.jianshu.com\" target=\"_blank\">新页面打开</a></p>\n<h3 id=\"表格\"><a href=\"#表格\" class=\"headerlink\" title=\"表格\"></a>表格</h3><table>\n<thead>\n<tr>\n<th>Item</th>\n<th>Value</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Computer</td>\n<td>$1600</td>\n</tr>\n<tr>\n<td>Phone</td>\n<td>$12</td>\n</tr>\n<tr>\n<td>Pipe</td>\n<td>$1</td>\n</tr>\n</tbody></table>\n<h4 id=\"表格：指定对齐方式\"><a href=\"#表格：指定对齐方式\" class=\"headerlink\" title=\"表格：指定对齐方式\"></a>表格：指定对齐方式</h4><table>\n<thead>\n<tr>\n<th align=\"left\">Item</th>\n<th align=\"right\">Value</th>\n<th align=\"center\">Qty</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">Computer</td>\n<td align=\"right\">$1600</td>\n<td align=\"center\">5</td>\n</tr>\n<tr>\n<td align=\"left\">Phone</td>\n<td align=\"right\">$12</td>\n<td align=\"center\">12</td>\n</tr>\n<tr>\n<td align=\"left\">Pipe</td>\n<td align=\"right\">$1</td>\n<td align=\"center\">234</td>\n</tr>\n</tbody></table>\n<h2 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"扩展\"></a>扩展</h2><h3 id=\"流程图\"><a href=\"#流程图\" class=\"headerlink\" title=\"流程图\"></a>流程图</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">st=&gt;start: 开始</span><br><span class=\"line\">op=&gt;operation: My Operation</span><br><span class=\"line\">cond=&gt;condition: Yes or No?</span><br><span class=\"line\">e=&gt;end</span><br><span class=\"line\">st-&gt;op-&gt;cond</span><br><span class=\"line\">cond(yes)-&gt;e</span><br><span class=\"line\">cond(no)-&gt;op</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"自动生成目录\"><a href=\"#自动生成目录\" class=\"headerlink\" title=\"自动生成目录\"></a>自动生成目录</h3><figure class=\"highlight md\"><table><tr><td class=\"code\"><pre><span class=\"line\">[TOC]自动生成目录</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"编辑器\"><a href=\"#编辑器\" class=\"headerlink\" title=\"编辑器\"></a>编辑器</h2><ul>\n<li>Nodepad++<ul>\n<li>新版安装后就支持颜色处理，可扩展MarkDown插件展示效果</li>\n</ul>\n</li>\n<li>Visual Studio Code (VS Code)</li>\n</ul>\n","categories":["Tools"],"tags":["MarkDown"]},{"title":"IDE","url":"/2019/11/10/Tools/IDE/","content":"<h2 id=\"IntelliJ-IDEA\"><a href=\"#IntelliJ-IDEA\" class=\"headerlink\" title=\"IntelliJ IDEA\"></a>IntelliJ IDEA</h2><ul>\n<li>注册码：<a href=\"http://idea.lanyus.com/\" target=\"_blank\" rel=\"noopener\">http://idea.lanyus.com/</a></li>\n<li>快捷键：视图查看<ul>\n<li><code>Ctrl+F12</code>:         查看file，method结构图、类继承机构图</li>\n<li><code>Ctrl+shift+Alt+U</code>: 查看maven依赖，类图</li>\n</ul>\n</li>\n<li>快捷键：定位<ul>\n<li><code>Ctrl+E</code>:           定位到最近浏览过的文件</li>\n<li><code>Ctrl+Shift+E</code>:     最近更改的文件</li>\n<li><code>Shift+Click(TAB)</code>: 可以关闭文件</li>\n</ul>\n</li>\n<li>快捷键：位置跳转<ul>\n<li><code>Ctrl+Shift+Backspace</code>: 跳转上一次修改的地方</li>\n<li><code>Ctrl+Alt+B</code>:           跳转到方法实现处</li>\n<li><code>Ctrl+Shift+左箭头</code>:    上一个浏览的地方</li>\n<li><code>Ctrl+Shift+右箭头</code>:    下一个浏览的地方</li>\n</ul>\n</li>\n<li>快捷键：其他跳转<ul>\n<li><code>Ctrl+H</code>:   显示类结构图（类的继承层次）</li>\n<li><code>Ctrl+Q</code>:   显示注释文档</li>\n<li><code>Alt+1</code>:　　快速打开或隐藏工程面板</li>\n<li><code>Alt+left/right</code>:   切换代码视图</li>\n<li><code>F2 或 Shift+F2</code>:   高亮错误或警告快速定位</li>\n<li><code>Tab</code>:      代码标签输入完成后，按 Tab，生成代码</li>\n<li><code>Ctrl+Shift+F7</code>:    高亮显示所有该文本，按 Esc 高亮消失</li>\n</ul>\n</li>\n<li>快捷键：搜索<ul>\n<li><code>Ctrl＋N</code>:    快速搜索类</li>\n<li><code>Ctrl＋Shift＋N</code>:     快速搜索文件</li>\n<li><code>Ctrl＋Alt+Shift＋N</code>: 快速搜索函数</li>\n<li><code>Ctrl+Shift+F</code>:       快速搜索字符串</li>\n</ul>\n</li>\n<li>快捷键：光标移动和选中<ul>\n<li><code>Ctrl＋Alt+Shift＋Click</code>:   多选</li>\n<li><code>Ctrl＋Alt+Shift＋J</code>:       查找所有目标，并选中</li>\n<li><code>Alt+Up/Down</code>：             在方法间快速移动定位</li>\n<li><code>Ctrl+Shift+Up/Down</code>:       向上/下移动语句</li>\n<li><code>Ctrl+Up/Down</code>:</li>\n<li><code>Ctrl+B/Ctrl+Click</code>:    　　跳转到定义处</li>\n</ul>\n</li>\n<li>超级组合键：<code>Alt+Enter</code><ul>\n<li>代码提示 + 自动完成</li>\n</ul>\n</li>\n<li>重构<ul>\n<li><code>Shift+F6</code>:   重命名：所有使用过这个名称的地方都会跟着改变</li>\n<li><code>Ctrl+F6</code>:    重构函数：所有用到此函数的地方一起重构</li>\n<li>变量提取：<ul>\n<li><code>Ctrl+Alt+V</code>  变量</li>\n<li><code>Ctrl+Alt+C</code>  静态变量</li>\n<li><code>Ctrl+Alt+F</code>  成员变量</li>\n<li><code>Ctrl+Alt+P</code>  方法参数</li>\n<li><code>Ctrl+Alt+M</code>  抽取方法</li>\n</ul>\n</li>\n<li><code>Ctrl+Alt+M</code>  代码规范化</li>\n</ul>\n</li>\n</ul>\n","categories":["Tools","IDE"],"tags":["IntelliJ IDEA","PyCharm","PhpStorm"]},{"title":"apache","url":"/2019/11/10/Service/apache/","content":"<h2 id=\"apache\"><a href=\"#apache\" class=\"headerlink\" title=\"apache\"></a>apache</h2><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -- Centos7 --</span></span><br><span class=\"line\"><span class=\"comment\"># 默认配置文件</span></span><br><span class=\"line\">/etc/httpd/conf/httpd.conf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 默认日志位置</span></span><br><span class=\"line\">/var/<span class=\"built_in\">log</span>/httpd/</span><br><span class=\"line\">/etc/httpd/logs/ -&gt; /var/<span class=\"built_in\">log</span>/httpd/</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"goaccess\"><a href=\"#goaccess\" class=\"headerlink\" title=\"goaccess\"></a>goaccess</h2><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum install goaccess -y</span><br><span class=\"line\"><span class=\"comment\"># 配置文件</span></span><br><span class=\"line\">/etc/goaccess.conf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 分析</span></span><br><span class=\"line\">goaccess --config-file=/etc/goaccess.conf --output /var/www/html/goaccess.html /var/<span class=\"built_in\">log</span>/httpd/access_log-2018-11-28</span><br><span class=\"line\"><span class=\"comment\"># 多文件：尾部指定多个文件名</span></span><br><span class=\"line\">goaccess --config-file=/etc/goaccess.conf --output /var/www/html/goaccess/2018-04-14.html access_log-2018-11-28 access_log-2018-11-29</span><br><span class=\"line\"><span class=\"comment\"># 多文件：cat合并</span></span><br><span class=\"line\">cat access_log-* | goaccess --config-file=/etc/goaccess.conf --output /var/www/html/all.html</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 时间格式: 根据apache当前日志格式对应调整, [26/Oct/2019:23:59:59 +0800]</span><br><span class=\"line\">time-format %H:%M:%S</span><br><span class=\"line\">date-format %d/%b/%Y</span><br><span class=\"line\"></span><br><span class=\"line\"># 日志格式 - 从http.conf中提取</span><br><span class=\"line\"># %&#123;X-Forwarded-For&#125;i %h %l %u %t &quot;%r&quot; %s %b &quot;%&#123;Referer&#125;i&quot; &quot;%&#123;User-Agent&#125;i&quot;</span><br><span class=\"line\"># &quot;%&#123;X-Forwarded-For&#125;i %h %l %u %t \\&quot;%m %U %q %H\\&quot; %&gt;s %b \\&quot;%&#123;Referer&#125;i\\&quot; \\&quot;%&#123;User-Agent&#125;i\\&quot;&quot; combined</span><br><span class=\"line\"># 222.171.180.161 100.116.227.226 - - [03/Apr/2018:14:29:33 +0800] &quot;POST /wechat/2dBarCode.php HTTP/1.1&quot; 200 262 &quot;-&quot; &quot;-&quot;</span><br><span class=\"line\">log-format %h %^ %l %u %^[%d:%t %^] &quot;%r&quot; %s %b &quot;%R&quot; &quot;%^&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># 是否需要实时刷新</span><br><span class=\"line\">real-time-html true</span><br></pre></td></tr></table></figure>\n\n","categories":["service","linux"],"tags":["apache","goaccess","日志"]},{"title":"代码整理","url":"/2019/11/10/Python/代码整理/","content":"<h2 id=\"IDE\"><a href=\"#IDE\" class=\"headerlink\" title=\"IDE\"></a>IDE</h2><ul>\n<li><strong>PyCharm</strong><ul>\n<li>注册码: <a href=\"http://idea.lanyus.com/\" target=\"_blank\" rel=\"noopener\">http://idea.lanyus.com/</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"常用Demo\"><a href=\"#常用Demo\" class=\"headerlink\" title=\"常用Demo\"></a>常用Demo</h2><ul>\n<li><a href=\"https://github.com/fxliu/Python/tree/master/tools\" target=\"_blank\" rel=\"noopener\">base64</a></li>\n<li><a href=\"https://github.com/fxliu/Python/tree/master/tools\" target=\"_blank\" rel=\"noopener\">md5</a></li>\n<li><a href=\"https://github.com/fxliu/Python/tree/master/tools\" target=\"_blank\" rel=\"noopener\">webservice</a><ul>\n<li>suds.wsdl, suds.client</li>\n</ul>\n</li>\n</ul>\n","categories":["Python"],"tags":["入门"]},{"title":"Django","url":"/2019/11/09/Python/Web/django/","content":"<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p><code>pip install Django</code></p>\n<ul>\n<li>命令行测试<code>python -m django --version</code></li>\n<li>Py脚本测试</li>\n</ul>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># py测试安装是否成功</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> django</span><br><span class=\"line\">django.get_version()</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"HelloWorld\"><a href=\"#HelloWorld\" class=\"headerlink\" title=\"HelloWorld\"></a>HelloWorld</h2><ul>\n<li>创建项目：<code>django-admin startproject mysite</code></li>\n<li>启动项目：<code>python manage.py runserver</code><ul>\n<li>指定IP端口：<code>python manage.py runserver 127.0.0.1:8000</code></li>\n</ul>\n</li>\n<li>创建视图</li>\n</ul>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># hello.py</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> django.http <span class=\"keyword\">import</span> HttpResponse</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello</span><span class=\"params\">(request)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> HttpResponse(<span class=\"string\">\"Hello world ! \"</span>)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>映射路径<ul>\n<li>修改：urls.py</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 导入 hello</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> . <span class=\"keyword\">import</span> hello</span><br><span class=\"line\"><span class=\"comment\"># 映射路径</span></span><br><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    path(<span class=\"string\">''</span>, hello.hello),</span><br><span class=\"line\">]</span><br><span class=\"line\"><span class=\"comment\"># 映射说明：正则写法</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> django.urls <span class=\"keyword\">import</span> re_path</span><br><span class=\"line\">re_path(<span class=\"string\">'^hello.*$'</span>, view.hello)    <span class=\"comment\"># 所有hello开头的URI, 均映射到view.hello</span></span><br></pre></td></tr></table></figure>\n\n","categories":["Python"],"tags":["Django"]},{"title":"进程 / 线程","url":"/2019/11/08/Python/线程-进程/","content":"<h2 id=\"进程\"><a href=\"#进程\" class=\"headerlink\" title=\"进程\"></a>进程</h2><h3 id=\"multiprocessing\"><a href=\"#multiprocessing\" class=\"headerlink\" title=\"multiprocessing\"></a>multiprocessing</h3><ul>\n<li>在UNIX平台上，当某个进程终结之后，该进程需要被其父进程调用wait，否则进程成为僵尸进程(Zombie)。所以，有必要对每个Process对象调用join()方法 (实际上等同于wait)。</li>\n<li>multiprocessing提供的threading包中没有的IPC(比如Pipe和Queue)，效率上更高。</li>\n<li>应优先考虑Pipe和Queue，避免使用Lock/Event/Semaphore/Condition等同步方式 (因为它们占据的不是用户进程的资源)。</li>\n<li>所有进程的任务在打印时都会向同一个标准输出(stdout)输出</li>\n</ul>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: gbk -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> multiprocessing</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">func</span><span class=\"params\">(i)</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">\"start\"</span>, i)</span><br><span class=\"line\">    time.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\">    print(<span class=\"string\">\"end\"</span>, i)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">start</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    pros = list()</span><br><span class=\"line\">    <span class=\"comment\"># 创建进程池</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">10</span>):</span><br><span class=\"line\">        pros.append(multiprocessing.Process(target=func, args=(i, )))</span><br><span class=\"line\">    <span class=\"comment\"># 启动</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> pros:</span><br><span class=\"line\">        p.start()</span><br><span class=\"line\">    <span class=\"comment\"># 活动子进程</span></span><br><span class=\"line\">    print(multiprocessing.active_children())</span><br><span class=\"line\">    <span class=\"comment\"># 等待终止</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> pros:</span><br><span class=\"line\">        p.join()</span><br><span class=\"line\">        <span class=\"comment\"># 返回值</span></span><br><span class=\"line\">        print(<span class=\"string\">'%15s.exitcode = %s'</span> % (p.name, p.exitcode))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    start()</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 是否活动</span></span><br><span class=\"line\">p.is_alive()</span><br><span class=\"line\"><span class=\"comment\"># 强制终止</span></span><br><span class=\"line\">p.terminate()</span><br><span class=\"line\"><span class=\"comment\"># 返回值</span></span><br><span class=\"line\">p.join()</span><br><span class=\"line\">print(<span class=\"string\">'%15s.exitcode = %s'</span> % (p.name, p.exitcode))</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>进程同步：管道，队列</li>\n</ul>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 进程安全：管道</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> multiprocessing <span class=\"keyword\">import</span> Process, Pipe</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f</span><span class=\"params\">(conn)</span>:</span></span><br><span class=\"line\">    conn.send([<span class=\"number\">42</span>, <span class=\"literal\">None</span>, <span class=\"string\">'hello'</span>])</span><br><span class=\"line\">    conn.close()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    parent_conn, child_conn = Pipe()</span><br><span class=\"line\">    p = Process(target=f, args=(child_conn,))</span><br><span class=\"line\">    p.start()</span><br><span class=\"line\">    <span class=\"keyword\">print</span> parent_conn.recv()   <span class=\"comment\"># prints \"[42, None, 'hello']\"</span></span><br><span class=\"line\">    p.join()</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 进程安全：队列</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> multiprocessing <span class=\"keyword\">import</span> Process, Queue</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f</span><span class=\"params\">(q)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\">#队列满时阻塞</span></span><br><span class=\"line\">    q.put([<span class=\"number\">42</span>, <span class=\"literal\">None</span>, <span class=\"string\">'hello'</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    q = Queue(<span class=\"number\">10</span>)       <span class=\"comment\">#队列最大存储10条数据, 不指定则代表无限定</span></span><br><span class=\"line\">    p = Process(target=f, args=(q,))</span><br><span class=\"line\">    p.start()</span><br><span class=\"line\">    <span class=\"keyword\">print</span> q.get()       <span class=\"comment\">#无数据时阻塞</span></span><br><span class=\"line\">    p.join()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"concurrent-futures-ProcessPoolExecutor\"><a href=\"#concurrent-futures-ProcessPoolExecutor\" class=\"headerlink\" title=\"concurrent.futures.ProcessPoolExecutor\"></a>concurrent.futures.ProcessPoolExecutor</h3><figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 批量创建：map机制, 自动等待结束</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> concurrent.futures <span class=\"keyword\">import</span> ProcessPoolExecutor</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fun</span><span class=\"params\">(params)</span>:</span></span><br><span class=\"line\">    time.sleep(<span class=\"number\">0.1</span>)</span><br><span class=\"line\">    print(params)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    start = time.time()</span><br><span class=\"line\">    <span class=\"keyword\">with</span> ProcessPoolExecutor(max_workers=<span class=\"number\">2</span>) <span class=\"keyword\">as</span> pool:</span><br><span class=\"line\">        results = list(pool.map(fun, [(i,) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">10</span>)]))</span><br><span class=\"line\">        print(<span class=\"string\">'Took %.3f seconds.'</span> % (time.time() - start))</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 单个创建：submit机制, 程序控制结束</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    <span class=\"keyword\">with</span> ProcessPoolExecutor(max_workers=<span class=\"number\">2</span>) <span class=\"keyword\">as</span> pool:</span><br><span class=\"line\">        futures = [pool.submit(fun, (i, )) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">10</span>)]</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># result等待结束, 并获得返回值</span></span><br><span class=\"line\">        print(<span class=\"string\">'results: %s'</span> % [future.result() <span class=\"keyword\">for</span> future <span class=\"keyword\">in</span> futures])</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># wait等待全部结束: ALL_COMPLETED, FIRST_COMPLETED, FIRST_EXCEPTION</span></span><br><span class=\"line\">        <span class=\"comment\"># 返回(done, unfinished)，分别为已完成/未完成future对象列表</span></span><br><span class=\"line\">        done, unfinished = wait(futures, timeout=<span class=\"number\">2</span>, return_when=concurrent.futures.ALL_COMPLETED)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"线程\"><a href=\"#线程\" class=\"headerlink\" title=\"线程\"></a>线程</h2><h3 id=\"threading\"><a href=\"#threading\" class=\"headerlink\" title=\"threading\"></a>threading</h3><ul>\n<li><code>threading.currentThread()</code>: 返回当前的线程变量。</li>\n<li><code>threading.enumerate()</code>: 返回一个包含正在运行的线程的list。正在运行指线程启动后、结束前，不包括启动前和终止后的线程。</li>\n<li><code>threading.activeCount()</code>: 返回正在运行的线程数量，与<code>len(threading.enumerate())</code>有相同的结果。</li>\n<li>线程对象方法：<ul>\n<li><code>isAlive()</code>: 返回线程是否活动的。</li>\n<li><code>getName()</code>: 返回线程名。</li>\n<li><code>setName()</code>: 设置线程名。</li>\n</ul>\n</li>\n<li>线程队列<code>import queue</code><ul>\n<li><code>q = queue.Queue(10)</code> 创建同步的、线程安全的队列</li>\n<li><code>qsize()</code> 返回队列的大小</li>\n<li><code>empty()</code> 如果队列为空，返回True,反之False</li>\n<li><code>full()</code> 如果队列满了，返回True,反之False, full 与 maxsize 大小对应</li>\n<li><code>get([block[, timeout]])</code> 获取队列，timeout等待时间</li>\n<li><code>get_nowait()</code> 相当Queue.get(False)</li>\n<li><code>put(item)</code> 写入队列，timeout等待时间</li>\n<li><code>put_nowait(item)</code> 相当Queue.put(item, False)</li>\n<li><code>task_done()</code> 在完成一项工作之后，Queue.task_done()函数向任务已经完成的队列发送一个信号</li>\n<li><code>join()</code> 实际上意味着等到队列为空，再执行别的操作</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> threading</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello</span><span class=\"params\">(i)</span>:</span></span><br><span class=\"line\">    time.sleep(<span class=\"number\">0.1</span>)</span><br><span class=\"line\">    print(i)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    t = threading.Thread(target=hello, args=(<span class=\"number\">1</span>,))</span><br><span class=\"line\">    t.setDaemon(<span class=\"literal\">True</span>)   <span class=\"comment\"># 设置跟随父线程</span></span><br><span class=\"line\">    t.setName(<span class=\"string\">'t'</span>)      <span class=\"comment\"># 设置线程名称</span></span><br><span class=\"line\">    t.start()</span><br><span class=\"line\">    t.join()</span><br><span class=\"line\">    print(t.getName())      <span class=\"comment\"># 获取线程名称</span></span><br><span class=\"line\">    print(t.isAlive())      <span class=\"comment\"># 是否活动</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 继承模式，创建自己的线程类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThread</span><span class=\"params\">(threading.Thread)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, name, lock)</span>:</span></span><br><span class=\"line\">        threading.Thread.__init__(self)</span><br><span class=\"line\">        self.name = name</span><br><span class=\"line\">        self.lock = lock</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">\"开始线程：\"</span> + self.name)</span><br><span class=\"line\">        time.sleep(<span class=\"number\">0.1</span>)</span><br><span class=\"line\">        self.lock.acquire()     <span class=\"comment\"># 锁定</span></span><br><span class=\"line\">        print(<span class=\"string\">\"退出线程：\"</span> + self.name)</span><br><span class=\"line\">        self.lock.release()     <span class=\"comment\"># 解锁</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    lock = threading.Lock()   <span class=\"comment\"># 线程锁</span></span><br><span class=\"line\">    ts = [MyThread(<span class=\"string\">\"Thread-\"</span>+str(i), lock) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">10</span>)]</span><br><span class=\"line\">    <span class=\"comment\"># 设置跟随父线程</span></span><br><span class=\"line\">    [t.setDaemon(<span class=\"literal\">True</span>) <span class=\"keyword\">for</span> t <span class=\"keyword\">in</span> ts]</span><br><span class=\"line\">    [t.start() <span class=\"keyword\">for</span> t <span class=\"keyword\">in</span> ts]</span><br><span class=\"line\">    [t.join() <span class=\"keyword\">for</span> t <span class=\"keyword\">in</span> ts]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"concurrent-futures-ThreadPoolExecutor\"><a href=\"#concurrent-futures-ThreadPoolExecutor\" class=\"headerlink\" title=\"concurrent.futures.ThreadPoolExecutor\"></a>concurrent.futures.ThreadPoolExecutor</h3><figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># map机制，支持submit控制单个进程，见concurrent.futures.ProcessPoolExecutor例子</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">from</span> concurrent.futures <span class=\"keyword\">import</span> ThreadPoolExecutor</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fun</span><span class=\"params\">(params)</span>:</span></span><br><span class=\"line\">    time.sleep(<span class=\"number\">0.1</span>)</span><br><span class=\"line\">    print(params)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    start = time.time()</span><br><span class=\"line\">    <span class=\"keyword\">with</span> ThreadPoolExecutor(max_workers=<span class=\"number\">5</span>) <span class=\"keyword\">as</span> pool:</span><br><span class=\"line\">        results = list(pool.map(fun, [(i,) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">10</span>)]))</span><br><span class=\"line\">        print(<span class=\"string\">'Took %.3f seconds.'</span> % (time.time() - start))</span><br></pre></td></tr></table></figure>\n\n","categories":["Python"],"tags":["进程","线程"]},{"title":"剪切板","url":"/2019/11/08/Python/系统/剪切板/","content":"<h2 id=\"写入\"><a href=\"#写入\" class=\"headerlink\" title=\"写入\"></a>写入</h2><figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># coding=gbk</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">清空剪切板，读取 / 写入字符串：win10, python3 校验有效</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> datetime</span><br><span class=\"line\"><span class=\"keyword\">from</span> ctypes <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\">user32 = windll.user32</span><br><span class=\"line\">kernel32 = windll.kernel32</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_clipboard</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    user32.OpenClipboard(c_int(<span class=\"number\">0</span>))</span><br><span class=\"line\">    contents = c_char_p(user32.GetClipboardData(c_int(<span class=\"number\">1</span>))).value</span><br><span class=\"line\">    user32.CloseClipboard()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> contents</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">empty_clipboard</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    user32.OpenClipboard(c_int(<span class=\"number\">0</span>))</span><br><span class=\"line\">    user32.EmptyClipboard()</span><br><span class=\"line\">    user32.CloseClipboard()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">set_clipboard</span><span class=\"params\">(data)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 打开剪切板</span></span><br><span class=\"line\">    user32.OpenClipboard(c_int(<span class=\"number\">0</span>))</span><br><span class=\"line\">    <span class=\"comment\"># 清空</span></span><br><span class=\"line\">    user32.EmptyClipboard()</span><br><span class=\"line\">    <span class=\"comment\"># 写入</span></span><br><span class=\"line\">    alloc = kernel32.GlobalAlloc(<span class=\"number\">0x2000</span>, len(bytes(data, encoding=<span class=\"string\">'utf_8'</span>)) + <span class=\"number\">1</span>)</span><br><span class=\"line\">    lock = kernel32.GlobalLock(alloc)</span><br><span class=\"line\">    cdll.msvcrt.strcpy(c_char_p(lock), bytes(data, encoding=<span class=\"string\">'utf_8'</span>))</span><br><span class=\"line\">    kernel32.GlobalUnlock(alloc)</span><br><span class=\"line\">    user32.SetClipboardData(c_int(<span class=\"number\">1</span>), alloc)</span><br><span class=\"line\">    <span class=\"comment\"># 关闭</span></span><br><span class=\"line\">    user32.CloseClipboard()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    <span class=\"comment\"># 写入</span></span><br><span class=\"line\">    set_clipboard(datetime.datetime.now().strftime(<span class=\"string\">'%Y-%m-%d %H:%M:%S'</span>))</span><br><span class=\"line\">    <span class=\"comment\"># 获取</span></span><br><span class=\"line\">    text_raw = get_clipboard()</span><br><span class=\"line\">    print(<span class=\"string\">'&#123;0&#125; &#123;1&#125;'</span>.format(text_raw, type(text_raw)))</span><br></pre></td></tr></table></figure>\n\n","categories":["Python"],"tags":["剪切板"]},{"title":"PDF","url":"/2019/11/08/Python/文件/pdf/","content":"<h2 id=\"pdfminer\"><a href=\"#pdfminer\" class=\"headerlink\" title=\"pdfminer\"></a>pdfminer</h2><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># python2</span></span><br><span class=\"line\">pip2 install pdfminer</span><br><span class=\"line\"><span class=\"comment\"># python3</span></span><br><span class=\"line\">pip3 install pdfminer3k</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: gbk -*-</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> io <span class=\"keyword\">import</span> StringIO</span><br><span class=\"line\"><span class=\"keyword\">from</span> pdfminer.pdfinterp <span class=\"keyword\">import</span> PDFResourceManager</span><br><span class=\"line\"><span class=\"keyword\">from</span> pdfminer.pdfinterp <span class=\"keyword\">import</span> process_pdf</span><br><span class=\"line\"><span class=\"keyword\">from</span> pdfminer.converter <span class=\"keyword\">import</span> TextConverter</span><br><span class=\"line\"><span class=\"keyword\">from</span> pdfminer.layout <span class=\"keyword\">import</span> LAParams</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">read_from_pdf</span><span class=\"params\">(file_path)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> open(file_path, <span class=\"string\">'rb'</span>) <span class=\"keyword\">as</span> file:</span><br><span class=\"line\">        resource_manager = PDFResourceManager()</span><br><span class=\"line\">        return_str = StringIO()</span><br><span class=\"line\">        lap_params = LAParams()</span><br><span class=\"line\"></span><br><span class=\"line\">        device = TextConverter(</span><br><span class=\"line\">            resource_manager, return_str, laparams=lap_params)</span><br><span class=\"line\">        process_pdf(resource_manager, device, file)</span><br><span class=\"line\">        device.close()</span><br><span class=\"line\"></span><br><span class=\"line\">        content = return_str.getvalue()</span><br><span class=\"line\">        return_str.close()</span><br><span class=\"line\">        <span class=\"keyword\">return</span> text_to_word(content)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">text_to_word</span><span class=\"params\">(content)</span>:</span></span><br><span class=\"line\">    lines = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> content.split(<span class=\"string\">'\\n'</span>):</span><br><span class=\"line\">        lines.append(remove_control_characters(line) + <span class=\"string\">'\\n'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> lines</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">remove_control_characters</span><span class=\"params\">(content)</span>:</span></span><br><span class=\"line\">    mpa = dict.fromkeys(range(<span class=\"number\">32</span>))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> content.translate(mpa)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    lines = read_from_pdf(<span class=\"string\">'111.pdf'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">with</span> open(<span class=\"string\">'111.txt'</span>, <span class=\"string\">'w+'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> lines:</span><br><span class=\"line\">            f.write(line)</span><br><span class=\"line\">    print(<span class=\"string\">'ok'</span>)</span><br></pre></td></tr></table></figure>\n\n","categories":["Python"],"tags":["PDF"]},{"title":"基础","url":"/2019/11/08/Python/基础/","content":"<ul>\n<li><strong>pycharm</strong><ul>\n<li>见PHP -&gt; PHPStorm</li>\n</ul>\n</li>\n<li>快捷键<ul>\n<li>关闭 close: <code>Ctrl+F4</code>, 补充<code>Ctrl+W</code></li>\n<li>运行 run: <code>Ctrl+Shift+F10</code> + <code>Shift+F10</code></li>\n<li><code>Editor</code>-&gt;<code>Inspections</code>-&gt;<code>Python</code><ul>\n<li>取消选中<code>Method may be static</code>, 静态函数</li>\n<li>取消选中<code>Shadowing names from outer scopes</code>, 重复定义(外定义)</li>\n<li>取消选中<code>Too broad exception clauses</code>, 模糊的exception</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>新建文件<ul>\n<li><code>File and Code Templates</code>-&gt;<code>Python Script</code>-&gt;清空</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: gbk -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> os,sys,traceback</span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\">version = <span class=\"string\">\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">  <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">  test()</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h2><h2 id=\"时间\"><a href=\"#时间\" class=\"headerlink\" title=\"时间\"></a>时间</h2><figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> time, datetime</span><br><span class=\"line\"><span class=\"comment\"># 当前时间</span></span><br><span class=\"line\">time.time()                 <span class=\"comment\"># 1574157735.59</span></span><br><span class=\"line\">time.localtime()            <span class=\"comment\"># time:struct_time(tm_year=2019, ..., tm_hour=18, ...)</span></span><br><span class=\"line\">datetime.datetime.now()     <span class=\"comment\"># datetime.datetime(2019, 11, 19, 18, 3, 6, 764000)</span></span><br><span class=\"line\"><span class=\"comment\"># 指定时间</span></span><br><span class=\"line\">d1 = datetime.datetime(<span class=\"number\">1970</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>)                  <span class=\"comment\"># 默认本地时间</span></span><br><span class=\"line\">d2 = datetime.datetime(<span class=\"number\">2016</span>,<span class=\"number\">3</span>,<span class=\"number\">18</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,pytz.utc)        <span class=\"comment\"># 指明是格林时间</span></span><br><span class=\"line\"><span class=\"comment\"># 延迟</span></span><br><span class=\"line\">time.sleep(<span class=\"number\">1</span>)   <span class=\"comment\"># 休眠1秒</span></span><br><span class=\"line\">time.sleep(<span class=\"number\">0.1</span>) <span class=\"comment\"># 休眠0.1秒</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"格式转换\"><a href=\"#格式转换\" class=\"headerlink\" title=\"格式转换\"></a>格式转换</h3><figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># datetime -&gt; str</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> datetime.datetime.now().strftime(<span class=\"string\">'%Y-%m-%d %H:%M:%S'</span>)</span><br><span class=\"line\"><span class=\"keyword\">print</span> datetime.datetime.strftime(datetime.datetime.now(), <span class=\"string\">'%Y-%m-%d %H:%M:%S'</span>)</span><br><span class=\"line\"><span class=\"comment\"># str -&gt; datetime</span></span><br><span class=\"line\">datetime.datetime.strptime(<span class=\"string\">\"2016-05-05 05:05:05\"</span>, <span class=\"string\">\"%Y-%m-%d %H:%M:%S\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># time -&gt; struct_time</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> time.strftime(<span class=\"string\">\"%Y-%m-%d %H:%M:%S\"</span>, time.localtime())</span><br><span class=\"line\"><span class=\"keyword\">print</span> time.strftime(<span class=\"string\">'%Y-%m-%d %H:%M:%S'</span>, time.gmtime(time.time()))</span><br><span class=\"line\"><span class=\"comment\"># struct_time -&gt; time</span></span><br><span class=\"line\">time.mktime(t)</span><br><span class=\"line\"><span class=\"comment\"># str -&gt; struct_time</span></span><br><span class=\"line\">time.strptime(<span class=\"string\">\"time:2009-08-08\"</span>, <span class=\"string\">\"time:%Y-%m-%d\"</span>)</span><br><span class=\"line\">time.strptime(<span class=\"string\">\"2016-05-05 05:05:05\"</span>, <span class=\"string\">\"%Y-%m-%d %H:%M:%S\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># datetime -&gt; struct_time</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> time.strftime(<span class=\"string\">'%Y-%m-%d %H:%M:%S'</span>, datetime.datetime.utcnow().timetuple())  <span class=\"comment\"># utc才是时间戳</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> time.strftime(<span class=\"string\">'%Y-%m-%d %H:%M:%S'</span>, datetime.datetime.now().utctimetuple())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># time -&gt; datetime</span></span><br><span class=\"line\">datetime.datetime.fromtimestamp(time.time())</span><br><span class=\"line\">datetime.datetime.utcfromtimestamp(time.time())</span><br><span class=\"line\"><span class=\"comment\"># datetime -&gt; struct_time -&gt; time</span></span><br><span class=\"line\">time.mktime(datetime.datetime.now().timetuple())</span><br><span class=\"line\">time.mktime(datetime.datetime.now().utctimetuple())        <span class=\"comment\"># 指明格林时间</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># gmtime 只支持UTC时间, struct_time中指定tm_isdst=0</span></span><br><span class=\"line\"><span class=\"comment\"># mktime 忽略tm_isdst参数, 只支持本地时间, 使用(- time.altzone)调整为UTC时间戳</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"程序运行时间\"><a href=\"#程序运行时间\" class=\"headerlink\" title=\"程序运行时间\"></a>程序运行时间</h3><figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">timer</span><span class=\"params\">(func, *pargs)</span>:</span></span><br><span class=\"line\">    start = time.clock()</span><br><span class=\"line\">    ret = func(*pargs)</span><br><span class=\"line\">    elapsed = time.clock() - start</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (elapsed, ret)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"时差\"><a href=\"#时差\" class=\"headerlink\" title=\"时差\"></a>时差</h3><figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># datetime.timedelta: 内部存储days，seconds，microseconds, 可直接访问变量</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> datetime</span><br><span class=\"line\">ti1 = datetime.datetime.now()</span><br><span class=\"line\">ti2 = datetime.datetime.now()</span><br><span class=\"line\"><span class=\"comment\"># 时差</span></span><br><span class=\"line\">t=ti2-ti1   <span class=\"comment\"># datetime.timedelta(0, 0, 1000)</span></span><br><span class=\"line\">t.total_seconds() <span class=\"comment\"># ==&gt; (td.microseconds + (td.seconds + td.days * 24 * 3600) * 10**6) / 10**6</span></span><br><span class=\"line\">str(t)    <span class=\"comment\"># 返回字符串，格式为： [D day[s], ][H]H:MM:SS[.UUUUUU]</span></span><br><span class=\"line\">repr(t)   <span class=\"comment\"># 返回字符串，格式为： datetime.timedelta(D[, S[, U]])</span></span><br><span class=\"line\"></span><br><span class=\"line\">now = datetime.now()</span><br><span class=\"line\">now + datetime.timedelta(seconds=<span class=\"number\">11</span>)</span><br><span class=\"line\">yestoday = now - datetime.timedelta(days=<span class=\"number\">1</span>)</span><br><span class=\"line\">tommorow = now + datetime.timedelta(days=<span class=\"number\">1</span>)</span><br><span class=\"line\">next_year = now + timedelta(days = <span class=\"number\">365</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># datetime.date也可以使用timedelta时间差</span></span><br><span class=\"line\">t = datetime.date.today() - datetime.timedelta(days=<span class=\"number\">30</span>)</span><br><span class=\"line\"><span class=\"keyword\">print</span> t.strftime(<span class=\"string\">'%Y-%m-%d'</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"计时\"><a href=\"#计时\" class=\"headerlink\" title=\"计时\"></a>计时</h3><figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> datetime, time</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TimeSheet</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># time_sheet = dict()</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, time_sheet, flag, reset=False)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> reset <span class=\"keyword\">or</span> (flag <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> time_sheet):</span><br><span class=\"line\">            time_sheet[flag] = datetime.timedelta()</span><br><span class=\"line\">        self.time_sheet = time_sheet</span><br><span class=\"line\">        self.flag = flag</span><br><span class=\"line\">        self.t = datetime.datetime.now()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__enter__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 创建时开始计时</span></span><br><span class=\"line\">        self.t = datetime.datetime.now()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__exit__</span><span class=\"params\">(self, _, __, ___)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 释放时，计算时差</span></span><br><span class=\"line\">        self.time_sheet[self.flag] += datetime.datetime.now() - self.t</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_time_sheet</span><span class=\"params\">(time_sheet)</span>:</span></span><br><span class=\"line\">    re = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> flag <span class=\"keyword\">in</span> time_sheet:</span><br><span class=\"line\">        re.append(<span class=\"string\">'%s: %s'</span> % (flag, time_sheet[flag]))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">','</span>.join(re)</span><br><span class=\"line\"></span><br><span class=\"line\">time_sheet = &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">with</span> TimeSheet(time_sheet, <span class=\"string\">\"test\"</span>, <span class=\"literal\">True</span>) <span class=\"keyword\">as</span> t:</span><br><span class=\"line\">    time.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"keyword\">print</span> get_time_sheet(time_sheet)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h2><figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 随机序列</span></span><br><span class=\"line\">d = [random.randint(<span class=\"number\">0</span>,<span class=\"number\">20</span>) <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(<span class=\"number\">20</span>)]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 列表推导式</span></span><br><span class=\"line\">[i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> d <span class=\"keyword\">if</span> i &gt;= <span class=\"number\">0</span>]</span><br><span class=\"line\"><span class=\"comment\"># 过滤：只保留lambda式返回True的项</span></span><br><span class=\"line\">filter(<span class=\"keyword\">lambda</span> x: x&gt;= <span class=\"number\">0</span>, d)</span><br><span class=\"line\"><span class=\"comment\"># 排序</span></span><br><span class=\"line\">sorted(d)</span><br><span class=\"line\">sorted(d, reverse=<span class=\"literal\">True</span>)   <span class=\"comment\"># 反序</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 数组中指定元素出现的次数</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> collections <span class=\"keyword\">import</span> Counter</span><br><span class=\"line\">Counter([<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'a'</span>])</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 交集</span></span><br><span class=\"line\">set(<span class=\"string\">'abcde'</span>).intersection(set(<span class=\"string\">'cdefg'</span>))</span><br><span class=\"line\"><span class=\"comment\"># 并集</span></span><br><span class=\"line\">set(<span class=\"string\">'abcde'</span>).union(set(<span class=\"string\">'cdefg'</span>))</span><br><span class=\"line\"><span class=\"comment\"># 差集</span></span><br><span class=\"line\">set(<span class=\"string\">'abcde'</span>).difference(set(<span class=\"string\">'cdefg'</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> functools <span class=\"keyword\">import</span> reduce</span><br><span class=\"line\"><span class=\"comment\"># 累积</span></span><br><span class=\"line\">reduce(<span class=\"keyword\">lambda</span> x, y: x+y, [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>])</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"字典\"><a href=\"#字典\" class=\"headerlink\" title=\"字典\"></a>字典</h2><figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 基础数据</span></span><br><span class=\"line\">d = &#123;<span class=\"string\">'c'</span>:<span class=\"number\">2</span>, <span class=\"string\">'b'</span>:<span class=\"number\">1</span> , <span class=\"string\">'a'</span>:<span class=\"number\">3</span>&#125;</span><br><span class=\"line\">d.keys()</span><br><span class=\"line\">d.values()</span><br><span class=\"line\">d.items()   <span class=\"comment\"># [('a', 2), ('b', 1)]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 遍历，过滤</span></span><br><span class=\"line\">&#123;k: v <span class=\"keyword\">for</span> k, v <span class=\"keyword\">in</span> d.items() <span class=\"keyword\">if</span> v &gt; <span class=\"number\">1</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># key 排序</span></span><br><span class=\"line\">&#123;k:d[k] <span class=\"keyword\">for</span> k <span class=\"keyword\">in</span> sorted(d.keys())&#125;</span><br><span class=\"line\"><span class=\"comment\"># value 自定义排序: 注意 d.items() 返回的是数组，其实用的是数组排序</span></span><br><span class=\"line\"><span class=\"comment\"># 返回值也是 [(k,v),(k,v)] 模式, 转化成 dict 即可</span></span><br><span class=\"line\">dict(sorted(d.items(), key=<span class=\"keyword\">lambda</span> x: x[<span class=\"number\">1</span>]))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 数组 -&gt; 元组列表 -&gt; 字典</span></span><br><span class=\"line\">dict(zip([<span class=\"string\">'a'</span>,<span class=\"string\">'b'</span>,<span class=\"string\">'c'</span>], [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]))</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 默认值</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> collections <span class=\"keyword\">import</span> defaultdict</span><br><span class=\"line\">d = defaultdict(int)    <span class=\"comment\"># 默认0</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> k <span class=\"keyword\">in</span> range(<span class=\"number\">10</span>):</span><br><span class=\"line\">    d[k] += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 参数可以是任意对象创建工厂</span></span><br><span class=\"line\">defaultdict(list)</span><br><span class=\"line\"><span class=\"comment\"># 也可以是 无参数函数对象，设定值时函数被调用，并使用函数返回值作为默认值</span></span><br><span class=\"line\">defaultdict(<span class=\"keyword\">lambda</span>: <span class=\"number\">10</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 有序字典: python3.6 以后字典默认就是有序的</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> collections <span class=\"keyword\">import</span> OrderedDict</span><br><span class=\"line\"><span class=\"keyword\">print</span> list(OrderedDict.fromkeys([<span class=\"number\">10</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">21</span>, <span class=\"number\">10</span>, <span class=\"number\">3</span>]).keys())    <span class=\"comment\"># [10, 2, 3, 21]</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"常用函数\"><a href=\"#常用函数\" class=\"headerlink\" title=\"常用函数\"></a>常用函数</h2><ul>\n<li>随机数</li>\n</ul>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 随机小数: (0-1)</span></span><br><span class=\"line\">random.random()</span><br><span class=\"line\"><span class=\"comment\"># 随机小数: (1-9)</span></span><br><span class=\"line\">random.uniform(<span class=\"number\">1</span>,<span class=\"number\">9</span>)</span><br><span class=\"line\"><span class=\"comment\"># 随机整数: [1,5]</span></span><br><span class=\"line\">random.randint(<span class=\"number\">1</span>,<span class=\"number\">5</span>)</span><br><span class=\"line\"><span class=\"comment\"># 随机奇数，第三个参数代表递增基数</span></span><br><span class=\"line\">random.randrange(<span class=\"number\">1</span>,<span class=\"number\">10</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"comment\"># 随机选择</span></span><br><span class=\"line\">random.choice([<span class=\"string\">'1'</span>,<span class=\"string\">'a'</span>])</span><br><span class=\"line\"><span class=\"comment\"># 随机选择多个</span></span><br><span class=\"line\">random.sample([<span class=\"string\">'1'</span>,<span class=\"string\">'a'</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>], <span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"comment\"># 乱序: 直接改变列表</span></span><br><span class=\"line\">random.shuffle(a)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 随机码</span></span><br><span class=\"line\"><span class=\"string\">''</span>.join([random.choice(<span class=\"string\">'0123456789abcdef'</span>) <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> range(<span class=\"number\">64</span>)])</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"转码\"><a href=\"#转码\" class=\"headerlink\" title=\"转码\"></a>转码</h2><figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 快速查看转码结果</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">u'\\u670d\\u52a1\\u5f02\\u5e38'</span></span><br></pre></td></tr></table></figure>\n\n","categories":["Python"],"tags":["list","set","dict","bytes","基础"]},{"title":"工具集","url":"/2019/10/31/Python/tools/","content":"<h2 id=\"工具集\"><a href=\"#工具集\" class=\"headerlink\" title=\"工具集\"></a>工具集</h2><ul>\n<li>重试机制<ul>\n<li><a href=\"https://github.com/invl/retry/\" target=\"_blank\" rel=\"noopener\">retry</a></li>\n<li><a href=\"https://github.com/rholder/retrying\" target=\"_blank\" rel=\"noopener\">retrying</a></li>\n</ul>\n</li>\n<li>脚本编译成可执行文件<ul>\n<li>pyinstaller: <code>pip install pyinstaller</code><ul>\n<li>编译成单个文件<ul>\n<li><code>pyinstaller -F t.py</code></li>\n</ul>\n</li>\n<li>编译到目录，公共模块会提取成dll<ul>\n<li><code>pyinstaller t.py</code></li>\n<li><code>pyinstaller -D t.py</code></li>\n</ul>\n</li>\n<li>其他参数<ul>\n<li>-p：指定python安装包路径</li>\n<li>-i：指定图标</li>\n<li>–noconsole，就是无窗口运行</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>加速</li>\n<li>HTML解析<ul>\n<li>PyQuery</li>\n<li>BeautifulSoup</li>\n</ul>\n</li>\n<li>Web框架<ul>\n<li>web2py: 小巧灵活但功能强大<ul>\n<li>全栈框架</li>\n<li><a href=\"http://www.web2py.com/books/default/chapter/35\" target=\"_blank\" rel=\"noopener\">中文文档</a></li>\n</ul>\n</li>\n<li>web.py<ul>\n<li><a href=\"http://webpy.org/cookbook/index.zh-cn\" target=\"_blank\" rel=\"noopener\">中文文档</a></li>\n</ul>\n</li>\n<li>Django</li>\n</ul>\n</li>\n<li>fabric: 服务器管理+应用发布<ul>\n<li>命令行集合</li>\n</ul>\n</li>\n</ul>\n","categories":["Python"],"tags":["tools"]},{"title":"计划任务","url":"/2019/10/27/Linux/计划任务/","content":"<h2 id=\"crontab\"><a href=\"#crontab\" class=\"headerlink\" title=\"crontab\"></a>crontab</h2><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看root用户的计划任务</span></span><br><span class=\"line\">crontab -u root -l</span><br><span class=\"line\"><span class=\"comment\"># 查看</span></span><br><span class=\"line\">crontab -l</span><br><span class=\"line\"><span class=\"comment\"># 编辑</span></span><br><span class=\"line\">crontab -e</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 计划任务配置说明</span></span><br><span class=\"line\">cat /etc/crontab</span><br><span class=\"line\"><span class=\"comment\"># Example of job definition:</span></span><br><span class=\"line\"><span class=\"comment\"># .---------------- minute (0 - 59)</span></span><br><span class=\"line\"><span class=\"comment\"># |  .------------- hour (0 - 23)</span></span><br><span class=\"line\"><span class=\"comment\"># |  |  .---------- day of month (1 - 31)</span></span><br><span class=\"line\"><span class=\"comment\"># |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...</span></span><br><span class=\"line\"><span class=\"comment\"># |  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat</span></span><br><span class=\"line\"><span class=\"comment\"># |  |  |  |  |</span></span><br><span class=\"line\"><span class=\"comment\"># *  *  *  *  * user-name  command to be executed</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ---- 示例 ----</span></span><br><span class=\"line\"><span class=\"comment\"># 每十分钟执行一次</span></span><br><span class=\"line\">*/10 * * * * cmd</span><br><span class=\"line\"><span class=\"comment\"># 每小时执行一次</span></span><br><span class=\"line\">0 * * * * cmd</span><br><span class=\"line\"><span class=\"comment\"># 每天08:00点执行一次</span></span><br><span class=\"line\">0 8 * * * php /<span class=\"built_in\">test</span>/test.php &gt; <span class=\"built_in\">log</span>/test.log</span><br><span class=\"line\"><span class=\"comment\"># 每天的10:30开始，每隔2小时重复一次</span></span><br><span class=\"line\">30 10-23/2 * * * cmd</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 服务管理</span></span><br><span class=\"line\">service crond start | stop | restart | status</span><br><span class=\"line\"><span class=\"comment\"># 重新载入配置</span></span><br><span class=\"line\">service crond reload</span><br></pre></td></tr></table></figure>\n\n","categories":["linux"],"tags":["crontab","计划任务"]},{"title":"HOOK键盘钩子","url":"/2019/10/27/VCSystem/HOOK键盘钩子/","content":"<h2 id=\"键盘钩子\"><a href=\"#键盘钩子\" class=\"headerlink\" title=\"键盘钩子\"></a>键盘钩子</h2><ul>\n<li><code>WH_KEYBOARD_LL</code>：全局键盘钩子<ul>\n<li>不需要封装DLL，EXE中直接钩挂即可</li>\n<li><code>WH_KEYBOARD</code>：需要DLL封装模式使用</li>\n</ul>\n</li>\n<li><code>WH_MOUSE_LL</code>：鼠标钩子，使用方式同键盘钩子<ul>\n<li><code>WH_KEYBOARD</code>: DLL模式</li>\n<li>DLL导出<code>HOOKPROC</code>函数</li>\n<li>EXE加载DLL后，SetWindowsHookEx安装即可</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// EXE模式</span></span><br><span class=\"line\"><span class=\"comment\">// 挂在钩子</span></span><br><span class=\"line\">m_hHook = SetWindowsHookEx(WH_KEYBOARD_LL, LowLevelKeyboardProc, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"comment\">// 卸载钩子</span></span><br><span class=\"line\">UnhookWindowsHookEx(m_hHook);</span><br><span class=\"line\"><span class=\"comment\">// 键盘事件处理</span></span><br><span class=\"line\"><span class=\"function\">LRESULT CALLBACK <span class=\"title\">LowLevelKeyboardProc</span><span class=\"params\">(<span class=\"keyword\">int</span> nCode, WPARAM wParam, LPARAM lParam)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (nCode == HC_ACTION)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (wParam)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> WM_KEYDOWN:</span><br><span class=\"line\">    <span class=\"keyword\">case</span> WM_SYSKEYDOWN:</span><br><span class=\"line\">    <span class=\"keyword\">case</span> WM_KEYUP:</span><br><span class=\"line\">    <span class=\"keyword\">case</span> WM_SYSKEYUP:</span><br><span class=\"line\">      PKBDLLHOOKSTRUCT p = (PKBDLLHOOKSTRUCT)lParam;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (p-&gt;vkCode == VK_ESCAPE &amp;&amp; GetAsyncKeyState(VK_CONTROL) &amp; <span class=\"number\">0x8000</span> &amp;&amp; GetAsyncKeyState(VK_SHIFT) &amp; <span class=\"number\">0x8000</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Ctrl+Shift+Esc\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 返回1代表终止</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (p-&gt;vkCode == VK_ESCAPE &amp;&amp; GetAsyncKeyState(VK_CONTROL) &amp; <span class=\"number\">0x8000</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Ctrl+Esc\"</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 其他常规事件一定要继续传递下去</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> CallNextHookEx(<span class=\"literal\">NULL</span>, nCode, wParam, lParam);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 注意钩子线程不能阻塞，可以内置消息循环，确保钩子有效</span></span><br><span class=\"line\">MSG msg;</span><br><span class=\"line\"><span class=\"keyword\">while</span> (!GetMessage(&amp;msg, <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>) &amp;&amp; pThis-&gt;m_hHook)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"comment\">//TranslateMessage(&amp;msg);</span></span><br><span class=\"line\">  <span class=\"comment\">//DispatchMessage(&amp;msg);</span></span><br><span class=\"line\">  <span class=\"keyword\">break</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// DLL模块方式</span></span><br><span class=\"line\"><span class=\"comment\">// ------------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">// DLL导出函数</span></span><br><span class=\"line\"><span class=\"comment\">// 全局共享段，用户DLL公共数据处理，可以根据自己需要增删</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> data_seg(<span class=\"meta-string\">\"SHARED\"</span>)</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> HHOOK g_hHook = <span class=\"literal\">NULL</span>;  <span class=\"comment\">// 钩子句柄, 便于卸载</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> HWND g_hookWnd = <span class=\"literal\">NULL</span>;  <span class=\"comment\">// 调用DLL的主窗口句柄, 这样就可以SendMessage给主窗口鼠标消息及其参数</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> data_seg()</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> comment(linker,<span class=\"meta-string\">\"/section:SHARED,rws\"</span>)</span></span><br><span class=\"line\"><span class=\"comment\">// 钩子回调函数</span></span><br><span class=\"line\"><span class=\"function\">LRESULT CALLBACK <span class=\"title\">MouseProc</span><span class=\"params\">(<span class=\"keyword\">int</span> nCode, WPARAM wParam, LPARAM lParam)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 有鼠标消息时，将其发给主程序</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (g_hookWnd != <span class=\"literal\">NULL</span> &amp;&amp; nCode == HC_ACTION)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 自定义消息</span></span><br><span class=\"line\">    ::SendMessage(g_hookWnd, WM_HOOKMSG, wParam, lParam);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 常规事件继续传递: g_hook 可以给NULL</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> CallNextHookEx(g_hHook, nCode, wParam, lParam);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 其他辅助导出函数</span></span><br><span class=\"line\"><span class=\"function\">BOOL <span class=\"title\">SetHwnd</span><span class=\"params\">(HWND hwnd, HHOOK hHook)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  g_hookWnd = hwnd;</span><br><span class=\"line\">  g_hHook = hHook;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> TRUE;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// .def 内容</span></span><br><span class=\"line\">LIBRARY</span><br><span class=\"line\">EXPORTS</span><br><span class=\"line\">  MouseProc</span><br><span class=\"line\">  SetHwnd</span><br><span class=\"line\"><span class=\"comment\">// ------------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">// EXE 加载部分</span></span><br><span class=\"line\"><span class=\"comment\">// 加载DLL</span></span><br><span class=\"line\">HMODULE hModule = LoadLibrary(GetRunPath() + TEXT(<span class=\"string\">\"\\\\HookDll.dll\"</span>));</span><br><span class=\"line\">PSetHwnd pSetHwnd = (PSetHwnd)GetProcAddress(hModule, <span class=\"string\">\"SetHwnd\"</span>);</span><br><span class=\"line\">HOOKPROC mouseProc = (HOOKPROC)GetProcAddress(hModule, <span class=\"string\">\"MouseProc\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (!pSetHwnd || !mouseProc)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> FALSE;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 安装</span></span><br><span class=\"line\">HHOOK hHook = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"><span class=\"comment\">// 0代表全局</span></span><br><span class=\"line\">hHook = SetWindowsHookEx(WH_MOUSE, mouseProc, hModule, <span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (hHook)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  SetWindowText(g_static, TEXT(<span class=\"string\">\"SetWindowsHookEx Success\"</span>));</span><br><span class=\"line\">  <span class=\"comment\">// 把句柄设置进去是为了方便回传数据</span></span><br><span class=\"line\">  pSetHwnd(g_hwnd, hHook);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">  SetWindowText(g_static, TEXT(<span class=\"string\">\"SetWindowsHookEx Fail\"</span>));</span><br><span class=\"line\"><span class=\"comment\">// 卸载</span></span><br><span class=\"line\">FreeLibrary(hModule);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (hHook)</span><br><span class=\"line\">  UnhookWindowsHookEx(hHook);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"备注\"><a href=\"#备注\" class=\"headerlink\" title=\"备注\"></a>备注</h2><ul>\n<li>EXE模式仍然依赖于消息机制，调用<code>SetWindowsHookEx</code>的线程不可被阻塞，否则会导致钩子无效，系统所有按键事件被延迟处理</li>\n<li>Exe需要管理员权限</li>\n</ul>\n<h2 id=\"Demo\"><a href=\"#Demo\" class=\"headerlink\" title=\"Demo\"></a>Demo</h2><p><a href=\"https://github.com/fxliu/VCDemo/tree/master/HOOK/KeyboardHook\" target=\"_blank\" rel=\"noopener\">HOOK</a>包含一个EXE方式键盘钩子和一个DLL模块方式鼠标钩子<br><code>https://github.com/fxliu/VCDemo/tree/master/HOOK/KeyboardHook</code><br>EXE方式比DLL方式便捷的多，但貌似DLL模块方式速度比较快</p>\n","categories":["VC"],"tags":["HOOK"]},{"title":"MySQL","url":"/2019/10/27/DB/MySQL/","content":"<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 服务指令</span></span><br><span class=\"line\">service mysqld start|stop|status</span><br><span class=\"line\"><span class=\"comment\">#---- 默认配置 ----</span></span><br><span class=\"line\"><span class=\"comment\">#程序位置</span></span><br><span class=\"line\">/usr/bin</span><br><span class=\"line\"><span class=\"comment\">#数据位置（配置+数据库）</span></span><br><span class=\"line\">/var/lib/mysql</span><br><span class=\"line\"><span class=\"comment\">#运行日志（查看错误）</span></span><br><span class=\"line\">/var/<span class=\"built_in\">log</span>/mysqld.log</span><br><span class=\"line\"><span class=\"comment\">#配置文件：一般不动</span></span><br><span class=\"line\">/etc/my.cnf</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Centos7\"><a href=\"#Centos7\" class=\"headerlink\" title=\"Centos7\"></a>Centos7</h3><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">wget https://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm</span><br><span class=\"line\">yum install mysql57-community-release-el7-11.noarch.rpm</span><br><span class=\"line\">yum repolist enabled</span><br><span class=\"line\">yum install mysql-community-server</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 默认密码:</span></span><br><span class=\"line\">grep <span class=\"string\">'temporary password'</span> /var/<span class=\"built_in\">log</span>/mysqld.log</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 关闭密码策略:</span></span><br><span class=\"line\">vi /etc/my.conf</span><br><span class=\"line\"><span class=\"comment\"># 追加:</span></span><br><span class=\"line\">validate_password=off</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 超管密码</span></span><br><span class=\"line\">mysql -uroot -p</span><br><span class=\"line\"><span class=\"comment\"># 修改密码:</span></span><br><span class=\"line\"><span class=\"built_in\">set</span> password <span class=\"keyword\">for</span> <span class=\"string\">'root'</span>@<span class=\"string\">'localhost'</span>=password(<span class=\"string\">'easysoft'</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"配置-状态\"><a href=\"#配置-状态\" class=\"headerlink\" title=\"配置/状态\"></a>配置/状态</h3><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 状态</span></span><br><span class=\"line\"><span class=\"keyword\">SHOW</span> <span class=\"keyword\">STATUS</span>;</span><br><span class=\"line\"><span class=\"keyword\">SHOW</span> <span class=\"keyword\">STATUS</span> <span class=\"keyword\">LIKE</span> <span class=\"string\">\"threads%\"</span>;</span><br><span class=\"line\"><span class=\"comment\">-- 参数</span></span><br><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">variables</span>;</span><br><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">variables</span> <span class=\"keyword\">like</span> <span class=\"string\">\"%heap%\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">variables</span> <span class=\"keyword\">like</span> <span class=\"string\">\"tmp_table_size\"</span>;</span><br><span class=\"line\"><span class=\"comment\">-- 设置参数</span></span><br><span class=\"line\"><span class=\"keyword\">SET</span> max_heap_table_size = <span class=\"number\">1024</span>*<span class=\"number\">1024</span>;</span><br><span class=\"line\"><span class=\"comment\">-- 参数</span></span><br><span class=\"line\">default_storage_engine    <span class=\"comment\">-- 默认引擎</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 所有引擎</span></span><br><span class=\"line\"><span class=\"keyword\">SHOW</span> <span class=\"keyword\">ENGINES</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"常规Demo\"><a href=\"#常规Demo\" class=\"headerlink\" title=\"常规Demo\"></a>常规Demo</h2><ul>\n<li>表复制: <code>INSERT INTO t1 SELECT * FROM t2</code></li>\n</ul>\n<h2 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h2><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- REPLACE</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">REPLACE</span>(<span class=\"string\">'aaa.mysql.com'</span>,<span class=\"string\">'a'</span>,<span class=\"string\">'w'</span>);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">LEFT() RIGHT() <span class=\"comment\">--左边或者右边的字符</span></span><br><span class=\"line\">LOWER() UPPER() <span class=\"comment\">--转换为小写或者大写</span></span><br><span class=\"line\">LTRIM() RTIM() <span class=\"comment\">--去除左边或者右边的空格</span></span><br><span class=\"line\">LENGTH() <span class=\"comment\">--长度</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 字符串 组合</span></span><br><span class=\"line\">CONCAT('bar_', citycode)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 字符串拆分, '126.616035,45.764964' -&gt; 126.616035 和 45.764964</span></span><br><span class=\"line\"><span class=\"comment\">-- 1代表第一个，-1代表最后一个</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> bd_lon=SUBSTRING_INDEX(gps,<span class=\"string\">','</span>, <span class=\"number\">1</span>), bd_lat=substring_index(gps,<span class=\"string\">','</span>, <span class=\"number\">-1</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"SELECT\"><a href=\"#SELECT\" class=\"headerlink\" title=\"SELECT\"></a>SELECT</h2><h3 id=\"SELECT-正则\"><a href=\"#SELECT-正则\" class=\"headerlink\" title=\"SELECT-正则\"></a>SELECT-正则</h3><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- like: %代表多个任意字符, _代表单个任意字符</span></span><br><span class=\"line\"><span class=\"comment\">-- escape: 指定转义字符</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> SCHEMA_NAME <span class=\"keyword\">from</span> information_schema.SCHEMATA <span class=\"keyword\">WHERE</span> SCHEMA_NAME <span class=\"keyword\">like</span> <span class=\"string\">\"netbar/_%\"</span> escape <span class=\"string\">'/'</span></span><br><span class=\"line\"><span class=\"comment\">-- REGEXP: 正则匹配</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> SCHEMA_NAME <span class=\"keyword\">from</span> information_schema.SCHEMATA <span class=\"keyword\">WHERE</span> SCHEMA_NAME REGEXP <span class=\"string\">\"^netbar_[0-9]\"</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> SCHEMA_NAME <span class=\"keyword\">FROM</span> information_schema.SCHEMATA <span class=\"keyword\">WHERE</span> SCHEMA_NAME REGEXP <span class=\"string\">\"^netbar_[0-9]&#123;10&#125;$\"</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"SELECT-CASE\"><a href=\"#SELECT-CASE\" class=\"headerlink\" title=\"SELECT-CASE\"></a>SELECT-CASE</h3><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> k1,</span><br><span class=\"line\">  <span class=\"keyword\">CASE</span></span><br><span class=\"line\">    <span class=\"keyword\">WHEN</span> k2 &gt; <span class=\"number\">150</span> <span class=\"keyword\">THEN</span> <span class=\"string\">'&gt;150'</span></span><br><span class=\"line\">    <span class=\"keyword\">WHEN</span> k2 &gt; <span class=\"number\">120</span> <span class=\"keyword\">THEN</span> <span class=\"string\">'120&lt; k2 &gt;150'</span></span><br><span class=\"line\">    <span class=\"keyword\">ELSE</span> <span class=\"string\">'&lt;120'</span></span><br><span class=\"line\">  <span class=\"keyword\">END</span> <span class=\"keyword\">as</span> v</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> t1</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"INSERT-REPLACE\"><a href=\"#INSERT-REPLACE\" class=\"headerlink\" title=\"INSERT/REPLACE\"></a>INSERT/REPLACE</h2><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 表复制</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> t1 <span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> t2;</span><br><span class=\"line\"><span class=\"comment\">-- 表复制：指定字段</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> t1 (k1, k2)</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> k1, k2 <span class=\"keyword\">FROM</span> t2</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- REPLACE INTO: 用法与Insert相同</span></span><br><span class=\"line\"><span class=\"comment\">-- 当KEY不存在时，等价于Delete</span></span><br><span class=\"line\"><span class=\"comment\">-- 当KEY存在时，先Delete然后Insert，未设定的字段按照默认值处理</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- INSERT INTO ** ON DUPLICATE KEY UPDATE</span></span><br><span class=\"line\"><span class=\"comment\">-- 当KEY存在时，只更新指定字段</span></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> t1 (k1, k2)</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> k1, k2 <span class=\"keyword\">FROM</span> t2</span><br><span class=\"line\"><span class=\"keyword\">ON</span> <span class=\"keyword\">DUPLICATE</span> <span class=\"keyword\">KEY</span> <span class=\"keyword\">UPDATE</span> t1.k1=t2.k1</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Update\"><a href=\"#Update\" class=\"headerlink\" title=\"Update\"></a>Update</h2><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 联表更新：方式1</span></span><br><span class=\"line\"><span class=\"keyword\">UPDATE</span> t1 <span class=\"keyword\">as</span> a</span><br><span class=\"line\"><span class=\"keyword\">SET</span> a.test_key=(<span class=\"keyword\">SELECT</span> test_key <span class=\"keyword\">FROM</span> t2 <span class=\"keyword\">as</span> b <span class=\"keyword\">WHERE</span> a.id=b.id);</span><br><span class=\"line\"><span class=\"comment\">-- 联表更新：方式2</span></span><br><span class=\"line\"><span class=\"keyword\">UPDATE</span> t1 <span class=\"keyword\">as</span> a</span><br><span class=\"line\"><span class=\"keyword\">LEFT</span> <span class=\"keyword\">JOIN</span> t2 <span class=\"keyword\">as</span> b <span class=\"keyword\">ON</span> a.id=b.id</span><br><span class=\"line\"><span class=\"keyword\">SET</span> a.test_key=b.test_key</span><br><span class=\"line\"><span class=\"comment\">-- 联表更新： 方式3</span></span><br><span class=\"line\"><span class=\"keyword\">UPDATE</span> t1 <span class=\"keyword\">as</span> a, t2 <span class=\"keyword\">as</span> b</span><br><span class=\"line\"><span class=\"keyword\">SET</span> a.test_key=b.test_key</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> a.id=b.id</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"表\"><a href=\"#表\" class=\"headerlink\" title=\"表\"></a>表</h2><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 创建库</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">DATABASE</span> <span class=\"keyword\">IF</span> <span class=\"keyword\">NOT</span> <span class=\"keyword\">EXISTS</span> %s <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">CHARSET</span> utf8 <span class=\"keyword\">COLLATE</span> utf8_general_ci;</span><br><span class=\"line\"><span class=\"comment\">-- 数据库遍历</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> SCHEMA_NAME <span class=\"keyword\">FROM</span> information_schema.SCHEMATA</span><br><span class=\"line\"><span class=\"comment\">-- 创建表</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">IF</span> <span class=\"keyword\">NOT</span> <span class=\"keyword\">EXISTS</span> olcustomer(</span><br><span class=\"line\">    icafe <span class=\"built_in\">bigint</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'网吧号'</span>,</span><br><span class=\"line\">    uid <span class=\"built_in\">varchar</span>(<span class=\"number\">10</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'用户ID'</span>,</span><br><span class=\"line\">    grade <span class=\"built_in\">int</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">default</span> <span class=\"number\">0</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'等级'</span>,</span><br><span class=\"line\">    uptm datetime <span class=\"literal\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">CURRENT_TIMESTAMP</span> <span class=\"keyword\">ON</span> <span class=\"keyword\">UPDATE</span> <span class=\"keyword\">CURRENT_TIMESTAMP</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'更新时间'</span>,</span><br><span class=\"line\">    primary <span class=\"keyword\">key</span>(icafe,uid)</span><br><span class=\"line\">)<span class=\"keyword\">COMMENT</span>=<span class=\"string\">'刷卡人员列表'</span>;</span><br><span class=\"line\"><span class=\"comment\">-- 删除</span></span><br><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">IF</span> <span class=\"keyword\">EXISTS</span> tn;</span><br><span class=\"line\"><span class=\"comment\">-- 快速清空表</span></span><br><span class=\"line\"><span class=\"keyword\">TRUNCATE</span> <span class=\"keyword\">TABLE</span> tn;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 遍历所有数据库</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> SCHEMA_NAME <span class=\"keyword\">FROM</span> information_schema.SCHEMATA <span class=\"keyword\">WHERE</span> SCHEMA_NAME <span class=\"keyword\">LIKE</span> <span class=\"string\">\"netbar_%\"</span>;</span><br><span class=\"line\"><span class=\"comment\">-- 遍历指定数据库下的表</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> TABLE_NAME <span class=\"keyword\">FROM</span> information_schema.TABLES <span class=\"keyword\">WHERE</span> TABLE_NAME <span class=\"keyword\">LIKE</span> <span class=\"string\">'bar_%'</span> <span class=\"keyword\">AND</span> TABLE_SCHEMA=<span class=\"string\">'netbaropt'</span>;</span><br><span class=\"line\"><span class=\"comment\">-- 检查索引</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> INDEX_NAME <span class=\"keyword\">FROM</span> information_schema.statistics <span class=\"keyword\">WHERE</span> table_schema=@db <span class=\"keyword\">AND</span> table_name = <span class=\"string\">'duty'</span> <span class=\"keyword\">AND</span> index_name = <span class=\"string\">'idx_tmbegin'</span>;</span><br><span class=\"line\"><span class=\"comment\">-- 创建时间</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> TABLE_SCHEMA, TABLE_NAME, CREATE_TIME <span class=\"keyword\">FROM</span> INFORMATION_SCHEMA.TABLES <span class=\"keyword\">WHERE</span> TABLE_SCHEMA <span class=\"keyword\">LIKE</span> <span class=\"string\">'netbar_2%'</span> <span class=\"keyword\">AND</span> TABLE_NAME=<span class=\"string\">'duty'</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"列操作\"><a href=\"#列操作\" class=\"headerlink\" title=\"列操作\"></a>列操作</h3><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 列遍历</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> COLUMN_NAME <span class=\"keyword\">FROM</span> information_schema.<span class=\"string\">`COLUMNS`</span> <span class=\"keyword\">WHERE</span> TABLE_SCHEMA=<span class=\"string\">'库名'</span> <span class=\"keyword\">AND</span> TABLE_NAME=<span class=\"string\">'表名'</span>;</span><br><span class=\"line\"><span class=\"comment\">-- 添加列</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">user</span> <span class=\"keyword\">ADD</span> age <span class=\"built_in\">int</span>(<span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"comment\">-- 删除列</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">user</span> <span class=\"keyword\">DROP</span> <span class=\"keyword\">COLUMN</span> age;</span><br><span class=\"line\"><span class=\"comment\">-- 修改列</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"string\">`user`</span> <span class=\"keyword\">MODIFY</span> <span class=\"keyword\">COLUMN</span> age <span class=\"built_in\">tinyint</span>;</span><br><span class=\"line\"><span class=\"comment\">-- 添加主键</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">user</span> <span class=\"keyword\">ADD</span> PRIMARY <span class=\"keyword\">KEY</span> (<span class=\"keyword\">id</span>);</span><br><span class=\"line\"><span class=\"comment\">-- 删除主键</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">user</span> <span class=\"keyword\">DROP</span> PRIMARY <span class=\"keyword\">KEY</span>;</span><br><span class=\"line\"><span class=\"comment\">-- 添加索引</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> 表名 <span class=\"keyword\">ADD</span> <span class=\"keyword\">INDEX</span> 索引名 (列名) ;</span><br><span class=\"line\"><span class=\"comment\">-- 删除索引</span></span><br><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">INDEX</span> index_name <span class=\"keyword\">ON</span> table_name;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"内存表\"><a href=\"#内存表\" class=\"headerlink\" title=\"内存表\"></a>内存表</h3><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> t3 (i <span class=\"built_in\">INT</span>) <span class=\"keyword\">ENGINE</span> = <span class=\"keyword\">MEMORY</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"视图\"><a href=\"#视图\" class=\"headerlink\" title=\"视图\"></a>视图</h3><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 删除</span></span><br><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">VIEW</span> <span class=\"keyword\">IF</span> <span class=\"keyword\">EXISTS</span> v_olcustomer;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"时间\"><a href=\"#时间\" class=\"headerlink\" title=\"时间\"></a>时间</h2><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SET</span> @d1=<span class=\"string\">'2019-10-20'</span>;</span><br><span class=\"line\"><span class=\"keyword\">SET</span> @d2=<span class=\"string\">'2019-10-27'</span>;</span><br><span class=\"line\"><span class=\"keyword\">SET</span> @dc=<span class=\"keyword\">TIMESTAMPDIFF</span>(<span class=\"keyword\">DAY</span>, @d1, @d2);   <span class=\"comment\">-- 时间差：日</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> tkey, <span class=\"keyword\">count</span>(<span class=\"number\">1</span>) / @dc <span class=\"keyword\">FROM</span> t</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> uptime <span class=\"keyword\">BETWEEN</span> @d1 <span class=\"keyword\">AND</span> @d2</span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> tkey</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 时间差</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> @dt = <span class=\"keyword\">NOW</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">Date_Add</span>(@dt, <span class=\"built_in\">interval</span> <span class=\"number\">1</span> <span class=\"keyword\">day</span>); <span class=\"comment\">-- add 1 day</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">Date_Add</span>(@dt, <span class=\"built_in\">interval</span> <span class=\"number\">1</span> <span class=\"keyword\">hour</span>); <span class=\"comment\">-- add 1 hour</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">Date_Add</span>(@dt, <span class=\"built_in\">interval</span> <span class=\"number\">1</span> <span class=\"keyword\">minute</span>); <span class=\"comment\">-- ...</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">Date_Add</span>(@dt, <span class=\"built_in\">interval</span> <span class=\"number\">1</span> <span class=\"keyword\">second</span>);</span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">Date_Add</span>(@dt, <span class=\"built_in\">interval</span> <span class=\"number\">1</span> <span class=\"keyword\">microsecond</span>);</span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">Date_Add</span>(@dt, <span class=\"built_in\">interval</span> <span class=\"number\">1</span> <span class=\"keyword\">week</span>);</span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">Date_Add</span>(@dt, <span class=\"built_in\">interval</span> <span class=\"number\">1</span> <span class=\"keyword\">month</span>);</span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">Date_Add</span>(@dt, <span class=\"built_in\">interval</span> <span class=\"number\">1</span> <span class=\"keyword\">quarter</span>);</span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">Date_Add</span>(@dt, <span class=\"built_in\">interval</span> <span class=\"number\">1</span> <span class=\"keyword\">year</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">Date_Add</span>(@dt, <span class=\"built_in\">interval</span> <span class=\"number\">-1</span> <span class=\"keyword\">day</span>); <span class=\"comment\">-- sub 1 day</span></span><br><span class=\"line\"><span class=\"comment\">-- 时间差</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">TIMESTAMPDIFF</span>(<span class=\"keyword\">DAY</span>,<span class=\"string\">'2012-10-01'</span>,<span class=\"string\">'2013-01-13'</span>);</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">TIMESTAMPDIFF</span>(<span class=\"keyword\">MONTH</span>,<span class=\"string\">'2012-10-01'</span>,<span class=\"string\">'2013-01-13'</span>);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 时间 -&gt; 字符串</span></span><br><span class=\"line\"><span class=\"keyword\">SET</span> @DB := <span class=\"keyword\">CONCAT</span>(<span class=\"string\">'database.database_'</span>, <span class=\"keyword\">DATE_FORMAT</span>(<span class=\"keyword\">NOW</span>(), <span class=\"string\">'%Y%m%d'</span>));</span><br><span class=\"line\"><span class=\"keyword\">SET</span> @<span class=\"keyword\">LIST</span> := <span class=\"keyword\">CONCAT</span>(<span class=\"string\">'netbaropt.list_'</span>, <span class=\"keyword\">DATE_FORMAT</span>(<span class=\"keyword\">NOW</span>(), <span class=\"string\">'%Y%m%d'</span>));</span><br><span class=\"line\"><span class=\"comment\">-- 字符串 -&gt; 时间</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">str_to_date</span>(<span class=\"string\">'2008-08-09 08:09:30'</span>, <span class=\"string\">'%Y-%m-%d %h:%i:%s'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 时间戳</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">unix_timestamp</span>(<span class=\"string\">'2008-08-08 12:30:00'</span>);    <span class=\"comment\">-- 1218169800</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> from_unixtime(<span class=\"number\">1218169800</span>);                <span class=\"comment\">-- 2008-08-08 12:30:00</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> from_unixtime(<span class=\"number\">1218169800</span>, <span class=\"string\">'%Y-%m-%d %h:%i:%s'</span>);    <span class=\"comment\">-- 2008-08-08 12:30:00</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 其他常用函数</span></span><br><span class=\"line\">AddDate()     <span class=\"comment\">--增加一个日期（天、周等）</span></span><br><span class=\"line\">AddTime()     <span class=\"comment\">--增加一个时间（时、分等）</span></span><br><span class=\"line\">DateDiff()    <span class=\"comment\">--计算两个日期之差（日）</span></span><br><span class=\"line\">Date_Add()    <span class=\"comment\">--高度灵活的日期运算函数</span></span><br><span class=\"line\">Date_Format() <span class=\"comment\">--返回一个格式化的日期或时间串</span></span><br><span class=\"line\"></span><br><span class=\"line\">CurDate() <span class=\"comment\">--返回当前日期</span></span><br><span class=\"line\">CurTime() <span class=\"comment\">--返回当前时间</span></span><br><span class=\"line\"></span><br><span class=\"line\">Year()    <span class=\"comment\">--返回一个日期的年份部分</span></span><br><span class=\"line\">Month()   <span class=\"comment\">--返回一个日期的月份部分</span></span><br><span class=\"line\">Day()     <span class=\"comment\">--返回一个日期的天数部分</span></span><br><span class=\"line\">Hour()    <span class=\"comment\">--返回一个时间的小时部分</span></span><br><span class=\"line\">Minute()  <span class=\"comment\">--返回一个时间的分钟部分</span></span><br><span class=\"line\">Second()  <span class=\"comment\">--返回一个时间的秒部分</span></span><br><span class=\"line\"></span><br><span class=\"line\">Date()        <span class=\"comment\">--返回日期时间的日期部分</span></span><br><span class=\"line\">Time()        <span class=\"comment\">--返回一个日期时间的时间部分</span></span><br><span class=\"line\">DayOfWeek()   <span class=\"comment\">--对于一个日期，返回对应的星期几</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"常用函数\"><a href=\"#常用函数\" class=\"headerlink\" title=\"常用函数\"></a>常用函数</h2><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">AVG()   <span class=\"comment\">--返回某列的平均值</span></span><br><span class=\"line\">COUNT() <span class=\"comment\">--返回某列的行数</span></span><br><span class=\"line\">MAX()   <span class=\"comment\">--返回某列的最大值</span></span><br><span class=\"line\">MIN()   <span class=\"comment\">--返回某列的最小值</span></span><br><span class=\"line\">SUM()   <span class=\"comment\">--返回某列值之和</span></span><br><span class=\"line\"></span><br><span class=\"line\">SIN()   <span class=\"comment\">--正弦</span></span><br><span class=\"line\">COS()   <span class=\"comment\">--余弦</span></span><br><span class=\"line\">TAN()   <span class=\"comment\">--正切</span></span><br><span class=\"line\">ABS()   <span class=\"comment\">--绝对值</span></span><br><span class=\"line\">SQRT()  <span class=\"comment\">--平方根</span></span><br><span class=\"line\">MOD()   <span class=\"comment\">--余数</span></span><br><span class=\"line\">EXP()   <span class=\"comment\">--指数</span></span><br><span class=\"line\">PI()    <span class=\"comment\">--圆周率</span></span><br><span class=\"line\">RAND()  <span class=\"comment\">--随机数</span></span><br></pre></td></tr></table></figure>\n\n","categories":["MySQL"],"tags":["SQL"]},{"title":"文件","url":"/2019/10/23/Python/文件/文件/","content":"<h2 id=\"文件\"><a href=\"#文件\" class=\"headerlink\" title=\"文件\"></a>文件</h2><h3 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h3><figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建时间</span></span><br><span class=\"line\">os.stat(fn).st_ctime</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"常规操作\"><a href=\"#常规操作\" class=\"headerlink\" title=\"常规操作\"></a>常规操作</h3><figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\">os.mkdir(folder_name)      <span class=\"comment\">#创建文件夹</span></span><br><span class=\"line\">os.makedirs(folder_name)   <span class=\"comment\">#创建多层文件夹</span></span><br><span class=\"line\"></span><br><span class=\"line\">os.rmdir(folder_name)      <span class=\"comment\">#删除空文件夹</span></span><br><span class=\"line\">os.removedirs(path)        <span class=\"comment\">#递归删除空目录</span></span><br><span class=\"line\"></span><br><span class=\"line\">os.rename(oldfiles,newfile) <span class=\"comment\">#文件/文件夹改名</span></span><br><span class=\"line\">os.remove(path)             <span class=\"comment\">#文件删除</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#相当于文件移动,但目标目录必须存在</span></span><br><span class=\"line\">os.rename(<span class=\"string\">'D:\\\\1\\\\2.txt'</span>,<span class=\"string\">'D:\\\\2\\\\3.txt'</span>)</span><br><span class=\"line\"><span class=\"comment\">#目录和文件 同时改名</span></span><br><span class=\"line\">os.renames(<span class=\"string\">'D:\\\\2\\\\3.txt'</span>,<span class=\"string\">'D:\\\\1\\\\1.txt'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 文件是否存在</span></span><br><span class=\"line\">os.path.exists(<span class=\"string\">'d:/assist'</span>)</span><br><span class=\"line\">os.path.exists(<span class=\"string\">'d:/assist/getTeacherList.py'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">os.makedirs(<span class=\"string\">'d:/assist/set'</span>)</span><br><span class=\"line\">os.path.exists(<span class=\"string\">'d:/assist/set'</span>)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sys,os</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#当前程序变量</span></span><br><span class=\"line\">print(sys.path)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#系统变量</span></span><br><span class=\"line\">print(os.environ[<span class=\"string\">'TMP'</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#环境变量转化</span></span><br><span class=\"line\">os.environ[<span class=\"string\">'myvar'</span>]=<span class=\"string\">'value'</span> <span class=\"comment\">#定义自己的环境变量</span></span><br><span class=\"line\">print(os.path.expandvars(<span class=\"string\">'$TMP\\\\myvar'</span>))</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Excel\"><a href=\"#Excel\" class=\"headerlink\" title=\"Excel\"></a>Excel</h2><p>安装：<code>pip install openpyxl</code></p>\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: gbk -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> openpyxl</span><br><span class=\"line\"><span class=\"keyword\">import</span> datetime</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test_read</span><span class=\"params\">(fn)</span>:</span></span><br><span class=\"line\">    wb = openpyxl.load_workbook(fn)</span><br><span class=\"line\">    ws = wb.get_sheet_by_name(wb.get_sheet_names()[<span class=\"number\">0</span>])</span><br><span class=\"line\">    wc = ws.cell(row=<span class=\"number\">1</span>, column=<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">print</span> wc.value</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test_create</span><span class=\"params\">(fn)</span>:</span></span><br><span class=\"line\">    wb = openpyxl.Workbook()</span><br><span class=\"line\">    ws = wb.create_sheet(index=<span class=\"number\">0</span>, title=<span class=\"string\">\"sheet\"</span>)</span><br><span class=\"line\">    <span class=\"comment\"># ws = wb.get_active_sheet()</span></span><br><span class=\"line\">    <span class=\"comment\"># ws = wb.active</span></span><br><span class=\"line\">    <span class=\"comment\"># ws.sheet_properties.tabColor = \"205EB2\"</span></span><br><span class=\"line\">    <span class=\"comment\"># ws.title = \"test\"</span></span><br><span class=\"line\">    ws.append([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>])  <span class=\"comment\"># 添加一行</span></span><br><span class=\"line\">    ws.cell(row=<span class=\"number\">1</span>, column=<span class=\"number\">1</span>, value=<span class=\"string\">'test2'</span>)  <span class=\"comment\"># 指定位置：字符串</span></span><br><span class=\"line\">    ws[<span class=\"string\">'A2'</span>] = datetime.datetime.now()  <span class=\"comment\"># 指定位置：日期</span></span><br><span class=\"line\">    wb.save(fn)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    fn = <span class=\"string\">'test.xlsx'</span></span><br><span class=\"line\">    test_create(fn)</span><br><span class=\"line\">    test_read(fn)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"文件夹\"><a href=\"#文件夹\" class=\"headerlink\" title=\"文件夹\"></a>文件夹</h2><h3 id=\"遍历\"><a href=\"#遍历\" class=\"headerlink\" title=\"遍历\"></a>遍历</h3><figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 递归遍历</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">for</span> root,dirs,files <span class=\"keyword\">in</span> os.walk(directiory):</span><br><span class=\"line\">    <span class=\"keyword\">print</span> root,dirs,files</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 通配符遍历</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> glob</span><br><span class=\"line\"></span><br><span class=\"line\">files = glob.glob(<span class=\"string\">'*/*.json'</span>)   <span class=\"comment\"># 遍历一级子目录下的json</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> files   <span class=\"comment\"># ['1/t1.json', '1/t2.json', '2/t.py']</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight py\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> shutil</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#复制目录:目标目录存在的话则报错</span></span><br><span class=\"line\">shutil.copytree(<span class=\"string\">'d:/www'</span>, <span class=\"string\">'c:/temp/'</span>)</span><br><span class=\"line\"><span class=\"comment\">#删除目录（支持非空删除）</span></span><br><span class=\"line\">shutil.rmtree(path)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#简单复制: 如果目标文件存在则覆盖, 目标目录必须存在</span></span><br><span class=\"line\">shutil.copyfile(<span class=\"string\">'src.py'</span>,<span class=\"string\">'des.copy'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#复制</span></span><br><span class=\"line\"><span class=\"comment\">#如果目标不是文件而是路径, 则复制指定文件到指定目录中, 文件名保持不变</span></span><br><span class=\"line\"><span class=\"comment\">#如果目标目录不存在, 则自动创建</span></span><br><span class=\"line\"><span class=\"comment\">#复制文件属性</span></span><br><span class=\"line\">shutil.copy(<span class=\"string\">'src'</span>,<span class=\"string\">'des'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#复制</span></span><br><span class=\"line\"><span class=\"comment\">#文件最后一次被读取和修改时间等一些元信息, 也复制给新文件</span></span><br><span class=\"line\"><span class=\"comment\">#其他等同于copy</span></span><br><span class=\"line\">shutil.copy2(<span class=\"string\">'src'</span>,<span class=\"string\">'des'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#目录复制</span></span><br><span class=\"line\"><span class=\"comment\">#目标目录必须是不存在的</span></span><br><span class=\"line\">shutil.copytree(<span class=\"string\">'src'</span>,<span class=\"string\">'des'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#移动文件或目录</span></span><br><span class=\"line\">shutil.move(a,b)</span><br></pre></td></tr></table></figure>\n\n","categories":["Python"],"tags":["文件"]},{"title":"字符串","url":"/2019/10/10/VC/String/","content":"<h2 id=\"小函数封装\"><a href=\"#小函数封装\" class=\"headerlink\" title=\"小函数封装\"></a>小函数封装</h2><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">char</span> <span class=\"title\">H2I</span><span class=\"params\">(<span class=\"keyword\">char</span> ch)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (ch &gt;= <span class=\"string\">'0'</span> &amp;&amp; ch &lt;= <span class=\"string\">'9'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ch - <span class=\"string\">'0'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (ch &gt;= <span class=\"string\">'a'</span> &amp;&amp; ch &lt;= <span class=\"string\">'f'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ch - <span class=\"string\">'a'</span> + <span class=\"number\">10</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> ch - <span class=\"string\">'A'</span> + <span class=\"number\">10</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// \"A\\u5218B\" -&gt; A刘B</span></span><br><span class=\"line\"><span class=\"function\">CStringA <span class=\"title\">Uncode2String</span><span class=\"params\">(<span class=\"keyword\">char</span> *d)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  CStringA str;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(*d)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">strlen</span>(d) &lt; <span class=\"number\">6</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      str += d;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (d[<span class=\"number\">0</span>] == <span class=\"string\">'\\\\'</span> &amp;&amp; d[<span class=\"number\">1</span>] == <span class=\"string\">'u'</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      WCHAR ch[<span class=\"number\">2</span>] = &#123; <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\">      ch[<span class=\"number\">0</span>] = (WCHAR((H2I(d[<span class=\"number\">2</span>]) &lt;&lt; <span class=\"number\">4</span>) + H2I(d[<span class=\"number\">3</span>])) &lt;&lt; <span class=\"number\">8</span>) + (H2I(d[<span class=\"number\">4</span>]) &lt;&lt; <span class=\"number\">4</span>) + H2I(d[<span class=\"number\">5</span>]);</span><br><span class=\"line\">      <span class=\"comment\">// CP_UTF8</span></span><br><span class=\"line\">      str += CW2A(ch);</span><br><span class=\"line\">      d += <span class=\"number\">6</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      str += d[<span class=\"number\">0</span>];</span><br><span class=\"line\">      d += <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> str;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","categories":["VC"],"tags":["String"]},{"title":"加解密","url":"/2019/10/03/PHP/openssl/","content":"<h2 id=\"openssl-1-1-1\"><a href=\"#openssl-1-1-1\" class=\"headerlink\" title=\"openssl(1.1.1)\"></a>openssl(1.1.1)</h2><figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 版本号以及支持的内容</span></span><br><span class=\"line\">printf(<span class=\"string\">\"Versoin : %s\"</span>, OPENSSL_VERSION_TEXT);</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;br&gt;\"</span>;<span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;br&gt;\"</span>;</span><br><span class=\"line\">$digests = openssl_get_md_methods(<span class=\"keyword\">false</span>);</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"Digests : \"</span>;</span><br><span class=\"line\"><span class=\"keyword\">foreach</span> ($digests <span class=\"keyword\">as</span> $digest) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> $digest.<span class=\"string\">\",\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;br&gt;\"</span>;<span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;br&gt;\"</span>;</span><br><span class=\"line\">$ciphers = openssl_get_cipher_methods(<span class=\"keyword\">false</span>);</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"Ciphers : \"</span>;</span><br><span class=\"line\"><span class=\"keyword\">foreach</span> ($ciphers <span class=\"keyword\">as</span> $cipher) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> $cipher.<span class=\"string\">\",\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;br&gt;\"</span>;<span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;br&gt;\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">$curves = openssl_get_curve_names();</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"Curves : \"</span>;</span><br><span class=\"line\"><span class=\"keyword\">foreach</span> ($curves <span class=\"keyword\">as</span> $curve) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> $curve.<span class=\"string\">\",\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;br&gt;\"</span>;<span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;br&gt;\"</span>;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// SM4 加解密</span></span><br><span class=\"line\">$key = openssl_random_pseudo_bytes(<span class=\"number\">16</span>);</span><br><span class=\"line\">$ivlen = openssl_cipher_iv_length(<span class=\"string\">\"sm4\"</span>);</span><br><span class=\"line\"><span class=\"comment\">// $iv = openssl_random_pseudo_bytes($ivlen);</span></span><br><span class=\"line\">$iv = str_repeat(<span class=\"string\">\"\\0\"</span>, $ivlen);</span><br><span class=\"line\">$plaintext = <span class=\"string\">\"message to be encrypted\"</span>;</span><br><span class=\"line\">$ciphertext = openssl_encrypt($plaintext, <span class=\"string\">\"sm4\"</span>, $key, $options=<span class=\"number\">0</span>, $iv);</span><br><span class=\"line\">$original_plaintext = openssl_decrypt($ciphertext, <span class=\"string\">\"sm4\"</span>, $key, $options=<span class=\"number\">0</span>, $iv);</span><br><span class=\"line\"></span><br><span class=\"line\">printf(<span class=\"string\">\"sms4enc(\\\"%s\\\") = %s\\n\"</span>, $plaintext, bin2hex($ciphertext));</span><br><span class=\"line\">printf(<span class=\"string\">\"sms4dec(%s) = \\\"%s\\\"\\n\"</span>, bin2hex($ciphertext), $original_plaintext);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">// 证书加载：RM2 pkcs8格式证书</span></span><br><span class=\"line\">$private_content = file_get_contents(<span class=\"keyword\">__DIR__</span>.<span class=\"string\">'\\lfx.pkcs8.pem'</span>);</span><br><span class=\"line\">$prikey = openssl_pkey_get_private($private_content);</span><br><span class=\"line\"></span><br><span class=\"line\">$pubkeypem = openssl_pkey_get_details($prikey)[<span class=\"string\">\"key\"</span>];</span><br><span class=\"line\">$pubkey = openssl_pkey_get_public($pubkeypem);</span><br><span class=\"line\"></span><br><span class=\"line\">$ec = openssl_pkey_get_details($prikey)[<span class=\"string\">\"ec\"</span>];</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;br&gt;\"</span>;</span><br><span class=\"line\"><span class=\"comment\">// $ec[\"d\"] &lt;==&gt; 证书明文</span></span><br><span class=\"line\">printf(<span class=\"string\">\"SM2 Private Key: \\nd:%s, \\nx:%s, \\ny:%s\\n\"</span>, bin2hex($ec[<span class=\"string\">\"d\"</span>]), bin2hex($ec[<span class=\"string\">\"x\"</span>]), bin2hex($ec[<span class=\"string\">\"y\"</span>]));</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;br&gt;\"</span>;<span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;br&gt;\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 证书签名/验签</span></span><br><span class=\"line\">$msg = <span class=\"string\">\"abc\"</span>;</span><br><span class=\"line\">$signature = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">openssl_sign($msg, $signature, $prikey);            <span class=\"comment\">// 签名</span></span><br><span class=\"line\">$ok = openssl_verify($msg, $signature, $pubkey);    <span class=\"comment\">// 签名校验</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;br&gt;\"</span>;<span class=\"keyword\">echo</span> <span class=\"string\">\"&lt;br&gt;\"</span>;</span><br><span class=\"line\">printf(<span class=\"string\">\"verify(\\\"%s\\\", %s) = %s\\n\"</span>, $msg, bin2hex($signature), $ok ? <span class=\"string\">\"OK\"</span> : <span class=\"string\">\"Failure\"</span>);</span><br></pre></td></tr></table></figure>\n\n","categories":["PHP"],"tags":["openssl","SM2","SM4"]},{"title":"基础","url":"/2019/10/03/Java/基础/","content":"<h2 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 格式化输出</span></span><br><span class=\"line\">System.out.printf(<span class=\"string\">\"&#123;\\\"result\\\":\\\"%s\\\"&#125;\"</span>, <span class=\"keyword\">new</span> String(key));</span><br><span class=\"line\"><span class=\"comment\">// 对象打印: 可以直接打印单个任意对象</span></span><br><span class=\"line\">System.out.println(<span class=\"string\">\"asdf\"</span>);</span><br></pre></td></tr></table></figure>\n\n","categories":["JAVA"],"tags":["基础"]},{"title":"证书","url":"/2019/10/02/Tools/证书/","content":"<h2 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h2><p>这两天被国密SM2/SM3/SM4整郁闷了，备记一些证书转换相关吧</p>\n<ul>\n<li>python2+gmssl没整明白，加密好使，解密不好使</li>\n<li>PHP openssl(1.1.1b)据说事支持国密了，证书配置好使，RM4加解密好使，RM2/RM3却没整过去</li>\n<li>C加解密都整过去了，和第三方却对接不上，对方给的数据解密后和Demo（Java版）对应不上</li>\n</ul>\n<h2 id=\"openssl工具\"><a href=\"#openssl工具\" class=\"headerlink\" title=\"openssl工具\"></a>openssl工具</h2><p>安装phpStudy之后自带的，命令<code>openssl version</code>查看版本：<code>1.1.1b</code>。<br>版本必须再<code>1.1.1</code>以上，否则不支持国密(RM2/RM3/RM4)。</p>\n<h2 id=\"SM2证书测试-转化\"><a href=\"#SM2证书测试-转化\" class=\"headerlink\" title=\"SM2证书测试+转化\"></a>SM2证书测试+转化</h2><ul>\n<li>生成私钥(默认ec格式)<ul>\n<li><code>openssl ecparam -genkey -name SM2 -out sm2PriKey.pem</code></li>\n</ul>\n</li>\n<li>查看密钥明文(必须是EC格式证书)<ul>\n<li><code>openssl ec -in sm2PriKey.pem -text</code></li>\n<li>备注：公钥前面的02或者03表示是压缩公钥，04表示未压缩公钥, 04的时候，使用时根据情况可以去掉前面的04</li>\n</ul>\n</li>\n<li>格式转换<ul>\n<li>ec -&gt; pkcs8<ul>\n<li><code>openssl pkcs8 -topk8 -inform PEM -in sm2PriKey.pem -outform pem -nocrypt -out sm2PriKeyPkcs8.pem</code></li>\n</ul>\n</li>\n<li>pkcs8 -&gt; pkcs1<ul>\n<li><code>openssl pkcs8 -inform PEM -in sm2PriKeyPkcs8.pem -outform pem -nocrypt -out sm2PriKeyPkcs1.pem</code></li>\n</ul>\n</li>\n<li>pkcs8 -&gt; ec<ul>\n<li><code>openssl ec -in sm2PriKeyPkcs8.pem -outform pem -out sm2PriKey2.pem</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>RM2加密说明<ul>\n<li>加密数据：旧版RM2密文结构(C1C2C3)，新版RM2密文结构(C1C3C2)<ul>\n<li>C1为固定的64字节，c2和原始数据一样长，C3为固定的32字节</li>\n</ul>\n</li>\n<li>加密过程中使用了SM3的散列算法(官方叫杂凑算法)，这个算法输出为32字节的数据。</li>\n<li>加密数据如果<code>04</code>开头，04仅代表是旧版密文模式(C1C2C3)，解密时要根据情况转换</li>\n<li>C1：64字节的随机数</li>\n<li>C2：真正的密文，跟明文的长度是一样的</li>\n<li>C3：是杂凑值（32字节）。通过SM3（摘要算法）进行运算得出的。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"证书\"><a href=\"#证书\" class=\"headerlink\" title=\"证书\"></a>证书</h2><h3 id=\"根证书\"><a href=\"#根证书\" class=\"headerlink\" title=\"根证书\"></a>根证书</h3><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 跟证书key</span></span><br><span class=\"line\">openssl genrsa -des3 -out root.key 2048</span><br><span class=\"line\"><span class=\"comment\"># 跟证书申请</span></span><br><span class=\"line\">openssl req -new -key root.key -out root.csr</span><br><span class=\"line\">&gt; Country Name (2 letter code) [AU]:CN ← 国家代号，中国输入CN</span><br><span class=\"line\">&gt; State or Province Name (full name) [Some-State]:BeiJing ← 省的全名，拼音</span><br><span class=\"line\">&gt; Locality Name (eg, city) []:BeiJing ← 市的全名，拼音</span><br><span class=\"line\">&gt; Organization Name (eg, company) [Internet Widgits Pty Ltd]:MyCompany Corp. ← 公司英文名: SAIL</span><br><span class=\"line\">&gt; Organizational Unit Name (eg, section) []: ← 可以不输入</span><br><span class=\"line\">&gt; Common Name (eg, YOUR name) []: ← 可以不输入: SAIL ROOT CA</span><br><span class=\"line\">&gt; Email Address []:admin@mycompany.com ← 电子邮箱，可随意填</span><br><span class=\"line\">&gt; A challenge password []: ← 可以不输入</span><br><span class=\"line\">&gt; An optional company name []: ← 可以不输入</span><br><span class=\"line\"><span class=\"comment\"># 根证书(100年)</span></span><br><span class=\"line\">openssl x509 -req -days 36500 -sha1 -extensions v3_ca -signkey root.key -<span class=\"keyword\">in</span> root.csr -out root.crt</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用根证书生成-服务器证书\"><a href=\"#使用根证书生成-服务器证书\" class=\"headerlink\" title=\"使用根证书生成-服务器证书\"></a>使用根证书生成-服务器证书</h3><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建key</span></span><br><span class=\"line\">openssl genrsa -des3 -out server.key 2048</span><br><span class=\"line\"><span class=\"comment\"># 创建证书申请文件: 注意CN需要填写正确的网站地址(域名/IP)</span></span><br><span class=\"line\">openssl req -new -key server.key -out server.csr</span><br><span class=\"line\"><span class=\"comment\"># 签发有效期10年的证书</span></span><br><span class=\"line\">openssl x509 -req -days 3650 -sha1 -extensions v3_req -CA root.crt -CAkey root.key -CAcreateserial -<span class=\"keyword\">in</span> server.csr -out server.crt</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用根证书生成-客户端证书\"><a href=\"#使用根证书生成-客户端证书\" class=\"headerlink\" title=\"使用根证书生成-客户端证书\"></a>使用根证书生成-客户端证书</h3><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">openssl genrsa -des3 -out client.key 2048</span><br><span class=\"line\">openssl req -new -key client.key -out client.csr</span><br><span class=\"line\">openssl x509 -req -days 3650 -sha1 -extensions v3_req -CA root.crt -CAkey root.key -CAcreateserial -<span class=\"keyword\">in</span> client.csr -out client.crt</span><br><span class=\"line\"><span class=\"comment\"># 证书合并</span></span><br><span class=\"line\">openssl pkcs12 -<span class=\"built_in\">export</span> -<span class=\"keyword\">in</span> client.crt -inkey client.key -out client.pfx</span><br><span class=\"line\">openssl x509 -<span class=\"keyword\">in</span> mycert.crt -out mycert.pem -outform PEM</span><br></pre></td></tr></table></figure>\n\n","categories":["tools"],"tags":["openssl","SM2","证书"]},{"title":"基础","url":"/2019/09/28/PHP/文件接收/","content":"<h2 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h2><figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">error_reporting(<span class=\"number\">0</span>);</span><br><span class=\"line\">header(<span class=\"string\">\"Content-Type: text/html; charset=utf-8\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//按日期分文件夹,2016-10-18</span></span><br><span class=\"line\">$path=<span class=\"string\">'./auth_img/'</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(!file_exists($path))&#123;</span><br><span class=\"line\">    mkdir ($path);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$path=$path.date(<span class=\"string\">\"Ymd\"</span>).<span class=\"string\">'/'</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(!file_exists($path))&#123;</span><br><span class=\"line\">    mkdir ($path);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// echo json_encode($_POST);</span></span><br><span class=\"line\"><span class=\"comment\">// echo json_encode($_FILES);</span></span><br><span class=\"line\">$m1 = md5_file($_FILES[<span class=\"string\">'img1'</span>][<span class=\"string\">'tmp_name'</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">$f1 = $path.$m1.$m2.<span class=\"string\">'img1'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(!move_uploaded_file($_FILES[<span class=\"string\">'img1'</span>][<span class=\"string\">'tmp_name'</span>], $f1)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">'&#123;\"errno\":\"-1\",\"error\",\"upload img1 error\"&#125;'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">exit</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">'&#123;\"errno\":\"0\", \"msg\":\"ok\"&#125;'</span>;</span><br><span class=\"line\"><span class=\"keyword\">exit</span>();</span><br></pre></td></tr></table></figure>\n\n","categories":["PHP"],"tags":["基础"]},{"title":"基础","url":"/2019/09/28/PHP/基础/","content":"<h2 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h2><figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">// 指定编码类型</span></span><br><span class=\"line\">header(<span class=\"string\">\"Content-Type: text/html; charset=utf-8\"</span>);</span><br><span class=\"line\"><span class=\"comment\">// 返回自定义错误</span></span><br><span class=\"line\">header(<span class=\"string\">'HTTP/1.1 404 Not Found'</span>);</span><br><span class=\"line\"><span class=\"keyword\">exit</span>(<span class=\"string\">\"Not Found\"</span>);</span><br><span class=\"line\"><span class=\"comment\">// GET/POST数据</span></span><br><span class=\"line\">print_r($_POST);</span><br><span class=\"line\">print_r($_GET);</span><br><span class=\"line\">print_r($_REQUEST);         <span class=\"comment\">// $_REQUEST = $_POST + $_GET</span></span><br><span class=\"line\">print_r($_SERVER);</span><br><span class=\"line\">print_r(<span class=\"string\">\"php://input\"</span>);    <span class=\"comment\">// post数据流</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// define ( string $name , mixed $value [, bool $case_insensitive = FALSE ] ) : bool</span></span><br><span class=\"line\"><span class=\"comment\">// case_insensitive: 不区分大小写</span></span><br><span class=\"line\">define(<span class=\"string\">'TEST'</span>, <span class=\"string\">'Hello world'</span>);</span><br><span class=\"line\"><span class=\"keyword\">echo</span> TEST;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 外变量</span></span><br><span class=\"line\">$GLOBALS[<span class=\"string\">'t'</span>] = <span class=\"string\">'global_t'</span>;</span><br><span class=\"line\"><span class=\"comment\">// 类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@var</span> Test: 单例类变量, 默认为NULL, 无需指定</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> $t;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> Test: self::$t默认值会影响这里的返回值</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getInterface</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> $GLOBALS[<span class=\"string\">'t'</span>];        <span class=\"comment\">// 外变量</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!<span class=\"keyword\">self</span>::$t)</span><br><span class=\"line\">            <span class=\"keyword\">self</span>::$t = <span class=\"keyword\">new</span> Test(<span class=\"string\">\"HelloWorld.\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>::$t;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> $content;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">($content)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;content = $content;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">p</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"keyword\">$this</span>-&gt;content;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$t = Test::getInterface();</span><br><span class=\"line\">$t-&gt;p();</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"字符串处理\"><a href=\"#字符串处理\" class=\"headerlink\" title=\"字符串处理\"></a>字符串处理</h2><figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// str_replace ( mixed $search , mixed $replace , mixed $subject [, int &amp;$count ] ) : mixed</span></span><br><span class=\"line\">$_POST = str_replace(<span class=\"string\">\"\\r\"</span>, <span class=\"string\">\"\"</span>, $_POST);</span><br><span class=\"line\"><span class=\"comment\">// substr ( string $string , int $start [, int $length ] ) : string</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> substr(<span class=\"string\">'abcdef'</span>, <span class=\"number\">1</span>);     <span class=\"comment\">// bcdef</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> substr(<span class=\"string\">'abcdef'</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>);  <span class=\"comment\">// bcd</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> substr(<span class=\"string\">'abcdef'</span>, <span class=\"number\">-3</span>, <span class=\"number\">2</span>); <span class=\"comment\">// de</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"字符串转化\"><a href=\"#字符串转化\" class=\"headerlink\" title=\"字符串转化\"></a>字符串转化</h3><figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// JSON</span></span><br><span class=\"line\">json_decode(<span class=\"string\">'&#123;\"k\":\"v\"&#125;'</span>，<span class=\"keyword\">true</span>);     <span class=\"comment\">// json -&gt; array，true一定要有，否则返回的是stdClass对象</span></span><br><span class=\"line\">json_encode(<span class=\"keyword\">array</span>(<span class=\"string\">\"k\"</span> =&gt; <span class=\"string\">\"v\"</span>));     <span class=\"comment\">// array -&gt; json</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 类型转换</span></span><br><span class=\"line\">$foo = <span class=\"string\">\"0\"</span>; <span class=\"comment\">// $foo 是字符串 (ASCII 48)</span></span><br><span class=\"line\">$foo += <span class=\"number\">2</span>; <span class=\"comment\">// $foo 现在是一个整数 (2)</span></span><br><span class=\"line\">$foo = $foo + <span class=\"number\">1.3</span>; <span class=\"comment\">// $foo 现在是一个浮点数 (3.3)</span></span><br><span class=\"line\">$foo = <span class=\"number\">5</span> + <span class=\"string\">\"10 Little Piggies\"</span>; <span class=\"comment\">// $foo 是整数 (15)</span></span><br><span class=\"line\">$foo = <span class=\"number\">5</span> + <span class=\"string\">\"10 Small Pigs\"</span>; <span class=\"comment\">// $foo 是整数 (15)</span></span><br><span class=\"line\"></span><br><span class=\"line\">$foo = <span class=\"number\">1</span> + <span class=\"string\">\"10.5\"</span>; <span class=\"comment\">// $foo is float (11.5)</span></span><br><span class=\"line\">$foo = <span class=\"number\">1</span> + <span class=\"string\">\"-1.3e3\"</span>; <span class=\"comment\">// $foo is float (-1299)</span></span><br><span class=\"line\">$foo = <span class=\"number\">1</span> + <span class=\"string\">\"bob-1.3e3\"</span>; <span class=\"comment\">// $foo is integer (1)</span></span><br><span class=\"line\">$foo = <span class=\"number\">1</span> + <span class=\"string\">\"bob3\"</span>; <span class=\"comment\">// $foo is integer (1)</span></span><br><span class=\"line\">$foo = <span class=\"number\">1</span> + <span class=\"string\">\"10 Small Pigs\"</span>; <span class=\"comment\">// $foo is integer (11)</span></span><br><span class=\"line\">$foo = <span class=\"number\">4</span> + <span class=\"string\">\"10.2 Little Piggies\"</span>; <span class=\"comment\">// $foo is float (14.2)</span></span><br><span class=\"line\">$foo = <span class=\"string\">\"10.0 pigs \"</span> + <span class=\"number\">1</span>; <span class=\"comment\">// $foo is float (11)</span></span><br><span class=\"line\">$foo = <span class=\"string\">\"10.0 pigs \"</span> + <span class=\"number\">1.0</span>; <span class=\"comment\">// $foo is float (11)</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 将16进制数串转换为二进制数据的函数</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> $hexdata</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> string bindata</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">str2bin</span><span class=\"params\">($hexdata)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    $bindata=<span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> ($i=<span class=\"number\">0</span>;$i &lt; strlen($hexdata);$i+=<span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">        $bindata.=chr(hexdec(substr($hexdata,$i,<span class=\"number\">2</span>)));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> $bindata;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">echo</span> bin2hex(<span class=\"string\">'abc'</span>);      <span class=\"comment\">// 3132333435363738</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> str2bin(<span class=\"string\">'616263'</span>);   <span class=\"comment\">// abc</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> hex2bin(<span class=\"string\">'616263'</span>);   <span class=\"comment\">// abc</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 路径</span></span><br><span class=\"line\"><span class=\"comment\">// include dirname(__FILE__) . \"/config/config2.php\";</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"keyword\">__FILE__</span>.<span class=\"string\">\"\\r\\n\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">echo</span> dirname(<span class=\"keyword\">__FILE__</span>).<span class=\"string\">\"\\r\\n\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">echo</span> dirname(<span class=\"keyword\">__FILE__</span>) . <span class=\"string\">\"/config/config2.php\"</span>.<span class=\"string\">\"\\r\\n\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 模块：测试附加代码</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (strcasecmp(basename($_SERVER[<span class=\"string\">'SCRIPT_NAME'</span>]), basename(<span class=\"keyword\">__FILE__</span>)) == <span class=\"number\">0</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 直接请求该PHP，运行如下测试代码</span></span><br><span class=\"line\">    <span class=\"comment\">// 作为模块被include，则不运行</span></span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">\"test\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// autoload.php: 根据应用到的类名自动加载对应PHP</span></span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">// 注意根目录检查</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">autoload</span><span class=\"params\">($class)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    $path = <span class=\"keyword\">array</span>(<span class=\"string\">\".\"</span>, <span class=\"string\">\"..\"</span>, <span class=\"string\">\"../..\"</span>, $_SERVER[<span class=\"string\">'DOCUMENT_ROOT'</span>]);</span><br><span class=\"line\">    <span class=\"keyword\">foreach</span>($path <span class=\"keyword\">as</span> $p) &#123;</span><br><span class=\"line\">        $fn = $p . <span class=\"string\">'/'</span>. $class . <span class=\"string\">\".php\"</span>;</span><br><span class=\"line\">        $fn = strtr($fn, <span class=\"keyword\">array</span>(<span class=\"string\">\"\\\\\"</span> =&gt; <span class=\"string\">\"/\"</span>));</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (file_exists($fn)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">require_once</span>($fn);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">spl_autoload_register(<span class=\"string\">\"autoload\"</span>);</span><br><span class=\"line\"><span class=\"comment\">// 使用</span></span><br><span class=\"line\"><span class=\"keyword\">include_once</span> dirname(<span class=\"keyword\">__FILE__</span>) . <span class=\"string\">\"/../autoload.php\"</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"加解密\"><a href=\"#加解密\" class=\"headerlink\" title=\"加解密\"></a>加解密</h3><figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//  hash ( string $algo , string $data [, bool $raw_output = FALSE ] ) : string</span></span><br><span class=\"line\"><span class=\"comment\">// $algo: 哈希算法名称，例如：\"md5\"，\"sha256\"，\"haval160,4\" 等, 算法清单，见 hash_hmac_algos() 函数</span></span><br><span class=\"line\"><span class=\"comment\">// $raw_output = TRUE: 输出原始二进制数据, 设置为 FALSE 输出小写 16 进制字符串</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> hash(<span class=\"string\">'sha256'</span>, <span class=\"string\">'The quick brown fox jumped over the lazy dog.'</span>);</span><br><span class=\"line\"><span class=\"comment\">//  md5 ( string $str [, bool $raw_output = FALSE ] ) : string</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> md5(<span class=\"string\">'The quick brown fox jumped over the lazy dog.'</span>);</span><br><span class=\"line\"><span class=\"comment\">// sha1 ( string $str [, bool $raw_output = false ] ) : string</span></span><br><span class=\"line\"><span class=\"comment\">// crc32 ( string $str ) : int</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// hash_file() - 使用给定文件的内容生成哈希值</span></span><br><span class=\"line\"><span class=\"comment\">// md5_file() - 计算指定文件的 MD5 散列值</span></span><br><span class=\"line\"><span class=\"comment\">// sha1_file() - 计算文件的 sha1 散列值</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// hash_hmac ( string $algo , string $data , string $key [, bool $raw_output = FALSE ] ) : string</span></span><br><span class=\"line\"><span class=\"comment\">// raw_output: 默认16进制字符串，置为TRUE输出原始二进制字符串</span></span><br><span class=\"line\">hash_hmac(<span class=\"string\">\"md5\"</span>, <span class=\"string\">\"数据\"</span>, <span class=\"string\">\"密钥\"</span>, <span class=\"keyword\">TRUE</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// base64</span></span><br><span class=\"line\">$str = <span class=\"string\">'This is an encoded string'</span>;</span><br><span class=\"line\"><span class=\"keyword\">echo</span> base64_encode($str);</span><br><span class=\"line\"><span class=\"keyword\">echo</span> base64_decode(<span class=\"string\">'VGhpcyBpcyBhbiBlbmNvZGVkIHN0cmluZw=='</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"时间\"><a href=\"#时间\" class=\"headerlink\" title=\"时间\"></a>时间</h2><figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 修改时区，php.ini: date.timezone = \"Asia/Shanghai\"</span></span><br><span class=\"line\">date_default_timezone_set(<span class=\"string\">\"Asia/Shanghai\"</span>);</span><br><span class=\"line\"><span class=\"comment\">// 当前时间</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> date(<span class=\"string\">\"Y-m-d h:i:s\"</span>, time()); <span class=\"comment\">//2019-09-28 09:58:04</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"数组-对象\"><a href=\"#数组-对象\" class=\"headerlink\" title=\"数组/对象\"></a>数组/对象</h2><figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\">count($arr);    <span class=\"comment\">// 数组长度</span></span><br><span class=\"line\"><span class=\"comment\">// 数组：遍历</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getSign</span><span class=\"params\">($data)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    $str = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">foreach</span>($data <span class=\"keyword\">as</span> $key =&gt; $value)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(is_array($value))</span><br><span class=\"line\">            $str.=$key.<span class=\"string\">\"=\"</span>.getSign($value).<span class=\"string\">\"&amp;\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            $str.=$key.<span class=\"string\">\"=\"</span>.$value.<span class=\"string\">\"&amp;\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    $str = trim($str, <span class=\"string\">\"&amp;\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> $str;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$arr = <span class=\"keyword\">array</span>(</span><br><span class=\"line\">    <span class=\"string\">\"a\"</span> =&gt; <span class=\"string\">\"b\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"c\"</span> =&gt; <span class=\"keyword\">array</span>(</span><br><span class=\"line\">        <span class=\"string\">\"d\"</span> =&gt; <span class=\"string\">\"e\"</span></span><br><span class=\"line\">    ),</span><br><span class=\"line\">    <span class=\"string\">\"e\"</span> =&gt; <span class=\"string\">\"f\"</span></span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"keyword\">echo</span> getSign($arr);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 数组：排序</span></span><br><span class=\"line\"><span class=\"comment\">// 键排序</span></span><br><span class=\"line\">ksort($arr);</span><br><span class=\"line\">krsort($arr);       <span class=\"comment\">// 逆序</span></span><br><span class=\"line\"><span class=\"comment\">// 值排序</span></span><br><span class=\"line\">sort($arr);</span><br><span class=\"line\">rsort($arr);        <span class=\"comment\">// 逆序</span></span><br><span class=\"line\"><span class=\"comment\">// 值排序：保持键值对应</span></span><br><span class=\"line\">asort($arr);</span><br><span class=\"line\">arsort($arr);       <span class=\"comment\">// 逆序</span></span><br><span class=\"line\"><span class=\"comment\">// 支持自定义排序</span></span><br><span class=\"line\">uksort();           <span class=\"comment\">// 键排序</span></span><br><span class=\"line\">uasort();           <span class=\"comment\">// 值排序</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"HTTP\"><a href=\"#HTTP\" class=\"headerlink\" title=\"HTTP\"></a>HTTP</h2><figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 参数处理</span></span><br><span class=\"line\">$data = <span class=\"keyword\">array</span>(</span><br><span class=\"line\">    <span class=\"string\">'foo'</span> =&gt; <span class=\"string\">'bar'</span>,</span><br><span class=\"line\">    <span class=\"string\">'baz'</span> =&gt; <span class=\"string\">'boom'</span>,</span><br><span class=\"line\">    <span class=\"string\">'cow'</span> =&gt; <span class=\"string\">'milk'</span>,</span><br><span class=\"line\">    <span class=\"string\">'php'</span> =&gt; <span class=\"string\">'hypertext processor'</span></span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"keyword\">echo</span> http_build_query($data); <span class=\"comment\">// foo=bar&amp;baz=boom&amp;cow=milk&amp;php=hypertext+processor</span></span><br><span class=\"line\"><span class=\"comment\">// 简单GET</span></span><br><span class=\"line\">var_dump(file_get_contents($url));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// POST：直接Post数据情况</span></span><br><span class=\"line\">$data = <span class=\"string\">'&#123;\"k\":\"v\"&#125;'</span>;</span><br><span class=\"line\">$cl = curl_init();</span><br><span class=\"line\"><span class=\"keyword\">if</span>(stripos($url, <span class=\"string\">'https://'</span>) !== <span class=\"keyword\">FALSE</span>) &#123;</span><br><span class=\"line\">    curl_setopt($cl, CURLOPT_SSL_VERIFYPEER, <span class=\"keyword\">FALSE</span>);</span><br><span class=\"line\">    curl_setopt($cl, CURLOPT_SSL_VERIFYHOST, <span class=\"keyword\">FALSE</span>);</span><br><span class=\"line\">    curl_setopt($cl, CURLOPT_SSLVERSION, <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">curl_setopt($cl, CURLOPT_POST, <span class=\"keyword\">true</span>);</span><br><span class=\"line\"><span class=\"comment\">// 直接POST数据指定数据类型，默认FORM</span></span><br><span class=\"line\"><span class=\"comment\">// 屏蔽掉CURLOPT_HTTPHEADER，$data直接换成 数组即为普通表单提交模式</span></span><br><span class=\"line\"><span class=\"comment\">// POST 文件：array('file1'=&gt;'@/data/1.jpg')</span></span><br><span class=\"line\">curl_setopt($cl, CURLOPT_HTTPHEADER, <span class=\"keyword\">array</span>(<span class=\"string\">'Content-Type: application/json'</span>, <span class=\"string\">'Content-Length: '</span>.strlen($data)));</span><br><span class=\"line\"></span><br><span class=\"line\">curl_setopt($cl, CURLOPT_URL, $url);</span><br><span class=\"line\">curl_setopt($cl, CURLOPT_RETURNTRANSFER, <span class=\"number\">1</span> );</span><br><span class=\"line\">curl_setopt($cl, CURLOPT_TIMEOUT,<span class=\"number\">30</span>);<span class=\"comment\">//设置30秒超时</span></span><br><span class=\"line\">curl_setopt($cl, CURLOPT_POSTFIELDS, $data);</span><br><span class=\"line\">$content = curl_exec($cl);</span><br><span class=\"line\">$status = curl_getinfo($cl);</span><br><span class=\"line\">curl_close($cl);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>($status[<span class=\"string\">'http_code'</span>]) &amp;&amp; $status[<span class=\"string\">'http_code'</span>] == <span class=\"number\">200</span>)</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">\"success\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">\"fail\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 跨域</span></span><br><span class=\"line\">header(<span class=\"string\">\"Content-Type: text/html; charset=UTF-8\"</span>);</span><br><span class=\"line\">header(<span class=\"string\">\"Access-Control-Allow-Origin: *\"</span>);</span><br><span class=\"line\">header(<span class=\"string\">\"Access-Control-Allow-Headers: x-requested-with\"</span>);</span><br><span class=\"line\">header(<span class=\"string\">\"Access-Control-Allow-Methods: GET, POST, GET, OPTIONS\"</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"命令行\"><a href=\"#命令行\" class=\"headerlink\" title=\"命令行\"></a>命令行</h2><figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\">php_sapi_name(); <span class=\"comment\">// cli代表命令行执行, 不同Web环境, 对应不同字符串</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 命令行执行判断: 方式1</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(php_sapi_name() == <span class=\"string\">\"cli\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">\"命令行执行\"</span>;</span><br><span class=\"line\"><span class=\"comment\">// 命令行执行判断: 方式2</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">isset</span>($argc))</span><br><span class=\"line\">    test();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 命令行参数</span></span><br><span class=\"line\"><span class=\"comment\"> * v: 代表字符串参数</span></span><br><span class=\"line\"><span class=\"comment\"> * h  $options数组是否包含h代表参数中是否包含-h</span></span><br><span class=\"line\"><span class=\"comment\"> * help: $options数组是否包含help代表参数中是否包含--help</span></span><br><span class=\"line\"><span class=\"comment\"> * src: 代表字符串参数</span></span><br><span class=\"line\"><span class=\"comment\"> * module:: 代表字符串数组参数, 可以指定多个</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">$options = getopt(<span class=\"string\">'v:h'</span>, <span class=\"keyword\">array</span>(<span class=\"string\">'help'</span>, <span class=\"string\">'src:'</span>,<span class=\"string\">'module::'</span>));</span><br><span class=\"line\">var_dump($options);</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *  命令行参数解析:</span></span><br><span class=\"line\"><span class=\"comment\"> * php test.php -a=check -i=2399013994 -i=2399013993 -g=1</span></span><br><span class=\"line\"><span class=\"comment\"> * php test.php --action=check --icafe=2399013994 --icafe=2399013995 --grade=1</span></span><br><span class=\"line\"><span class=\"comment\"> * 双冒号代表是可叠加参数, 使用一次是字符串, 使用多次是数组</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">$shortopts = <span class=\"string\">\"a:i::g:\"</span>;                                 <span class=\"comment\">// 短参数: -a</span></span><br><span class=\"line\">$longopts = <span class=\"keyword\">array</span>(<span class=\"string\">\"action:\"</span>, <span class=\"string\">\"icafe::\"</span>, <span class=\"string\">\"grade:\"</span>);      <span class=\"comment\">// 长参数: --action</span></span><br><span class=\"line\">$param_arr = getopt($shortopts, $longopts);</span><br><span class=\"line\">print_r($param_arr);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"特殊函数\"><a href=\"#特殊函数\" class=\"headerlink\" title=\"特殊函数\"></a>特殊函数</h2><figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 注册PHP退出前执行函数，可以注册多个</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">shutdown</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">'Script executed with success'</span>, PHP_EOL;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">register_shutdown_function(<span class=\"string\">'shutdown'</span>);</span><br></pre></td></tr></table></figure>\n\n","categories":["PHP"],"tags":["基础"]},{"title":"环境","url":"/2019/09/28/PHP/环境/","content":"<h2 id=\"IDE\"><a href=\"#IDE\" class=\"headerlink\" title=\"IDE\"></a>IDE</h2><ul>\n<li><p><strong>PHPStorm</strong></p>\n<ul>\n<li>注册码: <a href=\"http://idea.lanyus.com/\" target=\"_blank\" rel=\"noopener\">http://idea.lanyus.com/</a><ul>\n<li>也可以到<a href=\"http://www.php.cn/\" target=\"_blank\" rel=\"noopener\">PHP中文网</a>找</li>\n</ul>\n</li>\n<li>配置<ul>\n<li><code>Appearance</code>-&gt;<code>Theme</code>-&gt;选择<code>Darcula</code>，暗色调看着比较舒服<ul>\n<li>字体 -&gt; 微软雅黑，14</li>\n</ul>\n</li>\n<li><code>Editor</code>-&gt;<code>font</code>  首先Scheme save自己的方案，然后字体改 Consolas|Courier|Source Code Pro等宽字体，16<ul>\n<li><code>General</code>-&gt;<code>Appearance</code>-&gt;<code>Show line numbers</code> &amp;&amp; <code>Show whitespace</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>快捷键：<ul>\n<li><code>Alt+左键</code>：多选</li>\n<li><code>Alt+J</code>: 搜索并选中</li>\n<li><code>Ctrl+Alt+Shift+左键</code>：选中多行</li>\n<li><code>Ctrl+左键</code>: 跳转到定义</li>\n</ul>\n</li>\n<li>其他<ul>\n<li><code>Editor</code>-&gt;<code>Code Style</code>-&gt;<code>PHP</code>：空行 空格</li>\n<li><code>Editor</code>-&gt;<code>Inspections</code>-&gt;<code>Spelling</code>: 取消选中(单词检查)</li>\n<li><code>File Encodings</code>-&gt; IDE Encoding: UTF-8;</li>\n<li><code>File Encodings</code>-&gt; Project Encoding: UTF-8;</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>运行工具</strong></p>\n<ul>\n<li>phpStudy</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h2><figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">// 指定编码类型</span></span><br><span class=\"line\">header(<span class=\"string\">\"Content-Type: text/html; charset=utf-8\"</span>);</span><br><span class=\"line\"><span class=\"comment\">// 返回自定义错误</span></span><br><span class=\"line\">header(<span class=\"string\">'HTTP/1.1 404 Not Found'</span>);</span><br><span class=\"line\"><span class=\"keyword\">exit</span>(<span class=\"string\">\"Not Found\"</span>);</span><br><span class=\"line\"><span class=\"comment\">// GET/POST数据</span></span><br><span class=\"line\">print_r($_POST);</span><br><span class=\"line\">print_r($_GET);</span><br><span class=\"line\">print_r($_REQUEST);         <span class=\"comment\">// $_REQUEST = $_POST + $_GET</span></span><br><span class=\"line\">print_r($_SERVER);</span><br><span class=\"line\">print_r(<span class=\"string\">\"php://input\"</span>);    <span class=\"comment\">// post数据流</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// define ( string $name , mixed $value [, bool $case_insensitive = FALSE ] ) : bool</span></span><br><span class=\"line\"><span class=\"comment\">// case_insensitive: 不区分大小写</span></span><br><span class=\"line\">define(<span class=\"string\">'TEST'</span>, <span class=\"string\">'Hello world'</span>);</span><br><span class=\"line\"><span class=\"keyword\">echo</span> TEST;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 外变量</span></span><br><span class=\"line\">$GLOBALS[<span class=\"string\">'t'</span>] = <span class=\"string\">'global_t'</span>;</span><br><span class=\"line\"><span class=\"comment\">// 类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@var</span> Test: 单例类变量, 默认为NULL, 无需指定</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> $t;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> Test: self::$t默认值会影响这里的返回值</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getInterface</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> $GLOBALS[<span class=\"string\">'t'</span>];        <span class=\"comment\">// 外变量</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!<span class=\"keyword\">self</span>::$t)</span><br><span class=\"line\">            <span class=\"keyword\">self</span>::$t = <span class=\"keyword\">new</span> Test(<span class=\"string\">\"HelloWorld.\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>::$t;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> $content;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">($content)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;content = $content;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">p</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"keyword\">$this</span>-&gt;content;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$t = Test::getInterface();</span><br><span class=\"line\">$t-&gt;p();</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"字符串处理\"><a href=\"#字符串处理\" class=\"headerlink\" title=\"字符串处理\"></a>字符串处理</h2><figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// str_replace ( mixed $search , mixed $replace , mixed $subject [, int &amp;$count ] ) : mixed</span></span><br><span class=\"line\">$_POST = str_replace(<span class=\"string\">\"\\r\"</span>, <span class=\"string\">\"\"</span>, $_POST);</span><br><span class=\"line\"><span class=\"comment\">// substr ( string $string , int $start [, int $length ] ) : string</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> substr(<span class=\"string\">'abcdef'</span>, <span class=\"number\">1</span>);     <span class=\"comment\">// bcdef</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> substr(<span class=\"string\">'abcdef'</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>);  <span class=\"comment\">// bcd</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> substr(<span class=\"string\">'abcdef'</span>, <span class=\"number\">-3</span>, <span class=\"number\">2</span>); <span class=\"comment\">// de</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"字符串转化\"><a href=\"#字符串转化\" class=\"headerlink\" title=\"字符串转化\"></a>字符串转化</h3><figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// JSON</span></span><br><span class=\"line\">json_decode(<span class=\"string\">'&#123;\"k\":\"v\"&#125;'</span>，<span class=\"keyword\">true</span>);     <span class=\"comment\">// json -&gt; array，true一定要有，否则返回的是stdClass对象</span></span><br><span class=\"line\">json_encode(<span class=\"keyword\">array</span>(<span class=\"string\">\"k\"</span> =&gt; <span class=\"string\">\"v\"</span>));     <span class=\"comment\">// array -&gt; json</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 类型转换</span></span><br><span class=\"line\">$foo = <span class=\"string\">\"0\"</span>; <span class=\"comment\">// $foo 是字符串 (ASCII 48)</span></span><br><span class=\"line\">$foo += <span class=\"number\">2</span>; <span class=\"comment\">// $foo 现在是一个整数 (2)</span></span><br><span class=\"line\">$foo = $foo + <span class=\"number\">1.3</span>; <span class=\"comment\">// $foo 现在是一个浮点数 (3.3)</span></span><br><span class=\"line\">$foo = <span class=\"number\">5</span> + <span class=\"string\">\"10 Little Piggies\"</span>; <span class=\"comment\">// $foo 是整数 (15)</span></span><br><span class=\"line\">$foo = <span class=\"number\">5</span> + <span class=\"string\">\"10 Small Pigs\"</span>; <span class=\"comment\">// $foo 是整数 (15)</span></span><br><span class=\"line\"></span><br><span class=\"line\">$foo = <span class=\"number\">1</span> + <span class=\"string\">\"10.5\"</span>; <span class=\"comment\">// $foo is float (11.5)</span></span><br><span class=\"line\">$foo = <span class=\"number\">1</span> + <span class=\"string\">\"-1.3e3\"</span>; <span class=\"comment\">// $foo is float (-1299)</span></span><br><span class=\"line\">$foo = <span class=\"number\">1</span> + <span class=\"string\">\"bob-1.3e3\"</span>; <span class=\"comment\">// $foo is integer (1)</span></span><br><span class=\"line\">$foo = <span class=\"number\">1</span> + <span class=\"string\">\"bob3\"</span>; <span class=\"comment\">// $foo is integer (1)</span></span><br><span class=\"line\">$foo = <span class=\"number\">1</span> + <span class=\"string\">\"10 Small Pigs\"</span>; <span class=\"comment\">// $foo is integer (11)</span></span><br><span class=\"line\">$foo = <span class=\"number\">4</span> + <span class=\"string\">\"10.2 Little Piggies\"</span>; <span class=\"comment\">// $foo is float (14.2)</span></span><br><span class=\"line\">$foo = <span class=\"string\">\"10.0 pigs \"</span> + <span class=\"number\">1</span>; <span class=\"comment\">// $foo is float (11)</span></span><br><span class=\"line\">$foo = <span class=\"string\">\"10.0 pigs \"</span> + <span class=\"number\">1.0</span>; <span class=\"comment\">// $foo is float (11)</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 将16进制数串转换为二进制数据的函数</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> $hexdata</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> string bindata</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">str2bin</span><span class=\"params\">($hexdata)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    $bindata=<span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> ($i=<span class=\"number\">0</span>;$i &lt; strlen($hexdata);$i+=<span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">        $bindata.=chr(hexdec(substr($hexdata,$i,<span class=\"number\">2</span>)));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> $bindata;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">echo</span> bin2hex(<span class=\"string\">'abc'</span>);      <span class=\"comment\">// 3132333435363738</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> str2bin(<span class=\"string\">'616263'</span>);   <span class=\"comment\">// abc</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> hex2bin(<span class=\"string\">'616263'</span>);   <span class=\"comment\">// abc</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 路径</span></span><br><span class=\"line\"><span class=\"comment\">// include dirname(__FILE__) . \"/config/config2.php\";</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"keyword\">__FILE__</span>.<span class=\"string\">\"\\r\\n\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">echo</span> dirname(<span class=\"keyword\">__FILE__</span>).<span class=\"string\">\"\\r\\n\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">echo</span> dirname(<span class=\"keyword\">__FILE__</span>) . <span class=\"string\">\"/config/config2.php\"</span>.<span class=\"string\">\"\\r\\n\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 模块：测试附加代码</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (strcasecmp(basename($_SERVER[<span class=\"string\">'SCRIPT_NAME'</span>]), basename(<span class=\"keyword\">__FILE__</span>)) == <span class=\"number\">0</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 直接请求该PHP，运行如下测试代码</span></span><br><span class=\"line\">    <span class=\"comment\">// 作为模块被include，则不运行</span></span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">\"test\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// autoload.php: 根据应用到的类名自动加载对应PHP</span></span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">// 注意根目录检查</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">autoload</span><span class=\"params\">($class)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    $path = <span class=\"keyword\">array</span>(<span class=\"string\">\".\"</span>, <span class=\"string\">\"..\"</span>, <span class=\"string\">\"../..\"</span>, $_SERVER[<span class=\"string\">'DOCUMENT_ROOT'</span>]);</span><br><span class=\"line\">    <span class=\"keyword\">foreach</span>($path <span class=\"keyword\">as</span> $p) &#123;</span><br><span class=\"line\">        $fn = $p . <span class=\"string\">'/'</span>. $class . <span class=\"string\">\".php\"</span>;</span><br><span class=\"line\">        $fn = strtr($fn, <span class=\"keyword\">array</span>(<span class=\"string\">\"\\\\\"</span> =&gt; <span class=\"string\">\"/\"</span>));</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (file_exists($fn)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">require_once</span>($fn);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">spl_autoload_register(<span class=\"string\">\"autoload\"</span>);</span><br><span class=\"line\"><span class=\"comment\">// 使用</span></span><br><span class=\"line\"><span class=\"keyword\">include_once</span> dirname(<span class=\"keyword\">__FILE__</span>) . <span class=\"string\">\"/../autoload.php\"</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"加解密\"><a href=\"#加解密\" class=\"headerlink\" title=\"加解密\"></a>加解密</h3><figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//  hash ( string $algo , string $data [, bool $raw_output = FALSE ] ) : string</span></span><br><span class=\"line\"><span class=\"comment\">// $algo: 哈希算法名称，例如：\"md5\"，\"sha256\"，\"haval160,4\" 等, 算法清单，见 hash_hmac_algos() 函数</span></span><br><span class=\"line\"><span class=\"comment\">// $raw_output = TRUE: 输出原始二进制数据, 设置为 FALSE 输出小写 16 进制字符串</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> hash(<span class=\"string\">'sha256'</span>, <span class=\"string\">'The quick brown fox jumped over the lazy dog.'</span>);</span><br><span class=\"line\"><span class=\"comment\">//  md5 ( string $str [, bool $raw_output = FALSE ] ) : string</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> md5(<span class=\"string\">'The quick brown fox jumped over the lazy dog.'</span>);</span><br><span class=\"line\"><span class=\"comment\">// sha1 ( string $str [, bool $raw_output = false ] ) : string</span></span><br><span class=\"line\"><span class=\"comment\">// crc32 ( string $str ) : int</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// hash_file() - 使用给定文件的内容生成哈希值</span></span><br><span class=\"line\"><span class=\"comment\">// md5_file() - 计算指定文件的 MD5 散列值</span></span><br><span class=\"line\"><span class=\"comment\">// sha1_file() - 计算文件的 sha1 散列值</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// hash_hmac ( string $algo , string $data , string $key [, bool $raw_output = FALSE ] ) : string</span></span><br><span class=\"line\"><span class=\"comment\">// raw_output: 默认16进制字符串，置为TRUE输出原始二进制字符串</span></span><br><span class=\"line\">hash_hmac(<span class=\"string\">\"md5\"</span>, <span class=\"string\">\"数据\"</span>, <span class=\"string\">\"密钥\"</span>, <span class=\"keyword\">TRUE</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// base64</span></span><br><span class=\"line\">$str = <span class=\"string\">'This is an encoded string'</span>;</span><br><span class=\"line\"><span class=\"keyword\">echo</span> base64_encode($str);</span><br><span class=\"line\"><span class=\"keyword\">echo</span> base64_decode(<span class=\"string\">'VGhpcyBpcyBhbiBlbmNvZGVkIHN0cmluZw=='</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"时间\"><a href=\"#时间\" class=\"headerlink\" title=\"时间\"></a>时间</h2><figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 修改时区，php.ini: date.timezone = \"Asia/Shanghai\"</span></span><br><span class=\"line\">date_default_timezone_set(<span class=\"string\">\"Asia/Shanghai\"</span>);</span><br><span class=\"line\"><span class=\"comment\">// 当前时间</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> date(<span class=\"string\">\"Y-m-d h:i:s\"</span>, time()); <span class=\"comment\">//2019-09-28 09:58:04</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"数组-对象\"><a href=\"#数组-对象\" class=\"headerlink\" title=\"数组/对象\"></a>数组/对象</h2><figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\">count($arr);    <span class=\"comment\">// 数组长度</span></span><br><span class=\"line\"><span class=\"comment\">// 数组：遍历</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getSign</span><span class=\"params\">($data)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    $str = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">foreach</span>($data <span class=\"keyword\">as</span> $key =&gt; $value)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(is_array($value))</span><br><span class=\"line\">            $str.=$key.<span class=\"string\">\"=\"</span>.getSign($value).<span class=\"string\">\"&amp;\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            $str.=$key.<span class=\"string\">\"=\"</span>.$value.<span class=\"string\">\"&amp;\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    $str = trim($str, <span class=\"string\">\"&amp;\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> $str;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$arr = <span class=\"keyword\">array</span>(</span><br><span class=\"line\">    <span class=\"string\">\"a\"</span> =&gt; <span class=\"string\">\"b\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"c\"</span> =&gt; <span class=\"keyword\">array</span>(</span><br><span class=\"line\">        <span class=\"string\">\"d\"</span> =&gt; <span class=\"string\">\"e\"</span></span><br><span class=\"line\">    ),</span><br><span class=\"line\">    <span class=\"string\">\"e\"</span> =&gt; <span class=\"string\">\"f\"</span></span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"keyword\">echo</span> getSign($arr);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 数组：排序</span></span><br><span class=\"line\"><span class=\"comment\">// 键排序</span></span><br><span class=\"line\">ksort($arr);</span><br><span class=\"line\">krsort($arr);       <span class=\"comment\">// 逆序</span></span><br><span class=\"line\"><span class=\"comment\">// 值排序</span></span><br><span class=\"line\">sort($arr);</span><br><span class=\"line\">rsort($arr);        <span class=\"comment\">// 逆序</span></span><br><span class=\"line\"><span class=\"comment\">// 值排序：保持键值对应</span></span><br><span class=\"line\">asort($arr);</span><br><span class=\"line\">arsort($arr);       <span class=\"comment\">// 逆序</span></span><br><span class=\"line\"><span class=\"comment\">// 支持自定义排序</span></span><br><span class=\"line\">uksort();           <span class=\"comment\">// 键排序</span></span><br><span class=\"line\">uasort();           <span class=\"comment\">// 值排序</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"HTTP\"><a href=\"#HTTP\" class=\"headerlink\" title=\"HTTP\"></a>HTTP</h2><figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 参数处理</span></span><br><span class=\"line\">$data = <span class=\"keyword\">array</span>(</span><br><span class=\"line\">    <span class=\"string\">'foo'</span> =&gt; <span class=\"string\">'bar'</span>,</span><br><span class=\"line\">    <span class=\"string\">'baz'</span> =&gt; <span class=\"string\">'boom'</span>,</span><br><span class=\"line\">    <span class=\"string\">'cow'</span> =&gt; <span class=\"string\">'milk'</span>,</span><br><span class=\"line\">    <span class=\"string\">'php'</span> =&gt; <span class=\"string\">'hypertext processor'</span></span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"keyword\">echo</span> http_build_query($data); <span class=\"comment\">// foo=bar&amp;baz=boom&amp;cow=milk&amp;php=hypertext+processor</span></span><br><span class=\"line\"><span class=\"comment\">// 简单GET</span></span><br><span class=\"line\">var_dump(file_get_contents($url));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// POST：直接Post数据情况</span></span><br><span class=\"line\">$data = <span class=\"string\">'&#123;\"k\":\"v\"&#125;'</span>;</span><br><span class=\"line\">$cl = curl_init();</span><br><span class=\"line\"><span class=\"keyword\">if</span>(stripos($url, <span class=\"string\">'https://'</span>) !== <span class=\"keyword\">FALSE</span>) &#123;</span><br><span class=\"line\">    curl_setopt($cl, CURLOPT_SSL_VERIFYPEER, <span class=\"keyword\">FALSE</span>);</span><br><span class=\"line\">    curl_setopt($cl, CURLOPT_SSL_VERIFYHOST, <span class=\"keyword\">FALSE</span>);</span><br><span class=\"line\">    curl_setopt($cl, CURLOPT_SSLVERSION, <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">curl_setopt($cl, CURLOPT_POST, <span class=\"keyword\">true</span>);</span><br><span class=\"line\"><span class=\"comment\">// 直接POST数据指定数据类型，默认FORM</span></span><br><span class=\"line\"><span class=\"comment\">// 屏蔽掉CURLOPT_HTTPHEADER，$data直接换成 数组即为普通表单提交模式</span></span><br><span class=\"line\"><span class=\"comment\">// POST 文件：array('file1'=&gt;'@/data/1.jpg')</span></span><br><span class=\"line\">curl_setopt($cl, CURLOPT_HTTPHEADER, <span class=\"keyword\">array</span>(<span class=\"string\">'Content-Type: application/json'</span>, <span class=\"string\">'Content-Length: '</span>.strlen($data)));</span><br><span class=\"line\"></span><br><span class=\"line\">curl_setopt($cl, CURLOPT_URL, $url);</span><br><span class=\"line\">curl_setopt($cl, CURLOPT_RETURNTRANSFER, <span class=\"number\">1</span> );</span><br><span class=\"line\">curl_setopt($cl, CURLOPT_TIMEOUT,<span class=\"number\">30</span>);<span class=\"comment\">//设置30秒超时</span></span><br><span class=\"line\">curl_setopt($cl, CURLOPT_POSTFIELDS, $data);</span><br><span class=\"line\">$content = curl_exec($cl);</span><br><span class=\"line\">$status = curl_getinfo($cl);</span><br><span class=\"line\">curl_close($cl);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>($status[<span class=\"string\">'http_code'</span>]) &amp;&amp; $status[<span class=\"string\">'http_code'</span>] == <span class=\"number\">200</span>)</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">\"success\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">\"fail\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 跨域</span></span><br><span class=\"line\">header(<span class=\"string\">\"Content-Type: text/html; charset=UTF-8\"</span>);</span><br><span class=\"line\">header(<span class=\"string\">\"Access-Control-Allow-Origin: *\"</span>);</span><br><span class=\"line\">header(<span class=\"string\">\"Access-Control-Allow-Headers: x-requested-with\"</span>);</span><br><span class=\"line\">header(<span class=\"string\">\"Access-Control-Allow-Methods: GET, POST, GET, OPTIONS\"</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"命令行\"><a href=\"#命令行\" class=\"headerlink\" title=\"命令行\"></a>命令行</h2><figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\">php_sapi_name(); <span class=\"comment\">// cli代表命令行执行, 不同Web环境, 对应不同字符串</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 命令行执行判断: 方式1</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(php_sapi_name() == <span class=\"string\">\"cli\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">\"命令行执行\"</span>;</span><br><span class=\"line\"><span class=\"comment\">// 命令行执行判断: 方式2</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">isset</span>($argc))</span><br><span class=\"line\">    test();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 命令行参数</span></span><br><span class=\"line\"><span class=\"comment\"> * v: 代表字符串参数</span></span><br><span class=\"line\"><span class=\"comment\"> * h  $options数组是否包含h代表参数中是否包含-h</span></span><br><span class=\"line\"><span class=\"comment\"> * help: $options数组是否包含help代表参数中是否包含--help</span></span><br><span class=\"line\"><span class=\"comment\"> * src: 代表字符串参数</span></span><br><span class=\"line\"><span class=\"comment\"> * module:: 代表字符串数组参数, 可以指定多个</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">$options = getopt(<span class=\"string\">'v:h'</span>, <span class=\"keyword\">array</span>(<span class=\"string\">'help'</span>, <span class=\"string\">'src:'</span>,<span class=\"string\">'module::'</span>));</span><br><span class=\"line\">var_dump($options);</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *  命令行参数解析:</span></span><br><span class=\"line\"><span class=\"comment\"> * php test.php -a=check -i=2399013994 -i=2399013993 -g=1</span></span><br><span class=\"line\"><span class=\"comment\"> * php test.php --action=check --icafe=2399013994 --icafe=2399013995 --grade=1</span></span><br><span class=\"line\"><span class=\"comment\"> * 双冒号代表是可叠加参数, 使用一次是字符串, 使用多次是数组</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">$shortopts = <span class=\"string\">\"a:i::g:\"</span>;                                 <span class=\"comment\">// 短参数: -a</span></span><br><span class=\"line\">$longopts = <span class=\"keyword\">array</span>(<span class=\"string\">\"action:\"</span>, <span class=\"string\">\"icafe::\"</span>, <span class=\"string\">\"grade:\"</span>);      <span class=\"comment\">// 长参数: --action</span></span><br><span class=\"line\">$param_arr = getopt($shortopts, $longopts);</span><br><span class=\"line\">print_r($param_arr);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"特殊函数\"><a href=\"#特殊函数\" class=\"headerlink\" title=\"特殊函数\"></a>特殊函数</h2><figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 注册PHP退出前执行函数，可以注册多个</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">shutdown</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">'Script executed with success'</span>, PHP_EOL;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">register_shutdown_function(<span class=\"string\">'shutdown'</span>);</span><br></pre></td></tr></table></figure>\n\n","categories":["PHP"],"tags":["PHPStorm","phpStudy"]},{"title":"Windows开发环境","url":"/2019/09/21/Java/开发环境/","content":"<p><a href=\"https://www.runoob.com/java/java-environment-setup.html\" target=\"_blank\" rel=\"noopener\">菜鸟教程</a></p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><ul>\n<li><a href=\"http://www.oracle.com/technetwork/java/javase/downloads/index.html\" target=\"_blank\" rel=\"noopener\">安装包下载</a><a href=\"http://www.oracle.com/technetwork/java/javase/downloads/index.html\" target=\"_blank\" rel=\"noopener\">http://www.oracle.com/technetwork/java/javase/downloads/index.html</a></li>\n<li>点击最新版的JDK(Java SE DownLoads)下载就行</li>\n<li>下载页：Java SE Development Kit XX<ul>\n<li>点击同意协议：Accept License Agreement</li>\n<li>然后下载Windows版安装包即可</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"配置环境变量\"><a href=\"#配置环境变量\" class=\"headerlink\" title=\"配置环境变量\"></a>配置环境变量</h2><ul>\n<li>我的电脑-&gt;属性-&gt;高级-&gt;环境变量-&gt;系统环境变量</li>\n<li>JAVA_HOME：软件安装路径，例如：C:\\Program Files\\Java\\jdk-13</li>\n<li>Path：补充”%JAVA_HOME%\\bin;%JAVA_HOME%\\jre\\bin”</li>\n</ul>\n<h2 id=\"测试环境\"><a href=\"#测试环境\" class=\"headerlink\" title=\"测试环境\"></a>测试环境</h2><figure class=\"highlight bat\"><table><tr><td class=\"code\"><pre><span class=\"line\">java -version</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"HelloWorld\"><a href=\"#HelloWorld\" class=\"headerlink\" title=\"HelloWorld\"></a>HelloWorld</h2><ul>\n<li>创建HelloWorld.java文件，<strong>文件名需与类名一致</strong>，代码如下：</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloWorld</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Hello World\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"异常处理\"><a href=\"#异常处理\" class=\"headerlink\" title=\"异常处理\"></a>异常处理</h2><ul>\n<li><p>编码GBK的不可映射字符：<code>javac -encoding UTF-8 test.java</code></p>\n</li>\n<li><p>编译：<code>javac HelloWorld.java</code></p>\n<ul>\n<li>生成：<code>HelloWorld.class</code>文件</li>\n</ul>\n</li>\n<li><p>执行：<code>java HelloWorld</code></p>\n<ul>\n<li>打印：<code>Hello World</code></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"IDE\"><a href=\"#IDE\" class=\"headerlink\" title=\"IDE\"></a>IDE</h2><ul>\n<li>netbeans<ul>\n<li>Java官网有netbeans的下载链接</li>\n<li>netbeans官网<a href=\"https://netbeans.org/\" target=\"_blank\" rel=\"noopener\">https://netbeans.org/</a>, 下载最新的LTS版即可</li>\n<li>绿色版，直接解压就可以用</li>\n</ul>\n</li>\n<li>Java with Ant<ul>\n<li>工程创建使用：Java with Ant（其他俩没找到怎么挂在第三方库 -_-! ）</li>\n<li>常规库，直接Alt+Enter键自动import</li>\n<li>右键Libraries导入其他第三方库<ul>\n<li>mvn：<a href=\"https://mvnrepository.com/\" target=\"_blank\" rel=\"noopener\">https://mvnrepository.com/</a></li>\n</ul>\n</li>\n<li>编译Jar<ul>\n<li>补充如下内容到<code>build.xml</code></li>\n<li>右键<code>build.xml</code>-&gt;<code>Run Target</code>-&gt;<code>Other Targets</code>-&gt;<code>pachage-for-store</code>，完成打包</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>打包后的jar运行错误处理<ul>\n<li>提示缺少辅助jar之类，工程右键-&gt;属性-&gt;源：降低目标版本号即可</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">target</span> <span class=\"attr\">name</span>=<span class=\"string\">\"package-for-store\"</span> <span class=\"attr\">depends</span>=<span class=\"string\">\"jar\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Change the value of this property to be the name of your JAR,</span></span><br><span class=\"line\"><span class=\"comment\">         minus the .jar extension. It should not have spaces.</span></span><br><span class=\"line\"><span class=\"comment\">         &lt;property name=\"store.jar.name\" value=\"MyJarName\"/&gt;</span></span><br><span class=\"line\"><span class=\"comment\">    --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"store.jar.name\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"目标文件名\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- don't edit below this line --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"store.dir\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"store\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"store.jar\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;store.dir&#125;/$&#123;store.jar.name&#125;.jar\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">echo</span> <span class=\"attr\">message</span>=<span class=\"string\">\"Packaging $&#123;application.title&#125; into a single JAR at $&#123;store.jar&#125;\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">delete</span> <span class=\"attr\">dir</span>=<span class=\"string\">\"$&#123;store.dir&#125;\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mkdir</span> <span class=\"attr\">dir</span>=<span class=\"string\">\"$&#123;store.dir&#125;\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">jar</span> <span class=\"attr\">destfile</span>=<span class=\"string\">\"$&#123;store.dir&#125;/temp_final.jar\"</span> <span class=\"attr\">filesetmanifest</span>=<span class=\"string\">\"skip\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">zipgroupfileset</span> <span class=\"attr\">dir</span>=<span class=\"string\">\"dist\"</span> <span class=\"attr\">includes</span>=<span class=\"string\">\"*.jar\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">zipgroupfileset</span> <span class=\"attr\">dir</span>=<span class=\"string\">\"dist/lib\"</span> <span class=\"attr\">includes</span>=<span class=\"string\">\"*.jar\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">manifest</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">attribute</span> <span class=\"attr\">name</span>=<span class=\"string\">\"Main-Class\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;main.class&#125;\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">manifest</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">jar</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">zip</span> <span class=\"attr\">destfile</span>=<span class=\"string\">\"$&#123;store.jar&#125;\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">zipfileset</span> <span class=\"attr\">src</span>=<span class=\"string\">\"$&#123;store.dir&#125;/temp_final.jar\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">excludes</span>=<span class=\"string\">\"META-INF/*.SF, META-INF/*.DSA, META-INF/*.RSA\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">zip</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">delete</span> <span class=\"attr\">file</span>=<span class=\"string\">\"$&#123;store.dir&#125;/temp_final.jar\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">target</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Java with Maven<ul>\n<li>创建工程后，源码路径比较深，保持原样，在最深层创建java文件开发即可</li>\n<li>引入jar<ul>\n<li>打开pom.xml</li>\n<li>右键<code>Insert Code...</code> -&gt; <code>dependency</code> -&gt; 输入对应的字段搜索即可，或者预先到<a href=\"https://mvnrepository.com/\" target=\"_blank\" rel=\"noopener\">maven</a>, 直接补充到pom中</li>\n<li>保存pom的时候该jar会自动被下载，并显示到项目中；如果没显示出来，可以编译下，会触发下载</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--pom.xml--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.bouncycastle<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>bcprov-jdk15on<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.63<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n","categories":["JAVA"],"tags":["入门"]},{"title":"UPNP穿透","url":"/2019/09/12/VCNet/Socket/","content":"<h2 id=\"Socket\"><a href=\"#Socket\" class=\"headerlink\" title=\"Socket\"></a>Socket</h2><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Socket超时</span></span><br><span class=\"line\"><span class=\"comment\">// Windows 是 int</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> timeo = <span class=\"number\">5000</span>;</span><br><span class=\"line\">setsockopt(m_so, SOL_SOCKET, SO_SNDTIMEO, (<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>*)&amp;timeo, <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>));</span><br><span class=\"line\">setsockopt(m_so, SOL_SOCKET, SO_RCVTIMEO, (<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>*)&amp;timeo, <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>));</span><br><span class=\"line\"><span class=\"comment\">// Linux 是 struct timeval</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">timeval</span> <span class=\"title\">timeo</span> = &#123;</span> <span class=\"number\">0</span>, <span class=\"number\">5000</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">int</span> i = setsockopt(m_so, SOL_SOCKET, SO_SNDTIMEO, (<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>*)&amp;timeo, <span class=\"keyword\">sizeof</span>(timeo));</span><br><span class=\"line\">i = setsockopt(m_so, SOL_SOCKET, SO_RCVTIMEO, (<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>*)&amp;timeo, <span class=\"keyword\">sizeof</span>(timeo));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 全局初始化</span></span><br><span class=\"line\">WORD wVersionRequested = MAKEWORD(<span class=\"number\">1</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">WSADATA wsaData;</span><br><span class=\"line\">WSAStartup(wVersionRequested, &amp;wsaData);</span><br><span class=\"line\">m_so = SOCKET_ERROR;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 客户端Demo</span></span><br><span class=\"line\">BOOL CHidServer::Open()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  Close();</span><br><span class=\"line\">  <span class=\"function\">CriticalSectionManager <span class=\"title\">csm1</span><span class=\"params\">(m_csSend)</span></span>;</span><br><span class=\"line\">  <span class=\"function\">CriticalSectionManager <span class=\"title\">csm2</span><span class=\"params\">(m_csRecv)</span></span>;</span><br><span class=\"line\">  m_so = socket(AF_INET, SOCK_STREAM, <span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (m_so == SOCKET_ERROR)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    LOG_HID_ERROR(TEXT(<span class=\"string\">\"Socket 创建失败\"</span>));</span><br><span class=\"line\">    Close();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> FALSE;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// Windows 是int</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> timeo = <span class=\"number\">5000</span>;</span><br><span class=\"line\">  setsockopt(m_so, SOL_SOCKET, SO_SNDTIMEO, (<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>*)&amp;timeo, <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>));</span><br><span class=\"line\">  setsockopt(m_so, SOL_SOCKET, SO_RCVTIMEO, (<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>*)&amp;timeo, <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">  SOCKADDR_IN addrServer;</span><br><span class=\"line\">  InetPton(AF_INET, <span class=\"string\">\"127.0.0.1\"</span>, (PVOID)&amp;addrServer.sin_addr.S_un.S_addr);</span><br><span class=\"line\">  addrServer.sin_family = AF_INET;</span><br><span class=\"line\">  addrServer.sin_port = htons(<span class=\"number\">8080</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (connect(m_so, (SOCKADDR *)&amp;addrServer, <span class=\"keyword\">sizeof</span>(addrServer)) == SOCKET_ERROR)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    Close();</span><br><span class=\"line\">    LOG_HID_ERROR(TEXT(<span class=\"string\">\"Socket 连接解码器失败\"</span>));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> FALSE;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  LOG_HID_DEBUG(TEXT(<span class=\"string\">\"Socket(TCP) 连接成功\"</span>));</span><br><span class=\"line\">  <span class=\"keyword\">return</span> TRUE;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">BOOL CHidServer::IsOpen()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> m_so != SOCKET_ERROR;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">void</span> CHidServer::Close()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (m_so != SOCKET_ERROR)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"function\">CriticalSectionManager <span class=\"title\">csm1</span><span class=\"params\">(m_csSend)</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (m_so != SOCKET_ERROR)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      shutdown(m_so, SD_BOTH);</span><br><span class=\"line\">      closesocket(m_so);</span><br><span class=\"line\">      m_so = SOCKET_ERROR;</span><br><span class=\"line\">      LOG_HID_DEBUG(TEXT(<span class=\"string\">\"Socket(TCP) 链接关闭\"</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">BOOL CHidServer::Send(<span class=\"keyword\">char</span> *data, <span class=\"keyword\">int</span> len)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"function\">CriticalSectionManager <span class=\"title\">csm</span><span class=\"params\">(m_csSend)</span></span>;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> res = send(m_so, data, len, <span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (res != len)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    LOG_HID_ERROR(TEXT(<span class=\"string\">\"socket发送数据到解码器失败\"</span>));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> FALSE;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> TRUE;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">char</span>* CHidServer::Recv(<span class=\"keyword\">int</span> &amp;len)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  ZeroMemory(m_szData, <span class=\"keyword\">sizeof</span>(m_szData));</span><br><span class=\"line\">  <span class=\"function\">CriticalSectionManager <span class=\"title\">csm</span><span class=\"params\">(m_csRecv)</span></span>;</span><br><span class=\"line\">  len = recv(m_so, m_szData, <span class=\"keyword\">sizeof</span>(m_szData), <span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (len &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    LOG_HID_ERROR(TEXT(<span class=\"string\">\"recv异常\"</span>));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(len == <span class=\"number\">0</span>)</span><br><span class=\"line\">    LOG_HID_ERROR(TEXT(<span class=\"string\">\"recv空数据\"</span>));</span><br><span class=\"line\">  <span class=\"keyword\">return</span> m_szData;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"特殊参数\"><a href=\"#特殊参数\" class=\"headerlink\" title=\"特殊参数\"></a>特殊参数</h2><h3 id=\"TCP-NODELAY\"><a href=\"#TCP-NODELAY\" class=\"headerlink\" title=\"TCP_NODELAY\"></a>TCP_NODELAY</h3><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 默认开启</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> enable = <span class=\"number\">0</span>;</span><br><span class=\"line\">setsockopt(fd, IPPROTO_TCP, TCP_NODELAY, (<span class=\"keyword\">void</span>*)&amp;enable, <span class=\"keyword\">sizeof</span>(enable));</span><br></pre></td></tr></table></figure>\n\n","categories":["VC"],"tags":["UPNP"]},{"title":"UPNP穿透","url":"/2019/09/12/VCNet/UPNP/","content":"<h2 id=\"UPNP\"><a href=\"#UPNP\" class=\"headerlink\" title=\"UPNP\"></a>UPNP</h2><p>用即插即用（英语：Universal Plug and Play，简称UPnP）是由“通用即插即用论坛”（UPnP™ Forum）推广的一套网络协议。<br>该协议的目标是使家庭网络（数据共享、通信和娱乐）和公司网络中的各种设备能够相互无缝连接，并简化相关网络的实现。<br>UPnP通过定义和发布基于开放、因特网通讯网协议标准的UPnP设备控制协议来实现这一目标。<br>UPnP这个概念是从即插即用（Plug-and-play）派生而来的，即插即用是一种热拔插技术。</p>\n<h2 id=\"UPNP穿透-WIN-API\"><a href=\"#UPNP穿透-WIN-API\" class=\"headerlink\" title=\"UPNP穿透(WIN API)\"></a>UPNP穿透(WIN API)</h2><p>NAT穿透允许UPnP数据包在没有用户交互的情况下，无障碍的通过路由器或者防火墙（假如那个路由器或者防火墙支持NAT）。<br>事实上大部分防火墙默认都是开通这个端口的</p>\n<h3 id=\"初始化COM接口\"><a href=\"#初始化COM接口\" class=\"headerlink\" title=\"初始化COM接口\"></a>初始化COM接口</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">```C++</span><br><span class=\"line\">typedef enum _EPortMapping</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  PM_OK = 0,\t\t\t\t// 操作成功</span><br><span class=\"line\">  PM_SUCCESS = 0,\t\t\t// 未注册 &amp;&amp; 可注册</span><br><span class=\"line\">  PM_SUCCESS_EXIST,\t\t// 已注册</span><br><span class=\"line\">  PM_ERROR = 10,\t\t\t// 操作失败</span><br><span class=\"line\">  PM_ERROR_PORT,\t\t\t// 外网端口已被本机其他端口映射</span><br><span class=\"line\">  PM_ERROR_REMOTE_PORT,\t// 外网端口已被其他机器映射</span><br><span class=\"line\">  PM_ERROR_PORT_CONFLICT,\t// 端口冲突：端口必须 &gt;= 1024</span><br><span class=\"line\">&#125;EPortMapping;</span><br><span class=\"line\"></span><br><span class=\"line\">// 定义结构体模型：每个IUPnPDevice都有子IUPnPDevice组以及自身提供的IUPnPService组</span><br><span class=\"line\">typedef struct _MyUpnpService</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">  CComVariant cv;</span><br><span class=\"line\">  CComPtr&lt;IUPnPService&gt; service;</span><br><span class=\"line\">  _MyUpnpService(CComVariant &amp;cv)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    this-&gt;cv = cv;</span><br><span class=\"line\">    this-&gt;service = (IUPnPService*)V_DISPATCH(&amp;cv);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  ~_MyUpnpService()</span><br><span class=\"line\">  &#123;&#125;</span><br><span class=\"line\">&#125;MyUpnpService;</span><br><span class=\"line\"></span><br><span class=\"line\">typedef struct _MyUpnpDevice</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">  CComVariant cv;</span><br><span class=\"line\">  CComPtr&lt;IUPnPDevice&gt; device;</span><br><span class=\"line\">  std::vector&lt;_MyUpnpDevice&gt; subDevice;</span><br><span class=\"line\">  std::vector&lt;MyUpnpService&gt; service;</span><br><span class=\"line\">  _MyUpnpDevice(CComVariant &amp;cv)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    this-&gt;cv = cv;</span><br><span class=\"line\">    this-&gt;device = (IUPnPDevice*)V_DISPATCH(&amp;cv);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  ~_MyUpnpDevice()</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    service.clear();</span><br><span class=\"line\">    subDevice.clear();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;MyUpnpDevice;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"遍历跟设备\"><a href=\"#遍历跟设备\" class=\"headerlink\" title=\"遍历跟设备\"></a>遍历跟设备</h3><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\">BOOL CMyUpnp::SearchRootDevices()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  IUPnPDeviceFinder* pUPnPDeviceFinder;</span><br><span class=\"line\">  HRESULT hr = CoCreateInstance(CLSID_UPnPDeviceFinder, <span class=\"literal\">NULL</span>, CLSCTX_INPROC_SERVER,</span><br><span class=\"line\">    IID_IUPnPDeviceFinder, <span class=\"keyword\">reinterpret_cast</span>&lt;<span class=\"keyword\">void</span>**&gt;(&amp;pUPnPDeviceFinder));</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (SUCCEEDED(hr))</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    IUPnPDevices *devices = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"comment\">// TypeURI: 对应ST字段内容</span></span><br><span class=\"line\">    <span class=\"comment\">// 查询跟设备：upnp:rootdevice</span></span><br><span class=\"line\">    <span class=\"comment\">// 查询网关设备：urn:schemas-upnp-org:device:InternetGatewayDevice:1</span></span><br><span class=\"line\">    BSTR uri = SysAllocString(TEXT(<span class=\"string\">\"urn:schemas-upnp-org:device:InternetGatewayDevice:1\"</span>));</span><br><span class=\"line\">    hr = pUPnPDeviceFinder-&gt;FindByType(uri, <span class=\"number\">0</span>, &amp;devices);</span><br><span class=\"line\">    SysFreeString(uri);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (SUCCEEDED(hr))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 遍历根设备</span></span><br><span class=\"line\">      IEnumVARIANT *piEnum = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">      hr = devices-&gt;get__NewEnum((IUnknown**)&amp;piEnum);</span><br><span class=\"line\">      CComVariant var;</span><br><span class=\"line\">      ULONG nReturned = <span class=\"number\">0</span>;</span><br><span class=\"line\">      <span class=\"keyword\">while</span> (piEnum-&gt;Next(<span class=\"number\">1</span>, &amp;var, &amp;nReturned) == S_OK)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        m_rootDevices.push_back(var);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      piEnum-&gt;Release();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    pUPnPDeviceFinder-&gt;Release();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> TRUE;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> FALSE;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"遍历子设备\"><a href=\"#遍历子设备\" class=\"headerlink\" title=\"遍历子设备\"></a>遍历子设备</h3><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// device</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> CMyUpnp::EnumSubDevices(MyUpnpDevice &amp;device)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  device.subDevice.clear();</span><br><span class=\"line\">  EnumSubServices(device);</span><br><span class=\"line\">  IUPnPDevices *children;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (device.device-&gt;get_Children(&amp;children) == S_OK)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    IEnumVARIANT *piEnum = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (children-&gt;get__NewEnum((IUnknown**)&amp;piEnum) == S_OK)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      CComVariant var;</span><br><span class=\"line\">      ULONG nReturned = <span class=\"number\">0</span>;</span><br><span class=\"line\">      <span class=\"keyword\">while</span> (piEnum-&gt;Next(<span class=\"number\">1</span>, &amp;var, &amp;nReturned) == S_OK)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        device.subDevice.push_back(MyUpnpDevice(var));</span><br><span class=\"line\">        EnumSubDevices(device.subDevice.back());</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      piEnum-&gt;Release();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    children-&gt;Release();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"遍历服务\"><a href=\"#遍历服务\" class=\"headerlink\" title=\"遍历服务\"></a>遍历服务</h3><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> CMyUpnp::EnumSubServices(MyUpnpDevice &amp;device)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  device.service.clear();</span><br><span class=\"line\">  <span class=\"comment\">// 遍历服务</span></span><br><span class=\"line\">  IUPnPServices* services = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (device.device-&gt;get_Services(&amp;services) == S_OK)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    IEnumVARIANT *piEnum = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (services-&gt;get__NewEnum((IUnknown**)&amp;piEnum) == S_OK)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      CComVariant var;</span><br><span class=\"line\">      ULONG nReturned = <span class=\"number\">0</span>;</span><br><span class=\"line\">      <span class=\"keyword\">while</span> (piEnum-&gt;Next(<span class=\"number\">1</span>, &amp;var, &amp;nReturned) == S_OK)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        device.service.push_back(var);</span><br><span class=\"line\">        IUPnPService *service = (IUPnPService*)V_DISPATCH(&amp;var);</span><br><span class=\"line\">        BSTR tmp = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (service-&gt;get_ServiceTypeIdentifier(&amp;tmp) == S_OK)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          <span class=\"comment\">//cout &lt;&lt; \"get_ServiceTypeIdentifier\\t\\t\" &lt;&lt; CW2A(tmp) &lt;&lt; endl;</span></span><br><span class=\"line\">          CString sn = tmp;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (sn == TEXT(<span class=\"string\">\"urn:schemas-upnp-org:service:WANIPConnection:1\"</span>) || sn == TEXT(<span class=\"string\">\"urn:schemas-upnp-org:service:WANPPPConnection:1\"</span>))</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 这个就是端口映射服务</span></span><br><span class=\"line\">            m_connService = service;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          SysFreeString(tmp);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      piEnum-&gt;Release();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    services-&gt;Release();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"端口映射\"><a href=\"#端口映射\" class=\"headerlink\" title=\"端口映射\"></a>端口映射</h3><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 服务接口：发送Action事件，反馈执行结果</span></span><br><span class=\"line\">BOOL CMyUpnp::InvokeAction(CString strAction, CComSafeArray&lt;VARIANT&gt; &amp;arr, CComVariant &amp;vaOutArgs, CComVariant &amp;vaRetVal)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!m_connService)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    CheckSupportPortMapping();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!m_connService)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> FALSE;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\">CComVariant <span class=\"title\">vaInActionArgs</span><span class=\"params\">(*arr.GetSafeArrayPtr())</span></span>;</span><br><span class=\"line\">  BSTR act = strAction.AllocSysString();</span><br><span class=\"line\">  HRESULT re = m_connService-&gt;InvokeAction(act, vaInActionArgs, &amp;vaOutArgs, &amp;vaRetVal);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (re != S_OK)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (re == DISP_E_TYPEMISMATCH)</span><br><span class=\"line\">      wcout &lt;&lt; strAction.GetBuffer() &lt;&lt; <span class=\"string\">L\" -&gt; InvokeAction Error: 类型不匹配\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(re == E_FAIL)</span><br><span class=\"line\">      wcout &lt;&lt; strAction.GetBuffer() &lt;&lt; <span class=\"string\">L\" -&gt; InvokeAction Error: E_FAIL\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      wcout &lt;&lt; strAction.GetBuffer() &lt;&lt; <span class=\"string\">L\" -&gt; InvokeAction Error: \"</span> &lt;&lt; hex &lt;&lt; re;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (vaRetVal.vt == VT_BSTR)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 排除常规遍历提醒</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (strAction != TEXT(<span class=\"string\">\"GetGenericPortMappingEntry\"</span>) || CString(V_BSTR(&amp;vaRetVal)) != TEXT(<span class=\"string\">\"SpecifiedArrayIndexInvalid\"</span>))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          wcout &lt;&lt; <span class=\"string\">L\" -&gt; \"</span> &lt;&lt; V_BSTR(&amp;vaRetVal);</span><br><span class=\"line\">          m_lastError = V_BSTR(&amp;vaRetVal);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      wcout &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  SysFreeString(act);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> re == S_OK;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\">EPortMapping CMyUpnp::AddPortMapping(CString localIP, DWORD localPort, DWORD remotePort, CString des, CString protocol, CString remoteHost)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 添加映射</span></span><br><span class=\"line\">  CString act = TEXT(<span class=\"string\">\"AddPortMapping\"</span>);</span><br><span class=\"line\">  CComSafeArray&lt;VARIANT&gt; saInArr;</span><br><span class=\"line\">  saInArr.Create();</span><br><span class=\"line\">  <span class=\"comment\">// 注意这里的参数顺序是固定的，一一对应到XML结构</span></span><br><span class=\"line\">  saInArr.Add(CComVariant(<span class=\"string\">\"\"</span>));\t<span class=\"comment\">// NewRemoteHost: 通常是空串</span></span><br><span class=\"line\">  saInArr.Add(CComVariant(remotePort));\t<span class=\"comment\">// NewExternalPort</span></span><br><span class=\"line\">  saInArr.Add(CComVariant(protocol));\t\t<span class=\"comment\">// NewProtocol: TCP|UDP</span></span><br><span class=\"line\">  saInArr.Add(CComVariant(localPort));\t<span class=\"comment\">// NewInternalPort</span></span><br><span class=\"line\">  saInArr.Add(CComVariant(localIP));\t\t<span class=\"comment\">// NewInternalClient</span></span><br><span class=\"line\">  saInArr.Add(CComVariant(VARIANT_TRUE));\t<span class=\"comment\">// NewEnabled: 必须是 VARIANT_TRUE</span></span><br><span class=\"line\">  saInArr.Add(CComVariant(des.GetBuffer()));\t<span class=\"comment\">// NewPortMappingDescription</span></span><br><span class=\"line\">  saInArr.Add(CComVariant(<span class=\"string\">\"0\"</span>));\t\t\t<span class=\"comment\">// NewLeaseDuration</span></span><br><span class=\"line\"></span><br><span class=\"line\">  CComVariant vaOutArgs, vaRetVal;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (InvokeAction(act, saInArr, vaOutArgs, vaRetVal))</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> PM_SUCCESS;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (m_lastError == TEXT(<span class=\"string\">\"ConflictInMappingEntry\"</span>))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> PM_ERROR_PORT_CONFLICT;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> PM_ERROR;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">EPortMapping CMyUpnp::DeletePortMapping(DWORD remotePort, CString protocol, CString remoteHost)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 删除映射</span></span><br><span class=\"line\">  CString act = TEXT(<span class=\"string\">\"DeletePortMapping\"</span>);</span><br><span class=\"line\">  CComSafeArray&lt;VARIANT&gt; saInArr;</span><br><span class=\"line\">  saInArr.Create();</span><br><span class=\"line\">  <span class=\"comment\">// 注意这里的参数顺序是固定的，一一对应到XML结构</span></span><br><span class=\"line\">  saInArr.Add(CComVariant(remoteHost));\t<span class=\"comment\">// NewRemoteHost: 通常是空串</span></span><br><span class=\"line\">  saInArr.Add(CComVariant(remotePort));\t<span class=\"comment\">// NewExternalPort</span></span><br><span class=\"line\">  saInArr.Add(CComVariant(protocol));\t\t<span class=\"comment\">// NewProtocol: TCP|UDP</span></span><br><span class=\"line\"></span><br><span class=\"line\">  CComVariant vaOutArgs, vaRetVal;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (InvokeAction(act, saInArr, vaOutArgs, vaRetVal))</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> PM_SUCCESS;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> PM_ERROR;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"备注\"><a href=\"#备注\" class=\"headerlink\" title=\"备注\"></a>备注</h2><ul>\n<li>端口映射<ul>\n<li><strong>测试发现仅支持&gt;=1024的端口，否则反馈端口冲突错误</strong><ul>\n<li>端口映射服务也明确说明了这点，可以查UPNP官方文档，有XML和结构字段说明</li>\n</ul>\n</li>\n<li><strong>WinAPI所传参数和XML结构中的参数是一一对应的，并且顺序是固定的</strong></li>\n<li>WinAPI封装了网络通讯，查找/遍历/添加映射/删除映射都是网络通讯，可以抓包分析明文XML加强理解</li>\n</ul>\n</li>\n<li>测试映射<ul>\n<li>通道打通后，内网端口开HTTP服务</li>\n<li>然后直接访问外网映射端口即可（外网映射端口只能外网访问）</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Demo\"><a href=\"#Demo\" class=\"headerlink\" title=\"Demo\"></a>Demo</h2><p><a href=\"https://github.com/fxliu/VCDemo/tree/master/NET/Upnp\" target=\"_blank\" rel=\"noopener\">UPNP</a></p>\n","categories":["VC"],"tags":["UPNP"]},{"title":"openssl","url":"/2019/09/07/VCTools/openssl/","content":"<h2 id=\"编译\"><a href=\"#编译\" class=\"headerlink\" title=\"编译\"></a>编译</h2><ul>\n<li><a href=\"http://www.openssl.org/\" target=\"_blank\" rel=\"noopener\">官网</a></li>\n<li>编译工具<ul>\n<li><a href=\"http://www.perl.org\" target=\"_blank\" rel=\"noopener\">ActivePerl</a></li>\n</ul>\n</li>\n<li>环境<ul>\n<li>ActivePerl-5.16.2.1602-MSWin32-x86-296513.msi</li>\n<li>openssl-1.0.1e</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"编译过程\"><a href=\"#编译过程\" class=\"headerlink\" title=\"编译过程\"></a>编译过程</h3><figure class=\"highlight bat\"><table><tr><td class=\"code\"><pre><span class=\"line\">:: 启动VS\"开发人员命令提示\"工具：nmake等指令环境</span><br><span class=\"line\">:: 文件位置：C:\\ProgramData\\Microsoft\\Windows\\<span class=\"built_in\">Start</span> Menu\\Programs\\Visual Studio <span class=\"number\">2015</span>\\Visual Studio Tools\\VS2015 开发人员命令提示.lnk</span><br><span class=\"line\">:: 快捷方式指向位置：<span class=\"variable\">%comspec%</span> /k \"\"E:\\Program Files (x86)\\Microsoft Visual Studio <span class=\"number\">14</span>.<span class=\"number\">0</span>\\Common7\\Tools\\VsDevCmd.bat\"\"</span><br><span class=\"line\"></span><br><span class=\"line\">:: perl编译根目录必须是openssl的根目录</span><br><span class=\"line\"><span class=\"built_in\">cd</span> c:\\openssl-<span class=\"number\">1</span>.<span class=\"number\">0</span>.<span class=\"number\">1</span>e</span><br><span class=\"line\">:: 运行configure，--prefix 指定编译目录(保存编译结果), no-asm表示不用汇编</span><br><span class=\"line\">:: VC-WIN32 代表release版，debug-VC-WIN32 代表Debug版</span><br><span class=\"line\">perl Configure VC-WIN32 --prefix=.\\build_release</span><br><span class=\"line\">:: 创建MakeFile, perl中如果使用no-asm，这里替换为 ms\\do_nasm.bat</span><br><span class=\"line\">ms\\do_ms.bat</span><br><span class=\"line\"></span><br><span class=\"line\">:: <span class=\"number\">64</span>位</span><br><span class=\"line\">:; Configure参数调整：VC-WIN64A、debug-VC-WIN64A</span><br><span class=\"line\">:: ms\\do_win64a.bat</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">:: 编译动态库- 默认/<span class=\"built_in\">MD</span></span><br><span class=\"line\">nmake -f ms\\ntdll.mak</span><br><span class=\"line\">:: 编译静态库 - 默认/MT</span><br><span class=\"line\">nmake -f ms\\nt.mak</span><br><span class=\"line\">:: 测试动态库</span><br><span class=\"line\">nmake -f ms\\ntdll.mak test</span><br><span class=\"line\">:: 测试静态库</span><br><span class=\"line\">nmake -f ms\\nt.mak test</span><br><span class=\"line\"></span><br><span class=\"line\">:: 安装动态库</span><br><span class=\"line\">nmake -f ms\\ntdll.mak install</span><br><span class=\"line\">:: 安装静态库</span><br><span class=\"line\">nmake -f ms\\nt.mak install</span><br><span class=\"line\"></span><br><span class=\"line\">:: 清除上次动态库的编译，以便重新编译, 清理动态库</span><br><span class=\"line\">nmake -f ms\\ntdll.mak clean</span><br><span class=\"line\">:: 清除上次静态库的编译，以便重新编译：清理静态库</span><br><span class=\"line\">nmake -f ms\\nt.mak clean</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"编译配置\"><a href=\"#编译配置\" class=\"headerlink\" title=\"编译配置\"></a>编译配置</h3><figure class=\"highlight bat\"><table><tr><td class=\"code\"><pre><span class=\"line\">:: 编辑文件 ms\\nt.mak，将该文件第<span class=\"number\">19</span>行与工程编译：C/C++ -&gt; 代码生成 -&gt; 运行库 相匹配</span><br><span class=\"line\">:: 搜索替换即可：CFLAG= /<span class=\"built_in\">MD</span> .....</span><br><span class=\"line\">:: 编辑选项=/<span class=\"built_in\">MD</span>-&gt;/MT</span><br><span class=\"line\"></span><br><span class=\"line\">C Runtime Library：</span><br><span class=\"line\">/<span class=\"built_in\">MD</span>       MSVCRT.LIB      多线程DLL的Release版本</span><br><span class=\"line\">/MDd      MSVCRTD.LIB     多线程DLL的Debug版本</span><br><span class=\"line\">/MT       LIBCMT.LIB      多线程静态链接的Release版本</span><br><span class=\"line\">/MTd      LIBCMTD.LIB     多线程静态链接的Debug版本</span><br><span class=\"line\">/clr      MSVCMRT.LIB     托管代码和非托管代码混合</span><br><span class=\"line\">/clr:pure MSVCURT.LIB     纯托管代码</span><br><span class=\"line\"></span><br><span class=\"line\">C++ Standard Library：</span><br><span class=\"line\">/<span class=\"built_in\">MD</span>       MSVCPRT.LIB     多线程DLL的Release版本</span><br><span class=\"line\">/MDd      MSVCPRTD.LIB    多线程DLL的Debug版本</span><br><span class=\"line\">/MT       LIBCPMT.LIB     多线程静态链接的Release版本</span><br><span class=\"line\">/MTd      LIBCPMTD.LIB    多线程静态链接的Debug版本</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"VS应用\"><a href=\"#VS应用\" class=\"headerlink\" title=\"VS应用\"></a>VS应用</h2><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"openssl/aes.h\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// SSL依赖库</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> comment(lib, <span class=\"meta-string\">\"IPHLPAPI.lib\"</span>)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> comment(lib, <span class=\"meta-string\">\"Snmpapi.lib\"</span>)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> comment(lib, <span class=\"meta-string\">\"netapi32.lib\"</span>)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> comment(lib, <span class=\"meta-string\">\"ws2_32.lib\"</span>)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> comment(lib, <span class=\"meta-string\">\"wldap32.lib\"</span>)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> comment(lib, <span class=\"meta-string\">\"Crypt32.lib\"</span>)</span></span><br><span class=\"line\"><span class=\"comment\">// SSL库</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> comment(lib, <span class=\"meta-string\">\"libeay32.lib\"</span>)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> comment(lib, <span class=\"meta-string\">\"ssleay32.lib\"</span>)</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"CFB-128-NoPadding\"><a href=\"#CFB-128-NoPadding\" class=\"headerlink\" title=\"CFB 128 NoPadding\"></a>CFB 128 NoPadding</h3><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> CFB_KEY <span class=\"meta-string\">\"0123456789012345\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> CFB_VI <span class=\"meta-string\">\"0123456789012345\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">BOOL <span class=\"title\">my_cfb128_encrypt</span><span class=\"params\">(CStringA strIn, CStringA &amp;strOut, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> *ckey, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> *ivec)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  AES_KEY keyEn;</span><br><span class=\"line\">  AES_set_encrypt_key(ckey, <span class=\"number\">128</span>, &amp;keyEn);</span><br><span class=\"line\">  <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> *szData = <span class=\"keyword\">new</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span>[strIn.GetLength()];</span><br><span class=\"line\">  <span class=\"built_in\">memset</span>(szData, <span class=\"number\">0</span>, strIn.GetLength());</span><br><span class=\"line\">  <span class=\"built_in\">memcpy</span>(szData, strIn.GetBuffer(), strIn.GetLength());</span><br><span class=\"line\">  <span class=\"keyword\">int</span> num = <span class=\"number\">0</span>;</span><br><span class=\"line\">  AES_cfb128_encrypt(szData, szData, strIn.GetLength(), &amp;keyEn, ivec, &amp;num, AES_ENCRYPT);</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> strBase64;</span><br><span class=\"line\">  nbase::Base64Encode((<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>*)szData, strIn.GetLength(), &amp;strBase64);</span><br><span class=\"line\">  <span class=\"keyword\">delete</span> szData;</span><br><span class=\"line\">  strOut = strBase64.c_str();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> !strOut.IsEmpty();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">BOOL <span class=\"title\">my_cfb128_decrypt</span><span class=\"params\">(CStringA strIn, CStringA &amp;strOut, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> *ckey, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> *ivec)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> strSrc;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!nbase::Base64Decode(strIn.GetBuffer(), &amp;strSrc))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> FALSE;</span><br><span class=\"line\"></span><br><span class=\"line\">  AES_KEY keyEn;</span><br><span class=\"line\">  AES_set_encrypt_key(ckey, <span class=\"number\">128</span>, &amp;keyEn);</span><br><span class=\"line\">  <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> *szData = <span class=\"keyword\">new</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span>[strSrc.size() + <span class=\"number\">1</span>];</span><br><span class=\"line\">  <span class=\"built_in\">memset</span>(szData, <span class=\"number\">0</span>, strSrc.size() + <span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"built_in\">memcpy</span>(szData, strSrc.c_str(), strSrc.size());</span><br><span class=\"line\">  <span class=\"keyword\">int</span> num = <span class=\"number\">0</span>;</span><br><span class=\"line\">  AES_cfb128_encrypt(szData, szData, strSrc.size(), &amp;keyEn, ivec, &amp;num, AES_DECRYPT);</span><br><span class=\"line\">  strOut.SetString((<span class=\"keyword\">char</span>*)szData, strSrc.size()); <span class=\"comment\">// 支持解密后二进制数据保存到CStringA</span></span><br><span class=\"line\">  <span class=\"keyword\">delete</span> szData;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> !strOut.IsEmpty();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","categories":["VC"],"tags":["openssl"]},{"title":"opencv2","url":"/2019/09/07/VCTools/opcv2/","content":"<h2 id=\"opencv2部署\"><a href=\"#opencv2部署\" class=\"headerlink\" title=\"opencv2部署\"></a>opencv2部署</h2><ul>\n<li>官网下载windows安装包：2.x版支持x86，3以上只有x64</li>\n<li>案例：opencv-2.4.13.6-vc14.exe<ul>\n<li>build\\include</li>\n<li>build\\include\\x86\\vc14\\staticlib：静态lib</li>\n<li>build\\include\\x86\\vc14\\lib + bin：动态lib + dll</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"引入\"><a href=\"#引入\" class=\"headerlink\" title=\"引入\"></a>引入</h3><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 基础lib - release版去掉文件名最后面的\"d\"</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> comment(lib, <span class=\"meta-string\">\"IlmImfd.lib\"</span>)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> comment(lib, <span class=\"meta-string\">\"libjasperd.lib\"</span>)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> comment(lib, <span class=\"meta-string\">\"libjpegd.lib\"</span>)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> comment(lib, <span class=\"meta-string\">\"libpngd.lib\"</span>)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> comment(lib, <span class=\"meta-string\">\"libtiffd.lib\"</span>)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> comment(lib, <span class=\"meta-string\">\"zlibd.lib\"</span>)</span></span><br><span class=\"line\"><span class=\"comment\">// 功能lib，根据代码需要补充</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> comment(lib, <span class=\"meta-string\">\"opencv_core2413d.lib\"</span>)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> comment(lib, <span class=\"meta-string\">\"opencv_highgui2413d.lib\"</span>)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> comment(lib, <span class=\"meta-string\">\"opencv_imgproc2413d.lib\"</span>)</span></span><br><span class=\"line\"><span class=\"comment\">// 静态lib需要补充下面几个</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> comment(lib, <span class=\"meta-string\">\"vfw32.lib\"</span>)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> comment(lib, <span class=\"meta-string\">\"comctl32.lib\"</span>)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> comment(lib, <span class=\"meta-string\">\"gdi32.lib\"</span>)</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"简单应用\"><a href=\"#简单应用\" class=\"headerlink\" title=\"简单应用\"></a>简单应用</h3><figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">VideoCapture <span class=\"title\">cap</span><span class=\"params\">(<span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (!cap.isOpened())</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 尝试打开另一个摄像头</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!cap.open(<span class=\"number\">1</span>))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 设置摄像头参数: 这个要根据摄像头支持参数设置</span></span><br><span class=\"line\">cap.<span class=\"built_in\">set</span>(CV_CAP_PROP_FRAME_WIDTH, <span class=\"number\">640</span>);</span><br><span class=\"line\">cap.<span class=\"built_in\">set</span>(CV_CAP_PROP_FRAME_HEIGHT, <span class=\"number\">480</span>);</span><br><span class=\"line\">cap.<span class=\"built_in\">set</span>(CV_CAP_PROP_FPS, <span class=\"number\">30</span>);</span><br><span class=\"line\"><span class=\"comment\">// 检查设置是否生效</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> width = (<span class=\"keyword\">int</span>)cap.get(CV_CAP_PROP_FRAME_WIDTH);</span><br><span class=\"line\"><span class=\"keyword\">int</span> height = (<span class=\"keyword\">int</span>)cap.get(CV_CAP_PROP_FRAME_HEIGHT);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (width != <span class=\"number\">640</span> || height != <span class=\"number\">480</span>)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">Mat frame;</span><br><span class=\"line\"><span class=\"comment\">// 窗体命名</span></span><br><span class=\"line\"><span class=\"keyword\">char</span>* title = <span class=\"string\">\"摄像头\"</span>;</span><br><span class=\"line\">cvNamedWindow(title, WINDOW_NORMAL);</span><br><span class=\"line\"><span class=\"comment\">// 设置全屏</span></span><br><span class=\"line\"><span class=\"comment\">//cvSetWindowProperty(title, CV_WND_PROP_FULLSCREEN, CV_WINDOW_FULLSCREEN);</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> (cap.isOpened())</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"comment\">//cap &gt;&gt; frame;</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!cap.read(frame))</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (frame.empty())</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  imshow(title, frame);</span><br><span class=\"line\">  <span class=\"keyword\">char</span> ch = waitKey(<span class=\"number\">30</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Demo\"><a href=\"#Demo\" class=\"headerlink\" title=\"Demo\"></a>Demo</h2><p><a href=\"https://github.com/fxliu/VCDemo/tree/master/TOOLS/opencv\" target=\"_blank\" rel=\"noopener\">opencv2 Demo</a><br><code>https://github.com/fxliu/VCDemo/tree/master/TOOLS/opencv</code></p>\n","categories":["VC"],"tags":["opencv"]},{"title":"测试页","url":"/2019/09/01/test/","content":"<h2 id=\"格式备注\"><a href=\"#格式备注\" class=\"headerlink\" title=\"格式备注\"></a>格式备注</h2><ul>\n<li>title: 标题</li>\n<li>tags: 标签</li>\n<li>categories: 分类</li>\n<li>comments: 是否允许评论</li>\n<li>description: 描述 - search使用，给标签就好</li>\n<li>date: 创建时间，默认使用文件创建时间</li>\n<li>updated: 更新时间，默认使用文件修改时间</li>\n</ul>\n","categories":["博客","test"],"tags":["hexo"]},{"title":"github+hexo搭建个人博客","url":"/2019/09/01/github+hexo搭建个人博客/","content":"<ul>\n<li><a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo官网</a></li>\n<li><a href=\"https://hexo.io/zh-cn/docs/\" target=\"_blank\" rel=\"noopener\">Hexo中文网</a></li>\n</ul>\n<hr>\n<h2 id=\"nodejs\"><a href=\"#nodejs\" class=\"headerlink\" title=\"nodejs\"></a>nodejs</h2><ul>\n<li>官网<a href=\"http://nodejs.cn/download/\" title=\"中文网\" target=\"_blank\" rel=\"noopener\">下载</a>安装最新版即可</li>\n<li><a href=\"https://npm.taobao.org/\" target=\"_blank\" rel=\"noopener\">淘宝cnpm镜像</a><ul>\n<li><code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code></li>\n<li>备注：先装的nodejs 64位，cnpm安装失败，各种百度 - 各种尝试 - 各种不好使；卸载重装32位搞定，心都碎了。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"GitHub\"><a href=\"#GitHub\" class=\"headerlink\" title=\"GitHub\"></a>GitHub</h2><ul>\n<li><a href=\"https://desktop.github.com/\" target=\"_blank\" rel=\"noopener\">GitHub Desktop</a>: 桌面版，Git UI工具</li>\n<li><a href=\"https://gitforwindows.org/\" target=\"_blank\" rel=\"noopener\">Git For Windows</a>: Git命令行工具，hexo需要</li>\n<li>仓库1：<a href=\"https://github.com/fxliu/fxliu.github.io\" title=\"静态文件\" target=\"_blank\" rel=\"noopener\">博客仓库</a>静态文件部署位置</li>\n<li>GitHub免费提供，申请方法问度娘，每个账号可以免费申请一个</li>\n<li>仓库2：<a href=\"https://github.com/fxliu/hexo\" target=\"_blank\" rel=\"noopener\">源码仓库</a>hexo源码保存位置</li>\n</ul>\n<h2 id=\"VSCode：编译器\"><a href=\"#VSCode：编译器\" class=\"headerlink\" title=\"VSCode：编译器\"></a>VSCode：编译器</h2><ul>\n<li>微软官网<a href=\"https://code.visualstudio.com/\" target=\"_blank\" rel=\"noopener\">下载</a>安装</li>\n<li>推荐插件<ul>\n<li><code>Ctrl+Shift+P</code>-&gt;<code>configure Display Language</code>安装简体中文</li>\n<li><code>Ctrl+Shift+X</code>-&gt;<code>Markdown All in One</code></li>\n<li><code>Ctrl+Shift+X</code>-&gt;<code>Markdown Preview Github Styling</code><ul>\n<li><a href=\"https://www.jianshu.com/p/51523a1c6fe1\" target=\"_blank\" rel=\"noopener\">规则翻译</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"hexo\"><a href=\"#hexo\" class=\"headerlink\" title=\"hexo\"></a><a href=\"https://hexo.io/zh-cn/docs/\" target=\"_blank\" rel=\"noopener\">hexo</a></h2><ul>\n<li>安装：<code>cnpm install -g hexo-cli</code></li>\n<li>初始化：<code>hexo init 保存博客源码目录</code></li>\n<li>配置：<a href=\"https://hexo.io/zh-cn/docs/configuration\" target=\"_blank\" rel=\"noopener\">官网中文文档</a>说的很详细了<ul>\n<li>然而，只需要把title什么的改成自己的就行了，其他都不用动</li>\n</ul>\n</li>\n<li><code>hexo server</code>启动本地服务，看看效果如何</li>\n</ul>\n<h2 id=\"RSS插件\"><a href=\"#RSS插件\" class=\"headerlink\" title=\"RSS插件\"></a>RSS插件</h2><ul>\n<li>安装插件：<code>cnpm install hexo-generator-feed</code></li>\n<li>启用插件：修改根目录下<code>_config.yml</code>配置文件</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Extensions</span></span><br><span class=\"line\"><span class=\"attr\">plugins:</span></span><br><span class=\"line\">  <span class=\"string\">hexo-generator-feed</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#Feed Atom</span></span><br><span class=\"line\"><span class=\"attr\">feed:</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">atom</span></span><br><span class=\"line\">  <span class=\"attr\">path:</span> <span class=\"string\">atom.xml</span></span><br><span class=\"line\">  <span class=\"attr\">limit:</span> <span class=\"number\">20</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"主题更换：推荐一个个人比较喜欢的fexo\"><a href=\"#主题更换：推荐一个个人比较喜欢的fexo\" class=\"headerlink\" title=\"主题更换：推荐一个个人比较喜欢的fexo\"></a>主题更换：推荐一个个人比较喜欢的fexo</h2><ul>\n<li><a href=\"https://github.com/forsigner/fexo\" target=\"_blank\" rel=\"noopener\">fexo</a>，中文文档，配置方法说明也很详细</li>\n<li>我是fork到我仓库使用的<ul>\n<li>打开大佬的github，点击右上角的fork按钮</li>\n<li>然后回到自己的github-&gt;Repositories，同名的仓库已经存在了，就是这么简单</li>\n<li>直接把fexo放到<code>my-blog/themes/</code>目录下即可<ul>\n<li>该目录下默认存在一个<code>landscape</code>文件夹，这个就是dexo自带的默认主题，更换主题后可以考虑删除</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>打开根目录的<code>_config.yml</code>，设为<code>theme: fexo</code></li>\n<li>主题配置全部在<code>theme/fexo</code>里面完成，所以下面所有配置指的是配置<code>theme/fexo/_config.yml</code></li>\n<li>名称<code>blog_name</code>，标语<code>slogan</code>，头像<code>avatar</code>什么的一笔带过</li>\n<li>导航，根据自己需要配置<ul>\n<li>除了<code>archives</code>是和hexo的配置文件对应的，其他都是fexo自己的</li>\n<li><em>关键是，关键是所有fexo自己的，都需要自己敲命令启动才好使<del>~</del></em></li>\n<li>启用就好，根据提示补充头，<code>_config.xml</code>中有默认Demo</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"fexo：启用分类页面\"><a href=\"#fexo：启用分类页面\" class=\"headerlink\" title=\"fexo：启用分类页面\"></a>fexo：启用分类页面</h2><ul>\n<li>根目录执行<code>hexo new page category</code></li>\n<li>修改<code>my-blog/source/category/index.md</code>内容</li>\n</ul>\n<figure class=\"highlight md\"><table><tr><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: category</span><br><span class=\"line\">layout: category</span><br><span class=\"line\">comments: false</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"fexo：启用标签页面\"><a href=\"#fexo：启用标签页面\" class=\"headerlink\" title=\"fexo：启用标签页面\"></a>fexo：启用标签页面</h2><ul>\n<li>根目录执行<code>hexo new page tag</code></li>\n<li>修改<code>my-blog/source/tag/index.md</code>内容</li>\n</ul>\n<figure class=\"highlight md\"><table><tr><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: tag</span><br><span class=\"line\">layout: tag</span><br><span class=\"line\">comments: false</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"fexo：启用友链页面\"><a href=\"#fexo：启用友链页面\" class=\"headerlink\" title=\"fexo：启用友链页面\"></a>fexo：启用友链页面</h2><ul>\n<li>根目录执行<code>hexo new page link</code></li>\n<li>修改<code>my-blog/source/link/index.md</code>内容</li>\n</ul>\n<figure class=\"highlight md\"><table><tr><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: link</span><br><span class=\"line\">layout: link</span><br><span class=\"line\">comments: false</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"fexo-启用关于页面\"><a href=\"#fexo-启用关于页面\" class=\"headerlink\" title=\"fexo: 启用关于页面\"></a>fexo: 启用关于页面</h2><ul>\n<li>根目录执行<code>hexo new page about</code></li>\n<li>修改<code>my-blog/source/about/index.md</code>内容</li>\n</ul>\n<figure class=\"highlight md\"><table><tr><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: about</span><br><span class=\"line\">layout: about</span><br><span class=\"line\">comments: false</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"fexo-启用项目页面\"><a href=\"#fexo-启用项目页面\" class=\"headerlink\" title=\"fexo: 启用项目页面\"></a>fexo: 启用项目页面</h2><ul>\n<li>根目录执行<code>hexo new page project</code></li>\n<li>修改<code>my-blog/source/project/index.md</code>内容</li>\n</ul>\n<figure class=\"highlight md\"><table><tr><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: project</span><br><span class=\"line\">layout: project</span><br><span class=\"line\">comments: false</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"fexo-自定义样式\"><a href=\"#fexo-自定义样式\" class=\"headerlink\" title=\"fexo: 自定义样式\"></a>fexo: 自定义样式</h2><ul>\n<li>未自定义样式情况，屏蔽<code>personal_style: /css/personal-style.css</code></li>\n<li>需要自定义样式，官网文档有实例</li>\n</ul>\n<h2 id=\"启用搜索页面\"><a href=\"#启用搜索页面\" class=\"headerlink\" title=\"启用搜索页面\"></a>启用搜索页面</h2><ul>\n<li>目录执行<code>hexo new page search</code></li>\n<li>修改<code>my-blog/source/search/index.md</code>内容</li>\n</ul>\n<figure class=\"highlight md\"><table><tr><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: search</span><br><span class=\"line\">layout: search</span><br><span class=\"line\">comments: false</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><em>然后安装 Hexo 插件<code>hexo-search</code></em><ul>\n<li><code>cd my-blog(hexo根目录)</code></li>\n<li><code>npm install hexo-search --save</code></li>\n</ul>\n</li>\n<li><code>npm install hexo-generator-searchdb --save</code><ul>\n<li>全局配置文件<code>_config.yml</code>，新增如下内容</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># https://github.com/theme-next/hexo-generator-searchdb</span></span><br><span class=\"line\"><span class=\"comment\"># git上有也使用说明</span></span><br><span class=\"line\"><span class=\"attr\">search:</span></span><br><span class=\"line\">  <span class=\"attr\">path:</span> <span class=\"string\">search.json</span></span><br><span class=\"line\">  <span class=\"attr\">field:</span> <span class=\"string\">post</span></span><br><span class=\"line\">  <span class=\"attr\">content:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">format:</span> <span class=\"string\">html</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装完成，享受成果把\"><a href=\"#安装完成，享受成果把\" class=\"headerlink\" title=\"安装完成，享受成果把\"></a>安装完成，享受成果把</h2><ul>\n<li><code>hexo server</code>启动本地服务，看看效果如何</li>\n<li><code>hexo g</code>执行编译，编译结果静态文件保存到<code>Public</code>文件夹</li>\n</ul>\n<h2 id=\"部署到GitHub\"><a href=\"#部署到GitHub\" class=\"headerlink\" title=\"部署到GitHub\"></a>部署到GitHub</h2><ul>\n<li>把<code>Public</code>下所有内容发布到博客仓库即可<ul>\n<li>原理就是这么简单，如果想要自动化复制+上传，自己动手吧</li>\n<li>git命令行自动提交需要配置秘钥什么的，就别问我这种准备使用GitHub Desktop工具的农民了</li>\n</ul>\n</li>\n<li><a href=\"https://fxliu.github.io/\" target=\"_blank\" rel=\"noopener\">我的成果</a></li>\n<li><a href=\"https://github.com/fxliu/hexo\" target=\"_blank\" rel=\"noopener\">源码仓库</a></li>\n<li><a href=\"https://github.com/fxliu/fxliu.github.io\" target=\"_blank\" rel=\"noopener\">博客仓库</a></li>\n</ul>\n","categories":["博客"],"tags":["hexo","github"]},{"title":"hexo小技巧汇总","url":"/2019/09/01/hexo小技巧汇总/","content":"<h2 id=\"hexo\"><a href=\"#hexo\" class=\"headerlink\" title=\"hexo\"></a>hexo</h2><h3 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h3><ul>\n<li>新文章<ul>\n<li><code>hexo new [layout] &lt;title&gt;</code>：<code>layout</code>默认<code>post</code></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"代码块不显示行号\"><a href=\"#代码块不显示行号\" class=\"headerlink\" title=\"代码块不显示行号\"></a>代码块不显示行号</h3><ul>\n<li>调整根目录<code>_config.yml</code>配置文件</li>\n<li><code>line_number</code>默认<code>true</code>显示行号，影响代码复制</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">highlight:</span></span><br><span class=\"line\">  <span class=\"attr\">line_number:</span> <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"fexo\"><a href=\"#fexo\" class=\"headerlink\" title=\"fexo\"></a>fexo</h2><ul>\n<li>调整根目录<code>_config.yml</code>配置文件</li>\n<li><code>busuanzi: true</code>开启网站统计<ul>\n<li>js代码：<code>fexo\\layout\\_partial\\head.ejs</code></li>\n</ul>\n</li>\n<li><code>baidu_analytics: ****</code>百度网站统计<ul>\n<li>js代码：<code>fexo\\layout\\_partial\\baidu-analytics.ejs</code><ul>\n<li>补充类型字段<code>hm.type = &quot;*.*&quot;;</code>，避免部分浏览器加载失败</li>\n</ul>\n</li>\n<li>百度推送：<code>fexo\\layout\\_partial\\baidu-analytics.ejs</code></li>\n</ul>\n</li>\n</ul>\n","categories":["博客"],"tags":["hexo"]},{"title":"关于","url":"/about/index.html","content":"","categories":[],"tags":[]},{"title":"分类","url":"/category/index.html","content":"","categories":[],"tags":[]},{"title":"友情链接","url":"/link/index.html","content":"","categories":[],"tags":[]},{"title":"工具集","url":"/mylink/index.html","content":"<h2 id=\"编程\"><a href=\"#编程\" class=\"headerlink\" title=\"编程\"></a>编程</h2><p>先当作工作集整理吧</p>\n<h3 id=\"做题\"><a href=\"#做题\" class=\"headerlink\" title=\"做题\"></a>做题</h3><ul>\n<li><a href=\"https://freecodecamp.cn/\" target=\"_blank\" rel=\"noopener\">freecodecamp中文版</a><ul>\n<li><a href=\"https://github.com/freeCodeCamp/freeCodeCamp\" target=\"_blank\" rel=\"noopener\">github</a></li>\n<li>免费代码训练营</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>数据库</h3><ul>\n<li><a href=\"https://www.elastic.co/guide/cn/elasticsearch/guide/current/index.html\" target=\"_blank\" rel=\"noopener\">elasticsearch中文版</a><ul>\n<li><a href=\"https://github.com/elasticsearch-cn/elasticsearch-definitive-guide\" target=\"_blank\" rel=\"noopener\">github</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"程序设计\"><a href=\"#程序设计\" class=\"headerlink\" title=\"程序设计\"></a>程序设计</h3><ul>\n<li><a href=\"https://design-patterns.readthedocs.io/zh_CN/latest/index.html\" target=\"_blank\" rel=\"noopener\">图说设计模式</a><ul>\n<li><a href=\"https://github.com/me115/design_patterns\" target=\"_blank\" rel=\"noopener\">github</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><h3 id=\"综合工具\"><a href=\"#综合工具\" class=\"headerlink\" title=\"综合工具\"></a>综合工具</h3><ul>\n<li><a href=\"https://www.appinn.com/\" target=\"_blank\" rel=\"noopener\">小众软件</a><ul>\n<li><a href=\"https://love.appinn.com/\" target=\"_blank\" rel=\"noopener\">优质软件推荐</a></li>\n</ul>\n</li>\n<li><a href=\"https://www.zhihu.com/question/31044894/answer/549432901\" target=\"_blank\" rel=\"noopener\">idata</a>：各种期刊文献的学术资料网站</li>\n<li><a href=\"https://github.com/sindresorhus/awesome\" target=\"_blank\" rel=\"noopener\">awesome</a><ul>\n<li>各种优质资源列表的列表集</li>\n<li>awesome-php，awesome-python，awesome-vue 等</li>\n<li><a href=\"https://github.com/Awesome-Windows/Awesome/blob/master/README-cn.md\" target=\"_blank\" rel=\"noopener\">Awesome-Windows</a><ul>\n<li>Windows工具集</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"https://github.com/stackia/best-windows-apps\" target=\"_blank\" rel=\"noopener\">Windows工具集</a><ul>\n<li>同类型只保留最优的一到两款</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"学习\"><a href=\"#学习\" class=\"headerlink\" title=\"学习\"></a>学习</h3><ul>\n<li><a href=\"https://zh.khanacademy.org/\" target=\"_blank\" rel=\"noopener\">可汗学院中文版</a><ul>\n<li>一家非盈利机构，努力为全世界所有人提供免费的一流教育。</li>\n</ul>\n</li>\n<li><a href=\"http://www.howzhi.com/\" target=\"_blank\" rel=\"noopener\">好知</a></li>\n<li><a href=\"http://www.jlpcn.net/\" target=\"_blank\" rel=\"noopener\">纪录片天地</a>：演讲/纪录片，全部免费</li>\n<li><a href=\"https://yixi.tv/\" target=\"_blank\" rel=\"noopener\">一席</a>：<ul>\n<li>一席鼓励分享见解、体验和对未来的想象，做有价值的传播。</li>\n<li>上面会聚集各行各业的分享者</li>\n</ul>\n</li>\n<li><a href=\"https://github.com/aluismoya/EbookFoundation-free-programming-books\" target=\"_blank\" rel=\"noopener\">GitHub免费变成图书</a><ul>\n<li>EbookFoundation/free-programming-book</li>\n<li><a href=\"https://github.com/aluismoya/EbookFoundation-free-programming-books/blob/master/free-programming-books-zh.md\" target=\"_blank\" rel=\"noopener\">中文版</a></li>\n</ul>\n</li>\n<li><a href=\"https://github.com/521xueweihan/HelloGitHub\" target=\"_blank\" rel=\"noopener\">HelloGitHub</a><ul>\n<li>分享 GitHub 上有趣、入门级的开源项目</li>\n<li>流行项目、入门级项目、让生活变得更美好的工具、书籍、学习心得笔记、企业级项目</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"娱乐\"><a href=\"#娱乐\" class=\"headerlink\" title=\"娱乐\"></a>娱乐</h3><ul>\n<li><a href=\"http://bddn.cn/zb.htm\" target=\"_blank\" rel=\"noopener\">全球电视直播</a><ul>\n<li>拥有你想看的任何电视台，不仅支持港澳台，还支持国内外，速度非常快，并且没有像视频平台的广告连篇</li>\n</ul>\n</li>\n<li><a href=\"http://www.mvcat.com/\" target=\"_blank\" rel=\"noopener\">影视资源聚合网站</a><ul>\n<li><strong>超级酷炫有木有</strong></li>\n<li>也有音乐</li>\n</ul>\n</li>\n<li><a href=\"http://www.shipinyu.cn/\" target=\"_blank\" rel=\"noopener\">视频鱼</a>：在线下载各大网站视频的网站<ul>\n<li>土豆，风行，百度什么的都不在话下</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"办公\"><a href=\"#办公\" class=\"headerlink\" title=\"办公\"></a>办公</h3><ul>\n<li><a href=\"https://templates.office.com\" target=\"_blank\" rel=\"noopener\">Office模板和主题</a><ul>\n<li>Office模板和主题是微软官方提供的Office模板网站</li>\n<li>免费</li>\n</ul>\n</li>\n<li><a href=\"http://magnet.chongbuluo.com/\" target=\"_blank\" rel=\"noopener\">虫部落</a>：资源搜索工具</li>\n<li><a href=\"https://www.dogedoge.com/\" target=\"_blank\" rel=\"noopener\">多吉搜索</a>：不追踪，不误导</li>\n<li><a href=\"https://www.netsarang.com/zh/free-for-home-school/\" target=\"_blank\" rel=\"noopener\">XShell6-免费</a></li>\n</ul>\n<h3 id=\"酷炫-设计\"><a href=\"#酷炫-设计\" class=\"headerlink\" title=\"酷炫/设计\"></a>酷炫/设计</h3><ul>\n<li><a href=\"https://kepler.gl/\" target=\"_blank\" rel=\"noopener\">地图可视化生成器</a></li>\n<li><a href=\"https://bigjpg.com/\" target=\"_blank\" rel=\"noopener\">图片无损放大</a></li>\n<li><a href=\"https://chartify.io/\" target=\"_blank\" rel=\"noopener\">图表生成器</a></li>\n<li><a href=\"https://www.woodo.cn/\" target=\"_blank\" rel=\"noopener\">吾道幻灯片</a></li>\n<li><a href=\"https://www.hipdf.cn/\" target=\"_blank\" rel=\"noopener\">HiPDF</a>: 制作以及各种格式转换什么的</li>\n<li><a href=\"https://hao.uisdc.com/\" target=\"_blank\" rel=\"noopener\">设计师网址导航</a></li>\n<li><a href=\"https://uiiiuiii.com/screen/index.htm\" target=\"_blank\" rel=\"noopener\">屏幕尺寸大全</a></li>\n<li>图片/壁纸<ul>\n<li><a href=\"https://pixivic.com/\" target=\"_blank\" rel=\"noopener\">pixivic</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"工具\"><a href=\"#工具\" class=\"headerlink\" title=\"工具\"></a>工具</h3><ul>\n<li><a href=\"https://www.arcsoft.com.cn/\" target=\"_blank\" rel=\"noopener\">人脸识别</a><ul>\n<li>人脸识别，人证比对，活体检测，还支持人物属性检测（性别，年龄等）</li>\n<li>支持个人身份申请，免费</li>\n<li>支持Window,linux,安卓,接口还是比较简单的</li>\n</ul>\n</li>\n<li><a href=\"https://cn.office-converter.com/\" target=\"_blank\" rel=\"noopener\">转换格式大全</a>: 文件视频音乐统统有<ul>\n<li><a href=\"https://convertio.co/zh/\" target=\"_blank\" rel=\"noopener\">文件转换器</a></li>\n</ul>\n</li>\n<li><a href=\"http://24mail.chacuo.net/\" target=\"_blank\" rel=\"noopener\">临时邮箱</a><ul>\n<li>用于填写邮箱时候，不想使用您的真实邮箱情况。不需要注册，邮箱持续24小时。</li>\n<li>发送匿名邮件</li>\n</ul>\n</li>\n<li><a href=\"https://www.pdflibr.com/\" target=\"_blank\" rel=\"noopener\">临时接收手机验证码</a></li>\n<li><a href=\"https://logoly.pro/#/\" target=\"_blank\" rel=\"noopener\">不正经Logo生成器</a><ul>\n<li><a href=\"https://github.com/bestony\" target=\"_blank\" rel=\"noopener\">github项目</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Windows工具\"><a href=\"#Windows工具\" class=\"headerlink\" title=\"Windows工具\"></a>Windows工具</h2><ul>\n<li>SpaceSniffer：免费磁盘空间分析器</li>\n</ul>\n<h3 id=\"赚钱\"><a href=\"#赚钱\" class=\"headerlink\" title=\"赚钱\"></a>赚钱</h3><ul>\n<li><a href=\"http://aso321.com/index.html\" target=\"_blank\" rel=\"noopener\">Aso试玩网</a><ul>\n<li>主要是用来下载一些APP，很多APP还没火的时候都是需要下载量的，这样才能在应用商店上的排名靠前，而商家前期会通过付费给下载用户的形式来得到这个前期种子量，基本上只要碎片时间比较多的学生，一天收入也能有80到100。</li>\n</ul>\n</li>\n<li><a href=\"https://mianbaoduo.com/\" target=\"_blank\" rel=\"noopener\">面包多</a><ul>\n<li>传播的任何文字/图片/视频/ 音频都是有价值的，这个网站可以将你自己的任何作品变成付费版的创作</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"github\"><a href=\"#github\" class=\"headerlink\" title=\"github\"></a>github</h3><ul>\n<li><a href=\"http://listen1.github.io/listen1/\" target=\"_blank\" rel=\"noopener\">listen1</a><ul>\n<li>Listen 1可以搜索和播放来自网易云音乐，虾米，QQ音乐，酷狗音乐，酷我音乐网站的歌曲，让你的曲库更全面。</li>\n<li>还支持歌单功能，你可以方便的播放，收藏和创建自己的歌单。</li>\n</ul>\n</li>\n</ul>\n","categories":[],"tags":[]},{"title":"project","url":"/myproject/index.html","content":"<h2 id=\"个人测试Demo\"><a href=\"#个人测试Demo\" class=\"headerlink\" title=\"个人测试Demo\"></a>个人测试Demo</h2><h3 id=\"VC-Demo\"><a href=\"#VC-Demo\" class=\"headerlink\" title=\"VC Demo\"></a>VC Demo</h3><ul>\n<li><a href=\"https://github.com/fxliu/VCDemo/tree/master/HOOK/KeyboardHook\" target=\"_blank\" rel=\"noopener\">键盘钩子</a></li>\n<li><a href=\"https://github.com/fxliu/VCDemo/tree/master/TOOLS/ffmpeg+SDL\" target=\"_blank\" rel=\"noopener\">FFmpeg+SDL播放器</a></li>\n</ul>\n<h2 id=\"第三方工具整理\"><a href=\"#第三方工具整理\" class=\"headerlink\" title=\"第三方工具整理\"></a>第三方工具整理</h2><h3 id=\"VC界面\"><a href=\"#VC界面\" class=\"headerlink\" title=\"VC界面\"></a>VC界面</h3><ul>\n<li>网易云信DuiLib<ul>\n<li><a href=\"https://github.com/netease-im/NIM_Duilib_Framework\" target=\"_blank\" rel=\"noopener\">NIM_Duilib_Framework</a></li>\n<li>Duilib + CEF3(简化版)，界面开发框架，有VC实例，比较容易上手<ul>\n<li>Duilib有组件说明文档</li>\n</ul>\n</li>\n<li>CEF3可以直接替换成CEF3完整版使用</li>\n<li>已知：简化版不支持打印</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"JS\"><a href=\"#JS\" class=\"headerlink\" title=\"JS\"></a>JS</h3><ul>\n<li>饿了么前端<ul>\n<li><a href=\"https://github.com/ElemeFE/vue-desktop\" target=\"_blank\" rel=\"noopener\">Web桌面</a><ul>\n<li>页面显示Window桌面样式</li>\n<li><a href=\"https://github.com/ElemeFE/vue-desktop-starter\" target=\"_blank\" rel=\"noopener\">简易版</a></li>\n</ul>\n</li>\n<li>基于 Vue 2.x 和高德地图的地图组件</li>\n<li>基于 Vue2.0 和 ECharts 封装的图表组件</li>\n<li>mint-ui: 手机前端UI组件</li>\n<li><a href=\"https://elemefe.github.io/keynote/\" target=\"_blank\" rel=\"noopener\">keynote</a><ul>\n<li>前端分享会公开演示文稿(PPT)</li>\n</ul>\n</li>\n<li><a href=\"https://elemefe.gitbooks.io/mongodb/content/\" target=\"_blank\" rel=\"noopener\">Mongodb官方手册-中文版</a><ul>\n<li>Mongodb 官方手册 v3.4 中文版翻译</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>百度<ul>\n<li><a href=\"https://github.com/baidu/amis\" target=\"_blank\" rel=\"noopener\">amis</a><ul>\n<li>前端低代码框架, 通过 JSON 配置就能生成各种后台页面</li>\n<li>通过 amis 搭建自己的<a href=\"https://github.com/fex-team/amis-admin\" target=\"_blank\" rel=\"noopener\">后台系统</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"https://github.com/hakimel/reveal.js\" target=\"_blank\" rel=\"noopener\">基于JS的PPT框架</a></li>\n<li><a href=\"https://github.com/socketio/socket.io\" target=\"_blank\" rel=\"noopener\">WebSocket</a><ul>\n<li>基于NodeJS实现前后端</li>\n<li>有C++，Java等语言版本</li>\n</ul>\n</li>\n<li>管理平台模板：后台控制面板<ul>\n<li><a href=\"https://github.com/PanJiaChen/vue-admin-template\" target=\"_blank\" rel=\"noopener\">vue-admin-template</a><ul>\n<li>登陆, 左侧导航栏, 用户信息管理菜单</li>\n</ul>\n</li>\n<li><a href=\"https://github.com/PanJiaChen/vue-element-admin\" target=\"_blank\" rel=\"noopener\">vue-Element-Admin</a><ul>\n<li>较为完整的封装，包含分块, 列表, 图等</li>\n</ul>\n</li>\n<li><a href=\"https://github.com/ColorlibHQ/AdminLTE\" target=\"_blank\" rel=\"noopener\">AdminLTE</a><ul>\n<li>基于 Bootstrap 3.x 的免费的后台 UI 框架</li>\n</ul>\n</li>\n<li><a href=\"https://github.com/tabler/tabler\" target=\"_blank\" rel=\"noopener\">tabler</a><ul>\n<li>构建在 BootStrap 4 之上的免费的 HTML 控制面板框架</li>\n</ul>\n</li>\n<li><a href=\"https://github.com/ColorlibHQ/gentelella\" target=\"_blank\" rel=\"noopener\">Gentelella</a><ul>\n<li>一个基于 Bootstarp 的免费的后台控制面板</li>\n</ul>\n</li>\n<li><a href=\"https://github.com/vue-bulma/vue-admin\" target=\"_blank\" rel=\"noopener\">vue-admin</a><ul>\n<li>基于 Vue 和 Bulma 的控制面板</li>\n</ul>\n</li>\n<li><a href=\"https://github.com/iview/iview-admin\" target=\"_blank\" rel=\"noopener\">iview-admin</a><ul>\n<li>基于 iView 的 Vue 2.0 控制面板</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Python\"><a href=\"#Python\" class=\"headerlink\" title=\"Python\"></a>Python</h3><ul>\n<li><a href=\"https://github.com/joke2k/faker\" target=\"_blank\" rel=\"noopener\">假数据生成器</a><ul>\n<li>姓名，地址等，支持多种语言</li>\n<li>基于Python，也有PHP版</li>\n</ul>\n</li>\n<li><a href=\"https://github.com/littlecodersh/ItChat\" target=\"_blank\" rel=\"noopener\">ItChat</a><ul>\n<li>开源的微信个人号SDK</li>\n</ul>\n</li>\n<li><a href=\"https://github.com/tqdm/tqdm\" target=\"_blank\" rel=\"noopener\">进度条</a><ul>\n<li>强大、快速、易扩展的 Python 进度条库</li>\n</ul>\n</li>\n<li>IP代理池<ul>\n<li><a href=\"https://github.com/SpiderClub/haipproxy\" target=\"_blank\" rel=\"noopener\">haipproxy</a><ul>\n<li>使用 Scrapy＋Redis 实现的高可用分布式 IP 代理池，为大型分布式爬虫提供高可用低延迟的代理 IP 资源。</li>\n</ul>\n</li>\n<li><a href=\"https://github.com/imWildCat/scylla\" target=\"_blank\" rel=\"noopener\">Scylla</a><ul>\n<li>一款高质量的免费代理 IP 池工具，仅支持 Python 3.6</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"(https://github.com/jd/tenacity)\">tenacity重试</a><ul>\n<li>使用该库可以优雅地实现各种需求的重试</li>\n<li>比如异常重试</li>\n</ul>\n</li>\n<li><a href=\"https://github.com/msiemens/tinydb\" target=\"_blank\" rel=\"noopener\">tinydb</a><ul>\n<li>使用纯 Python 编写的 NoSQL 小型数据库，使用 json 文件存储数据。</li>\n<li>它区别于 SQLite 的关系性数据库。</li>\n</ul>\n</li>\n<li><a href=\"https://github.com/nbedos/termtosvg\" target=\"_blank\" rel=\"noopener\">termtosvg</a><ul>\n<li>通过命令 termtosvg 运行该工具，然后在终端执行你要展示的命令</li>\n<li>最终输入 exit 命令结束录制，本地会生成一份 SVG 动画，可用于分享、展示终端操作</li>\n</ul>\n</li>\n<li><a href=\"https://github.com/Delgan/loguru\" target=\"_blank\" rel=\"noopener\">loguru</a><ul>\n<li>日志，线程安全，有多进程解决方案</li>\n</ul>\n</li>\n<li>pywifi: wifi控制模块</li>\n</ul>\n","categories":[],"tags":[]},{"title":"project","url":"/project/index.html","content":"","categories":[],"tags":[]},{"title":"search","url":"/search/index.html","content":"","categories":[],"tags":[]},{"title":"便捷标签","url":"/tag/index.html","content":"","categories":[],"tags":[]}]